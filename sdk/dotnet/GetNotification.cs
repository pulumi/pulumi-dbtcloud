// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud
{
    public static class GetNotification
    {
        /// <summary>
        /// Retrieve notification details
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DbtCloud = Pulumi.DbtCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myNotification = DbtCloud.GetNotification.Invoke(new()
        ///     {
        ///         NotificationId = 12345,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNotificationResult> InvokeAsync(GetNotificationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNotificationResult>("dbtcloud:index/getNotification:getNotification", args ?? new GetNotificationArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve notification details
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DbtCloud = Pulumi.DbtCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myNotification = DbtCloud.GetNotification.Invoke(new()
        ///     {
        ///         NotificationId = 12345,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNotificationResult> Invoke(GetNotificationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNotificationResult>("dbtcloud:index/getNotification:getNotification", args ?? new GetNotificationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve notification details
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DbtCloud = Pulumi.DbtCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myNotification = DbtCloud.GetNotification.Invoke(new()
        ///     {
        ///         NotificationId = 12345,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNotificationResult> Invoke(GetNotificationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNotificationResult>("dbtcloud:index/getNotification:getNotification", args ?? new GetNotificationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNotificationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the notification
        /// </summary>
        [Input("notificationId", required: true)]
        public int NotificationId { get; set; }

        public GetNotificationArgs()
        {
        }
        public static new GetNotificationArgs Empty => new GetNotificationArgs();
    }

    public sealed class GetNotificationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the notification
        /// </summary>
        [Input("notificationId", required: true)]
        public Input<int> NotificationId { get; set; } = null!;

        public GetNotificationInvokeArgs()
        {
        }
        public static new GetNotificationInvokeArgs Empty => new GetNotificationInvokeArgs();
    }


    [OutputType]
    public sealed class GetNotificationResult
    {
        /// <summary>
        /// The external email to receive the notification
        /// </summary>
        public readonly string ExternalEmail;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the notification
        /// </summary>
        public readonly int NotificationId;
        /// <summary>
        /// Type of notification (1 = dbt Cloud user email (default): does not require an ExternalEmail ; 2 = Slack channel: requires `SlackChannelId` and `SlackChannelName` ; 4 = external email: requires setting an `ExternalEmail`)
        /// </summary>
        public readonly int NotificationType;
        /// <summary>
        /// List of job IDs to trigger the webhook on cancel
        /// </summary>
        public readonly ImmutableArray<int> OnCancels;
        /// <summary>
        /// List of job IDs to trigger the webhook on failure
        /// </summary>
        public readonly ImmutableArray<int> OnFailures;
        /// <summary>
        /// List of job IDs to trigger the webhook on success
        /// </summary>
        public readonly ImmutableArray<int> OnSuccesses;
        /// <summary>
        /// List of job IDs to trigger the webhook on warning
        /// </summary>
        public readonly ImmutableArray<int> OnWarnings;
        /// <summary>
        /// The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
        /// </summary>
        public readonly string SlackChannelId;
        /// <summary>
        /// The name of the slack channel
        /// </summary>
        public readonly string SlackChannelName;
        /// <summary>
        /// State of the notification (1 = active (default), 2 = inactive)
        /// </summary>
        public readonly int State;
        /// <summary>
        /// Internal dbt Cloud User ID. Must be the UserId for an existing user even if the notification is an external one
        /// </summary>
        public readonly int UserId;

        [OutputConstructor]
        private GetNotificationResult(
            string externalEmail,

            string id,

            int notificationId,

            int notificationType,

            ImmutableArray<int> onCancels,

            ImmutableArray<int> onFailures,

            ImmutableArray<int> onSuccesses,

            ImmutableArray<int> onWarnings,

            string slackChannelId,

            string slackChannelName,

            int state,

            int userId)
        {
            ExternalEmail = externalEmail;
            Id = id;
            NotificationId = notificationId;
            NotificationType = notificationType;
            OnCancels = onCancels;
            OnFailures = onFailures;
            OnSuccesses = onSuccesses;
            OnWarnings = onWarnings;
            SlackChannelId = slackChannelId;
            SlackChannelName = slackChannelName;
            State = state;
            UserId = userId;
        }
    }
}

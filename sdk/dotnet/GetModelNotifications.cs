// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud
{
    public static class GetModelNotifications
    {
        /// <summary>
        /// Get model notifications configuration for a dbt Cloud environment
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DbtCloud = Pulumi.DbtCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var prodModelNotifications = DbtCloud.GetModelNotifications.Invoke(new()
        ///     {
        ///         EnvironmentId = prodEnvironment.EnvironmentId,
        ///     });
        /// 
        ///     var qaModelNotifications = DbtCloud.GetModelNotifications.Invoke(new()
        ///     {
        ///         EnvironmentId = "12345",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetModelNotificationsResult> InvokeAsync(GetModelNotificationsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetModelNotificationsResult>("dbtcloud:index/getModelNotifications:getModelNotifications", args ?? new GetModelNotificationsArgs(), options.WithDefaults());

        /// <summary>
        /// Get model notifications configuration for a dbt Cloud environment
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DbtCloud = Pulumi.DbtCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var prodModelNotifications = DbtCloud.GetModelNotifications.Invoke(new()
        ///     {
        ///         EnvironmentId = prodEnvironment.EnvironmentId,
        ///     });
        /// 
        ///     var qaModelNotifications = DbtCloud.GetModelNotifications.Invoke(new()
        ///     {
        ///         EnvironmentId = "12345",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetModelNotificationsResult> Invoke(GetModelNotificationsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetModelNotificationsResult>("dbtcloud:index/getModelNotifications:getModelNotifications", args ?? new GetModelNotificationsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get model notifications configuration for a dbt Cloud environment
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DbtCloud = Pulumi.DbtCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var prodModelNotifications = DbtCloud.GetModelNotifications.Invoke(new()
        ///     {
        ///         EnvironmentId = prodEnvironment.EnvironmentId,
        ///     });
        /// 
        ///     var qaModelNotifications = DbtCloud.GetModelNotifications.Invoke(new()
        ///     {
        ///         EnvironmentId = "12345",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetModelNotificationsResult> Invoke(GetModelNotificationsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetModelNotificationsResult>("dbtcloud:index/getModelNotifications:getModelNotifications", args ?? new GetModelNotificationsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetModelNotificationsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the dbt Cloud environment
        /// </summary>
        [Input("environmentId", required: true)]
        public string EnvironmentId { get; set; } = null!;

        public GetModelNotificationsArgs()
        {
        }
        public static new GetModelNotificationsArgs Empty => new GetModelNotificationsArgs();
    }

    public sealed class GetModelNotificationsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the dbt Cloud environment
        /// </summary>
        [Input("environmentId", required: true)]
        public Input<string> EnvironmentId { get; set; } = null!;

        public GetModelNotificationsInvokeArgs()
        {
        }
        public static new GetModelNotificationsInvokeArgs Empty => new GetModelNotificationsInvokeArgs();
    }


    [OutputType]
    public sealed class GetModelNotificationsResult
    {
        /// <summary>
        /// Whether model notifications are enabled for this environment
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The ID of the dbt Cloud environment
        /// </summary>
        public readonly string EnvironmentId;
        /// <summary>
        /// The internal ID of the model notifications configuration
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// Whether to send notifications for failed model runs
        /// </summary>
        public readonly bool OnFailure;
        /// <summary>
        /// Whether to send notifications for skipped model runs
        /// </summary>
        public readonly bool OnSkipped;
        /// <summary>
        /// Whether to send notifications for successful model runs
        /// </summary>
        public readonly bool OnSuccess;
        /// <summary>
        /// Whether to send notifications for model runs with warnings
        /// </summary>
        public readonly bool OnWarning;

        [OutputConstructor]
        private GetModelNotificationsResult(
            bool enabled,

            string environmentId,

            int id,

            bool onFailure,

            bool onSkipped,

            bool onSuccess,

            bool onWarning)
        {
            Enabled = enabled;
            EnvironmentId = environmentId;
            Id = id;
            OnFailure = onFailure;
            OnSkipped = onSkipped;
            OnSuccess = onSuccess;
            OnWarning = onWarning;
        }
    }
}

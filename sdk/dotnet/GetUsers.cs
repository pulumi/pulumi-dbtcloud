// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud
{
    public static class GetUsers
    {
        /// <summary>
        /// Retrieve all users
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DbtCloud = Pulumi.DbtCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // return all users in the dbt Cloud account
        ///     var all = DbtCloud.GetUsers.Invoke();
        /// 
        ///     var userDetails = .Where(user =&gt; user.Email == "example@amail.com").Select(user =&gt; 
        ///     {
        ///         return user;
        ///     }).ToList();
        /// 
        ///     var userExist = userDetails.Length.Apply(length =&gt; length == 1);
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetUsersResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUsersResult>("dbtcloud:index/getUsers:getUsers", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// Retrieve all users
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DbtCloud = Pulumi.DbtCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // return all users in the dbt Cloud account
        ///     var all = DbtCloud.GetUsers.Invoke();
        /// 
        ///     var userDetails = .Where(user =&gt; user.Email == "example@amail.com").Select(user =&gt; 
        ///     {
        ///         return user;
        ///     }).ToList();
        /// 
        ///     var userExist = userDetails.Length.Apply(length =&gt; length == 1);
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUsersResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUsersResult>("dbtcloud:index/getUsers:getUsers", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// Retrieve all users
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DbtCloud = Pulumi.DbtCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // return all users in the dbt Cloud account
        ///     var all = DbtCloud.GetUsers.Invoke();
        /// 
        ///     var userDetails = .Where(user =&gt; user.Email == "example@amail.com").Select(user =&gt; 
        ///     {
        ///         return user;
        ///     }).ToList();
        /// 
        ///     var userExist = userDetails.Length.Apply(length =&gt; length == 1);
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUsersResult> Invoke(InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUsersResult>("dbtcloud:index/getUsers:getUsers", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetUsersResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Set of users with their internal ID end email
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUsersUserResult> Users;

        [OutputConstructor]
        private GetUsersResult(
            string id,

            ImmutableArray<Outputs.GetUsersUserResult> users)
        {
            Id = id;
            Users = users;
        }
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DbtCloud = Pulumi.DbtCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var tfGroup1 = new DbtCloud.Group("tf_group_1", new()
    ///     {
    ///         Name = "TF Group 1",
    ///         GroupPermissions = new[]
    ///         {
    ///             new DbtCloud.Inputs.GroupGroupPermissionArgs
    ///             {
    ///                 PermissionSet = "member",
    ///                 AllProjects = true,
    ///             },
    ///             new DbtCloud.Inputs.GroupGroupPermissionArgs
    ///             {
    ///                 PermissionSet = "developer",
    ///                 AllProjects = false,
    ///                 ProjectId = dbtProject.Id,
    ///                 WritableEnvironmentCategories = new[]
    ///                 {
    ///                     "development",
    ///                     "staging",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// using  import blocks (requires Terraform &gt;= 1.5)
    /// 
    /// import {
    /// 
    ///   to = dbtcloud_group.my_group
    /// 
    ///   id = "group_id"
    /// 
    /// }
    /// 
    /// import {
    /// 
    ///   to = dbtcloud_group.my_group
    /// 
    ///   id = "12345"
    /// 
    /// }
    /// 
    /// using the older import command
    /// 
    /// ```sh
    /// $ pulumi import dbtcloud:index/group:Group my_group "group_id"
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import dbtcloud:index/group:Group my_group 12345
    /// ```
    /// </summary>
    [DbtCloudResourceType("dbtcloud:index/group:Group")]
    public partial class Group : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.
        /// </summary>
        [Output("assignByDefault")]
        public Output<bool> AssignByDefault { get; private set; } = null!;

        /// <summary>
        /// Partial permissions for the group. Those permissions will be added/removed when config is added/removed.
        /// </summary>
        [Output("groupPermissions")]
        public Output<ImmutableArray<Outputs.GroupGroupPermission>> GroupPermissions { get; private set; } = null!;

        /// <summary>
        /// The name of the group. This is used to identify an existing group
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.
        /// </summary>
        [Output("ssoMappingGroups")]
        public Output<ImmutableArray<string>> SsoMappingGroups { get; private set; } = null!;


        /// <summary>
        /// Create a Group resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Group(string name, GroupArgs? args = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/group:Group", name, args ?? new GroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Group(string name, Input<string> id, GroupState? state = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/group:Group", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-dbtcloud",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Group resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Group Get(string name, Input<string> id, GroupState? state = null, CustomResourceOptions? options = null)
        {
            return new Group(name, id, state, options);
        }
    }

    public sealed class GroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.
        /// </summary>
        [Input("assignByDefault")]
        public Input<bool>? AssignByDefault { get; set; }

        [Input("groupPermissions")]
        private InputList<Inputs.GroupGroupPermissionArgs>? _groupPermissions;

        /// <summary>
        /// Partial permissions for the group. Those permissions will be added/removed when config is added/removed.
        /// </summary>
        public InputList<Inputs.GroupGroupPermissionArgs> GroupPermissions
        {
            get => _groupPermissions ?? (_groupPermissions = new InputList<Inputs.GroupGroupPermissionArgs>());
            set => _groupPermissions = value;
        }

        /// <summary>
        /// The name of the group. This is used to identify an existing group
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ssoMappingGroups")]
        private InputList<string>? _ssoMappingGroups;

        /// <summary>
        /// Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.
        /// </summary>
        public InputList<string> SsoMappingGroups
        {
            get => _ssoMappingGroups ?? (_ssoMappingGroups = new InputList<string>());
            set => _ssoMappingGroups = value;
        }

        public GroupArgs()
        {
        }
        public static new GroupArgs Empty => new GroupArgs();
    }

    public sealed class GroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.
        /// </summary>
        [Input("assignByDefault")]
        public Input<bool>? AssignByDefault { get; set; }

        [Input("groupPermissions")]
        private InputList<Inputs.GroupGroupPermissionGetArgs>? _groupPermissions;

        /// <summary>
        /// Partial permissions for the group. Those permissions will be added/removed when config is added/removed.
        /// </summary>
        public InputList<Inputs.GroupGroupPermissionGetArgs> GroupPermissions
        {
            get => _groupPermissions ?? (_groupPermissions = new InputList<Inputs.GroupGroupPermissionGetArgs>());
            set => _groupPermissions = value;
        }

        /// <summary>
        /// The name of the group. This is used to identify an existing group
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ssoMappingGroups")]
        private InputList<string>? _ssoMappingGroups;

        /// <summary>
        /// Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.
        /// </summary>
        public InputList<string> SsoMappingGroups
        {
            get => _ssoMappingGroups ?? (_ssoMappingGroups = new InputList<string>());
            set => _ssoMappingGroups = value;
        }

        public GroupState()
        {
        }
        public static new GroupState Empty => new GroupState();
    }
}

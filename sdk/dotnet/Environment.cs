// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud
{
    /// <summary>
    /// Resource to manage dbt Cloud environments for the different dbt Cloud projects.
    /// 
    /// In a given dbt Cloud project, one development environment can be defined and as many deployment environments as needed can be created.
    /// 
    /// &gt; In August 2024, dbt Cloud released the "global connection" feature, allowing connections to be defined at the account level and reused across environments and projects.
    /// This version of the provider has the `connection_id` as an optional field but it is recommended to start setting it up in your projects. In future versions, this field will become mandatory.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DbtCloud = Pulumi.DbtCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var ciEnvironment = new DbtCloud.Environment("ci_environment", new()
    ///     {
    ///         DbtVersion = "latest",
    ///         Name = "CI",
    ///         ProjectId = dbtProject.Id,
    ///         Type = "deployment",
    ///         CredentialId = ciCredential.CredentialId,
    ///         ConnectionId = myGlobalConnection.Id,
    ///     });
    /// 
    ///     // we can also set a deployment environment as being the production one
    ///     var prodEnvironment = new DbtCloud.Environment("prod_environment", new()
    ///     {
    ///         DbtVersion = "1.7.0-latest",
    ///         Name = "Prod",
    ///         ProjectId = dbtProject.Id,
    ///         Type = "deployment",
    ///         CredentialId = prodCredential.CredentialId,
    ///         DeploymentType = "production",
    ///         ConnectionId = myLegacyConnection.ConnectionId,
    ///     });
    /// 
    ///     // Creating a development environment
    ///     var devEnvironment = new DbtCloud.Environment("dev_environment", new()
    ///     {
    ///         DbtVersion = "latest",
    ///         Name = "Dev",
    ///         ProjectId = dbtProject.Id,
    ///         Type = "development",
    ///         ConnectionId = myOtherGlobalConnection.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// using  import blocks (requires Terraform &gt;= 1.5)
    /// 
    /// import {
    /// 
    ///   to = dbtcloud_environment.prod_environment
    /// 
    ///   id = "project_id:environment_id"
    /// 
    /// }
    /// 
    /// import {
    /// 
    ///   to = dbtcloud_environment.prod_environment
    /// 
    ///   id = "12345:6789"
    /// 
    /// }
    /// 
    /// using the older import command
    /// 
    /// ```sh
    /// $ pulumi import dbtcloud:index/environment:Environment prod_environment "project_id:environment_id"
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import dbtcloud:index/environment:Environment prod_environment 12345:6789
    /// ```
    /// </summary>
    [DbtCloudResourceType("dbtcloud:index/environment:Environment")]
    public partial class Environment : global::Pulumi.CustomResource
    {
        [Output("connectionId")]
        public Output<int?> ConnectionId { get; private set; } = null!;

        /// <summary>
        /// Credential ID to create the environment with. A credential is not required for development environments but is required
        /// for deployment environments
        /// </summary>
        [Output("credentialId")]
        public Output<int?> CredentialId { get; private set; } = null!;

        /// <summary>
        /// Which custom branch to use in this environment
        /// </summary>
        [Output("customBranch")]
        public Output<string?> CustomBranch { get; private set; } = null!;

        /// <summary>
        /// Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` (e.g.
        /// `1.5.0-latest`), `major.minor.0-pre`, `versionless`, or `latest`. While `versionless` is still supported, using `latest`
        /// is recommended. Defaults to `latest` if no version is provided
        /// </summary>
        [Output("dbtVersion")]
        public Output<string?> DbtVersion { get; private set; } = null!;

        /// <summary>
        /// The type of environment. Only valid for environments of type 'deployment' and for now can only be 'production',
        /// 'staging' or left empty for generic environments
        /// </summary>
        [Output("deploymentType")]
        public Output<string?> DeploymentType { get; private set; } = null!;

        /// <summary>
        /// Whether to enable model query history in this environment. As of Oct 2024, works only for Snowflake and BigQuery.
        /// </summary>
        [Output("enableModelQueryHistory")]
        public Output<bool?> EnableModelQueryHistory { get; private set; } = null!;

        /// <summary>
        /// Environment ID within the project
        /// </summary>
        [Output("environmentId")]
        public Output<int> EnvironmentId { get; private set; } = null!;

        /// <summary>
        /// ID of the extended attributes for the environment
        /// </summary>
        [Output("extendedAttributesId")]
        public Output<int?> ExtendedAttributesId { get; private set; } = null!;

        /// <summary>
        /// Whether the environment is active
        /// </summary>
        [Output("isActive")]
        public Output<bool?> IsActive { get; private set; } = null!;

        /// <summary>
        /// Environment name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Project ID to create the environment in
        /// </summary>
        [Output("projectId")]
        public Output<int> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The type of environment (must be either development or deployment)
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Whether to use a custom git branch in this environment
        /// </summary>
        [Output("useCustomBranch")]
        public Output<bool?> UseCustomBranch { get; private set; } = null!;


        /// <summary>
        /// Create a Environment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Environment(string name, EnvironmentArgs args, CustomResourceOptions? options = null)
            : base("dbtcloud:index/environment:Environment", name, args ?? new EnvironmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Environment(string name, Input<string> id, EnvironmentState? state = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/environment:Environment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-dbtcloud",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Environment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Environment Get(string name, Input<string> id, EnvironmentState? state = null, CustomResourceOptions? options = null)
        {
            return new Environment(name, id, state, options);
        }
    }

    public sealed class EnvironmentArgs : global::Pulumi.ResourceArgs
    {
        [Input("connectionId")]
        public Input<int>? ConnectionId { get; set; }

        /// <summary>
        /// Credential ID to create the environment with. A credential is not required for development environments but is required
        /// for deployment environments
        /// </summary>
        [Input("credentialId")]
        public Input<int>? CredentialId { get; set; }

        /// <summary>
        /// Which custom branch to use in this environment
        /// </summary>
        [Input("customBranch")]
        public Input<string>? CustomBranch { get; set; }

        /// <summary>
        /// Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` (e.g.
        /// `1.5.0-latest`), `major.minor.0-pre`, `versionless`, or `latest`. While `versionless` is still supported, using `latest`
        /// is recommended. Defaults to `latest` if no version is provided
        /// </summary>
        [Input("dbtVersion")]
        public Input<string>? DbtVersion { get; set; }

        /// <summary>
        /// The type of environment. Only valid for environments of type 'deployment' and for now can only be 'production',
        /// 'staging' or left empty for generic environments
        /// </summary>
        [Input("deploymentType")]
        public Input<string>? DeploymentType { get; set; }

        /// <summary>
        /// Whether to enable model query history in this environment. As of Oct 2024, works only for Snowflake and BigQuery.
        /// </summary>
        [Input("enableModelQueryHistory")]
        public Input<bool>? EnableModelQueryHistory { get; set; }

        /// <summary>
        /// ID of the extended attributes for the environment
        /// </summary>
        [Input("extendedAttributesId")]
        public Input<int>? ExtendedAttributesId { get; set; }

        /// <summary>
        /// Whether the environment is active
        /// </summary>
        [Input("isActive")]
        public Input<bool>? IsActive { get; set; }

        /// <summary>
        /// Environment name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Project ID to create the environment in
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        /// <summary>
        /// The type of environment (must be either development or deployment)
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Whether to use a custom git branch in this environment
        /// </summary>
        [Input("useCustomBranch")]
        public Input<bool>? UseCustomBranch { get; set; }

        public EnvironmentArgs()
        {
        }
        public static new EnvironmentArgs Empty => new EnvironmentArgs();
    }

    public sealed class EnvironmentState : global::Pulumi.ResourceArgs
    {
        [Input("connectionId")]
        public Input<int>? ConnectionId { get; set; }

        /// <summary>
        /// Credential ID to create the environment with. A credential is not required for development environments but is required
        /// for deployment environments
        /// </summary>
        [Input("credentialId")]
        public Input<int>? CredentialId { get; set; }

        /// <summary>
        /// Which custom branch to use in this environment
        /// </summary>
        [Input("customBranch")]
        public Input<string>? CustomBranch { get; set; }

        /// <summary>
        /// Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` (e.g.
        /// `1.5.0-latest`), `major.minor.0-pre`, `versionless`, or `latest`. While `versionless` is still supported, using `latest`
        /// is recommended. Defaults to `latest` if no version is provided
        /// </summary>
        [Input("dbtVersion")]
        public Input<string>? DbtVersion { get; set; }

        /// <summary>
        /// The type of environment. Only valid for environments of type 'deployment' and for now can only be 'production',
        /// 'staging' or left empty for generic environments
        /// </summary>
        [Input("deploymentType")]
        public Input<string>? DeploymentType { get; set; }

        /// <summary>
        /// Whether to enable model query history in this environment. As of Oct 2024, works only for Snowflake and BigQuery.
        /// </summary>
        [Input("enableModelQueryHistory")]
        public Input<bool>? EnableModelQueryHistory { get; set; }

        /// <summary>
        /// Environment ID within the project
        /// </summary>
        [Input("environmentId")]
        public Input<int>? EnvironmentId { get; set; }

        /// <summary>
        /// ID of the extended attributes for the environment
        /// </summary>
        [Input("extendedAttributesId")]
        public Input<int>? ExtendedAttributesId { get; set; }

        /// <summary>
        /// Whether the environment is active
        /// </summary>
        [Input("isActive")]
        public Input<bool>? IsActive { get; set; }

        /// <summary>
        /// Environment name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Project ID to create the environment in
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        /// <summary>
        /// The type of environment (must be either development or deployment)
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Whether to use a custom git branch in this environment
        /// </summary>
        [Input("useCustomBranch")]
        public Input<bool>? UseCustomBranch { get; set; }

        public EnvironmentState()
        {
        }
        public static new EnvironmentState Empty => new EnvironmentState();
    }
}

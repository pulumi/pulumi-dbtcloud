// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud
{
    public static class GetJobs
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DbtCloud = Pulumi.DbtCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // we can search all jobs by project
        ///     var testAllJobsInProject = DbtCloud.GetJobs.Invoke(new()
        ///     {
        ///         ProjectId = 1234,
        ///     });
        /// 
        ///     // or by environment
        ///     var testAllJobsInEnvironment = DbtCloud.GetJobs.Invoke(new()
        ///     {
        ///         EnvironmentId = 1234,
        ///     });
        /// 
        ///     var myJobsProd = .Where(job =&gt; job.Environment?.DeploymentType == "production").Select(job =&gt; 
        ///     {
        ///         return job;
        ///     }).ToList();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetJobsResult> InvokeAsync(GetJobsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetJobsResult>("dbtcloud:index/getJobs:getJobs", args ?? new GetJobsArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DbtCloud = Pulumi.DbtCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // we can search all jobs by project
        ///     var testAllJobsInProject = DbtCloud.GetJobs.Invoke(new()
        ///     {
        ///         ProjectId = 1234,
        ///     });
        /// 
        ///     // or by environment
        ///     var testAllJobsInEnvironment = DbtCloud.GetJobs.Invoke(new()
        ///     {
        ///         EnvironmentId = 1234,
        ///     });
        /// 
        ///     var myJobsProd = .Where(job =&gt; job.Environment?.DeploymentType == "production").Select(job =&gt; 
        ///     {
        ///         return job;
        ///     }).ToList();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetJobsResult> Invoke(GetJobsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetJobsResult>("dbtcloud:index/getJobs:getJobs", args ?? new GetJobsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetJobsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the environment for which we want to retrieve the jobs (one of `project_id` or `environment_id` must be set)
        /// </summary>
        [Input("environmentId")]
        public int? EnvironmentId { get; set; }

        /// <summary>
        /// The ID of the project for which we want to retrieve the jobs (one of `project_id` or `environment_id` must be set)
        /// </summary>
        [Input("projectId")]
        public int? ProjectId { get; set; }

        public GetJobsArgs()
        {
        }
        public static new GetJobsArgs Empty => new GetJobsArgs();
    }

    public sealed class GetJobsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the environment for which we want to retrieve the jobs (one of `project_id` or `environment_id` must be set)
        /// </summary>
        [Input("environmentId")]
        public Input<int>? EnvironmentId { get; set; }

        /// <summary>
        /// The ID of the project for which we want to retrieve the jobs (one of `project_id` or `environment_id` must be set)
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        public GetJobsInvokeArgs()
        {
        }
        public static new GetJobsInvokeArgs Empty => new GetJobsInvokeArgs();
    }


    [OutputType]
    public sealed class GetJobsResult
    {
        /// <summary>
        /// The ID of the environment for which we want to retrieve the jobs (one of `project_id` or `environment_id` must be set)
        /// </summary>
        public readonly int? EnvironmentId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Set of jobs with their details
        /// </summary>
        public readonly ImmutableArray<Outputs.GetJobsJobResult> Jobs;
        /// <summary>
        /// The ID of the project for which we want to retrieve the jobs (one of `project_id` or `environment_id` must be set)
        /// </summary>
        public readonly int? ProjectId;

        [OutputConstructor]
        private GetJobsResult(
            int? environmentId,

            string id,

            ImmutableArray<Outputs.GetJobsJobResult> jobs,

            int? projectId)
        {
            EnvironmentId = environmentId;
            Id = id;
            Jobs = jobs;
            ProjectId = projectId;
        }
    }
}

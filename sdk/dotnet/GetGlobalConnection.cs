// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud
{
    public static class GetGlobalConnection
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DbtCloud = Pulumi.DbtCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myConnection = DbtCloud.GetGlobalConnection.Invoke(new()
        ///     {
        ///         Id = 1234,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetGlobalConnectionResult> InvokeAsync(GetGlobalConnectionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGlobalConnectionResult>("dbtcloud:index/getGlobalConnection:getGlobalConnection", args ?? new GetGlobalConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DbtCloud = Pulumi.DbtCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myConnection = DbtCloud.GetGlobalConnection.Invoke(new()
        ///     {
        ///         Id = 1234,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGlobalConnectionResult> Invoke(GetGlobalConnectionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGlobalConnectionResult>("dbtcloud:index/getGlobalConnection:getGlobalConnection", args ?? new GetGlobalConnectionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DbtCloud = Pulumi.DbtCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myConnection = DbtCloud.GetGlobalConnection.Invoke(new()
        ///     {
        ///         Id = 1234,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGlobalConnectionResult> Invoke(GetGlobalConnectionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGlobalConnectionResult>("dbtcloud:index/getGlobalConnection:getGlobalConnection", args ?? new GetGlobalConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGlobalConnectionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Connection Identifier
        /// </summary>
        [Input("id", required: true)]
        public int Id { get; set; }

        public GetGlobalConnectionArgs()
        {
        }
        public static new GetGlobalConnectionArgs Empty => new GetGlobalConnectionArgs();
    }

    public sealed class GetGlobalConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Connection Identifier
        /// </summary>
        [Input("id", required: true)]
        public Input<int> Id { get; set; } = null!;

        public GetGlobalConnectionInvokeArgs()
        {
        }
        public static new GetGlobalConnectionInvokeArgs Empty => new GetGlobalConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetGlobalConnectionResult
    {
        /// <summary>
        /// Version of the adapter
        /// </summary>
        public readonly string AdapterVersion;
        /// <summary>
        /// Apache Spark connection configuration.
        /// </summary>
        public readonly Outputs.GetGlobalConnectionApacheSparkResult ApacheSpark;
        /// <summary>
        /// Athena connection configuration.
        /// </summary>
        public readonly Outputs.GetGlobalConnectionAthenaResult Athena;
        public readonly Outputs.GetGlobalConnectionBigqueryResult Bigquery;
        /// <summary>
        /// Databricks connection configuration
        /// </summary>
        public readonly Outputs.GetGlobalConnectionDatabricksResult Databricks;
        /// <summary>
        /// Microsoft Fabric connection configuration.
        /// </summary>
        public readonly Outputs.GetGlobalConnectionFabricResult Fabric;
        /// <summary>
        /// Connection Identifier
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// Whether the connection can use an SSH tunnel
        /// </summary>
        public readonly bool IsSshTunnelEnabled;
        /// <summary>
        /// Connection name
        /// </summary>
        public readonly string Name;
        public readonly int OauthConfigurationId;
        /// <summary>
        /// PostgreSQL connection configuration.
        /// </summary>
        public readonly Outputs.GetGlobalConnectionPostgresResult Postgres;
        /// <summary>
        /// Private Link Endpoint ID. This ID can be found using the `privatelink_endpoint` data source
        /// </summary>
        public readonly string PrivateLinkEndpointId;
        /// <summary>
        /// Redshift connection configuration
        /// </summary>
        public readonly Outputs.GetGlobalConnectionRedshiftResult Redshift;
        /// <summary>
        /// Snowflake connection configuration
        /// </summary>
        public readonly Outputs.GetGlobalConnectionSnowflakeResult Snowflake;
        /// <summary>
        /// Starburst/Trino connection configuration.
        /// </summary>
        public readonly Outputs.GetGlobalConnectionStarburstResult Starburst;
        /// <summary>
        /// Azure Synapse Analytics connection configuration.
        /// </summary>
        public readonly Outputs.GetGlobalConnectionSynapseResult Synapse;

        [OutputConstructor]
        private GetGlobalConnectionResult(
            string adapterVersion,

            Outputs.GetGlobalConnectionApacheSparkResult apacheSpark,

            Outputs.GetGlobalConnectionAthenaResult athena,

            Outputs.GetGlobalConnectionBigqueryResult bigquery,

            Outputs.GetGlobalConnectionDatabricksResult databricks,

            Outputs.GetGlobalConnectionFabricResult fabric,

            int id,

            bool isSshTunnelEnabled,

            string name,

            int oauthConfigurationId,

            Outputs.GetGlobalConnectionPostgresResult postgres,

            string privateLinkEndpointId,

            Outputs.GetGlobalConnectionRedshiftResult redshift,

            Outputs.GetGlobalConnectionSnowflakeResult snowflake,

            Outputs.GetGlobalConnectionStarburstResult starburst,

            Outputs.GetGlobalConnectionSynapseResult synapse)
        {
            AdapterVersion = adapterVersion;
            ApacheSpark = apacheSpark;
            Athena = athena;
            Bigquery = bigquery;
            Databricks = databricks;
            Fabric = fabric;
            Id = id;
            IsSshTunnelEnabled = isSshTunnelEnabled;
            Name = name;
            OauthConfigurationId = oauthConfigurationId;
            Postgres = postgres;
            PrivateLinkEndpointId = privateLinkEndpointId;
            Redshift = redshift;
            Snowflake = snowflake;
            Starburst = starburst;
            Synapse = synapse;
        }
    }
}

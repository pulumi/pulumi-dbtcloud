// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DbtCloud = Pulumi.DbtCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // the config is the same as for `dbtcloud_notification`
    ///     var prodJobInternalNotification = new DbtCloud.PartialNotification("prod_job_internal_notification", new()
    ///     {
    ///         UserId = 100,
    ///         OnSuccesses = new[]
    ///         {
    ///             prodJob.Id,
    ///         },
    ///         OnFailures = new[]
    ///         {
    ///             12345,
    ///         },
    ///         NotificationType = 1,
    ///     });
    /// 
    ///     // we can also send "external" email notifications to emails to related to dbt Cloud users
    ///     var prodJobExternalNotification = new DbtCloud.PartialNotification("prod_job_external_notification", new()
    ///     {
    ///         UserId = 100,
    ///         OnFailures = new[]
    ///         {
    ///             23456,
    ///             56788,
    ///         },
    ///         OnCancels = new[]
    ///         {
    ///             prodJob.Id,
    ///         },
    ///         NotificationType = 4,
    ///         ExternalEmail = "my_email@mail.com",
    ///     });
    /// 
    ///     // and finally, we can set up Slack notifications
    ///     var prodJobSlackNotifications = new DbtCloud.PartialNotification("prod_job_slack_notifications", new()
    ///     {
    ///         UserId = 100,
    ///         OnFailures = new[]
    ///         {
    ///             23456,
    ///             56788,
    ///         },
    ///         OnCancels = new[]
    ///         {
    ///             prodJob.Id,
    ///         },
    ///         NotificationType = 2,
    ///         SlackChannelId = "C12345ABCDE",
    ///         SlackChannelName = "#my-awesome-channel",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DbtCloudResourceType("dbtcloud:index/partialNotification:PartialNotification")]
    public partial class PartialNotification : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The external email to receive the notification [global, used as identifier]
        /// </summary>
        [Output("externalEmail")]
        public Output<string?> ExternalEmail { get; private set; } = null!;

        /// <summary>
        /// Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`) [global, used as identifier]
        /// </summary>
        [Output("notificationType")]
        public Output<int> NotificationType { get; private set; } = null!;

        /// <summary>
        /// List of job IDs to trigger the webhook on cancel. Those will be added/removed when config is added/removed.
        /// </summary>
        [Output("onCancels")]
        public Output<ImmutableArray<int>> OnCancels { get; private set; } = null!;

        /// <summary>
        /// List of job IDs to trigger the webhook on failure Those will be added/removed when config is added/removed.
        /// </summary>
        [Output("onFailures")]
        public Output<ImmutableArray<int>> OnFailures { get; private set; } = null!;

        /// <summary>
        /// List of job IDs to trigger the webhook on success Those will be added/removed when config is added/removed.
        /// </summary>
        [Output("onSuccesses")]
        public Output<ImmutableArray<int>> OnSuccesses { get; private set; } = null!;

        /// <summary>
        /// List of job IDs to trigger the webhook on warning Those will be added/removed when config is added/removed.
        /// </summary>
        [Output("onWarnings")]
        public Output<ImmutableArray<int>> OnWarnings { get; private set; } = null!;

        /// <summary>
        /// The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings [global, used as identifier]
        /// </summary>
        [Output("slackChannelId")]
        public Output<string?> SlackChannelId { get; private set; } = null!;

        /// <summary>
        /// The name of the slack channel [global, used as identifier]
        /// </summary>
        [Output("slackChannelName")]
        public Output<string?> SlackChannelName { get; private set; } = null!;

        /// <summary>
        /// State of the notification (1 = active (default), 2 = inactive) [global]
        /// </summary>
        [Output("state")]
        public Output<int> State { get; private set; } = null!;

        /// <summary>
        /// Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one [global]
        /// </summary>
        [Output("userId")]
        public Output<int> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a PartialNotification resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PartialNotification(string name, PartialNotificationArgs args, CustomResourceOptions? options = null)
            : base("dbtcloud:index/partialNotification:PartialNotification", name, args ?? new PartialNotificationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PartialNotification(string name, Input<string> id, PartialNotificationState? state = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/partialNotification:PartialNotification", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-dbtcloud",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PartialNotification resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PartialNotification Get(string name, Input<string> id, PartialNotificationState? state = null, CustomResourceOptions? options = null)
        {
            return new PartialNotification(name, id, state, options);
        }
    }

    public sealed class PartialNotificationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The external email to receive the notification [global, used as identifier]
        /// </summary>
        [Input("externalEmail")]
        public Input<string>? ExternalEmail { get; set; }

        /// <summary>
        /// Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`) [global, used as identifier]
        /// </summary>
        [Input("notificationType")]
        public Input<int>? NotificationType { get; set; }

        [Input("onCancels")]
        private InputList<int>? _onCancels;

        /// <summary>
        /// List of job IDs to trigger the webhook on cancel. Those will be added/removed when config is added/removed.
        /// </summary>
        public InputList<int> OnCancels
        {
            get => _onCancels ?? (_onCancels = new InputList<int>());
            set => _onCancels = value;
        }

        [Input("onFailures")]
        private InputList<int>? _onFailures;

        /// <summary>
        /// List of job IDs to trigger the webhook on failure Those will be added/removed when config is added/removed.
        /// </summary>
        public InputList<int> OnFailures
        {
            get => _onFailures ?? (_onFailures = new InputList<int>());
            set => _onFailures = value;
        }

        [Input("onSuccesses")]
        private InputList<int>? _onSuccesses;

        /// <summary>
        /// List of job IDs to trigger the webhook on success Those will be added/removed when config is added/removed.
        /// </summary>
        public InputList<int> OnSuccesses
        {
            get => _onSuccesses ?? (_onSuccesses = new InputList<int>());
            set => _onSuccesses = value;
        }

        [Input("onWarnings")]
        private InputList<int>? _onWarnings;

        /// <summary>
        /// List of job IDs to trigger the webhook on warning Those will be added/removed when config is added/removed.
        /// </summary>
        public InputList<int> OnWarnings
        {
            get => _onWarnings ?? (_onWarnings = new InputList<int>());
            set => _onWarnings = value;
        }

        /// <summary>
        /// The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings [global, used as identifier]
        /// </summary>
        [Input("slackChannelId")]
        public Input<string>? SlackChannelId { get; set; }

        /// <summary>
        /// The name of the slack channel [global, used as identifier]
        /// </summary>
        [Input("slackChannelName")]
        public Input<string>? SlackChannelName { get; set; }

        /// <summary>
        /// State of the notification (1 = active (default), 2 = inactive) [global]
        /// </summary>
        [Input("state")]
        public Input<int>? State { get; set; }

        /// <summary>
        /// Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one [global]
        /// </summary>
        [Input("userId", required: true)]
        public Input<int> UserId { get; set; } = null!;

        public PartialNotificationArgs()
        {
        }
        public static new PartialNotificationArgs Empty => new PartialNotificationArgs();
    }

    public sealed class PartialNotificationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The external email to receive the notification [global, used as identifier]
        /// </summary>
        [Input("externalEmail")]
        public Input<string>? ExternalEmail { get; set; }

        /// <summary>
        /// Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`) [global, used as identifier]
        /// </summary>
        [Input("notificationType")]
        public Input<int>? NotificationType { get; set; }

        [Input("onCancels")]
        private InputList<int>? _onCancels;

        /// <summary>
        /// List of job IDs to trigger the webhook on cancel. Those will be added/removed when config is added/removed.
        /// </summary>
        public InputList<int> OnCancels
        {
            get => _onCancels ?? (_onCancels = new InputList<int>());
            set => _onCancels = value;
        }

        [Input("onFailures")]
        private InputList<int>? _onFailures;

        /// <summary>
        /// List of job IDs to trigger the webhook on failure Those will be added/removed when config is added/removed.
        /// </summary>
        public InputList<int> OnFailures
        {
            get => _onFailures ?? (_onFailures = new InputList<int>());
            set => _onFailures = value;
        }

        [Input("onSuccesses")]
        private InputList<int>? _onSuccesses;

        /// <summary>
        /// List of job IDs to trigger the webhook on success Those will be added/removed when config is added/removed.
        /// </summary>
        public InputList<int> OnSuccesses
        {
            get => _onSuccesses ?? (_onSuccesses = new InputList<int>());
            set => _onSuccesses = value;
        }

        [Input("onWarnings")]
        private InputList<int>? _onWarnings;

        /// <summary>
        /// List of job IDs to trigger the webhook on warning Those will be added/removed when config is added/removed.
        /// </summary>
        public InputList<int> OnWarnings
        {
            get => _onWarnings ?? (_onWarnings = new InputList<int>());
            set => _onWarnings = value;
        }

        /// <summary>
        /// The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings [global, used as identifier]
        /// </summary>
        [Input("slackChannelId")]
        public Input<string>? SlackChannelId { get; set; }

        /// <summary>
        /// The name of the slack channel [global, used as identifier]
        /// </summary>
        [Input("slackChannelName")]
        public Input<string>? SlackChannelName { get; set; }

        /// <summary>
        /// State of the notification (1 = active (default), 2 = inactive) [global]
        /// </summary>
        [Input("state")]
        public Input<int>? State { get; set; }

        /// <summary>
        /// Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one [global]
        /// </summary>
        [Input("userId")]
        public Input<int>? UserId { get; set; }

        public PartialNotificationState()
        {
        }
        public static new PartialNotificationState Empty => new PartialNotificationState();
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud
{
    /// <summary>
    /// ## Import
    /// 
    /// using  import blocks (requires Terraform &gt;= 1.5)
    /// 
    /// import {
    /// 
    ///   to = dbtcloud_job.my_job
    /// 
    ///   id = "job_id"
    /// 
    /// }
    /// 
    /// import {
    /// 
    ///   to = dbtcloud_job.my_job
    /// 
    ///   id = "12345"
    /// 
    /// }
    /// 
    /// using the older import command
    /// 
    /// ```sh
    /// $ pulumi import dbtcloud:index/job:Job my_job "job_id"
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import dbtcloud:index/job:Job my_job 12345
    /// ```
    /// </summary>
    [DbtCloudResourceType("dbtcloud:index/job:Job")]
    public partial class Job : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The model selector for checking changes in the compare changes Advanced CI feature
        /// </summary>
        [Output("compareChangesFlags")]
        public Output<string> CompareChangesFlags { get; private set; } = null!;

        /// <summary>
        /// Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions
        /// </summary>
        [Output("dbtVersion")]
        public Output<string?> DbtVersion { get; private set; } = null!;

        /// <summary>
        /// Environment identifier that this job defers to (new deferring approach)
        /// </summary>
        [Output("deferringEnvironmentId")]
        public Output<int?> DeferringEnvironmentId { get; private set; } = null!;

        /// <summary>
        /// Job identifier that this job defers to (legacy deferring approach)
        /// </summary>
        [Output("deferringJobId")]
        public Output<int?> DeferringJobId { get; private set; } = null!;

        /// <summary>
        /// Description for the job
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Environment ID to create the job in
        /// </summary>
        [Output("environmentId")]
        public Output<int> EnvironmentId { get; private set; } = null!;

        /// <summary>
        /// Whether the CI job should fail when a lint error is found. Only used when `RunLint` is set to `True`. Defaults to `True`.
        /// </summary>
        [Output("errorsOnLintFailure")]
        public Output<bool> ErrorsOnLintFailure { get; private set; } = null!;

        /// <summary>
        /// List of commands to execute for the job
        /// </summary>
        [Output("executeSteps")]
        public Output<ImmutableArray<string>> ExecuteSteps { get; private set; } = null!;

        /// <summary>
        /// Flag for whether the job should generate documentation
        /// </summary>
        [Output("generateDocs")]
        public Output<bool> GenerateDocs { get; private set; } = null!;

        /// <summary>
        /// Should always be set to true as setting it to false is the same as creating a job in a deleted state. To create/keep a job in a 'deactivated' state, check  the `Triggers` config.
        /// </summary>
        [Output("isActive")]
        public Output<bool> IsActive { get; private set; } = null!;

        /// <summary>
        /// Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as 'job chaining').
        /// </summary>
        [Output("jobCompletionTriggerConditions")]
        public Output<ImmutableArray<Outputs.JobJobCompletionTriggerCondition>> CompletionTriggerCondition { get; private set; } = null!;

        /// <summary>
        /// Job identifier
        /// </summary>
        [Output("jobId")]
        public Output<int> JobId { get; private set; } = null!;

        /// <summary>
        /// Can be used to enforce the job type betwen `Ci`, `Merge` and `Scheduled`. Without this value the job type is inferred from the triggers configured
        /// </summary>
        [Output("jobType")]
        public Output<string> JobType { get; private set; } = null!;

        /// <summary>
        /// Job name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Number of threads to use in the job
        /// </summary>
        [Output("numThreads")]
        public Output<int> NumThreads { get; private set; } = null!;

        /// <summary>
        /// Project ID to create the job in
        /// </summary>
        [Output("projectId")]
        public Output<int> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Whether the CI job should compare data changes introduced by the code changes. Requires `DeferringEnvironmentId` to be set. (Advanced CI needs to be activated in the dbt Cloud Account Settings first as well)
        /// </summary>
        [Output("runCompareChanges")]
        public Output<bool> RunCompareChanges { get; private set; } = null!;

        /// <summary>
        /// Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.
        /// </summary>
        [Output("runGenerateSources")]
        public Output<bool> RunGenerateSources { get; private set; } = null!;

        /// <summary>
        /// Whether the CI job should lint SQL changes. Defaults to `False`.
        /// </summary>
        [Output("runLint")]
        public Output<bool> RunLint { get; private set; } = null!;

        /// <summary>
        /// Custom cron expression for schedule
        /// </summary>
        [Output("scheduleCron")]
        public Output<string?> ScheduleCron { get; private set; } = null!;

        /// <summary>
        /// List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
        /// </summary>
        [Output("scheduleDays")]
        public Output<ImmutableArray<int>> ScheduleDays { get; private set; } = null!;

        /// <summary>
        /// List of hours to execute the job at if running on a schedule
        /// </summary>
        [Output("scheduleHours")]
        public Output<ImmutableArray<int>> ScheduleHours { get; private set; } = null!;

        /// <summary>
        /// Number of hours between job executions if running on a schedule
        /// </summary>
        [Output("scheduleInterval")]
        public Output<int> ScheduleInterval { get; private set; } = null!;

        /// <summary>
        /// Type of schedule to use, one of every*day/ days*of*week/ custom*cron/ interval_cron
        /// </summary>
        [Output("scheduleType")]
        public Output<string> ScheduleType { get; private set; } = null!;

        /// <summary>
        /// Whether this job defers on a previous run of itself
        /// </summary>
        [Output("selfDeferring")]
        public Output<bool> SelfDeferring { get; private set; } = null!;

        /// <summary>
        /// Target name for the dbt profile
        /// </summary>
        [Output("targetName")]
        public Output<string> TargetName { get; private set; } = null!;

        /// <summary>
        /// [Deprectated - Moved to execution.timeout_seconds] Number of seconds to allow the job to run before timing out
        /// </summary>
        [Output("timeoutSeconds")]
        public Output<int> TimeoutSeconds { get; private set; } = null!;

        /// <summary>
        /// Flags for which types of triggers to use, the values are `GithubWebhook`, `GitProviderWebhook`, `Schedule` and `OnMerge`. All flags should be listed and set with `True` or `False`. When `OnMerge` is `True`, all the other values must be false.\n\n`CustomBranchOnly` used to be allowed but has been deprecated from the API. The jobs will use the custom branch of the environment. Please remove the `CustomBranchOnly` from your config. \n\nTo create a job in a 'deactivated' state, set all to `False`.
        /// </summary>
        [Output("triggers")]
        public Output<Outputs.JobTriggers> Triggers { get; private set; } = null!;

        /// <summary>
        /// Whether the CI job should be automatically triggered on draft PRs
        /// </summary>
        [Output("triggersOnDraftPr")]
        public Output<bool> TriggersOnDraftPr { get; private set; } = null!;


        /// <summary>
        /// Create a Job resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Job(string name, JobArgs args, CustomResourceOptions? options = null)
            : base("dbtcloud:index/job:Job", name, args ?? new JobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Job(string name, Input<string> id, JobState? state = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/job:Job", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-dbtcloud",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Job resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Job Get(string name, Input<string> id, JobState? state = null, CustomResourceOptions? options = null)
        {
            return new Job(name, id, state, options);
        }
    }

    public sealed class JobArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The model selector for checking changes in the compare changes Advanced CI feature
        /// </summary>
        [Input("compareChangesFlags")]
        public Input<string>? CompareChangesFlags { get; set; }

        /// <summary>
        /// Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions
        /// </summary>
        [Input("dbtVersion")]
        public Input<string>? DbtVersion { get; set; }

        /// <summary>
        /// Environment identifier that this job defers to (new deferring approach)
        /// </summary>
        [Input("deferringEnvironmentId")]
        public Input<int>? DeferringEnvironmentId { get; set; }

        /// <summary>
        /// Job identifier that this job defers to (legacy deferring approach)
        /// </summary>
        [Input("deferringJobId")]
        public Input<int>? DeferringJobId { get; set; }

        /// <summary>
        /// Description for the job
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Environment ID to create the job in
        /// </summary>
        [Input("environmentId", required: true)]
        public Input<int> EnvironmentId { get; set; } = null!;

        /// <summary>
        /// Whether the CI job should fail when a lint error is found. Only used when `RunLint` is set to `True`. Defaults to `True`.
        /// </summary>
        [Input("errorsOnLintFailure")]
        public Input<bool>? ErrorsOnLintFailure { get; set; }

        [Input("executeSteps", required: true)]
        private InputList<string>? _executeSteps;

        /// <summary>
        /// List of commands to execute for the job
        /// </summary>
        public InputList<string> ExecuteSteps
        {
            get => _executeSteps ?? (_executeSteps = new InputList<string>());
            set => _executeSteps = value;
        }

        /// <summary>
        /// Flag for whether the job should generate documentation
        /// </summary>
        [Input("generateDocs")]
        public Input<bool>? GenerateDocs { get; set; }

        /// <summary>
        /// Should always be set to true as setting it to false is the same as creating a job in a deleted state. To create/keep a job in a 'deactivated' state, check  the `Triggers` config.
        /// </summary>
        [Input("isActive")]
        public Input<bool>? IsActive { get; set; }

        [Input("jobCompletionTriggerConditions")]
        private InputList<Inputs.JobJobCompletionTriggerConditionArgs>? _jobCompletionTriggerConditions;

        /// <summary>
        /// Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as 'job chaining').
        /// </summary>
        public InputList<Inputs.JobJobCompletionTriggerConditionArgs> CompletionTriggerCondition
        {
            get => _jobCompletionTriggerConditions ?? (_jobCompletionTriggerConditions = new InputList<Inputs.JobJobCompletionTriggerConditionArgs>());
            set => _jobCompletionTriggerConditions = value;
        }

        /// <summary>
        /// Can be used to enforce the job type betwen `Ci`, `Merge` and `Scheduled`. Without this value the job type is inferred from the triggers configured
        /// </summary>
        [Input("jobType")]
        public Input<string>? JobType { get; set; }

        /// <summary>
        /// Job name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Number of threads to use in the job
        /// </summary>
        [Input("numThreads")]
        public Input<int>? NumThreads { get; set; }

        /// <summary>
        /// Project ID to create the job in
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        /// <summary>
        /// Whether the CI job should compare data changes introduced by the code changes. Requires `DeferringEnvironmentId` to be set. (Advanced CI needs to be activated in the dbt Cloud Account Settings first as well)
        /// </summary>
        [Input("runCompareChanges")]
        public Input<bool>? RunCompareChanges { get; set; }

        /// <summary>
        /// Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.
        /// </summary>
        [Input("runGenerateSources")]
        public Input<bool>? RunGenerateSources { get; set; }

        /// <summary>
        /// Whether the CI job should lint SQL changes. Defaults to `False`.
        /// </summary>
        [Input("runLint")]
        public Input<bool>? RunLint { get; set; }

        /// <summary>
        /// Custom cron expression for schedule
        /// </summary>
        [Input("scheduleCron")]
        public Input<string>? ScheduleCron { get; set; }

        [Input("scheduleDays")]
        private InputList<int>? _scheduleDays;

        /// <summary>
        /// List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
        /// </summary>
        public InputList<int> ScheduleDays
        {
            get => _scheduleDays ?? (_scheduleDays = new InputList<int>());
            set => _scheduleDays = value;
        }

        [Input("scheduleHours")]
        private InputList<int>? _scheduleHours;

        /// <summary>
        /// List of hours to execute the job at if running on a schedule
        /// </summary>
        public InputList<int> ScheduleHours
        {
            get => _scheduleHours ?? (_scheduleHours = new InputList<int>());
            set => _scheduleHours = value;
        }

        /// <summary>
        /// Number of hours between job executions if running on a schedule
        /// </summary>
        [Input("scheduleInterval")]
        public Input<int>? ScheduleInterval { get; set; }

        /// <summary>
        /// Type of schedule to use, one of every*day/ days*of*week/ custom*cron/ interval_cron
        /// </summary>
        [Input("scheduleType")]
        public Input<string>? ScheduleType { get; set; }

        /// <summary>
        /// Whether this job defers on a previous run of itself
        /// </summary>
        [Input("selfDeferring")]
        public Input<bool>? SelfDeferring { get; set; }

        /// <summary>
        /// Target name for the dbt profile
        /// </summary>
        [Input("targetName")]
        public Input<string>? TargetName { get; set; }

        /// <summary>
        /// [Deprectated - Moved to execution.timeout_seconds] Number of seconds to allow the job to run before timing out
        /// </summary>
        [Input("timeoutSeconds")]
        public Input<int>? TimeoutSeconds { get; set; }

        /// <summary>
        /// Flags for which types of triggers to use, the values are `GithubWebhook`, `GitProviderWebhook`, `Schedule` and `OnMerge`. All flags should be listed and set with `True` or `False`. When `OnMerge` is `True`, all the other values must be false.\n\n`CustomBranchOnly` used to be allowed but has been deprecated from the API. The jobs will use the custom branch of the environment. Please remove the `CustomBranchOnly` from your config. \n\nTo create a job in a 'deactivated' state, set all to `False`.
        /// </summary>
        [Input("triggers", required: true)]
        public Input<Inputs.JobTriggersArgs> Triggers { get; set; } = null!;

        /// <summary>
        /// Whether the CI job should be automatically triggered on draft PRs
        /// </summary>
        [Input("triggersOnDraftPr")]
        public Input<bool>? TriggersOnDraftPr { get; set; }

        public JobArgs()
        {
        }
        public static new JobArgs Empty => new JobArgs();
    }

    public sealed class JobState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The model selector for checking changes in the compare changes Advanced CI feature
        /// </summary>
        [Input("compareChangesFlags")]
        public Input<string>? CompareChangesFlags { get; set; }

        /// <summary>
        /// Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions
        /// </summary>
        [Input("dbtVersion")]
        public Input<string>? DbtVersion { get; set; }

        /// <summary>
        /// Environment identifier that this job defers to (new deferring approach)
        /// </summary>
        [Input("deferringEnvironmentId")]
        public Input<int>? DeferringEnvironmentId { get; set; }

        /// <summary>
        /// Job identifier that this job defers to (legacy deferring approach)
        /// </summary>
        [Input("deferringJobId")]
        public Input<int>? DeferringJobId { get; set; }

        /// <summary>
        /// Description for the job
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Environment ID to create the job in
        /// </summary>
        [Input("environmentId")]
        public Input<int>? EnvironmentId { get; set; }

        /// <summary>
        /// Whether the CI job should fail when a lint error is found. Only used when `RunLint` is set to `True`. Defaults to `True`.
        /// </summary>
        [Input("errorsOnLintFailure")]
        public Input<bool>? ErrorsOnLintFailure { get; set; }

        [Input("executeSteps")]
        private InputList<string>? _executeSteps;

        /// <summary>
        /// List of commands to execute for the job
        /// </summary>
        public InputList<string> ExecuteSteps
        {
            get => _executeSteps ?? (_executeSteps = new InputList<string>());
            set => _executeSteps = value;
        }

        /// <summary>
        /// Flag for whether the job should generate documentation
        /// </summary>
        [Input("generateDocs")]
        public Input<bool>? GenerateDocs { get; set; }

        /// <summary>
        /// Should always be set to true as setting it to false is the same as creating a job in a deleted state. To create/keep a job in a 'deactivated' state, check  the `Triggers` config.
        /// </summary>
        [Input("isActive")]
        public Input<bool>? IsActive { get; set; }

        [Input("jobCompletionTriggerConditions")]
        private InputList<Inputs.JobJobCompletionTriggerConditionGetArgs>? _jobCompletionTriggerConditions;

        /// <summary>
        /// Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as 'job chaining').
        /// </summary>
        public InputList<Inputs.JobJobCompletionTriggerConditionGetArgs> CompletionTriggerCondition
        {
            get => _jobCompletionTriggerConditions ?? (_jobCompletionTriggerConditions = new InputList<Inputs.JobJobCompletionTriggerConditionGetArgs>());
            set => _jobCompletionTriggerConditions = value;
        }

        /// <summary>
        /// Job identifier
        /// </summary>
        [Input("jobId")]
        public Input<int>? JobId { get; set; }

        /// <summary>
        /// Can be used to enforce the job type betwen `Ci`, `Merge` and `Scheduled`. Without this value the job type is inferred from the triggers configured
        /// </summary>
        [Input("jobType")]
        public Input<string>? JobType { get; set; }

        /// <summary>
        /// Job name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Number of threads to use in the job
        /// </summary>
        [Input("numThreads")]
        public Input<int>? NumThreads { get; set; }

        /// <summary>
        /// Project ID to create the job in
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        /// <summary>
        /// Whether the CI job should compare data changes introduced by the code changes. Requires `DeferringEnvironmentId` to be set. (Advanced CI needs to be activated in the dbt Cloud Account Settings first as well)
        /// </summary>
        [Input("runCompareChanges")]
        public Input<bool>? RunCompareChanges { get; set; }

        /// <summary>
        /// Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.
        /// </summary>
        [Input("runGenerateSources")]
        public Input<bool>? RunGenerateSources { get; set; }

        /// <summary>
        /// Whether the CI job should lint SQL changes. Defaults to `False`.
        /// </summary>
        [Input("runLint")]
        public Input<bool>? RunLint { get; set; }

        /// <summary>
        /// Custom cron expression for schedule
        /// </summary>
        [Input("scheduleCron")]
        public Input<string>? ScheduleCron { get; set; }

        [Input("scheduleDays")]
        private InputList<int>? _scheduleDays;

        /// <summary>
        /// List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
        /// </summary>
        public InputList<int> ScheduleDays
        {
            get => _scheduleDays ?? (_scheduleDays = new InputList<int>());
            set => _scheduleDays = value;
        }

        [Input("scheduleHours")]
        private InputList<int>? _scheduleHours;

        /// <summary>
        /// List of hours to execute the job at if running on a schedule
        /// </summary>
        public InputList<int> ScheduleHours
        {
            get => _scheduleHours ?? (_scheduleHours = new InputList<int>());
            set => _scheduleHours = value;
        }

        /// <summary>
        /// Number of hours between job executions if running on a schedule
        /// </summary>
        [Input("scheduleInterval")]
        public Input<int>? ScheduleInterval { get; set; }

        /// <summary>
        /// Type of schedule to use, one of every*day/ days*of*week/ custom*cron/ interval_cron
        /// </summary>
        [Input("scheduleType")]
        public Input<string>? ScheduleType { get; set; }

        /// <summary>
        /// Whether this job defers on a previous run of itself
        /// </summary>
        [Input("selfDeferring")]
        public Input<bool>? SelfDeferring { get; set; }

        /// <summary>
        /// Target name for the dbt profile
        /// </summary>
        [Input("targetName")]
        public Input<string>? TargetName { get; set; }

        /// <summary>
        /// [Deprectated - Moved to execution.timeout_seconds] Number of seconds to allow the job to run before timing out
        /// </summary>
        [Input("timeoutSeconds")]
        public Input<int>? TimeoutSeconds { get; set; }

        /// <summary>
        /// Flags for which types of triggers to use, the values are `GithubWebhook`, `GitProviderWebhook`, `Schedule` and `OnMerge`. All flags should be listed and set with `True` or `False`. When `OnMerge` is `True`, all the other values must be false.\n\n`CustomBranchOnly` used to be allowed but has been deprecated from the API. The jobs will use the custom branch of the environment. Please remove the `CustomBranchOnly` from your config. \n\nTo create a job in a 'deactivated' state, set all to `False`.
        /// </summary>
        [Input("triggers")]
        public Input<Inputs.JobTriggersGetArgs>? Triggers { get; set; }

        /// <summary>
        /// Whether the CI job should be automatically triggered on draft PRs
        /// </summary>
        [Input("triggersOnDraftPr")]
        public Input<bool>? TriggersOnDraftPr { get; set; }

        public JobState()
        {
        }
        public static new JobState Empty => new JobState();
    }
}

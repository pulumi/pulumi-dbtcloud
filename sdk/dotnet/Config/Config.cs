// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.DbtCloud
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("dbtcloud");

        private static readonly __Value<int?> _accountId = new __Value<int?>(() => __config.GetInt32("accountId") ?? Utilities.GetEnvInt32("DBT_CLOUD_ACCOUNT_ID"));
        /// <summary>
        /// Account identifier for your dbt Cloud implementation. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_ACCOUNT_ID`
        /// </summary>
        public static int? AccountId
        {
            get => _accountId.Get();
            set => _accountId.Set(value);
        }

        private static readonly __Value<bool?> _disableRetry = new __Value<bool?>(() => __config.GetBoolean("disableRetry"));
        /// <summary>
        /// If set to true, the provider will not retry requests that fail due to rate limiting. Defaults to false.
        /// </summary>
        public static bool? DisableRetry
        {
            get => _disableRetry.Get();
            set => _disableRetry.Set(value);
        }

        private static readonly __Value<string?> _hostUrl = new __Value<string?>(() => __config.Get("hostUrl") ?? Utilities.GetEnv("DBT_CLOUD_HOST_URL") ?? "https://cloud.getdbt.com/api");
        /// <summary>
        /// URL for your dbt Cloud deployment. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_HOST_URL` - Defaults to https://cloud.getdbt.com/api
        /// </summary>
        public static string? HostUrl
        {
            get => _hostUrl.Get();
            set => _hostUrl.Set(value);
        }

        private static readonly __Value<int?> _maxRetries = new __Value<int?>(() => __config.GetInt32("maxRetries"));
        /// <summary>
        /// The maximum number of retries to attempt for requests that fail due to rate limiting. Defaults to 3 retries.
        /// </summary>
        public static int? MaxRetries
        {
            get => _maxRetries.Get();
            set => _maxRetries.Set(value);
        }

        private static readonly __Value<ImmutableArray<string>> _retriableStatusCodes = new __Value<ImmutableArray<string>>(() => __config.GetObject<ImmutableArray<string>>("retriableStatusCodes"));
        /// <summary>
        /// List of HTTP status codes that should be retried when encountered. Defaults to [429, 500, 502, 503, 504].
        /// </summary>
        public static ImmutableArray<string> RetriableStatusCodes
        {
            get => _retriableStatusCodes.Get();
            set => _retriableStatusCodes.Set(value);
        }

        private static readonly __Value<int?> _retryIntervalSeconds = new __Value<int?>(() => __config.GetInt32("retryIntervalSeconds"));
        /// <summary>
        /// The number of seconds to wait before retrying a request that failed due to rate limiting. Defaults to 10 seconds.
        /// </summary>
        public static int? RetryIntervalSeconds
        {
            get => _retryIntervalSeconds.Get();
            set => _retryIntervalSeconds.Set(value);
        }

        private static readonly __Value<string?> _token = new __Value<string?>(() => __config.Get("token") ?? Utilities.GetEnv("DBT_CLOUD_TOKEN"));
        /// <summary>
        /// API token for your dbt Cloud. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_TOKEN`
        /// </summary>
        public static string? Token
        {
            get => _token.Get();
            set => _token.Set(value);
        }

    }
}

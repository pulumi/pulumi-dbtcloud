// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud
{
    public static class GetTeradataCredential
    {
        /// <summary>
        /// Teradata credential data source
        /// </summary>
        public static Task<GetTeradataCredentialResult> InvokeAsync(GetTeradataCredentialArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTeradataCredentialResult>("dbtcloud:index/getTeradataCredential:getTeradataCredential", args ?? new GetTeradataCredentialArgs(), options.WithDefaults());

        /// <summary>
        /// Teradata credential data source
        /// </summary>
        public static Output<GetTeradataCredentialResult> Invoke(GetTeradataCredentialInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTeradataCredentialResult>("dbtcloud:index/getTeradataCredential:getTeradataCredential", args ?? new GetTeradataCredentialInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Teradata credential data source
        /// </summary>
        public static Output<GetTeradataCredentialResult> Invoke(GetTeradataCredentialInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTeradataCredentialResult>("dbtcloud:index/getTeradataCredential:getTeradataCredential", args ?? new GetTeradataCredentialInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTeradataCredentialArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Credential ID
        /// </summary>
        [Input("credentialId", required: true)]
        public int CredentialId { get; set; }

        /// <summary>
        /// Project ID
        /// </summary>
        [Input("projectId", required: true)]
        public int ProjectId { get; set; }

        public GetTeradataCredentialArgs()
        {
        }
        public static new GetTeradataCredentialArgs Empty => new GetTeradataCredentialArgs();
    }

    public sealed class GetTeradataCredentialInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Credential ID
        /// </summary>
        [Input("credentialId", required: true)]
        public Input<int> CredentialId { get; set; } = null!;

        /// <summary>
        /// Project ID
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        public GetTeradataCredentialInvokeArgs()
        {
        }
        public static new GetTeradataCredentialInvokeArgs Empty => new GetTeradataCredentialInvokeArgs();
    }


    [OutputType]
    public sealed class GetTeradataCredentialResult
    {
        /// <summary>
        /// Credential ID
        /// </summary>
        public readonly int CredentialId;
        /// <summary>
        /// The ID of this resource. Contains the project ID and the credential ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The password for the Teradata account
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// Project ID
        /// </summary>
        public readonly int ProjectId;
        /// <summary>
        /// The schema where to create models
        /// </summary>
        public readonly string Schema;
        /// <summary>
        /// The number of threads to use. Default is 1
        /// </summary>
        public readonly int Threads;
        /// <summary>
        /// The username for the Teradata account
        /// </summary>
        public readonly string User;

        [OutputConstructor]
        private GetTeradataCredentialResult(
            int credentialId,

            string id,

            string password,

            int projectId,

            string schema,

            int threads,

            string user)
        {
            CredentialId = credentialId;
            Id = id;
            Password = password;
            ProjectId = projectId;
            Schema = schema;
            Threads = threads;
            User = user;
        }
    }
}

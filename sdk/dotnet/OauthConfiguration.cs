// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud
{
    /// <summary>
    /// Configure an external OAuth integration for the data warehouse. Currently supports Okta and Entra ID (i.e. Azure AD) for Snowflake.
    /// 
    /// See the [documentation](https://docs.getdbt.com/docs/cloud/manage-access/external-oauth) for more information on how to configure it.
    /// 
    /// ## Import
    /// 
    /// using  import blocks (requires Terraform &gt;= 1.5)
    /// 
    /// import {
    /// 
    ///   to = dbtcloud_oauth_configuration.my_external_oauth
    /// 
    ///   id = "external_oauth_id"
    /// 
    /// }
    /// 
    /// import {
    /// 
    ///   to = dbtcloud_oauth_configuration.my_external_oauth
    /// 
    ///   id = "12345"
    /// 
    /// }
    /// 
    /// using the older import command
    /// 
    /// ```sh
    /// $ pulumi import dbtcloud:index/oauthConfiguration:OauthConfiguration my_external_oauth "external_oauth_id"
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import dbtcloud:index/oauthConfiguration:OauthConfiguration my_external_oauth 12345
    /// ```
    /// </summary>
    [DbtCloudResourceType("dbtcloud:index/oauthConfiguration:OauthConfiguration")]
    public partial class OauthConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Application ID URI for the OAuth integration. Only for Entra
        /// </summary>
        [Output("applicationIdUri")]
        public Output<string> ApplicationIdUri { get; private set; } = null!;

        /// <summary>
        /// The Authorize URL for the OAuth integration
        /// </summary>
        [Output("authorizeUrl")]
        public Output<string> AuthorizeUrl { get; private set; } = null!;

        /// <summary>
        /// The Client ID for the OAuth integration
        /// </summary>
        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        /// <summary>
        /// The Client secret for the OAuth integration
        /// </summary>
        [Output("clientSecret")]
        public Output<string> ClientSecret { get; private set; } = null!;

        /// <summary>
        /// The name of OAuth integration
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The redirect URL for the OAuth integration
        /// </summary>
        [Output("redirectUri")]
        public Output<string> RedirectUri { get; private set; } = null!;

        /// <summary>
        /// The Token URL for the OAuth integration
        /// </summary>
        [Output("tokenUrl")]
        public Output<string> TokenUrl { get; private set; } = null!;

        /// <summary>
        /// The type of OAuth integration (`Entra` or `Okta`)
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a OauthConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OauthConfiguration(string name, OauthConfigurationArgs args, CustomResourceOptions? options = null)
            : base("dbtcloud:index/oauthConfiguration:OauthConfiguration", name, args ?? new OauthConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OauthConfiguration(string name, Input<string> id, OauthConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/oauthConfiguration:OauthConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-dbtcloud",
                AdditionalSecretOutputs =
                {
                    "clientSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OauthConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OauthConfiguration Get(string name, Input<string> id, OauthConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new OauthConfiguration(name, id, state, options);
        }
    }

    public sealed class OauthConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Application ID URI for the OAuth integration. Only for Entra
        /// </summary>
        [Input("applicationIdUri")]
        public Input<string>? ApplicationIdUri { get; set; }

        /// <summary>
        /// The Authorize URL for the OAuth integration
        /// </summary>
        [Input("authorizeUrl", required: true)]
        public Input<string> AuthorizeUrl { get; set; } = null!;

        /// <summary>
        /// The Client ID for the OAuth integration
        /// </summary>
        [Input("clientId", required: true)]
        public Input<string> ClientId { get; set; } = null!;

        [Input("clientSecret", required: true)]
        private Input<string>? _clientSecret;

        /// <summary>
        /// The Client secret for the OAuth integration
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of OAuth integration
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The redirect URL for the OAuth integration
        /// </summary>
        [Input("redirectUri", required: true)]
        public Input<string> RedirectUri { get; set; } = null!;

        /// <summary>
        /// The Token URL for the OAuth integration
        /// </summary>
        [Input("tokenUrl", required: true)]
        public Input<string> TokenUrl { get; set; } = null!;

        /// <summary>
        /// The type of OAuth integration (`Entra` or `Okta`)
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public OauthConfigurationArgs()
        {
        }
        public static new OauthConfigurationArgs Empty => new OauthConfigurationArgs();
    }

    public sealed class OauthConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Application ID URI for the OAuth integration. Only for Entra
        /// </summary>
        [Input("applicationIdUri")]
        public Input<string>? ApplicationIdUri { get; set; }

        /// <summary>
        /// The Authorize URL for the OAuth integration
        /// </summary>
        [Input("authorizeUrl")]
        public Input<string>? AuthorizeUrl { get; set; }

        /// <summary>
        /// The Client ID for the OAuth integration
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;

        /// <summary>
        /// The Client secret for the OAuth integration
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of OAuth integration
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The redirect URL for the OAuth integration
        /// </summary>
        [Input("redirectUri")]
        public Input<string>? RedirectUri { get; set; }

        /// <summary>
        /// The Token URL for the OAuth integration
        /// </summary>
        [Input("tokenUrl")]
        public Input<string>? TokenUrl { get; set; }

        /// <summary>
        /// The type of OAuth integration (`Entra` or `Okta`)
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public OauthConfigurationState()
        {
        }
        public static new OauthConfigurationState Empty => new OauthConfigurationState();
    }
}

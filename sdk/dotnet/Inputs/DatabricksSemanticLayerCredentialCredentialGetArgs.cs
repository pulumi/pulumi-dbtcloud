// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud.Inputs
{

    public sealed class DatabricksSemanticLayerCredentialCredentialGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of the adapter (databricks or spark). Optional only when semantic*layer*credential is set to true; otherwise, this field is required.
        /// </summary>
        [Input("adapterType")]
        public Input<string>? AdapterType { get; set; }

        /// <summary>
        /// The catalog where to create models (only for the databricks adapter)
        /// </summary>
        [Input("catalog")]
        public Input<string>? Catalog { get; set; }

        /// <summary>
        /// The system Databricks credential ID
        /// </summary>
        [Input("credentialId")]
        public Input<int>? CredentialId { get; set; }

        /// <summary>
        /// The ID of this resource. Contains the project ID and the credential ID.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Project ID to create the Databricks credential in
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        /// <summary>
        /// The schema where to create models. Optional only when semantic*layer*credential is set to true; otherwise, this field is required.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        /// <summary>
        /// This field indicates that the credential is used as part of the Semantic Layer configuration. It is used to create a Databricks credential for the Semantic Layer.
        /// </summary>
        [Input("semanticLayerCredential")]
        public Input<bool>? SemanticLayerCredential { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        [Input("targetName")]
        public Input<string>? TargetName { get; set; }

        [Input("token", required: true)]
        private Input<string>? _token;

        /// <summary>
        /// Token for Databricks user
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public DatabricksSemanticLayerCredentialCredentialGetArgs()
        {
        }
        public static new DatabricksSemanticLayerCredentialCredentialGetArgs Empty => new DatabricksSemanticLayerCredentialCredentialGetArgs();
    }
}

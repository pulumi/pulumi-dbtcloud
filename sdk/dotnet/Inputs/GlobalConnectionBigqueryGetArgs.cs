// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud.Inputs
{

    public sealed class GlobalConnectionBigqueryGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("applicationId")]
        private Input<string>? _applicationId;

        /// <summary>
        /// OAuth Client ID
        /// </summary>
        public Input<string>? ApplicationId
        {
            get => _applicationId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _applicationId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("applicationSecret")]
        private Input<string>? _applicationSecret;

        /// <summary>
        /// OAuth Client Secret
        /// </summary>
        public Input<string>? ApplicationSecret
        {
            get => _applicationSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _applicationSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Auth Provider X509 Cert URL for the Service Account
        /// </summary>
        [Input("authProviderX509CertUrl", required: true)]
        public Input<string> AuthProviderX509CertUrl { get; set; } = null!;

        /// <summary>
        /// Auth URI for the Service Account
        /// </summary>
        [Input("authUri", required: true)]
        public Input<string> AuthUri { get; set; } = null!;

        /// <summary>
        /// Service Account email
        /// </summary>
        [Input("clientEmail", required: true)]
        public Input<string> ClientEmail { get; set; } = null!;

        /// <summary>
        /// Client ID of the Service Account
        /// </summary>
        [Input("clientId", required: true)]
        public Input<string> ClientId { get; set; } = null!;

        /// <summary>
        /// Client X509 Cert URL for the Service Account
        /// </summary>
        [Input("clientX509CertUrl", required: true)]
        public Input<string> ClientX509CertUrl { get; set; } = null!;

        /// <summary>
        /// Dataproc cluster name for PySpark workloads
        /// </summary>
        [Input("dataprocClusterName")]
        public Input<string>? DataprocClusterName { get; set; }

        /// <summary>
        /// Google Cloud region for PySpark workloads on Dataproc
        /// </summary>
        [Input("dataprocRegion")]
        public Input<string>? DataprocRegion { get; set; }

        /// <summary>
        /// Project to bill for query execution
        /// </summary>
        [Input("executionProject")]
        public Input<string>? ExecutionProject { get; set; }

        /// <summary>
        /// The GCP project ID to use for the connection
        /// </summary>
        [Input("gcpProjectId", required: true)]
        public Input<string> GcpProjectId { get; set; } = null!;

        /// <summary>
        /// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
        /// </summary>
        [Input("gcsBucket")]
        public Input<string>? GcsBucket { get; set; }

        /// <summary>
        /// Service Account to impersonate when running queries
        /// </summary>
        [Input("impersonateServiceAccount")]
        public Input<string>? ImpersonateServiceAccount { get; set; }

        /// <summary>
        /// Maximum timeout for the job creation step
        /// </summary>
        [Input("jobCreationTimeoutSeconds")]
        public Input<int>? JobCreationTimeoutSeconds { get; set; }

        /// <summary>
        /// Total number of seconds to wait while retrying the same query
        /// </summary>
        [Input("jobRetryDeadlineSeconds")]
        public Input<int>? JobRetryDeadlineSeconds { get; set; }

        /// <summary>
        /// Location to create new Datasets in
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Max number of bytes that can be billed for a given BigQuery query
        /// </summary>
        [Input("maximumBytesBilled")]
        public Input<int>? MaximumBytesBilled { get; set; }

        /// <summary>
        /// The priority with which to execute BigQuery queries (batch or interactive)
        /// </summary>
        [Input("priority")]
        public Input<string>? Priority { get; set; }

        [Input("privateKey", required: true)]
        private Input<string>? _privateKey;

        /// <summary>
        /// Private Key for the Service Account
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Private Key ID for the Service Account
        /// </summary>
        [Input("privateKeyId", required: true)]
        public Input<string> PrivateKeyId { get; set; } = null!;

        /// <summary>
        /// Number of retries for queries
        /// </summary>
        [Input("retries")]
        public Input<int>? Retries { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// OAuth scopes for the BigQuery connection
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// Timeout in seconds for queries
        /// </summary>
        [Input("timeoutSeconds")]
        public Input<int>? TimeoutSeconds { get; set; }

        /// <summary>
        /// Token URI for the Service Account
        /// </summary>
        [Input("tokenUri", required: true)]
        public Input<string> TokenUri { get; set; } = null!;

        public GlobalConnectionBigqueryGetArgs()
        {
        }
        public static new GlobalConnectionBigqueryGetArgs Empty => new GlobalConnectionBigqueryGetArgs();
    }
}

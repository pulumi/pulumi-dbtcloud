// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud
{
    public static class GetSynapseCredential
    {
        /// <summary>
        /// Synapse credential data source.
        /// </summary>
        public static Task<GetSynapseCredentialResult> InvokeAsync(GetSynapseCredentialArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSynapseCredentialResult>("dbtcloud:index/getSynapseCredential:getSynapseCredential", args ?? new GetSynapseCredentialArgs(), options.WithDefaults());

        /// <summary>
        /// Synapse credential data source.
        /// </summary>
        public static Output<GetSynapseCredentialResult> Invoke(GetSynapseCredentialInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSynapseCredentialResult>("dbtcloud:index/getSynapseCredential:getSynapseCredential", args ?? new GetSynapseCredentialInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Synapse credential data source.
        /// </summary>
        public static Output<GetSynapseCredentialResult> Invoke(GetSynapseCredentialInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSynapseCredentialResult>("dbtcloud:index/getSynapseCredential:getSynapseCredential", args ?? new GetSynapseCredentialInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSynapseCredentialArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Credential ID
        /// </summary>
        [Input("credentialId", required: true)]
        public int CredentialId { get; set; }

        /// <summary>
        /// Project ID
        /// </summary>
        [Input("projectId", required: true)]
        public int ProjectId { get; set; }

        public GetSynapseCredentialArgs()
        {
        }
        public static new GetSynapseCredentialArgs Empty => new GetSynapseCredentialArgs();
    }

    public sealed class GetSynapseCredentialInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Credential ID
        /// </summary>
        [Input("credentialId", required: true)]
        public Input<int> CredentialId { get; set; } = null!;

        /// <summary>
        /// Project ID
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        public GetSynapseCredentialInvokeArgs()
        {
        }
        public static new GetSynapseCredentialInvokeArgs Empty => new GetSynapseCredentialInvokeArgs();
    }


    [OutputType]
    public sealed class GetSynapseCredentialResult
    {
        /// <summary>
        /// The type of the adapter (synapse)
        /// </summary>
        public readonly string AdapterType;
        /// <summary>
        /// Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)
        /// </summary>
        public readonly string Authentication;
        /// <summary>
        /// The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// Credential ID
        /// </summary>
        public readonly int CredentialId;
        /// <summary>
        /// The ID of this data source. Contains the project ID and the credential ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Project ID
        /// </summary>
        public readonly int ProjectId;
        /// <summary>
        /// The schema where to create the dbt models
        /// </summary>
        public readonly string Schema;
        /// <summary>
        /// Optionally set this to the principal who should own the schemas created by dbt
        /// </summary>
        public readonly string SchemaAuthorization;
        /// <summary>
        /// The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// The username of the Synapse account to connect to. Only used when connection with AD user/pass
        /// </summary>
        public readonly string User;

        [OutputConstructor]
        private GetSynapseCredentialResult(
            string adapterType,

            string authentication,

            string clientId,

            int credentialId,

            string id,

            int projectId,

            string schema,

            string schemaAuthorization,

            string tenantId,

            string user)
        {
            AdapterType = adapterType;
            Authentication = authentication;
            ClientId = clientId;
            CredentialId = credentialId;
            Id = id;
            ProjectId = projectId;
            Schema = schema;
            SchemaAuthorization = schemaAuthorization;
            TenantId = tenantId;
            User = user;
        }
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud
{
    public static class GetProject
    {
        /// <summary>
        /// Retrieve a specific project from dbt Cloud.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DbtCloud = Pulumi.DbtCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // projects data sources can use the project_id parameter (preferred uniqueness is ensured)
        ///     var projectById = DbtCloud.GetProject.Invoke(new()
        ///     {
        ///         Id = 0,
        ///     });
        /// 
        ///     // or they can use project names
        ///     // the provider will raise an error if more than one project is found with the same name
        ///     var projectByName = DbtCloud.GetProject.Invoke(new()
        ///     {
        ///         Name = "Project name",
        ///     });
        /// 
        ///     var filteredProjects = DbtCloud.GetProjects.Invoke(new()
        ///     {
        ///         NameContains = "Project",
        ///     });
        /// 
        ///     var allProjects = DbtCloud.GetProjects.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["projectIdDetails"] = projectById,
        ///         ["projectNameDetails"] = projectByName,
        ///         ["filteredProjectsCount"] = filteredProjects.Apply(getProjectsResult =&gt; getProjectsResult.Projects).Length,
        ///         ["filteredProjects"] = filteredProjects.Apply(getProjectsResult =&gt; getProjectsResult.Projects),
        ///         ["projectNames"] = .Select(project =&gt; 
        ///         {
        ///             return project.Name;
        ///         }).ToList(),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetProjectResult> InvokeAsync(GetProjectArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectResult>("dbtcloud:index/getProject:getProject", args ?? new GetProjectArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve a specific project from dbt Cloud.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DbtCloud = Pulumi.DbtCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // projects data sources can use the project_id parameter (preferred uniqueness is ensured)
        ///     var projectById = DbtCloud.GetProject.Invoke(new()
        ///     {
        ///         Id = 0,
        ///     });
        /// 
        ///     // or they can use project names
        ///     // the provider will raise an error if more than one project is found with the same name
        ///     var projectByName = DbtCloud.GetProject.Invoke(new()
        ///     {
        ///         Name = "Project name",
        ///     });
        /// 
        ///     var filteredProjects = DbtCloud.GetProjects.Invoke(new()
        ///     {
        ///         NameContains = "Project",
        ///     });
        /// 
        ///     var allProjects = DbtCloud.GetProjects.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["projectIdDetails"] = projectById,
        ///         ["projectNameDetails"] = projectByName,
        ///         ["filteredProjectsCount"] = filteredProjects.Apply(getProjectsResult =&gt; getProjectsResult.Projects).Length,
        ///         ["filteredProjects"] = filteredProjects.Apply(getProjectsResult =&gt; getProjectsResult.Projects),
        ///         ["projectNames"] = .Select(project =&gt; 
        ///         {
        ///             return project.Name;
        ///         }).ToList(),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetProjectResult> Invoke(GetProjectInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectResult>("dbtcloud:index/getProject:getProject", args ?? new GetProjectInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve a specific project from dbt Cloud.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DbtCloud = Pulumi.DbtCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // projects data sources can use the project_id parameter (preferred uniqueness is ensured)
        ///     var projectById = DbtCloud.GetProject.Invoke(new()
        ///     {
        ///         Id = 0,
        ///     });
        /// 
        ///     // or they can use project names
        ///     // the provider will raise an error if more than one project is found with the same name
        ///     var projectByName = DbtCloud.GetProject.Invoke(new()
        ///     {
        ///         Name = "Project name",
        ///     });
        /// 
        ///     var filteredProjects = DbtCloud.GetProjects.Invoke(new()
        ///     {
        ///         NameContains = "Project",
        ///     });
        /// 
        ///     var allProjects = DbtCloud.GetProjects.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["projectIdDetails"] = projectById,
        ///         ["projectNameDetails"] = projectByName,
        ///         ["filteredProjectsCount"] = filteredProjects.Apply(getProjectsResult =&gt; getProjectsResult.Projects).Length,
        ///         ["filteredProjects"] = filteredProjects.Apply(getProjectsResult =&gt; getProjectsResult.Projects),
        ///         ["projectNames"] = .Select(project =&gt; 
        ///         {
        ///             return project.Name;
        ///         }).ToList(),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetProjectResult> Invoke(GetProjectInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectResult>("dbtcloud:index/getProject:getProject", args ?? new GetProjectInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Project ID
        /// </summary>
        [Input("id")]
        public int? Id { get; set; }

        /// <summary>
        /// Project name
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetProjectArgs()
        {
        }
        public static new GetProjectArgs Empty => new GetProjectArgs();
    }

    public sealed class GetProjectInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Project ID
        /// </summary>
        [Input("id")]
        public Input<int>? Id { get; set; }

        /// <summary>
        /// Project name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetProjectInvokeArgs()
        {
        }
        public static new GetProjectInvokeArgs Empty => new GetProjectInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectResult
    {
        /// <summary>
        /// When the project was created
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Subdirectory for the dbt project inside the git repo
        /// </summary>
        public readonly string DbtProjectSubdirectory;
        /// <summary>
        /// Project description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// ID of Job for the documentation
        /// </summary>
        public readonly int DocsJobId;
        /// <summary>
        /// ID of Job for source freshness
        /// </summary>
        public readonly int FreshnessJobId;
        /// <summary>
        /// Project ID
        /// </summary>
        public readonly int? Id;
        /// <summary>
        /// Project name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Details for the connection linked to the project
        /// </summary>
        public readonly Outputs.GetProjectProjectConnectionResult ProjectConnection;
        /// <summary>
        /// Details for the repository linked to the project
        /// </summary>
        public readonly Outputs.GetProjectRepositoryResult Repository;
        /// <summary>
        /// Semantic layer config ID
        /// </summary>
        public readonly int SemanticLayerConfigId;
        /// <summary>
        /// Project state should be 1 = active, as 2 = deleted
        /// </summary>
        public readonly int State;
        /// <summary>
        /// The type of dbt project (default or hybrid)
        /// </summary>
        public readonly int Type;
        /// <summary>
        /// When the project was last updated
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetProjectResult(
            string createdAt,

            string dbtProjectSubdirectory,

            string description,

            int docsJobId,

            int freshnessJobId,

            int? id,

            string name,

            Outputs.GetProjectProjectConnectionResult projectConnection,

            Outputs.GetProjectRepositoryResult repository,

            int semanticLayerConfigId,

            int state,

            int type,

            string updatedAt)
        {
            CreatedAt = createdAt;
            DbtProjectSubdirectory = dbtProjectSubdirectory;
            Description = description;
            DocsJobId = docsJobId;
            FreshnessJobId = freshnessJobId;
            Id = id;
            Name = name;
            ProjectConnection = projectConnection;
            Repository = repository;
            SemanticLayerConfigId = semanticLayerConfigId;
            State = state;
            Type = type;
            UpdatedAt = updatedAt;
        }
    }
}

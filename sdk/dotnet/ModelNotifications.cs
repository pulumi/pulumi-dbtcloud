// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud
{
    /// <summary>
    /// Configure model notifications for a dbt Cloud environment. By default all the `on_...` are set to false. When destroyed, the model notifications are disabled.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DbtCloud = Pulumi.DbtCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var prodModelNotifications = new DbtCloud.ModelNotifications("prod_model_notifications", new()
    ///     {
    ///         EnvironmentId = prodEnvironment.EnvironmentId,
    ///         Enabled = true,
    ///         OnSuccess = false,
    ///         OnFailure = true,
    ///         OnWarning = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Model notifications are imported using the environment ID where the notifications are enabled
    /// 
    /// Using import blocks (requires Terraform &gt;= 1.5)
    /// 
    /// import {
    /// 
    ///   to = dbtcloud_model_notifications.my_model_notifications
    /// 
    ///   id = "environment_id"
    /// 
    /// }
    /// 
    /// import {
    /// 
    ///   to = dbtcloud_model_notifications.my_model_notifications
    /// 
    ///   id = "12345"
    /// 
    /// }
    /// 
    /// Using the older import command
    /// 
    /// ```sh
    /// $ pulumi import dbtcloud:index/modelNotifications:ModelNotifications my_model_notifications "environment_id"
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import dbtcloud:index/modelNotifications:ModelNotifications my_model_notifications 12345
    /// ```
    /// </summary>
    [DbtCloudResourceType("dbtcloud:index/modelNotifications:ModelNotifications")]
    public partial class ModelNotifications : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether model notifications are enabled for this environment
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The ID of the dbt Cloud environment
        /// </summary>
        [Output("environmentId")]
        public Output<string> EnvironmentId { get; private set; } = null!;

        /// <summary>
        /// Whether to send notifications for failed model runs
        /// </summary>
        [Output("onFailure")]
        public Output<bool> OnFailure { get; private set; } = null!;

        /// <summary>
        /// Whether to send notifications for skipped model runs
        /// </summary>
        [Output("onSkipped")]
        public Output<bool> OnSkipped { get; private set; } = null!;

        /// <summary>
        /// Whether to send notifications for successful model runs
        /// </summary>
        [Output("onSuccess")]
        public Output<bool> OnSuccess { get; private set; } = null!;

        /// <summary>
        /// Whether to send notifications for model runs with warnings
        /// </summary>
        [Output("onWarning")]
        public Output<bool> OnWarning { get; private set; } = null!;


        /// <summary>
        /// Create a ModelNotifications resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ModelNotifications(string name, ModelNotificationsArgs args, CustomResourceOptions? options = null)
            : base("dbtcloud:index/modelNotifications:ModelNotifications", name, args ?? new ModelNotificationsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ModelNotifications(string name, Input<string> id, ModelNotificationsState? state = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/modelNotifications:ModelNotifications", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-dbtcloud",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ModelNotifications resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ModelNotifications Get(string name, Input<string> id, ModelNotificationsState? state = null, CustomResourceOptions? options = null)
        {
            return new ModelNotifications(name, id, state, options);
        }
    }

    public sealed class ModelNotificationsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether model notifications are enabled for this environment
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The ID of the dbt Cloud environment
        /// </summary>
        [Input("environmentId", required: true)]
        public Input<string> EnvironmentId { get; set; } = null!;

        /// <summary>
        /// Whether to send notifications for failed model runs
        /// </summary>
        [Input("onFailure")]
        public Input<bool>? OnFailure { get; set; }

        /// <summary>
        /// Whether to send notifications for skipped model runs
        /// </summary>
        [Input("onSkipped")]
        public Input<bool>? OnSkipped { get; set; }

        /// <summary>
        /// Whether to send notifications for successful model runs
        /// </summary>
        [Input("onSuccess")]
        public Input<bool>? OnSuccess { get; set; }

        /// <summary>
        /// Whether to send notifications for model runs with warnings
        /// </summary>
        [Input("onWarning")]
        public Input<bool>? OnWarning { get; set; }

        public ModelNotificationsArgs()
        {
        }
        public static new ModelNotificationsArgs Empty => new ModelNotificationsArgs();
    }

    public sealed class ModelNotificationsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether model notifications are enabled for this environment
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The ID of the dbt Cloud environment
        /// </summary>
        [Input("environmentId")]
        public Input<string>? EnvironmentId { get; set; }

        /// <summary>
        /// Whether to send notifications for failed model runs
        /// </summary>
        [Input("onFailure")]
        public Input<bool>? OnFailure { get; set; }

        /// <summary>
        /// Whether to send notifications for skipped model runs
        /// </summary>
        [Input("onSkipped")]
        public Input<bool>? OnSkipped { get; set; }

        /// <summary>
        /// Whether to send notifications for successful model runs
        /// </summary>
        [Input("onSuccess")]
        public Input<bool>? OnSuccess { get; set; }

        /// <summary>
        /// Whether to send notifications for model runs with warnings
        /// </summary>
        [Input("onWarning")]
        public Input<bool>? OnWarning { get; set; }

        public ModelNotificationsState()
        {
        }
        public static new ModelNotificationsState Empty => new ModelNotificationsState();
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud
{
    public static class GetRedshiftCredential
    {
        /// <summary>
        /// Redshift credential data source
        /// </summary>
        public static Task<GetRedshiftCredentialResult> InvokeAsync(GetRedshiftCredentialArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRedshiftCredentialResult>("dbtcloud:index/getRedshiftCredential:getRedshiftCredential", args ?? new GetRedshiftCredentialArgs(), options.WithDefaults());

        /// <summary>
        /// Redshift credential data source
        /// </summary>
        public static Output<GetRedshiftCredentialResult> Invoke(GetRedshiftCredentialInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRedshiftCredentialResult>("dbtcloud:index/getRedshiftCredential:getRedshiftCredential", args ?? new GetRedshiftCredentialInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Redshift credential data source
        /// </summary>
        public static Output<GetRedshiftCredentialResult> Invoke(GetRedshiftCredentialInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRedshiftCredentialResult>("dbtcloud:index/getRedshiftCredential:getRedshiftCredential", args ?? new GetRedshiftCredentialInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRedshiftCredentialArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Credential ID
        /// </summary>
        [Input("credentialId", required: true)]
        public int CredentialId { get; set; }

        /// <summary>
        /// Default schema name
        /// </summary>
        [Input("defaultSchema", required: true)]
        public string DefaultSchema { get; set; } = null!;

        /// <summary>
        /// Project ID
        /// </summary>
        [Input("projectId", required: true)]
        public int ProjectId { get; set; }

        public GetRedshiftCredentialArgs()
        {
        }
        public static new GetRedshiftCredentialArgs Empty => new GetRedshiftCredentialArgs();
    }

    public sealed class GetRedshiftCredentialInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Credential ID
        /// </summary>
        [Input("credentialId", required: true)]
        public Input<int> CredentialId { get; set; } = null!;

        /// <summary>
        /// Default schema name
        /// </summary>
        [Input("defaultSchema", required: true)]
        public Input<string> DefaultSchema { get; set; } = null!;

        /// <summary>
        /// Project ID
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        public GetRedshiftCredentialInvokeArgs()
        {
        }
        public static new GetRedshiftCredentialInvokeArgs Empty => new GetRedshiftCredentialInvokeArgs();
    }


    [OutputType]
    public sealed class GetRedshiftCredentialResult
    {
        /// <summary>
        /// Credential ID
        /// </summary>
        public readonly int CredentialId;
        /// <summary>
        /// Default schema name
        /// </summary>
        public readonly string DefaultSchema;
        /// <summary>
        /// The ID of this data source. Contains the project ID and the credential ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether the Redshift credential is active
        /// </summary>
        public readonly bool IsActive;
        /// <summary>
        /// Number of threads to use
        /// </summary>
        public readonly int NumThreads;
        /// <summary>
        /// Project ID
        /// </summary>
        public readonly int ProjectId;

        [OutputConstructor]
        private GetRedshiftCredentialResult(
            int credentialId,

            string defaultSchema,

            string id,

            bool isActive,

            int numThreads,

            int projectId)
        {
            CredentialId = credentialId;
            DefaultSchema = defaultSchema;
            Id = id;
            IsActive = isActive;
            NumThreads = numThreads;
            ProjectId = projectId;
        }
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud
{
    /// <summary>
    /// This resource can be used to create global connections as introduced in dbt Cloud in August 2024.
    /// 
    /// Those connections are not linked to a specific project and can be linked to environments from different projects by using the `ConnectionId` field in the `dbtcloud.Environment` resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DbtCloud = Pulumi.DbtCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var apacheSpark = new DbtCloud.GlobalConnection("apache_spark", new()
    ///     {
    ///         Name = "My Apache Spark connection",
    ///         ApacheSpark = new DbtCloud.Inputs.GlobalConnectionApacheSparkArgs
    ///         {
    ///             Method = "http",
    ///             Host = "my-spark-host.com",
    ///             Cluster = "my-cluster",
    ///             Connect_timeout = 100,
    ///         },
    ///     });
    /// 
    ///     var athena = new DbtCloud.GlobalConnection("athena", new()
    ///     {
    ///         Name = "My Athena connection",
    ///         Athena = new DbtCloud.Inputs.GlobalConnectionAthenaArgs
    ///         {
    ///             Region_name = "us-east-1",
    ///             Database = "mydatabase",
    ///             S3_staging_dir = "my_dir",
    ///             Work_group = "my_work_group",
    ///         },
    ///     });
    /// 
    ///     var bigquery = new DbtCloud.GlobalConnection("bigquery", new()
    ///     {
    ///         Name = "My BigQuery connection",
    ///         Bigquery = new DbtCloud.Inputs.GlobalConnectionBigqueryArgs
    ///         {
    ///             Gcp_project_id = "my-gcp-project-id",
    ///             Timeout_seconds = 1000,
    ///             Private_key_id = "my-private-key-id",
    ///             Private_key = "ABCDEFGHIJKL",
    ///             Client_email = "my_client_email",
    ///             Client_id = "my_client_id",
    ///             Auth_uri = "my_auth_uri",
    ///             Token_uri = "my_token_uri",
    ///             Auth_provider_x509_cert_url = "my_auth_provider_x509_cert_url",
    ///             Client_x509_cert_url = "my_client_x509_cert_url",
    ///             Application_id = "oauth_application_id",
    ///             Application_secret = "oauth_secret_id",
    ///         },
    ///     });
    /// 
    ///     var databricks = new DbtCloud.GlobalConnection("databricks", new()
    ///     {
    ///         Name = "My Databricks connection",
    ///         Databricks = new DbtCloud.Inputs.GlobalConnectionDatabricksArgs
    ///         {
    ///             Host = "my-databricks-host.cloud.databricks.com",
    ///             Http_path = "/sql/my/http/path",
    ///             Catalog = "dbt_catalog",
    ///             Client_id = "yourclientid",
    ///             Client_secret = "yourclientsecret",
    ///         },
    ///     });
    /// 
    ///     var fabric = new DbtCloud.GlobalConnection("fabric", new()
    ///     {
    ///         Name = "My Fabric connection",
    ///         Fabric = new DbtCloud.Inputs.GlobalConnectionFabricArgs
    ///         {
    ///             Server = "my-fabric-server.com",
    ///             Database = "mydb",
    ///             Port = 1234,
    ///             Retries = 3,
    ///             Login_timeout = 60,
    ///             Query_timeout = 3600,
    ///         },
    ///     });
    /// 
    ///     var postgres = new DbtCloud.GlobalConnection("postgres", new()
    ///     {
    ///         Name = "My PostgreSQL connection",
    ///         Postgres = new DbtCloud.Inputs.GlobalConnectionPostgresArgs
    ///         {
    ///             Hostname = "my-postgresql-server.com",
    ///             Port = 5432,
    ///             Dbname = "my_database",
    ///         },
    ///     });
    /// 
    ///     var redshift = new DbtCloud.GlobalConnection("redshift", new()
    ///     {
    ///         Name = "My Redshift connection",
    ///         Redshift = new DbtCloud.Inputs.GlobalConnectionRedshiftArgs
    ///         {
    ///             Hostname = "my-redshift-connection.com",
    ///             Port = 5432,
    ///             Dbname = "my_database",
    ///         },
    ///     });
    /// 
    ///     var snowflake = new DbtCloud.GlobalConnection("snowflake", new()
    ///     {
    ///         Name = "My Snowflake connection",
    ///         PrivateLinkEndpointId = myPrivateLink.Id,
    ///         Snowflake = new DbtCloud.Inputs.GlobalConnectionSnowflakeArgs
    ///         {
    ///             Account = "my-snowflake-account",
    ///             Database = "MY_DATABASE",
    ///             Warehouse = "MY_WAREHOUSE",
    ///             Client_session_keep_alive = false,
    ///             Allow_sso = true,
    ///             Oauth_client_id = "yourclientid",
    ///             Oauth_client_secret = "yourclientsecret",
    ///         },
    ///     });
    /// 
    ///     var starburst = new DbtCloud.GlobalConnection("starburst", new()
    ///     {
    ///         Name = "My Starburst connection",
    ///         Starburst = new DbtCloud.Inputs.GlobalConnectionStarburstArgs
    ///         {
    ///             Host = "my-starburst-host.com",
    ///             Database = "mydb",
    ///         },
    ///     });
    /// 
    ///     var synapse = new DbtCloud.GlobalConnection("synapse", new()
    ///     {
    ///         Name = "My Synapse connection",
    ///         Synapse = new DbtCloud.Inputs.GlobalConnectionSynapseArgs
    ///         {
    ///             Host = "my-synapse-server.com",
    ///             Database = "mydb",
    ///             Port = 1234,
    ///             Retries = 3,
    ///             Login_timeout = 60,
    ///             Query_timeout = 3600,
    ///         },
    ///     });
    /// 
    ///     var teradata = new DbtCloud.GlobalConnection("teradata", new()
    ///     {
    ///         Name = "My Teradata connection",
    ///         Teradata = new DbtCloud.Inputs.GlobalConnectionTeradataArgs
    ///         {
    ///             Host = "my-teradata-server.com",
    ///             Tmode = "ANSI",
    ///             Port = "1234",
    ///             Request_timeout = 600,
    ///             Retries = 3,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A project-scoped connection can be imported as a global connection by specifying the connection ID
    /// 
    /// Migrating from project-scoped connections to global connections could be done by:
    /// 
    /// 1. Adding the config for the global connection and importing it (see below)
    /// 
    /// 2. Removing the project-scoped connection from the config AND from the state
    ///    
    ///    - CAREFUL: If the connection is removed from the config but not the state, it will be destroyed on the next apply
    /// 
    /// using  import blocks (requires Terraform &gt;= 1.5)
    /// 
    /// import {
    /// 
    ///   to = dbtcloud_global_connection.my_connection
    /// 
    ///   id = "connection_id"
    /// 
    /// }
    /// 
    /// import {
    /// 
    ///   to = dbtcloud_global_connection.my_connection
    /// 
    ///   id = "1234"
    /// 
    /// }
    /// 
    /// using the older import command
    /// 
    /// ```sh
    /// $ pulumi import dbtcloud:index/globalConnection:GlobalConnection my_connection "connection_id"
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import dbtcloud:index/globalConnection:GlobalConnection my_connection 1234
    /// ```
    /// </summary>
    [DbtCloudResourceType("dbtcloud:index/globalConnection:GlobalConnection")]
    public partial class GlobalConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Version of the adapter
        /// </summary>
        [Output("adapterVersion")]
        public Output<string> AdapterVersion { get; private set; } = null!;

        /// <summary>
        /// Apache Spark connection configuration.
        /// </summary>
        [Output("apacheSpark")]
        public Output<Outputs.GlobalConnectionApacheSpark?> ApacheSpark { get; private set; } = null!;

        /// <summary>
        /// Athena connection configuration.
        /// </summary>
        [Output("athena")]
        public Output<Outputs.GlobalConnectionAthena?> Athena { get; private set; } = null!;

        [Output("bigquery")]
        public Output<Outputs.GlobalConnectionBigquery?> Bigquery { get; private set; } = null!;

        /// <summary>
        /// Databricks connection configuration
        /// </summary>
        [Output("databricks")]
        public Output<Outputs.GlobalConnectionDatabricks?> Databricks { get; private set; } = null!;

        /// <summary>
        /// Microsoft Fabric connection configuration.
        /// </summary>
        [Output("fabric")]
        public Output<Outputs.GlobalConnectionFabric?> Fabric { get; private set; } = null!;

        /// <summary>
        /// Whether the connection can use an SSH tunnel
        /// </summary>
        [Output("isSshTunnelEnabled")]
        public Output<bool> IsSshTunnelEnabled { get; private set; } = null!;

        /// <summary>
        /// Connection name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// External OAuth configuration ID (only Snowflake for now)
        /// </summary>
        [Output("oauthConfigurationId")]
        public Output<int?> OauthConfigurationId { get; private set; } = null!;

        /// <summary>
        /// PostgreSQL connection configuration.
        /// </summary>
        [Output("postgres")]
        public Output<Outputs.GlobalConnectionPostgres?> Postgres { get; private set; } = null!;

        /// <summary>
        /// Private Link Endpoint ID. This ID can be found using the `PrivatelinkEndpoint` data source
        /// </summary>
        [Output("privateLinkEndpointId")]
        public Output<string?> PrivateLinkEndpointId { get; private set; } = null!;

        /// <summary>
        /// Redshift connection configuration
        /// </summary>
        [Output("redshift")]
        public Output<Outputs.GlobalConnectionRedshift?> Redshift { get; private set; } = null!;

        /// <summary>
        /// Snowflake connection configuration
        /// </summary>
        [Output("snowflake")]
        public Output<Outputs.GlobalConnectionSnowflake?> Snowflake { get; private set; } = null!;

        /// <summary>
        /// Starburst/Trino connection configuration.
        /// </summary>
        [Output("starburst")]
        public Output<Outputs.GlobalConnectionStarburst?> Starburst { get; private set; } = null!;

        /// <summary>
        /// Azure Synapse Analytics connection configuration.
        /// </summary>
        [Output("synapse")]
        public Output<Outputs.GlobalConnectionSynapse?> Synapse { get; private set; } = null!;

        /// <summary>
        /// Teradata connection configuration.
        /// </summary>
        [Output("teradata")]
        public Output<Outputs.GlobalConnectionTeradata?> Teradata { get; private set; } = null!;


        /// <summary>
        /// Create a GlobalConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GlobalConnection(string name, GlobalConnectionArgs? args = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/globalConnection:GlobalConnection", name, args ?? new GlobalConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GlobalConnection(string name, Input<string> id, GlobalConnectionState? state = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/globalConnection:GlobalConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-dbtcloud",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GlobalConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GlobalConnection Get(string name, Input<string> id, GlobalConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new GlobalConnection(name, id, state, options);
        }
    }

    public sealed class GlobalConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Apache Spark connection configuration.
        /// </summary>
        [Input("apacheSpark")]
        public Input<Inputs.GlobalConnectionApacheSparkArgs>? ApacheSpark { get; set; }

        /// <summary>
        /// Athena connection configuration.
        /// </summary>
        [Input("athena")]
        public Input<Inputs.GlobalConnectionAthenaArgs>? Athena { get; set; }

        [Input("bigquery")]
        public Input<Inputs.GlobalConnectionBigqueryArgs>? Bigquery { get; set; }

        /// <summary>
        /// Databricks connection configuration
        /// </summary>
        [Input("databricks")]
        public Input<Inputs.GlobalConnectionDatabricksArgs>? Databricks { get; set; }

        /// <summary>
        /// Microsoft Fabric connection configuration.
        /// </summary>
        [Input("fabric")]
        public Input<Inputs.GlobalConnectionFabricArgs>? Fabric { get; set; }

        /// <summary>
        /// Connection name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// External OAuth configuration ID (only Snowflake for now)
        /// </summary>
        [Input("oauthConfigurationId")]
        public Input<int>? OauthConfigurationId { get; set; }

        /// <summary>
        /// PostgreSQL connection configuration.
        /// </summary>
        [Input("postgres")]
        public Input<Inputs.GlobalConnectionPostgresArgs>? Postgres { get; set; }

        /// <summary>
        /// Private Link Endpoint ID. This ID can be found using the `PrivatelinkEndpoint` data source
        /// </summary>
        [Input("privateLinkEndpointId")]
        public Input<string>? PrivateLinkEndpointId { get; set; }

        /// <summary>
        /// Redshift connection configuration
        /// </summary>
        [Input("redshift")]
        public Input<Inputs.GlobalConnectionRedshiftArgs>? Redshift { get; set; }

        /// <summary>
        /// Snowflake connection configuration
        /// </summary>
        [Input("snowflake")]
        public Input<Inputs.GlobalConnectionSnowflakeArgs>? Snowflake { get; set; }

        /// <summary>
        /// Starburst/Trino connection configuration.
        /// </summary>
        [Input("starburst")]
        public Input<Inputs.GlobalConnectionStarburstArgs>? Starburst { get; set; }

        /// <summary>
        /// Azure Synapse Analytics connection configuration.
        /// </summary>
        [Input("synapse")]
        public Input<Inputs.GlobalConnectionSynapseArgs>? Synapse { get; set; }

        /// <summary>
        /// Teradata connection configuration.
        /// </summary>
        [Input("teradata")]
        public Input<Inputs.GlobalConnectionTeradataArgs>? Teradata { get; set; }

        public GlobalConnectionArgs()
        {
        }
        public static new GlobalConnectionArgs Empty => new GlobalConnectionArgs();
    }

    public sealed class GlobalConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Version of the adapter
        /// </summary>
        [Input("adapterVersion")]
        public Input<string>? AdapterVersion { get; set; }

        /// <summary>
        /// Apache Spark connection configuration.
        /// </summary>
        [Input("apacheSpark")]
        public Input<Inputs.GlobalConnectionApacheSparkGetArgs>? ApacheSpark { get; set; }

        /// <summary>
        /// Athena connection configuration.
        /// </summary>
        [Input("athena")]
        public Input<Inputs.GlobalConnectionAthenaGetArgs>? Athena { get; set; }

        [Input("bigquery")]
        public Input<Inputs.GlobalConnectionBigqueryGetArgs>? Bigquery { get; set; }

        /// <summary>
        /// Databricks connection configuration
        /// </summary>
        [Input("databricks")]
        public Input<Inputs.GlobalConnectionDatabricksGetArgs>? Databricks { get; set; }

        /// <summary>
        /// Microsoft Fabric connection configuration.
        /// </summary>
        [Input("fabric")]
        public Input<Inputs.GlobalConnectionFabricGetArgs>? Fabric { get; set; }

        /// <summary>
        /// Whether the connection can use an SSH tunnel
        /// </summary>
        [Input("isSshTunnelEnabled")]
        public Input<bool>? IsSshTunnelEnabled { get; set; }

        /// <summary>
        /// Connection name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// External OAuth configuration ID (only Snowflake for now)
        /// </summary>
        [Input("oauthConfigurationId")]
        public Input<int>? OauthConfigurationId { get; set; }

        /// <summary>
        /// PostgreSQL connection configuration.
        /// </summary>
        [Input("postgres")]
        public Input<Inputs.GlobalConnectionPostgresGetArgs>? Postgres { get; set; }

        /// <summary>
        /// Private Link Endpoint ID. This ID can be found using the `PrivatelinkEndpoint` data source
        /// </summary>
        [Input("privateLinkEndpointId")]
        public Input<string>? PrivateLinkEndpointId { get; set; }

        /// <summary>
        /// Redshift connection configuration
        /// </summary>
        [Input("redshift")]
        public Input<Inputs.GlobalConnectionRedshiftGetArgs>? Redshift { get; set; }

        /// <summary>
        /// Snowflake connection configuration
        /// </summary>
        [Input("snowflake")]
        public Input<Inputs.GlobalConnectionSnowflakeGetArgs>? Snowflake { get; set; }

        /// <summary>
        /// Starburst/Trino connection configuration.
        /// </summary>
        [Input("starburst")]
        public Input<Inputs.GlobalConnectionStarburstGetArgs>? Starburst { get; set; }

        /// <summary>
        /// Azure Synapse Analytics connection configuration.
        /// </summary>
        [Input("synapse")]
        public Input<Inputs.GlobalConnectionSynapseGetArgs>? Synapse { get; set; }

        /// <summary>
        /// Teradata connection configuration.
        /// </summary>
        [Input("teradata")]
        public Input<Inputs.GlobalConnectionTeradataGetArgs>? Teradata { get; set; }

        public GlobalConnectionState()
        {
        }
        public static new GlobalConnectionState Empty => new GlobalConnectionState();
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud
{
    /// <summary>
    /// Teradata credential resource
    /// </summary>
    [DbtCloudResourceType("dbtcloud:index/teradataCredential:TeradataCredential")]
    public partial class TeradataCredential : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The internal credential ID
        /// </summary>
        [Output("credentialId")]
        public Output<int> CredentialId { get; private set; } = null!;

        /// <summary>
        /// The password for the Teradata account
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// Project ID to create the Teradata/Trino credential in
        /// </summary>
        [Output("projectId")]
        public Output<int> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The schema where to create models
        /// </summary>
        [Output("schema")]
        public Output<string> Schema { get; private set; } = null!;

        /// <summary>
        /// The number of threads to use. Default is 1
        /// </summary>
        [Output("threads")]
        public Output<int> Threads { get; private set; } = null!;

        /// <summary>
        /// The username for the Teradata account
        /// </summary>
        [Output("user")]
        public Output<string> User { get; private set; } = null!;


        /// <summary>
        /// Create a TeradataCredential resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TeradataCredential(string name, TeradataCredentialArgs args, CustomResourceOptions? options = null)
            : base("dbtcloud:index/teradataCredential:TeradataCredential", name, args ?? new TeradataCredentialArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TeradataCredential(string name, Input<string> id, TeradataCredentialState? state = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/teradataCredential:TeradataCredential", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-dbtcloud",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TeradataCredential resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TeradataCredential Get(string name, Input<string> id, TeradataCredentialState? state = null, CustomResourceOptions? options = null)
        {
            return new TeradataCredential(name, id, state, options);
        }
    }

    public sealed class TeradataCredentialArgs : global::Pulumi.ResourceArgs
    {
        [Input("password", required: true)]
        private Input<string>? _password;

        /// <summary>
        /// The password for the Teradata account
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Project ID to create the Teradata/Trino credential in
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        /// <summary>
        /// The schema where to create models
        /// </summary>
        [Input("schema", required: true)]
        public Input<string> Schema { get; set; } = null!;

        /// <summary>
        /// The number of threads to use. Default is 1
        /// </summary>
        [Input("threads")]
        public Input<int>? Threads { get; set; }

        /// <summary>
        /// The username for the Teradata account
        /// </summary>
        [Input("user", required: true)]
        public Input<string> User { get; set; } = null!;

        public TeradataCredentialArgs()
        {
        }
        public static new TeradataCredentialArgs Empty => new TeradataCredentialArgs();
    }

    public sealed class TeradataCredentialState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The internal credential ID
        /// </summary>
        [Input("credentialId")]
        public Input<int>? CredentialId { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password for the Teradata account
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Project ID to create the Teradata/Trino credential in
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        /// <summary>
        /// The schema where to create models
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        /// <summary>
        /// The number of threads to use. Default is 1
        /// </summary>
        [Input("threads")]
        public Input<int>? Threads { get; set; }

        /// <summary>
        /// The username for the Teradata account
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public TeradataCredentialState()
        {
        }
        public static new TeradataCredentialState Empty => new TeradataCredentialState();
    }
}

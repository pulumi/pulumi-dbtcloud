// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud.Outputs
{

    [OutputType]
    public sealed class GlobalConnectionSnowflake
    {
        /// <summary>
        /// The Snowflake account name
        /// </summary>
        public readonly string Account;
        /// <summary>
        /// Whether to allow Snowflake OAuth for the connection. If true, the `OauthClientId` and `OauthClientSecret` fields must be set
        /// </summary>
        public readonly bool? AllowSso;
        /// <summary>
        /// If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (&gt; 4 hours)
        /// </summary>
        public readonly bool? ClientSessionKeepAlive;
        /// <summary>
        /// The default database for the connection
        /// </summary>
        public readonly string Database;
        /// <summary>
        /// OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake
        /// </summary>
        public readonly string? OauthClientId;
        /// <summary>
        /// OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake
        /// </summary>
        public readonly string? OauthClientSecret;
        /// <summary>
        /// The Snowflake role to use when running queries on the connection
        /// </summary>
        public readonly string? Role;
        /// <summary>
        /// The default Snowflake Warehouse to use for the connection
        /// </summary>
        public readonly string Warehouse;

        [OutputConstructor]
        private GlobalConnectionSnowflake(
            string account,

            bool? allowSso,

            bool? clientSessionKeepAlive,

            string database,

            string? oauthClientId,

            string? oauthClientSecret,

            string? role,

            string warehouse)
        {
            Account = account;
            AllowSso = allowSso;
            ClientSessionKeepAlive = clientSessionKeepAlive;
            Database = database;
            OauthClientId = oauthClientId;
            OauthClientSecret = oauthClientSecret;
            Role = role;
            Warehouse = warehouse;
        }
    }
}

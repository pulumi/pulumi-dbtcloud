// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud.Outputs
{

    [OutputType]
    public sealed class GetJobsJobResult
    {
        /// <summary>
        /// The version of dbt used for the job. If not set, the environment version will be used.
        /// </summary>
        public readonly string DbtVersion;
        /// <summary>
        /// The ID of the environment this job defers to
        /// </summary>
        public readonly int DeferringEnvironmentId;
        /// <summary>
        /// [Deprecated - deferral is now set at the environment level] The ID of the job definition this job defers to
        /// </summary>
        public readonly int DeferringJobDefinitionId;
        /// <summary>
        /// The description of the job
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Details of the environment the job is running in
        /// </summary>
        public readonly Outputs.GetJobsJobEnvironmentResult Environment;
        /// <summary>
        /// The ID of environment
        /// </summary>
        public readonly int EnvironmentId;
        /// <summary>
        /// The list of steps to run in the job
        /// </summary>
        public readonly ImmutableArray<string> ExecuteSteps;
        public readonly Outputs.GetJobsJobExecutionResult Execution;
        /// <summary>
        /// Whether the job generate docs
        /// </summary>
        public readonly bool GenerateDocs;
        /// <summary>
        /// The ID of the job
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// Whether the job is triggered by the completion of another job
        /// </summary>
        public readonly Outputs.GetJobsJobJobCompletionTriggerConditionResult JobCompletionTriggerCondition;
        /// <summary>
        /// The type of job (e.g. CI, scheduled)
        /// </summary>
        public readonly string JobType;
        /// <summary>
        /// The name of the job
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The ID of the project
        /// </summary>
        public readonly int ProjectId;
        /// <summary>
        /// Whether the job should compare data changes introduced by the code change in the PR
        /// </summary>
        public readonly bool RunCompareChanges;
        /// <summary>
        /// Whether the job test source freshness
        /// </summary>
        public readonly bool RunGenerateSources;
        public readonly Outputs.GetJobsJobScheduleResult Schedule;
        public readonly Outputs.GetJobsJobSettingsResult Settings;
        public readonly Outputs.GetJobsJobTriggersResult Triggers;
        /// <summary>
        /// Whether the CI job should be automatically triggered on draft PRs
        /// </summary>
        public readonly bool TriggersOnDraftPr;

        [OutputConstructor]
        private GetJobsJobResult(
            string dbtVersion,

            int deferringEnvironmentId,

            int deferringJobDefinitionId,

            string description,

            Outputs.GetJobsJobEnvironmentResult environment,

            int environmentId,

            ImmutableArray<string> executeSteps,

            Outputs.GetJobsJobExecutionResult execution,

            bool generateDocs,

            int id,

            Outputs.GetJobsJobJobCompletionTriggerConditionResult jobCompletionTriggerCondition,

            string jobType,

            string name,

            int projectId,

            bool runCompareChanges,

            bool runGenerateSources,

            Outputs.GetJobsJobScheduleResult schedule,

            Outputs.GetJobsJobSettingsResult settings,

            Outputs.GetJobsJobTriggersResult triggers,

            bool triggersOnDraftPr)
        {
            DbtVersion = dbtVersion;
            DeferringEnvironmentId = deferringEnvironmentId;
            DeferringJobDefinitionId = deferringJobDefinitionId;
            Description = description;
            Environment = environment;
            EnvironmentId = environmentId;
            ExecuteSteps = executeSteps;
            Execution = execution;
            GenerateDocs = generateDocs;
            Id = id;
            JobCompletionTriggerCondition = jobCompletionTriggerCondition;
            JobType = jobType;
            Name = name;
            ProjectId = projectId;
            RunCompareChanges = runCompareChanges;
            RunGenerateSources = runGenerateSources;
            Schedule = schedule;
            Settings = settings;
            Triggers = triggers;
            TriggersOnDraftPr = triggersOnDraftPr;
        }
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud
{
    /// <summary>
    /// Manages a dbt Cloud project repository.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DbtCloud = Pulumi.DbtCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dbtProjectRepository = new DbtCloud.ProjectRepository("dbt_project_repository", new()
    ///     {
    ///         ProjectId = dbtProject.Id,
    ///         RepositoryId = dbtRepository.RepositoryId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// using  import blocks (requires Terraform &gt;= 1.5)
    /// 
    /// import {
    /// 
    ///   to = dbtcloud_project_repository.my_project
    /// 
    ///   id = "project_id:repository_id"
    /// 
    /// }
    /// 
    /// import {
    /// 
    ///   to = dbtcloud_project_repository.my_project
    /// 
    ///   id = "12345:5678"
    /// 
    /// }
    /// 
    /// using the older import command
    /// 
    /// ```sh
    /// $ pulumi import dbtcloud:index/projectRepository:ProjectRepository my_project "project_id:repository_id"
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import dbtcloud:index/projectRepository:ProjectRepository my_project 12345:5678
    /// ```
    /// </summary>
    [DbtCloudResourceType("dbtcloud:index/projectRepository:ProjectRepository")]
    public partial class ProjectRepository : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Project ID
        /// </summary>
        [Output("projectId")]
        public Output<int> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Repository ID
        /// </summary>
        [Output("repositoryId")]
        public Output<int> RepositoryId { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectRepository resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectRepository(string name, ProjectRepositoryArgs args, CustomResourceOptions? options = null)
            : base("dbtcloud:index/projectRepository:ProjectRepository", name, args ?? new ProjectRepositoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectRepository(string name, Input<string> id, ProjectRepositoryState? state = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/projectRepository:ProjectRepository", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-dbtcloud",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectRepository resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectRepository Get(string name, Input<string> id, ProjectRepositoryState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectRepository(name, id, state, options);
        }
    }

    public sealed class ProjectRepositoryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Project ID
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        /// <summary>
        /// Repository ID
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<int> RepositoryId { get; set; } = null!;

        public ProjectRepositoryArgs()
        {
        }
        public static new ProjectRepositoryArgs Empty => new ProjectRepositoryArgs();
    }

    public sealed class ProjectRepositoryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Project ID
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        /// <summary>
        /// Repository ID
        /// </summary>
        [Input("repositoryId")]
        public Input<int>? RepositoryId { get; set; }

        public ProjectRepositoryState()
        {
        }
        public static new ProjectRepositoryState Empty => new ProjectRepositoryState();
    }
}

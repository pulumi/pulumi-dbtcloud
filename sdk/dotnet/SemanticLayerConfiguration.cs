// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DbtCloud
{
    /// <summary>
    /// The resource allows basic configuration of the Semantic Layer for a specific project. For the feature to be completely functional, a Semantic Layer Credential is also required.
    /// See the documentationh ttps://docs.getdbt.com/docs/use-dbt-semantic-layer/dbt-sl for more information on the Semantic Layer.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DbtCloud = Pulumi.DbtCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new DbtCloud.SemanticLayerConfiguration("example", new()
    ///     {
    ///         ProjectId = projectId,
    ///         EnvironmentId = environmentId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// using import blocks (requires Terraform &gt;= 1.5)
    /// 
    /// import {
    /// 
    ///   to = dbtcloud_semantic_layer_configuration.example
    /// 
    ///   id = "project_id:id"
    /// 
    /// }
    /// 
    /// import {
    /// 
    ///   to = dbtcloud_semantic_layer_configuration.example
    /// 
    ///   id = "12345:5678"
    /// 
    /// }
    /// 
    /// using the older import command
    /// 
    /// ```sh
    /// $ pulumi import dbtcloud:index/semanticLayerConfiguration:SemanticLayerConfiguration example "project_id:id"
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import dbtcloud:index/semanticLayerConfiguration:SemanticLayerConfiguration example 12345:5678
    /// ```
    /// </summary>
    [DbtCloudResourceType("dbtcloud:index/semanticLayerConfiguration:SemanticLayerConfiguration")]
    public partial class SemanticLayerConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the environment
        /// </summary>
        [Output("environmentId")]
        public Output<int> EnvironmentId { get; private set; } = null!;

        /// <summary>
        /// The ID of the project
        /// </summary>
        [Output("projectId")]
        public Output<int> ProjectId { get; private set; } = null!;


        /// <summary>
        /// Create a SemanticLayerConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SemanticLayerConfiguration(string name, SemanticLayerConfigurationArgs args, CustomResourceOptions? options = null)
            : base("dbtcloud:index/semanticLayerConfiguration:SemanticLayerConfiguration", name, args ?? new SemanticLayerConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SemanticLayerConfiguration(string name, Input<string> id, SemanticLayerConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/semanticLayerConfiguration:SemanticLayerConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-dbtcloud",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SemanticLayerConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SemanticLayerConfiguration Get(string name, Input<string> id, SemanticLayerConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new SemanticLayerConfiguration(name, id, state, options);
        }
    }

    public sealed class SemanticLayerConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the environment
        /// </summary>
        [Input("environmentId", required: true)]
        public Input<int> EnvironmentId { get; set; } = null!;

        /// <summary>
        /// The ID of the project
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        public SemanticLayerConfigurationArgs()
        {
        }
        public static new SemanticLayerConfigurationArgs Empty => new SemanticLayerConfigurationArgs();
    }

    public sealed class SemanticLayerConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the environment
        /// </summary>
        [Input("environmentId")]
        public Input<int>? EnvironmentId { get; set; }

        /// <summary>
        /// The ID of the project
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        public SemanticLayerConfigurationState()
        {
        }
        public static new SemanticLayerConfigurationState Empty => new SemanticLayerConfigurationState();
    }
}

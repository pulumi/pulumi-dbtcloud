// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetEnvironmentsEnvironment {
    /**
     * Credential ID to create the environment with. A credential is not required for development environments but is required for deployment environments
     */
    credentialsId: number;
    /**
     * The custom branch name to use
     */
    customBranch: string;
    /**
     * Version number of dbt to use in this environment.
     */
    dbtVersion: string;
    /**
     * The type of deployment environment (currently 'production', 'staging' or empty)
     */
    deploymentType: string;
    /**
     * The ID of the environment
     */
    environmentId: number;
    /**
     * The ID of the extended attributes applied
     */
    extendedAttributesId: number;
    /**
     * The name of the environment
     */
    name: string;
    /**
     * The project ID to which the environment belong
     */
    projectId: number;
    /**
     * The type of environment (must be either development or deployment)
     */
    type: string;
    /**
     * Whether to use a custom git branch in this environment
     */
    useCustomBranch: boolean;
}

export interface GetGroupGroupPermission {
    /**
     * Whether access should be provided for all projects or not.
     */
    allProjects: boolean;
    /**
     * Set of permissions to apply. The permissions allowed are the same as the ones for the `dbtcloud.Group` resource.
     */
    permissionSet: string;
    /**
     * Project ID to apply this permission to for this group.
     */
    projectId: number;
    /**
     * What types of environments to apply Write permissions to.
     */
    writableEnvironmentCategories: string[];
}

export interface GetGroupUsersUser {
    email: string;
    id: number;
}

export interface GetJobJobCompletionTriggerCondition {
    /**
     * The ID of the job that would trigger this job after completion.
     */
    jobId: number;
    /**
     * The ID of the project where the trigger job is running in.
     */
    projectId: number;
    /**
     * List of statuses to trigger the job on.
     */
    statuses: string[];
}

export interface GetServiceTokenServiceTokenPermission {
    /**
     * Whether or not to apply this permission to all projects for this service token
     */
    allProjects: boolean;
    /**
     * Set of permissions to apply
     */
    permissionSet: string;
    /**
     * Project ID to apply this permission to for this service token
     */
    projectId: number;
}

export interface GroupGroupPermission {
    /**
     * Whether access should be provided for all projects or not.
     */
    allProjects: boolean;
    /**
     * Set of permissions to apply. The permissions allowed are the same as the ones for the `dbtcloud.Group` resource.
     */
    permissionSet: string;
    /**
     * Project ID to apply this permission to for this group.
     */
    projectId?: number;
    /**
     * What types of environments to apply Write permissions to.
     * Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
     * The values allowed are `all`, `development`, `staging`, `production` and `other`.
     * Not setting a value is the same as selecting `all`.
     * Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
     */
    writableEnvironmentCategories: string[];
}

export interface GroupPartialPermissionsGroupPermission {
    /**
     * Whether access should be provided for all projects or not.
     */
    allProjects: boolean;
    /**
     * Set of permissions to apply. The permissions allowed are the same as the ones for the `dbtcloud.Group` resource.
     */
    permissionSet: string;
    /**
     * Project ID to apply this permission to for this group.
     */
    projectId?: number;
    /**
     * What types of environments to apply Write permissions to.
     * Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
     * The values allowed are `all`, `development`, `staging`, `production` and `other`.
     * Not setting a value is the same as selecting `all`.
     * Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
     */
    writableEnvironmentCategories?: string[];
}

export interface JobJobCompletionTriggerCondition {
    /**
     * The ID of the job that would trigger this job after completion.
     */
    jobId: number;
    /**
     * The ID of the project where the trigger job is running in.
     */
    projectId: number;
    /**
     * List of statuses to trigger the job on. Possible values are `success`, `error` and `canceled`.
     */
    statuses: string[];
}

export interface ServiceTokenServiceTokenPermission {
    /**
     * Whether or not to apply this permission to all projects for this service token
     */
    allProjects: boolean;
    /**
     * Set of permissions to apply
     */
    permissionSet: string;
    /**
     * Project ID to apply this permission to for this service token
     */
    projectId?: number;
}


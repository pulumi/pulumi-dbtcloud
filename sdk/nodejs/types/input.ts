// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetServiceTokenServiceTokenPermission {
    /**
     * Whether or not to apply this permission to all projects for this service token
     */
    allProjects?: boolean;
    /**
     * Set of permissions to apply
     */
    permissionSet?: string;
    /**
     * Project ID to apply this permission to for this service token
     */
    projectId?: number;
    /**
     * What types of environments to apply Write permissions to.
     * Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
     * The values allowed are `all`, `development`, `staging`, `production` and `other`.
     * Not setting a value is the same as selecting `all`.
     * Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
     */
    writableEnvironmentCategories?: string[];
}

export interface GetServiceTokenServiceTokenPermissionArgs {
    /**
     * Whether or not to apply this permission to all projects for this service token
     */
    allProjects?: pulumi.Input<boolean>;
    /**
     * Set of permissions to apply
     */
    permissionSet?: pulumi.Input<string>;
    /**
     * Project ID to apply this permission to for this service token
     */
    projectId?: pulumi.Input<number>;
    /**
     * What types of environments to apply Write permissions to.
     * Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
     * The values allowed are `all`, `development`, `staging`, `production` and `other`.
     * Not setting a value is the same as selecting `all`.
     * Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
     */
    writableEnvironmentCategories?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GlobalConnectionBigquery {
    /**
     * OAuth Client ID
     */
    applicationId?: pulumi.Input<string>;
    /**
     * OAuth Client Secret
     */
    applicationSecret?: pulumi.Input<string>;
    /**
     * Auth Provider X509 Cert URL for the Service Account
     */
    authProviderX509CertUrl: pulumi.Input<string>;
    /**
     * Auth URI for the Service Account
     */
    authUri: pulumi.Input<string>;
    /**
     * Service Account email
     */
    clientEmail: pulumi.Input<string>;
    /**
     * Client ID of the Service Account
     */
    clientId: pulumi.Input<string>;
    /**
     * Client X509 Cert URL for the Service Account
     */
    clientX509CertUrl: pulumi.Input<string>;
    /**
     * Dataproc cluster name for PySpark workloads
     */
    dataprocClusterName?: pulumi.Input<string>;
    /**
     * Google Cloud region for PySpark workloads on Dataproc
     */
    dataprocRegion?: pulumi.Input<string>;
    /**
     * Project to bill for query execution
     */
    executionProject?: pulumi.Input<string>;
    /**
     * The GCP project ID to use for the connection
     */
    gcpProjectId: pulumi.Input<string>;
    /**
     * URI for a Google Cloud Storage bucket to host Python code executed via Datapro
     */
    gcsBucket?: pulumi.Input<string>;
    /**
     * Service Account to impersonate when running queries
     */
    impersonateServiceAccount?: pulumi.Input<string>;
    /**
     * Maximum timeout for the job creation step
     */
    jobCreationTimeoutSeconds?: pulumi.Input<number>;
    /**
     * Total number of seconds to wait while retrying the same query
     */
    jobRetryDeadlineSeconds?: pulumi.Input<number>;
    /**
     * Location to create new Datasets in
     */
    location?: pulumi.Input<string>;
    /**
     * Max number of bytes that can be billed for a given BigQuery query
     */
    maximumBytesBilled?: pulumi.Input<number>;
    /**
     * The priority with which to execute BigQuery queries (batch or interactive)
     */
    priority?: pulumi.Input<string>;
    /**
     * Private Key for the Service Account
     */
    privateKey: pulumi.Input<string>;
    /**
     * Private Key ID for the Service Account
     */
    privateKeyId: pulumi.Input<string>;
    /**
     * Number of retries for queries
     */
    retries?: pulumi.Input<number>;
    /**
     * OAuth scopes for the BigQuery connection
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Timeout in seconds for queries
     */
    timeoutSeconds?: pulumi.Input<number>;
    /**
     * Token URI for the Service Account
     */
    tokenUri: pulumi.Input<string>;
}

export interface GlobalConnectionSnowflake {
    /**
     * The Snowflake account name
     */
    account: pulumi.Input<string>;
    /**
     * Whether to allow Snowflake OAuth for the connection. If true, the `oauthClientId` and `oauthClientSecret` fields must be set
     */
    allowSso?: pulumi.Input<boolean>;
    /**
     * If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (> 4 hours)
     */
    clientSessionKeepAlive?: pulumi.Input<boolean>;
    /**
     * The default database for the connection
     */
    database: pulumi.Input<string>;
    /**
     * OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake
     */
    oauthClientId?: pulumi.Input<string>;
    /**
     * OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake
     */
    oauthClientSecret?: pulumi.Input<string>;
    /**
     * The Snowflake role to use when running queries on the connection
     */
    role?: pulumi.Input<string>;
    /**
     * The default Snowflake Warehouse to use for the connection
     */
    warehouse: pulumi.Input<string>;
}

export interface GroupGroupPermission {
    /**
     * Whether access should be provided for all projects or not.
     */
    allProjects: pulumi.Input<boolean>;
    /**
     * Set of permissions to apply. The permissions allowed are the same as the ones for the `dbtcloud.Group` resource.
     */
    permissionSet: pulumi.Input<string>;
    /**
     * Project ID to apply this permission to for this group.
     */
    projectId?: pulumi.Input<number>;
    /**
     * What types of environments to apply Write permissions to.
     * Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
     * The values allowed are `all`, `development`, `staging`, `production` and `other`.
     * Not setting a value is the same as selecting `all`.
     * Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
     */
    writableEnvironmentCategories?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GroupPartialPermissionsGroupPermission {
    /**
     * Whether access should be provided for all projects or not.
     */
    allProjects: pulumi.Input<boolean>;
    /**
     * Set of permissions to apply. The permissions allowed are the same as the ones for the `dbtcloud.Group` resource.
     */
    permissionSet: pulumi.Input<string>;
    /**
     * Project ID to apply this permission to for this group.
     */
    projectId?: pulumi.Input<number>;
    /**
     * What types of environments to apply Write permissions to.
     * Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
     * The values allowed are `all`, `development`, `staging`, `production` and `other`.
     * Not setting a value is the same as selecting `all`.
     * Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
     */
    writableEnvironmentCategories?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobJobCompletionTriggerCondition {
    /**
     * The ID of the job that would trigger this job after completion.
     */
    jobId: pulumi.Input<number>;
    /**
     * The ID of the project where the trigger job is running in.
     */
    projectId: pulumi.Input<number>;
    /**
     * List of statuses to trigger the job on. Possible values are `success`, `error` and `canceled`.
     */
    statuses: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ServiceTokenServiceTokenPermission {
    /**
     * Whether or not to apply this permission to all projects for this service token
     */
    allProjects: pulumi.Input<boolean>;
    /**
     * Set of permissions to apply
     */
    permissionSet: pulumi.Input<string>;
    /**
     * Project ID to apply this permission to for this service token
     */
    projectId?: pulumi.Input<number>;
    /**
     * What types of environments to apply Write permissions to.
     * Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
     * The values allowed are `all`, `development`, `staging`, `production` and `other`.
     * Not setting a value is the same as selecting `all`.
     * Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
     */
    writableEnvironmentCategories?: pulumi.Input<pulumi.Input<string>[]>;
}

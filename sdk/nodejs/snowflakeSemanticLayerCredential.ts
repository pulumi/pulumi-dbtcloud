// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Snowflake credential resource. This resource is composed of a Snowflake credential and a Semantic Layer configuration. It is used to create a Snowflake credential for the Semantic Layer.
 *
 * ## Import
 *
 * using import blocks (requires Terraform >= 1.5)
 *
 * import {
 *
 *   to = dbtcloud_snowflake_semantic_layer_credential.example
 *
 *   id = "credential_id"
 *
 * }
 *
 * import {
 *
 *   to = dbtcloud_snowflake_semantic_layer_credential.example
 *
 *   id = "12345"
 *
 * }
 *
 * using the older import command
 *
 * ```sh
 * $ pulumi import dbtcloud:index/snowflakeSemanticLayerCredential:SnowflakeSemanticLayerCredential example "credential_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/snowflakeSemanticLayerCredential:SnowflakeSemanticLayerCredential example 12345
 * ```
 */
export class SnowflakeSemanticLayerCredential extends pulumi.CustomResource {
    /**
     * Get an existing SnowflakeSemanticLayerCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnowflakeSemanticLayerCredentialState, opts?: pulumi.CustomResourceOptions): SnowflakeSemanticLayerCredential {
        return new SnowflakeSemanticLayerCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/snowflakeSemanticLayerCredential:SnowflakeSemanticLayerCredential';

    /**
     * Returns true if the given object is an instance of SnowflakeSemanticLayerCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnowflakeSemanticLayerCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnowflakeSemanticLayerCredential.__pulumiType;
    }

    /**
     * Semantic Layer credenttial configuration details.
     */
    public readonly configuration!: pulumi.Output<outputs.SnowflakeSemanticLayerCredentialConfiguration>;
    /**
     * Snowflake credential details, but used in the context of the Semantic Layer.
     */
    public readonly credential!: pulumi.Output<outputs.SnowflakeSemanticLayerCredentialCredential>;

    /**
     * Create a SnowflakeSemanticLayerCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnowflakeSemanticLayerCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnowflakeSemanticLayerCredentialArgs | SnowflakeSemanticLayerCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnowflakeSemanticLayerCredentialState | undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["credential"] = state ? state.credential : undefined;
        } else {
            const args = argsOrState as SnowflakeSemanticLayerCredentialArgs | undefined;
            if ((!args || args.configuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configuration'");
            }
            if ((!args || args.credential === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credential'");
            }
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["credential"] = args ? args.credential : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnowflakeSemanticLayerCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SnowflakeSemanticLayerCredential resources.
 */
export interface SnowflakeSemanticLayerCredentialState {
    /**
     * Semantic Layer credenttial configuration details.
     */
    configuration?: pulumi.Input<inputs.SnowflakeSemanticLayerCredentialConfiguration>;
    /**
     * Snowflake credential details, but used in the context of the Semantic Layer.
     */
    credential?: pulumi.Input<inputs.SnowflakeSemanticLayerCredentialCredential>;
}

/**
 * The set of arguments for constructing a SnowflakeSemanticLayerCredential resource.
 */
export interface SnowflakeSemanticLayerCredentialArgs {
    /**
     * Semantic Layer credenttial configuration details.
     */
    configuration: pulumi.Input<inputs.SnowflakeSemanticLayerCredentialConfiguration>;
    /**
     * Snowflake credential details, but used in the context of the Semantic Layer.
     */
    credential: pulumi.Input<inputs.SnowflakeSemanticLayerCredentialCredential>;
}

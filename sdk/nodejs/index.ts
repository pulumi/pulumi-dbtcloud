// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccountFeaturesArgs, AccountFeaturesState } from "./accountFeatures";
export type AccountFeatures = import("./accountFeatures").AccountFeatures;
export const AccountFeatures: typeof import("./accountFeatures").AccountFeatures = null as any;
utilities.lazyLoad(exports, ["AccountFeatures"], () => require("./accountFeatures"));

export { AthenaCredentialArgs, AthenaCredentialState } from "./athenaCredential";
export type AthenaCredential = import("./athenaCredential").AthenaCredential;
export const AthenaCredential: typeof import("./athenaCredential").AthenaCredential = null as any;
utilities.lazyLoad(exports, ["AthenaCredential"], () => require("./athenaCredential"));

export { BigQueryConnectionArgs, BigQueryConnectionState } from "./bigQueryConnection";
export type BigQueryConnection = import("./bigQueryConnection").BigQueryConnection;
export const BigQueryConnection: typeof import("./bigQueryConnection").BigQueryConnection = null as any;
utilities.lazyLoad(exports, ["BigQueryConnection"], () => require("./bigQueryConnection"));

export { BigQueryCredentialArgs, BigQueryCredentialState } from "./bigQueryCredential";
export type BigQueryCredential = import("./bigQueryCredential").BigQueryCredential;
export const BigQueryCredential: typeof import("./bigQueryCredential").BigQueryCredential = null as any;
utilities.lazyLoad(exports, ["BigQueryCredential"], () => require("./bigQueryCredential"));

export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { DatabricksCredentialArgs, DatabricksCredentialState } from "./databricksCredential";
export type DatabricksCredential = import("./databricksCredential").DatabricksCredential;
export const DatabricksCredential: typeof import("./databricksCredential").DatabricksCredential = null as any;
utilities.lazyLoad(exports, ["DatabricksCredential"], () => require("./databricksCredential"));

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { EnvironmentVariableArgs, EnvironmentVariableState } from "./environmentVariable";
export type EnvironmentVariable = import("./environmentVariable").EnvironmentVariable;
export const EnvironmentVariable: typeof import("./environmentVariable").EnvironmentVariable = null as any;
utilities.lazyLoad(exports, ["EnvironmentVariable"], () => require("./environmentVariable"));

export { EnvironmentVariableJobOverrideArgs, EnvironmentVariableJobOverrideState } from "./environmentVariableJobOverride";
export type EnvironmentVariableJobOverride = import("./environmentVariableJobOverride").EnvironmentVariableJobOverride;
export const EnvironmentVariableJobOverride: typeof import("./environmentVariableJobOverride").EnvironmentVariableJobOverride = null as any;
utilities.lazyLoad(exports, ["EnvironmentVariableJobOverride"], () => require("./environmentVariableJobOverride"));

export { ExtendedAttributesArgs, ExtendedAttributesState } from "./extendedAttributes";
export type ExtendedAttributes = import("./extendedAttributes").ExtendedAttributes;
export const ExtendedAttributes: typeof import("./extendedAttributes").ExtendedAttributes = null as any;
utilities.lazyLoad(exports, ["ExtendedAttributes"], () => require("./extendedAttributes"));

export { FabricConnectionArgs, FabricConnectionState } from "./fabricConnection";
export type FabricConnection = import("./fabricConnection").FabricConnection;
export const FabricConnection: typeof import("./fabricConnection").FabricConnection = null as any;
utilities.lazyLoad(exports, ["FabricConnection"], () => require("./fabricConnection"));

export { FabricCredentialArgs, FabricCredentialState } from "./fabricCredential";
export type FabricCredential = import("./fabricCredential").FabricCredential;
export const FabricCredential: typeof import("./fabricCredential").FabricCredential = null as any;
utilities.lazyLoad(exports, ["FabricCredential"], () => require("./fabricCredential"));

export { GetAthenaCredentialArgs, GetAthenaCredentialResult, GetAthenaCredentialOutputArgs } from "./getAthenaCredential";
export const getAthenaCredential: typeof import("./getAthenaCredential").getAthenaCredential = null as any;
export const getAthenaCredentialOutput: typeof import("./getAthenaCredential").getAthenaCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getAthenaCredential","getAthenaCredentialOutput"], () => require("./getAthenaCredential"));

export { GetAzureDevOpsProjectArgs, GetAzureDevOpsProjectResult, GetAzureDevOpsProjectOutputArgs } from "./getAzureDevOpsProject";
export const getAzureDevOpsProject: typeof import("./getAzureDevOpsProject").getAzureDevOpsProject = null as any;
export const getAzureDevOpsProjectOutput: typeof import("./getAzureDevOpsProject").getAzureDevOpsProjectOutput = null as any;
utilities.lazyLoad(exports, ["getAzureDevOpsProject","getAzureDevOpsProjectOutput"], () => require("./getAzureDevOpsProject"));

export { GetAzureDevOpsRepositoryArgs, GetAzureDevOpsRepositoryResult, GetAzureDevOpsRepositoryOutputArgs } from "./getAzureDevOpsRepository";
export const getAzureDevOpsRepository: typeof import("./getAzureDevOpsRepository").getAzureDevOpsRepository = null as any;
export const getAzureDevOpsRepositoryOutput: typeof import("./getAzureDevOpsRepository").getAzureDevOpsRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getAzureDevOpsRepository","getAzureDevOpsRepositoryOutput"], () => require("./getAzureDevOpsRepository"));

export { GetBigQueryConnectionArgs, GetBigQueryConnectionResult, GetBigQueryConnectionOutputArgs } from "./getBigQueryConnection";
export const getBigQueryConnection: typeof import("./getBigQueryConnection").getBigQueryConnection = null as any;
export const getBigQueryConnectionOutput: typeof import("./getBigQueryConnection").getBigQueryConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getBigQueryConnection","getBigQueryConnectionOutput"], () => require("./getBigQueryConnection"));

export { GetBigQueryCredentialArgs, GetBigQueryCredentialResult, GetBigQueryCredentialOutputArgs } from "./getBigQueryCredential";
export const getBigQueryCredential: typeof import("./getBigQueryCredential").getBigQueryCredential = null as any;
export const getBigQueryCredentialOutput: typeof import("./getBigQueryCredential").getBigQueryCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getBigQueryCredential","getBigQueryCredentialOutput"], () => require("./getBigQueryCredential"));

export { GetConnectionArgs, GetConnectionResult, GetConnectionOutputArgs } from "./getConnection";
export const getConnection: typeof import("./getConnection").getConnection = null as any;
export const getConnectionOutput: typeof import("./getConnection").getConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getConnection","getConnectionOutput"], () => require("./getConnection"));

export { GetDatabricksCredentialArgs, GetDatabricksCredentialResult, GetDatabricksCredentialOutputArgs } from "./getDatabricksCredential";
export const getDatabricksCredential: typeof import("./getDatabricksCredential").getDatabricksCredential = null as any;
export const getDatabricksCredentialOutput: typeof import("./getDatabricksCredential").getDatabricksCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getDatabricksCredential","getDatabricksCredentialOutput"], () => require("./getDatabricksCredential"));

export { GetEnvironmentArgs, GetEnvironmentResult, GetEnvironmentOutputArgs } from "./getEnvironment";
export const getEnvironment: typeof import("./getEnvironment").getEnvironment = null as any;
export const getEnvironmentOutput: typeof import("./getEnvironment").getEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironment","getEnvironmentOutput"], () => require("./getEnvironment"));

export { GetEnvironmentVariableArgs, GetEnvironmentVariableResult, GetEnvironmentVariableOutputArgs } from "./getEnvironmentVariable";
export const getEnvironmentVariable: typeof import("./getEnvironmentVariable").getEnvironmentVariable = null as any;
export const getEnvironmentVariableOutput: typeof import("./getEnvironmentVariable").getEnvironmentVariableOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironmentVariable","getEnvironmentVariableOutput"], () => require("./getEnvironmentVariable"));

export { GetEnvironmentsArgs, GetEnvironmentsResult, GetEnvironmentsOutputArgs } from "./getEnvironments";
export const getEnvironments: typeof import("./getEnvironments").getEnvironments = null as any;
export const getEnvironmentsOutput: typeof import("./getEnvironments").getEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironments","getEnvironmentsOutput"], () => require("./getEnvironments"));

export { GetExtendedAttributesArgs, GetExtendedAttributesResult, GetExtendedAttributesOutputArgs } from "./getExtendedAttributes";
export const getExtendedAttributes: typeof import("./getExtendedAttributes").getExtendedAttributes = null as any;
export const getExtendedAttributesOutput: typeof import("./getExtendedAttributes").getExtendedAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getExtendedAttributes","getExtendedAttributesOutput"], () => require("./getExtendedAttributes"));

export { GetGlobalConnectionArgs, GetGlobalConnectionResult, GetGlobalConnectionOutputArgs } from "./getGlobalConnection";
export const getGlobalConnection: typeof import("./getGlobalConnection").getGlobalConnection = null as any;
export const getGlobalConnectionOutput: typeof import("./getGlobalConnection").getGlobalConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalConnection","getGlobalConnectionOutput"], () => require("./getGlobalConnection"));

export { GetGlobalConnectionsResult } from "./getGlobalConnections";
export const getGlobalConnections: typeof import("./getGlobalConnections").getGlobalConnections = null as any;
export const getGlobalConnectionsOutput: typeof import("./getGlobalConnections").getGlobalConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalConnections","getGlobalConnectionsOutput"], () => require("./getGlobalConnections"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetGroupUsersArgs, GetGroupUsersResult, GetGroupUsersOutputArgs } from "./getGroupUsers";
export const getGroupUsers: typeof import("./getGroupUsers").getGroupUsers = null as any;
export const getGroupUsersOutput: typeof import("./getGroupUsers").getGroupUsersOutput = null as any;
utilities.lazyLoad(exports, ["getGroupUsers","getGroupUsersOutput"], () => require("./getGroupUsers"));

export { GetJobArgs, GetJobResult, GetJobOutputArgs } from "./getJob";
export const getJob: typeof import("./getJob").getJob = null as any;
export const getJobOutput: typeof import("./getJob").getJobOutput = null as any;
utilities.lazyLoad(exports, ["getJob","getJobOutput"], () => require("./getJob"));

export { GetJobsArgs, GetJobsResult, GetJobsOutputArgs } from "./getJobs";
export const getJobs: typeof import("./getJobs").getJobs = null as any;
export const getJobsOutput: typeof import("./getJobs").getJobsOutput = null as any;
utilities.lazyLoad(exports, ["getJobs","getJobsOutput"], () => require("./getJobs"));

export { GetModelNotificationsArgs, GetModelNotificationsResult, GetModelNotificationsOutputArgs } from "./getModelNotifications";
export const getModelNotifications: typeof import("./getModelNotifications").getModelNotifications = null as any;
export const getModelNotificationsOutput: typeof import("./getModelNotifications").getModelNotificationsOutput = null as any;
utilities.lazyLoad(exports, ["getModelNotifications","getModelNotificationsOutput"], () => require("./getModelNotifications"));

export { GetNotificationArgs, GetNotificationResult, GetNotificationOutputArgs } from "./getNotification";
export const getNotification: typeof import("./getNotification").getNotification = null as any;
export const getNotificationOutput: typeof import("./getNotification").getNotificationOutput = null as any;
utilities.lazyLoad(exports, ["getNotification","getNotificationOutput"], () => require("./getNotification"));

export { GetPostgresCredentialArgs, GetPostgresCredentialResult, GetPostgresCredentialOutputArgs } from "./getPostgresCredential";
export const getPostgresCredential: typeof import("./getPostgresCredential").getPostgresCredential = null as any;
export const getPostgresCredentialOutput: typeof import("./getPostgresCredential").getPostgresCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresCredential","getPostgresCredentialOutput"], () => require("./getPostgresCredential"));

export { GetPrivatelinkEndpointArgs, GetPrivatelinkEndpointResult, GetPrivatelinkEndpointOutputArgs } from "./getPrivatelinkEndpoint";
export const getPrivatelinkEndpoint: typeof import("./getPrivatelinkEndpoint").getPrivatelinkEndpoint = null as any;
export const getPrivatelinkEndpointOutput: typeof import("./getPrivatelinkEndpoint").getPrivatelinkEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getPrivatelinkEndpoint","getPrivatelinkEndpointOutput"], () => require("./getPrivatelinkEndpoint"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectsArgs, GetProjectsResult, GetProjectsOutputArgs } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { GetRepositoryArgs, GetRepositoryResult, GetRepositoryOutputArgs } from "./getRepository";
export const getRepository: typeof import("./getRepository").getRepository = null as any;
export const getRepositoryOutput: typeof import("./getRepository").getRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRepository","getRepositoryOutput"], () => require("./getRepository"));

export { GetServiceTokenArgs, GetServiceTokenResult, GetServiceTokenOutputArgs } from "./getServiceToken";
export const getServiceToken: typeof import("./getServiceToken").getServiceToken = null as any;
export const getServiceTokenOutput: typeof import("./getServiceToken").getServiceTokenOutput = null as any;
utilities.lazyLoad(exports, ["getServiceToken","getServiceTokenOutput"], () => require("./getServiceToken"));

export { GetSnowflakeCredentialArgs, GetSnowflakeCredentialResult, GetSnowflakeCredentialOutputArgs } from "./getSnowflakeCredential";
export const getSnowflakeCredential: typeof import("./getSnowflakeCredential").getSnowflakeCredential = null as any;
export const getSnowflakeCredentialOutput: typeof import("./getSnowflakeCredential").getSnowflakeCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getSnowflakeCredential","getSnowflakeCredentialOutput"], () => require("./getSnowflakeCredential"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserGroupsArgs, GetUserGroupsResult, GetUserGroupsOutputArgs } from "./getUserGroups";
export const getUserGroups: typeof import("./getUserGroups").getUserGroups = null as any;
export const getUserGroupsOutput: typeof import("./getUserGroups").getUserGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getUserGroups","getUserGroupsOutput"], () => require("./getUserGroups"));

export { GetUsersResult } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GetWebhookArgs, GetWebhookResult, GetWebhookOutputArgs } from "./getWebhook";
export const getWebhook: typeof import("./getWebhook").getWebhook = null as any;
export const getWebhookOutput: typeof import("./getWebhook").getWebhookOutput = null as any;
utilities.lazyLoad(exports, ["getWebhook","getWebhookOutput"], () => require("./getWebhook"));

export { GlobalConnectionArgs, GlobalConnectionState } from "./globalConnection";
export type GlobalConnection = import("./globalConnection").GlobalConnection;
export const GlobalConnection: typeof import("./globalConnection").GlobalConnection = null as any;
utilities.lazyLoad(exports, ["GlobalConnection"], () => require("./globalConnection"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupPartialPermissionsArgs, GroupPartialPermissionsState } from "./groupPartialPermissions";
export type GroupPartialPermissions = import("./groupPartialPermissions").GroupPartialPermissions;
export const GroupPartialPermissions: typeof import("./groupPartialPermissions").GroupPartialPermissions = null as any;
utilities.lazyLoad(exports, ["GroupPartialPermissions"], () => require("./groupPartialPermissions"));

export { IpRestrictionsRuleArgs, IpRestrictionsRuleState } from "./ipRestrictionsRule";
export type IpRestrictionsRule = import("./ipRestrictionsRule").IpRestrictionsRule;
export const IpRestrictionsRule: typeof import("./ipRestrictionsRule").IpRestrictionsRule = null as any;
utilities.lazyLoad(exports, ["IpRestrictionsRule"], () => require("./ipRestrictionsRule"));

export { JobArgs, JobState } from "./job";
export type Job = import("./job").Job;
export const Job: typeof import("./job").Job = null as any;
utilities.lazyLoad(exports, ["Job"], () => require("./job"));

export { LicenseMapArgs, LicenseMapState } from "./licenseMap";
export type LicenseMap = import("./licenseMap").LicenseMap;
export const LicenseMap: typeof import("./licenseMap").LicenseMap = null as any;
utilities.lazyLoad(exports, ["LicenseMap"], () => require("./licenseMap"));

export { LineageIntegrationArgs, LineageIntegrationState } from "./lineageIntegration";
export type LineageIntegration = import("./lineageIntegration").LineageIntegration;
export const LineageIntegration: typeof import("./lineageIntegration").LineageIntegration = null as any;
utilities.lazyLoad(exports, ["LineageIntegration"], () => require("./lineageIntegration"));

export { ModelNotificationsArgs, ModelNotificationsState } from "./modelNotifications";
export type ModelNotifications = import("./modelNotifications").ModelNotifications;
export const ModelNotifications: typeof import("./modelNotifications").ModelNotifications = null as any;
utilities.lazyLoad(exports, ["ModelNotifications"], () => require("./modelNotifications"));

export { NotificationArgs, NotificationState } from "./notification";
export type Notification = import("./notification").Notification;
export const Notification: typeof import("./notification").Notification = null as any;
utilities.lazyLoad(exports, ["Notification"], () => require("./notification"));

export { OauthConfigurationArgs, OauthConfigurationState } from "./oauthConfiguration";
export type OauthConfiguration = import("./oauthConfiguration").OauthConfiguration;
export const OauthConfiguration: typeof import("./oauthConfiguration").OauthConfiguration = null as any;
utilities.lazyLoad(exports, ["OauthConfiguration"], () => require("./oauthConfiguration"));

export { PartialLicenseMapArgs, PartialLicenseMapState } from "./partialLicenseMap";
export type PartialLicenseMap = import("./partialLicenseMap").PartialLicenseMap;
export const PartialLicenseMap: typeof import("./partialLicenseMap").PartialLicenseMap = null as any;
utilities.lazyLoad(exports, ["PartialLicenseMap"], () => require("./partialLicenseMap"));

export { PartialNotificationArgs, PartialNotificationState } from "./partialNotification";
export type PartialNotification = import("./partialNotification").PartialNotification;
export const PartialNotification: typeof import("./partialNotification").PartialNotification = null as any;
utilities.lazyLoad(exports, ["PartialNotification"], () => require("./partialNotification"));

export { PostgresCredentialArgs, PostgresCredentialState } from "./postgresCredential";
export type PostgresCredential = import("./postgresCredential").PostgresCredential;
export const PostgresCredential: typeof import("./postgresCredential").PostgresCredential = null as any;
utilities.lazyLoad(exports, ["PostgresCredential"], () => require("./postgresCredential"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectArtefactsArgs, ProjectArtefactsState } from "./projectArtefacts";
export type ProjectArtefacts = import("./projectArtefacts").ProjectArtefacts;
export const ProjectArtefacts: typeof import("./projectArtefacts").ProjectArtefacts = null as any;
utilities.lazyLoad(exports, ["ProjectArtefacts"], () => require("./projectArtefacts"));

export { ProjectConnectionArgs, ProjectConnectionState } from "./projectConnection";
export type ProjectConnection = import("./projectConnection").ProjectConnection;
export const ProjectConnection: typeof import("./projectConnection").ProjectConnection = null as any;
utilities.lazyLoad(exports, ["ProjectConnection"], () => require("./projectConnection"));

export { ProjectRepositoryArgs, ProjectRepositoryState } from "./projectRepository";
export type ProjectRepository = import("./projectRepository").ProjectRepository;
export const ProjectRepository: typeof import("./projectRepository").ProjectRepository = null as any;
utilities.lazyLoad(exports, ["ProjectRepository"], () => require("./projectRepository"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RepositoryArgs, RepositoryState } from "./repository";
export type Repository = import("./repository").Repository;
export const Repository: typeof import("./repository").Repository = null as any;
utilities.lazyLoad(exports, ["Repository"], () => require("./repository"));

export { ServiceTokenArgs, ServiceTokenState } from "./serviceToken";
export type ServiceToken = import("./serviceToken").ServiceToken;
export const ServiceToken: typeof import("./serviceToken").ServiceToken = null as any;
utilities.lazyLoad(exports, ["ServiceToken"], () => require("./serviceToken"));

export { SnowflakeCredentialArgs, SnowflakeCredentialState } from "./snowflakeCredential";
export type SnowflakeCredential = import("./snowflakeCredential").SnowflakeCredential;
export const SnowflakeCredential: typeof import("./snowflakeCredential").SnowflakeCredential = null as any;
utilities.lazyLoad(exports, ["SnowflakeCredential"], () => require("./snowflakeCredential"));

export { UserGroupsArgs, UserGroupsState } from "./userGroups";
export type UserGroups = import("./userGroups").UserGroups;
export const UserGroups: typeof import("./userGroups").UserGroups = null as any;
utilities.lazyLoad(exports, ["UserGroups"], () => require("./userGroups"));

export { WebhookArgs, WebhookState } from "./webhook";
export type Webhook = import("./webhook").Webhook;
export const Webhook: typeof import("./webhook").Webhook = null as any;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "dbtcloud:index/accountFeatures:AccountFeatures":
                return new AccountFeatures(name, <any>undefined, { urn })
            case "dbtcloud:index/athenaCredential:AthenaCredential":
                return new AthenaCredential(name, <any>undefined, { urn })
            case "dbtcloud:index/bigQueryConnection:BigQueryConnection":
                return new BigQueryConnection(name, <any>undefined, { urn })
            case "dbtcloud:index/bigQueryCredential:BigQueryCredential":
                return new BigQueryCredential(name, <any>undefined, { urn })
            case "dbtcloud:index/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "dbtcloud:index/databricksCredential:DatabricksCredential":
                return new DatabricksCredential(name, <any>undefined, { urn })
            case "dbtcloud:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "dbtcloud:index/environmentVariable:EnvironmentVariable":
                return new EnvironmentVariable(name, <any>undefined, { urn })
            case "dbtcloud:index/environmentVariableJobOverride:EnvironmentVariableJobOverride":
                return new EnvironmentVariableJobOverride(name, <any>undefined, { urn })
            case "dbtcloud:index/extendedAttributes:ExtendedAttributes":
                return new ExtendedAttributes(name, <any>undefined, { urn })
            case "dbtcloud:index/fabricConnection:FabricConnection":
                return new FabricConnection(name, <any>undefined, { urn })
            case "dbtcloud:index/fabricCredential:FabricCredential":
                return new FabricCredential(name, <any>undefined, { urn })
            case "dbtcloud:index/globalConnection:GlobalConnection":
                return new GlobalConnection(name, <any>undefined, { urn })
            case "dbtcloud:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "dbtcloud:index/groupPartialPermissions:GroupPartialPermissions":
                return new GroupPartialPermissions(name, <any>undefined, { urn })
            case "dbtcloud:index/ipRestrictionsRule:IpRestrictionsRule":
                return new IpRestrictionsRule(name, <any>undefined, { urn })
            case "dbtcloud:index/job:Job":
                return new Job(name, <any>undefined, { urn })
            case "dbtcloud:index/licenseMap:LicenseMap":
                return new LicenseMap(name, <any>undefined, { urn })
            case "dbtcloud:index/lineageIntegration:LineageIntegration":
                return new LineageIntegration(name, <any>undefined, { urn })
            case "dbtcloud:index/modelNotifications:ModelNotifications":
                return new ModelNotifications(name, <any>undefined, { urn })
            case "dbtcloud:index/notification:Notification":
                return new Notification(name, <any>undefined, { urn })
            case "dbtcloud:index/oauthConfiguration:OauthConfiguration":
                return new OauthConfiguration(name, <any>undefined, { urn })
            case "dbtcloud:index/partialLicenseMap:PartialLicenseMap":
                return new PartialLicenseMap(name, <any>undefined, { urn })
            case "dbtcloud:index/partialNotification:PartialNotification":
                return new PartialNotification(name, <any>undefined, { urn })
            case "dbtcloud:index/postgresCredential:PostgresCredential":
                return new PostgresCredential(name, <any>undefined, { urn })
            case "dbtcloud:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "dbtcloud:index/projectArtefacts:ProjectArtefacts":
                return new ProjectArtefacts(name, <any>undefined, { urn })
            case "dbtcloud:index/projectConnection:ProjectConnection":
                return new ProjectConnection(name, <any>undefined, { urn })
            case "dbtcloud:index/projectRepository:ProjectRepository":
                return new ProjectRepository(name, <any>undefined, { urn })
            case "dbtcloud:index/repository:Repository":
                return new Repository(name, <any>undefined, { urn })
            case "dbtcloud:index/serviceToken:ServiceToken":
                return new ServiceToken(name, <any>undefined, { urn })
            case "dbtcloud:index/snowflakeCredential:SnowflakeCredential":
                return new SnowflakeCredential(name, <any>undefined, { urn })
            case "dbtcloud:index/userGroups:UserGroups":
                return new UserGroups(name, <any>undefined, { urn })
            case "dbtcloud:index/webhook:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("dbtcloud", "index/accountFeatures", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/athenaCredential", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/bigQueryConnection", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/bigQueryCredential", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/connection", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/databricksCredential", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/environment", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/environmentVariable", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/environmentVariableJobOverride", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/extendedAttributes", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/fabricConnection", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/fabricCredential", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/globalConnection", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/group", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/groupPartialPermissions", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/ipRestrictionsRule", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/job", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/licenseMap", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/lineageIntegration", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/modelNotifications", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/notification", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/oauthConfiguration", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/partialLicenseMap", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/partialNotification", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/postgresCredential", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/project", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/projectArtefacts", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/projectConnection", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/projectRepository", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/repository", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/serviceToken", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/snowflakeCredential", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/userGroups", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/webhook", _module)
pulumi.runtime.registerResourcePackage("dbtcloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:dbtcloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The resource allows basic configuration of the Semantic Layer for a specific project. For the feature to be completely functional, a Semantic Layer Credential is also required.
 * See the documentationh ttps://docs.getdbt.com/docs/use-dbt-semantic-layer/dbt-sl for more information on the Semantic Layer.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@pulumi/dbtcloud";
 *
 * const example = new dbtcloud.SemanticLayerConfiguration("example", {
 *     projectId: projectId,
 *     environmentId: environmentId,
 * });
 * ```
 *
 * ## Import
 *
 * using import blocks (requires Terraform >= 1.5)
 *
 * import {
 *
 *   to = dbtcloud_semantic_layer_configuration.example
 *
 *   id = "project_id:id"
 *
 * }
 *
 * import {
 *
 *   to = dbtcloud_semantic_layer_configuration.example
 *
 *   id = "12345:5678"
 *
 * }
 *
 * using the older import command
 *
 * ```sh
 * $ pulumi import dbtcloud:index/semanticLayerConfiguration:SemanticLayerConfiguration example "project_id:id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/semanticLayerConfiguration:SemanticLayerConfiguration example 12345:5678
 * ```
 */
export class SemanticLayerConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing SemanticLayerConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SemanticLayerConfigurationState, opts?: pulumi.CustomResourceOptions): SemanticLayerConfiguration {
        return new SemanticLayerConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/semanticLayerConfiguration:SemanticLayerConfiguration';

    /**
     * Returns true if the given object is an instance of SemanticLayerConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SemanticLayerConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SemanticLayerConfiguration.__pulumiType;
    }

    /**
     * The ID of the environment
     */
    declare public readonly environmentId: pulumi.Output<number>;
    /**
     * The ID of the project
     */
    declare public readonly projectId: pulumi.Output<number>;

    /**
     * Create a SemanticLayerConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SemanticLayerConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SemanticLayerConfigurationArgs | SemanticLayerConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SemanticLayerConfigurationState | undefined;
            resourceInputs["environmentId"] = state?.environmentId;
            resourceInputs["projectId"] = state?.projectId;
        } else {
            const args = argsOrState as SemanticLayerConfigurationArgs | undefined;
            if (args?.environmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["environmentId"] = args?.environmentId;
            resourceInputs["projectId"] = args?.projectId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SemanticLayerConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SemanticLayerConfiguration resources.
 */
export interface SemanticLayerConfigurationState {
    /**
     * The ID of the environment
     */
    environmentId?: pulumi.Input<number>;
    /**
     * The ID of the project
     */
    projectId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SemanticLayerConfiguration resource.
 */
export interface SemanticLayerConfigurationArgs {
    /**
     * The ID of the environment
     */
    environmentId: pulumi.Input<number>;
    /**
     * The ID of the project
     */
    projectId: pulumi.Input<number>;
}

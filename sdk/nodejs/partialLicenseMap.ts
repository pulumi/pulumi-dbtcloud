// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@pulumi/dbtcloud";
 *
 * // Developer license group mapping
 * const devLicenseMap = new dbtcloud.PartialLicenseMap("dev_license_map", {
 *     licenseType: "developer",
 *     ssoLicenseMappingGroups: ["DEV-SSO-GROUP"],
 * });
 * // Read-only license mapping
 * const readOnlyLicenseMap = new dbtcloud.PartialLicenseMap("read_only_license_map", {
 *     licenseType: "read_only",
 *     ssoLicenseMappingGroups: ["READ-ONLY-SSO-GROUP"],
 * });
 * // IT license mapping
 * const itLicenseMap = new dbtcloud.PartialLicenseMap("it_license_map", {
 *     licenseType: "it",
 *     ssoLicenseMappingGroups: ["IT-SSO-GROUP"],
 * });
 * ```
 */
export class PartialLicenseMap extends pulumi.CustomResource {
    /**
     * Get an existing PartialLicenseMap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PartialLicenseMapState, opts?: pulumi.CustomResourceOptions): PartialLicenseMap {
        return new PartialLicenseMap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/partialLicenseMap:PartialLicenseMap';

    /**
     * Returns true if the given object is an instance of PartialLicenseMap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PartialLicenseMap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PartialLicenseMap.__pulumiType;
    }

    /**
     * The license type to update
     */
    declare public readonly licenseType: pulumi.Output<string>;
    /**
     * List of SSO groups to map to the license type.
     */
    declare public readonly ssoLicenseMappingGroups: pulumi.Output<string[]>;

    /**
     * Create a PartialLicenseMap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PartialLicenseMapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PartialLicenseMapArgs | PartialLicenseMapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PartialLicenseMapState | undefined;
            resourceInputs["licenseType"] = state?.licenseType;
            resourceInputs["ssoLicenseMappingGroups"] = state?.ssoLicenseMappingGroups;
        } else {
            const args = argsOrState as PartialLicenseMapArgs | undefined;
            if (args?.licenseType === undefined && !opts.urn) {
                throw new Error("Missing required property 'licenseType'");
            }
            if (args?.ssoLicenseMappingGroups === undefined && !opts.urn) {
                throw new Error("Missing required property 'ssoLicenseMappingGroups'");
            }
            resourceInputs["licenseType"] = args?.licenseType;
            resourceInputs["ssoLicenseMappingGroups"] = args?.ssoLicenseMappingGroups;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PartialLicenseMap.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PartialLicenseMap resources.
 */
export interface PartialLicenseMapState {
    /**
     * The license type to update
     */
    licenseType?: pulumi.Input<string>;
    /**
     * List of SSO groups to map to the license type.
     */
    ssoLicenseMappingGroups?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a PartialLicenseMap resource.
 */
export interface PartialLicenseMapArgs {
    /**
     * The license type to update
     */
    licenseType: pulumi.Input<string>;
    /**
     * List of SSO groups to map to the license type.
     */
    ssoLicenseMappingGroups: pulumi.Input<pulumi.Input<string>[]>;
}

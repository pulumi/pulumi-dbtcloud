// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Athena credential resource
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@pulumi/dbtcloud";
 *
 * const example = new dbtcloud.AthenaCredential("example", {
 *     projectId: exampleDbtcloudProject.id,
 *     awsAccessKeyId: "your-access-key-id",
 *     awsSecretAccessKey: "your-secret-access-key",
 *     schema: "your_schema",
 * });
 * ```
 *
 * ## Import
 *
 * using  import blocks (requires Terraform >= 1.5)
 *
 * import {
 *
 *   to = dbtcloud_athena_credential.my_athena_credential
 *
 *   id = "project_id:credential_id"
 *
 * }
 *
 * import {
 *
 *   to = dbtcloud_athena_credential.my_athena_credential
 *
 *   id = "12345:6789"
 *
 * }
 *
 * using the older import command
 *
 * ```sh
 * $ pulumi import dbtcloud:index/athenaCredential:AthenaCredential my_athena_credential "project_id:credential_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/athenaCredential:AthenaCredential my_athena_credential 12345:6789
 * ```
 */
export class AthenaCredential extends pulumi.CustomResource {
    /**
     * Get an existing AthenaCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AthenaCredentialState, opts?: pulumi.CustomResourceOptions): AthenaCredential {
        return new AthenaCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/athenaCredential:AthenaCredential';

    /**
     * Returns true if the given object is an instance of AthenaCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AthenaCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AthenaCredential.__pulumiType;
    }

    /**
     * AWS access key ID for Athena user
     */
    public readonly awsAccessKeyId!: pulumi.Output<string>;
    /**
     * AWS secret access key for Athena user
     */
    public readonly awsSecretAccessKey!: pulumi.Output<string>;
    /**
     * The internal credential ID
     */
    public /*out*/ readonly credentialId!: pulumi.Output<number>;
    /**
     * Project ID to create the Athena credential in
     */
    public readonly projectId!: pulumi.Output<number>;
    /**
     * The schema where to create models
     */
    public readonly schema!: pulumi.Output<string>;

    /**
     * Create a AthenaCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AthenaCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AthenaCredentialArgs | AthenaCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AthenaCredentialState | undefined;
            resourceInputs["awsAccessKeyId"] = state ? state.awsAccessKeyId : undefined;
            resourceInputs["awsSecretAccessKey"] = state ? state.awsSecretAccessKey : undefined;
            resourceInputs["credentialId"] = state ? state.credentialId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
        } else {
            const args = argsOrState as AthenaCredentialArgs | undefined;
            if ((!args || args.awsAccessKeyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'awsAccessKeyId'");
            }
            if ((!args || args.awsSecretAccessKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'awsSecretAccessKey'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.schema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            resourceInputs["awsAccessKeyId"] = args?.awsAccessKeyId ? pulumi.secret(args.awsAccessKeyId) : undefined;
            resourceInputs["awsSecretAccessKey"] = args?.awsSecretAccessKey ? pulumi.secret(args.awsSecretAccessKey) : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["credentialId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["awsAccessKeyId", "awsSecretAccessKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AthenaCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AthenaCredential resources.
 */
export interface AthenaCredentialState {
    /**
     * AWS access key ID for Athena user
     */
    awsAccessKeyId?: pulumi.Input<string>;
    /**
     * AWS secret access key for Athena user
     */
    awsSecretAccessKey?: pulumi.Input<string>;
    /**
     * The internal credential ID
     */
    credentialId?: pulumi.Input<number>;
    /**
     * Project ID to create the Athena credential in
     */
    projectId?: pulumi.Input<number>;
    /**
     * The schema where to create models
     */
    schema?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AthenaCredential resource.
 */
export interface AthenaCredentialArgs {
    /**
     * AWS access key ID for Athena user
     */
    awsAccessKeyId: pulumi.Input<string>;
    /**
     * AWS secret access key for Athena user
     */
    awsSecretAccessKey: pulumi.Input<string>;
    /**
     * Project ID to create the Athena credential in
     */
    projectId: pulumi.Input<number>;
    /**
     * The schema where to create models
     */
    schema: pulumi.Input<string>;
}

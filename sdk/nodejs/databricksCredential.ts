// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Databricks credential resource
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@pulumi/dbtcloud";
 *
 * const myDatabricksCred = new dbtcloud.DatabricksCredential("my_databricks_cred", {
 *     projectId: dbtProject.id,
 *     token: "abcdefgh",
 *     schema: "my_schema",
 *     adapterType: "databricks",
 * });
 * ```
 *
 * ## Import
 *
 * using  import blocks (requires Terraform >= 1.5)
 *
 * import {
 *
 *   to = dbtcloud_databricks_credential.my_databricks_credential
 *
 *   id = "project_id:credential_id"
 *
 * }
 *
 * import {
 *
 *   to = dbtcloud_databricks_credential.my_databricks_credential
 *
 *   id = "12345:6789"
 *
 * }
 *
 * using the older import command
 *
 * ```sh
 * $ pulumi import dbtcloud:index/databricksCredential:DatabricksCredential my_databricks_credential "project_id:credential_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/databricksCredential:DatabricksCredential my_databricks_credential 12345:6789
 * ```
 */
export class DatabricksCredential extends pulumi.CustomResource {
    /**
     * Get an existing DatabricksCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabricksCredentialState, opts?: pulumi.CustomResourceOptions): DatabricksCredential {
        return new DatabricksCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/databricksCredential:DatabricksCredential';

    /**
     * Returns true if the given object is an instance of DatabricksCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabricksCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabricksCredential.__pulumiType;
    }

    /**
     * The type of the adapter (databricks or spark). Optional only when semantic*layer*credential is set to true; otherwise, this field is required.
     */
    declare public readonly adapterType: pulumi.Output<string>;
    /**
     * The catalog where to create models (only for the databricks adapter)
     */
    declare public readonly catalog: pulumi.Output<string>;
    /**
     * The system Databricks credential ID
     */
    declare public /*out*/ readonly credentialId: pulumi.Output<number>;
    /**
     * Project ID to create the Databricks credential in
     */
    declare public readonly projectId: pulumi.Output<number>;
    /**
     * The schema where to create models. Optional only when semantic*layer*credential is set to true; otherwise, this field is required.
     */
    declare public readonly schema: pulumi.Output<string>;
    /**
     * This field indicates that the credential is used as part of the Semantic Layer configuration. It is used to create a Databricks credential for the Semantic Layer.
     */
    declare public readonly semanticLayerCredential: pulumi.Output<boolean>;
    /**
     * Target name
     *
     * @deprecated This field is deprecated at the environment level (it was never possible to set it in the UI) and will be removed in a future release. Please remove it and set the target name at the job level or leverage environment variables.
     */
    declare public readonly targetName: pulumi.Output<string>;
    /**
     * Token for Databricks user
     */
    declare public readonly token: pulumi.Output<string>;

    /**
     * Create a DatabricksCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabricksCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabricksCredentialArgs | DatabricksCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabricksCredentialState | undefined;
            resourceInputs["adapterType"] = state?.adapterType;
            resourceInputs["catalog"] = state?.catalog;
            resourceInputs["credentialId"] = state?.credentialId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["semanticLayerCredential"] = state?.semanticLayerCredential;
            resourceInputs["targetName"] = state?.targetName;
            resourceInputs["token"] = state?.token;
        } else {
            const args = argsOrState as DatabricksCredentialArgs | undefined;
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.token === undefined && !opts.urn) {
                throw new Error("Missing required property 'token'");
            }
            resourceInputs["adapterType"] = args?.adapterType;
            resourceInputs["catalog"] = args?.catalog;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["semanticLayerCredential"] = args?.semanticLayerCredential;
            resourceInputs["targetName"] = args?.targetName;
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
            resourceInputs["credentialId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DatabricksCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatabricksCredential resources.
 */
export interface DatabricksCredentialState {
    /**
     * The type of the adapter (databricks or spark). Optional only when semantic*layer*credential is set to true; otherwise, this field is required.
     */
    adapterType?: pulumi.Input<string>;
    /**
     * The catalog where to create models (only for the databricks adapter)
     */
    catalog?: pulumi.Input<string>;
    /**
     * The system Databricks credential ID
     */
    credentialId?: pulumi.Input<number>;
    /**
     * Project ID to create the Databricks credential in
     */
    projectId?: pulumi.Input<number>;
    /**
     * The schema where to create models. Optional only when semantic*layer*credential is set to true; otherwise, this field is required.
     */
    schema?: pulumi.Input<string>;
    /**
     * This field indicates that the credential is used as part of the Semantic Layer configuration. It is used to create a Databricks credential for the Semantic Layer.
     */
    semanticLayerCredential?: pulumi.Input<boolean>;
    /**
     * Target name
     *
     * @deprecated This field is deprecated at the environment level (it was never possible to set it in the UI) and will be removed in a future release. Please remove it and set the target name at the job level or leverage environment variables.
     */
    targetName?: pulumi.Input<string>;
    /**
     * Token for Databricks user
     */
    token?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabricksCredential resource.
 */
export interface DatabricksCredentialArgs {
    /**
     * The type of the adapter (databricks or spark). Optional only when semantic*layer*credential is set to true; otherwise, this field is required.
     */
    adapterType?: pulumi.Input<string>;
    /**
     * The catalog where to create models (only for the databricks adapter)
     */
    catalog?: pulumi.Input<string>;
    /**
     * Project ID to create the Databricks credential in
     */
    projectId: pulumi.Input<number>;
    /**
     * The schema where to create models. Optional only when semantic*layer*credential is set to true; otherwise, this field is required.
     */
    schema?: pulumi.Input<string>;
    /**
     * This field indicates that the credential is used as part of the Semantic Layer configuration. It is used to create a Databricks credential for the Semantic Layer.
     */
    semanticLayerCredential?: pulumi.Input<boolean>;
    /**
     * Target name
     *
     * @deprecated This field is deprecated at the environment level (it was never possible to set it in the UI) and will be removed in a future release. Please remove it and set the target name at the job level or leverage environment variables.
     */
    targetName?: pulumi.Input<string>;
    /**
     * Token for Databricks user
     */
    token: pulumi.Input<string>;
}

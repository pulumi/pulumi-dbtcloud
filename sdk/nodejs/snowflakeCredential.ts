// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Snowflake credential resource. This resource is used both as a stand-alone credential, but also as part of the Semantic Layer credential definition for Snowflake.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@pulumi/dbtcloud";
 *
 * const prodCredential = new dbtcloud.SnowflakeCredential("prod_credential", {
 *     projectId: dbtProject.id,
 *     authType: "password",
 *     numThreads: 16,
 *     schema: "SCHEMA",
 *     user: "user",
 *     password: "password",
 * });
 * ```
 *
 * ## Import
 *
 * using  import blocks (requires Terraform >= 1.5)
 *
 * import {
 *
 *   to = dbtcloud_snowflake_credential.prod_snowflake_credential
 *
 *   id = "project_id:credential_id"
 *
 * }
 *
 * import {
 *
 *   to = dbtcloud_snowflake_credential.prod_snowflake_credential
 *
 *   id = "12345:6789"
 *
 * }
 *
 * using the older import command
 *
 * ```sh
 * $ pulumi import dbtcloud:index/snowflakeCredential:SnowflakeCredential prod_snowflake_credential "project_id:credential_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/snowflakeCredential:SnowflakeCredential prod_snowflake_credential 12345:6789
 * ```
 */
export class SnowflakeCredential extends pulumi.CustomResource {
    /**
     * Get an existing SnowflakeCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnowflakeCredentialState, opts?: pulumi.CustomResourceOptions): SnowflakeCredential {
        return new SnowflakeCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/snowflakeCredential:SnowflakeCredential';

    /**
     * Returns true if the given object is an instance of SnowflakeCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnowflakeCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnowflakeCredential.__pulumiType;
    }

    /**
     * The type of Snowflake credential ('password' or 'keypair')
     */
    declare public readonly authType: pulumi.Output<string>;
    /**
     * The internal credential ID
     */
    declare public /*out*/ readonly credentialId: pulumi.Output<number>;
    /**
     * The catalog to connect use
     */
    declare public readonly database: pulumi.Output<string | undefined>;
    /**
     * Whether the Snowflake credential is active
     */
    declare public readonly isActive: pulumi.Output<boolean>;
    /**
     * Number of threads to use
     */
    declare public readonly numThreads: pulumi.Output<number>;
    /**
     * The password for the Snowflake account
     */
    declare public readonly password: pulumi.Output<string>;
    /**
     * The private key for the Snowflake account
     */
    declare public readonly privateKey: pulumi.Output<string>;
    /**
     * The passphrase for the private key
     */
    declare public readonly privateKeyPassphrase: pulumi.Output<string>;
    /**
     * Project ID to create the Snowflake credential in
     */
    declare public readonly projectId: pulumi.Output<number>;
    /**
     * The role to assume
     */
    declare public readonly role: pulumi.Output<string | undefined>;
    /**
     * The schema where to create models. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.
     */
    declare public readonly schema: pulumi.Output<string>;
    /**
     * This field indicates that the credential is used as part of the Semantic Layer configuration. It is used to create a Snowflake credential for the Semantic Layer.
     */
    declare public readonly semanticLayerCredential: pulumi.Output<boolean>;
    /**
     * The username for the Snowflake account. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.
     */
    declare public readonly user: pulumi.Output<string>;
    /**
     * The warehouse to use
     */
    declare public readonly warehouse: pulumi.Output<string | undefined>;

    /**
     * Create a SnowflakeCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnowflakeCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnowflakeCredentialArgs | SnowflakeCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnowflakeCredentialState | undefined;
            resourceInputs["authType"] = state?.authType;
            resourceInputs["credentialId"] = state?.credentialId;
            resourceInputs["database"] = state?.database;
            resourceInputs["isActive"] = state?.isActive;
            resourceInputs["numThreads"] = state?.numThreads;
            resourceInputs["password"] = state?.password;
            resourceInputs["privateKey"] = state?.privateKey;
            resourceInputs["privateKeyPassphrase"] = state?.privateKeyPassphrase;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["role"] = state?.role;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["semanticLayerCredential"] = state?.semanticLayerCredential;
            resourceInputs["user"] = state?.user;
            resourceInputs["warehouse"] = state?.warehouse;
        } else {
            const args = argsOrState as SnowflakeCredentialArgs | undefined;
            if (args?.authType === undefined && !opts.urn) {
                throw new Error("Missing required property 'authType'");
            }
            if (args?.numThreads === undefined && !opts.urn) {
                throw new Error("Missing required property 'numThreads'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["authType"] = args?.authType;
            resourceInputs["database"] = args?.database;
            resourceInputs["isActive"] = args?.isActive;
            resourceInputs["numThreads"] = args?.numThreads;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["privateKeyPassphrase"] = args?.privateKeyPassphrase ? pulumi.secret(args.privateKeyPassphrase) : undefined;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["role"] = args?.role;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["semanticLayerCredential"] = args?.semanticLayerCredential;
            resourceInputs["user"] = args?.user;
            resourceInputs["warehouse"] = args?.warehouse;
            resourceInputs["credentialId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "privateKey", "privateKeyPassphrase"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SnowflakeCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SnowflakeCredential resources.
 */
export interface SnowflakeCredentialState {
    /**
     * The type of Snowflake credential ('password' or 'keypair')
     */
    authType?: pulumi.Input<string>;
    /**
     * The internal credential ID
     */
    credentialId?: pulumi.Input<number>;
    /**
     * The catalog to connect use
     */
    database?: pulumi.Input<string>;
    /**
     * Whether the Snowflake credential is active
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Number of threads to use
     */
    numThreads?: pulumi.Input<number>;
    /**
     * The password for the Snowflake account
     */
    password?: pulumi.Input<string>;
    /**
     * The private key for the Snowflake account
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The passphrase for the private key
     */
    privateKeyPassphrase?: pulumi.Input<string>;
    /**
     * Project ID to create the Snowflake credential in
     */
    projectId?: pulumi.Input<number>;
    /**
     * The role to assume
     */
    role?: pulumi.Input<string>;
    /**
     * The schema where to create models. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.
     */
    schema?: pulumi.Input<string>;
    /**
     * This field indicates that the credential is used as part of the Semantic Layer configuration. It is used to create a Snowflake credential for the Semantic Layer.
     */
    semanticLayerCredential?: pulumi.Input<boolean>;
    /**
     * The username for the Snowflake account. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.
     */
    user?: pulumi.Input<string>;
    /**
     * The warehouse to use
     */
    warehouse?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SnowflakeCredential resource.
 */
export interface SnowflakeCredentialArgs {
    /**
     * The type of Snowflake credential ('password' or 'keypair')
     */
    authType: pulumi.Input<string>;
    /**
     * The catalog to connect use
     */
    database?: pulumi.Input<string>;
    /**
     * Whether the Snowflake credential is active
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Number of threads to use
     */
    numThreads: pulumi.Input<number>;
    /**
     * The password for the Snowflake account
     */
    password?: pulumi.Input<string>;
    /**
     * The private key for the Snowflake account
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The passphrase for the private key
     */
    privateKeyPassphrase?: pulumi.Input<string>;
    /**
     * Project ID to create the Snowflake credential in
     */
    projectId: pulumi.Input<number>;
    /**
     * The role to assume
     */
    role?: pulumi.Input<string>;
    /**
     * The schema where to create models. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.
     */
    schema?: pulumi.Input<string>;
    /**
     * This field indicates that the credential is used as part of the Semantic Layer configuration. It is used to create a Snowflake credential for the Semantic Layer.
     */
    semanticLayerCredential?: pulumi.Input<boolean>;
    /**
     * The username for the Snowflake account. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.
     */
    user?: pulumi.Input<string>;
    /**
     * The warehouse to use
     */
    warehouse?: pulumi.Input<string>;
}

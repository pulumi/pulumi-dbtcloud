// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can be used to create global connections as introduced in dbt Cloud in August 2024.
 *
 * Those connections are not linked to a project and can be linked to environments from different projects by using the `connectionId` field in the `dbtcloud.Environment` resource.
 *
 * For now, only BigQuery and Snowflake connections are supported and the other Data Warehouses can continue using the existing resources `dbtcloud.Connection` and `dbtcloud.FabricConnection` ,
 * but all Data Warehouses will soon be supported under this resource and the other ones will be deprecated in the future.
 */
export class GlobalConnection extends pulumi.CustomResource {
    /**
     * Get an existing GlobalConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalConnectionState, opts?: pulumi.CustomResourceOptions): GlobalConnection {
        return new GlobalConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/globalConnection:GlobalConnection';

    /**
     * Returns true if the given object is an instance of GlobalConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlobalConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalConnection.__pulumiType;
    }

    /**
     * Version of the adapter
     */
    public /*out*/ readonly adapterVersion!: pulumi.Output<string>;
    public readonly bigquery!: pulumi.Output<outputs.GlobalConnectionBigquery | undefined>;
    /**
     * Whether the connection can use an SSH tunnel
     */
    public /*out*/ readonly isSshTunnelEnabled!: pulumi.Output<boolean>;
    /**
     * Connection name
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly oauthConfigurationId!: pulumi.Output<number>;
    /**
     * Private Link Endpoint ID. This ID can be found using the `privatelinkEndpoint` data source
     */
    public readonly privateLinkEndpointId!: pulumi.Output<string | undefined>;
    /**
     * Snowflake connection configuration
     */
    public readonly snowflake!: pulumi.Output<outputs.GlobalConnectionSnowflake | undefined>;

    /**
     * Create a GlobalConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GlobalConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlobalConnectionArgs | GlobalConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlobalConnectionState | undefined;
            resourceInputs["adapterVersion"] = state ? state.adapterVersion : undefined;
            resourceInputs["bigquery"] = state ? state.bigquery : undefined;
            resourceInputs["isSshTunnelEnabled"] = state ? state.isSshTunnelEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oauthConfigurationId"] = state ? state.oauthConfigurationId : undefined;
            resourceInputs["privateLinkEndpointId"] = state ? state.privateLinkEndpointId : undefined;
            resourceInputs["snowflake"] = state ? state.snowflake : undefined;
        } else {
            const args = argsOrState as GlobalConnectionArgs | undefined;
            resourceInputs["bigquery"] = args ? args.bigquery : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateLinkEndpointId"] = args ? args.privateLinkEndpointId : undefined;
            resourceInputs["snowflake"] = args ? args.snowflake : undefined;
            resourceInputs["adapterVersion"] = undefined /*out*/;
            resourceInputs["isSshTunnelEnabled"] = undefined /*out*/;
            resourceInputs["oauthConfigurationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlobalConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GlobalConnection resources.
 */
export interface GlobalConnectionState {
    /**
     * Version of the adapter
     */
    adapterVersion?: pulumi.Input<string>;
    bigquery?: pulumi.Input<inputs.GlobalConnectionBigquery>;
    /**
     * Whether the connection can use an SSH tunnel
     */
    isSshTunnelEnabled?: pulumi.Input<boolean>;
    /**
     * Connection name
     */
    name?: pulumi.Input<string>;
    oauthConfigurationId?: pulumi.Input<number>;
    /**
     * Private Link Endpoint ID. This ID can be found using the `privatelinkEndpoint` data source
     */
    privateLinkEndpointId?: pulumi.Input<string>;
    /**
     * Snowflake connection configuration
     */
    snowflake?: pulumi.Input<inputs.GlobalConnectionSnowflake>;
}

/**
 * The set of arguments for constructing a GlobalConnection resource.
 */
export interface GlobalConnectionArgs {
    bigquery?: pulumi.Input<inputs.GlobalConnectionBigquery>;
    /**
     * Connection name
     */
    name?: pulumi.Input<string>;
    /**
     * Private Link Endpoint ID. This ID can be found using the `privatelinkEndpoint` data source
     */
    privateLinkEndpointId?: pulumi.Input<string>;
    /**
     * Snowflake connection configuration
     */
    snowflake?: pulumi.Input<inputs.GlobalConnectionSnowflake>;
}

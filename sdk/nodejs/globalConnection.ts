// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can be used to create global connections as introduced in dbt Cloud in August 2024.
 *
 * Those connections are not linked to a specific project and can be linked to environments from different projects by using the `connectionId` field in the `dbtcloud.Environment` resource.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * A project-scoped connection can be imported as a global connection by specifying the connection ID
 *
 * Migrating from project-scoped connections to global connections could be done by:
 *
 * 1. Adding the config for the global connection and importing it (see below)
 *
 * 2. Removing the project-scoped connection from the config AND from the state
 *    
 *    - CAREFUL: If the connection is removed from the config but not the state, it will be destroyed on the next apply
 *
 * using  import blocks (requires Terraform >= 1.5)
 *
 * import {
 *
 *   to = dbtcloud_global_connection.my_connection
 *
 *   id = "connection_id"
 *
 * }
 *
 * import {
 *
 *   to = dbtcloud_global_connection.my_connection
 *
 *   id = "1234"
 *
 * }
 *
 * using the older import command
 *
 * ```sh
 * $ pulumi import dbtcloud:index/globalConnection:GlobalConnection my_connection "connection_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/globalConnection:GlobalConnection my_connection 1234
 * ```
 */
export class GlobalConnection extends pulumi.CustomResource {
    /**
     * Get an existing GlobalConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalConnectionState, opts?: pulumi.CustomResourceOptions): GlobalConnection {
        return new GlobalConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/globalConnection:GlobalConnection';

    /**
     * Returns true if the given object is an instance of GlobalConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlobalConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalConnection.__pulumiType;
    }

    /**
     * Version of the adapter
     */
    declare public /*out*/ readonly adapterVersion: pulumi.Output<string>;
    /**
     * Apache Spark connection configuration.
     */
    declare public readonly apacheSpark: pulumi.Output<outputs.GlobalConnectionApacheSpark | undefined>;
    /**
     * Athena connection configuration.
     */
    declare public readonly athena: pulumi.Output<outputs.GlobalConnectionAthena | undefined>;
    declare public readonly bigquery: pulumi.Output<outputs.GlobalConnectionBigquery | undefined>;
    /**
     * Databricks connection configuration
     */
    declare public readonly databricks: pulumi.Output<outputs.GlobalConnectionDatabricks | undefined>;
    /**
     * Microsoft Fabric connection configuration.
     */
    declare public readonly fabric: pulumi.Output<outputs.GlobalConnectionFabric | undefined>;
    /**
     * Whether the connection can use an SSH tunnel
     */
    declare public /*out*/ readonly isSshTunnelEnabled: pulumi.Output<boolean>;
    /**
     * Connection name
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * External OAuth configuration ID (only Snowflake for now)
     */
    declare public readonly oauthConfigurationId: pulumi.Output<number | undefined>;
    /**
     * PostgreSQL connection configuration.
     */
    declare public readonly postgres: pulumi.Output<outputs.GlobalConnectionPostgres | undefined>;
    /**
     * Private Link Endpoint ID. This ID can be found using the `privatelinkEndpoint` data source
     */
    declare public readonly privateLinkEndpointId: pulumi.Output<string | undefined>;
    /**
     * Redshift connection configuration
     */
    declare public readonly redshift: pulumi.Output<outputs.GlobalConnectionRedshift | undefined>;
    /**
     * Snowflake connection configuration
     */
    declare public readonly snowflake: pulumi.Output<outputs.GlobalConnectionSnowflake | undefined>;
    /**
     * Starburst/Trino connection configuration.
     */
    declare public readonly starburst: pulumi.Output<outputs.GlobalConnectionStarburst | undefined>;
    /**
     * Azure Synapse Analytics connection configuration.
     */
    declare public readonly synapse: pulumi.Output<outputs.GlobalConnectionSynapse | undefined>;
    /**
     * Teradata connection configuration.
     */
    declare public readonly teradata: pulumi.Output<outputs.GlobalConnectionTeradata | undefined>;

    /**
     * Create a GlobalConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GlobalConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlobalConnectionArgs | GlobalConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlobalConnectionState | undefined;
            resourceInputs["adapterVersion"] = state?.adapterVersion;
            resourceInputs["apacheSpark"] = state?.apacheSpark;
            resourceInputs["athena"] = state?.athena;
            resourceInputs["bigquery"] = state?.bigquery;
            resourceInputs["databricks"] = state?.databricks;
            resourceInputs["fabric"] = state?.fabric;
            resourceInputs["isSshTunnelEnabled"] = state?.isSshTunnelEnabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["oauthConfigurationId"] = state?.oauthConfigurationId;
            resourceInputs["postgres"] = state?.postgres;
            resourceInputs["privateLinkEndpointId"] = state?.privateLinkEndpointId;
            resourceInputs["redshift"] = state?.redshift;
            resourceInputs["snowflake"] = state?.snowflake;
            resourceInputs["starburst"] = state?.starburst;
            resourceInputs["synapse"] = state?.synapse;
            resourceInputs["teradata"] = state?.teradata;
        } else {
            const args = argsOrState as GlobalConnectionArgs | undefined;
            resourceInputs["apacheSpark"] = args?.apacheSpark;
            resourceInputs["athena"] = args?.athena;
            resourceInputs["bigquery"] = args?.bigquery;
            resourceInputs["databricks"] = args?.databricks;
            resourceInputs["fabric"] = args?.fabric;
            resourceInputs["name"] = args?.name;
            resourceInputs["oauthConfigurationId"] = args?.oauthConfigurationId;
            resourceInputs["postgres"] = args?.postgres;
            resourceInputs["privateLinkEndpointId"] = args?.privateLinkEndpointId;
            resourceInputs["redshift"] = args?.redshift;
            resourceInputs["snowflake"] = args?.snowflake;
            resourceInputs["starburst"] = args?.starburst;
            resourceInputs["synapse"] = args?.synapse;
            resourceInputs["teradata"] = args?.teradata;
            resourceInputs["adapterVersion"] = undefined /*out*/;
            resourceInputs["isSshTunnelEnabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlobalConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GlobalConnection resources.
 */
export interface GlobalConnectionState {
    /**
     * Version of the adapter
     */
    adapterVersion?: pulumi.Input<string>;
    /**
     * Apache Spark connection configuration.
     */
    apacheSpark?: pulumi.Input<inputs.GlobalConnectionApacheSpark>;
    /**
     * Athena connection configuration.
     */
    athena?: pulumi.Input<inputs.GlobalConnectionAthena>;
    bigquery?: pulumi.Input<inputs.GlobalConnectionBigquery>;
    /**
     * Databricks connection configuration
     */
    databricks?: pulumi.Input<inputs.GlobalConnectionDatabricks>;
    /**
     * Microsoft Fabric connection configuration.
     */
    fabric?: pulumi.Input<inputs.GlobalConnectionFabric>;
    /**
     * Whether the connection can use an SSH tunnel
     */
    isSshTunnelEnabled?: pulumi.Input<boolean>;
    /**
     * Connection name
     */
    name?: pulumi.Input<string>;
    /**
     * External OAuth configuration ID (only Snowflake for now)
     */
    oauthConfigurationId?: pulumi.Input<number>;
    /**
     * PostgreSQL connection configuration.
     */
    postgres?: pulumi.Input<inputs.GlobalConnectionPostgres>;
    /**
     * Private Link Endpoint ID. This ID can be found using the `privatelinkEndpoint` data source
     */
    privateLinkEndpointId?: pulumi.Input<string>;
    /**
     * Redshift connection configuration
     */
    redshift?: pulumi.Input<inputs.GlobalConnectionRedshift>;
    /**
     * Snowflake connection configuration
     */
    snowflake?: pulumi.Input<inputs.GlobalConnectionSnowflake>;
    /**
     * Starburst/Trino connection configuration.
     */
    starburst?: pulumi.Input<inputs.GlobalConnectionStarburst>;
    /**
     * Azure Synapse Analytics connection configuration.
     */
    synapse?: pulumi.Input<inputs.GlobalConnectionSynapse>;
    /**
     * Teradata connection configuration.
     */
    teradata?: pulumi.Input<inputs.GlobalConnectionTeradata>;
}

/**
 * The set of arguments for constructing a GlobalConnection resource.
 */
export interface GlobalConnectionArgs {
    /**
     * Apache Spark connection configuration.
     */
    apacheSpark?: pulumi.Input<inputs.GlobalConnectionApacheSpark>;
    /**
     * Athena connection configuration.
     */
    athena?: pulumi.Input<inputs.GlobalConnectionAthena>;
    bigquery?: pulumi.Input<inputs.GlobalConnectionBigquery>;
    /**
     * Databricks connection configuration
     */
    databricks?: pulumi.Input<inputs.GlobalConnectionDatabricks>;
    /**
     * Microsoft Fabric connection configuration.
     */
    fabric?: pulumi.Input<inputs.GlobalConnectionFabric>;
    /**
     * Connection name
     */
    name?: pulumi.Input<string>;
    /**
     * External OAuth configuration ID (only Snowflake for now)
     */
    oauthConfigurationId?: pulumi.Input<number>;
    /**
     * PostgreSQL connection configuration.
     */
    postgres?: pulumi.Input<inputs.GlobalConnectionPostgres>;
    /**
     * Private Link Endpoint ID. This ID can be found using the `privatelinkEndpoint` data source
     */
    privateLinkEndpointId?: pulumi.Input<string>;
    /**
     * Redshift connection configuration
     */
    redshift?: pulumi.Input<inputs.GlobalConnectionRedshift>;
    /**
     * Snowflake connection configuration
     */
    snowflake?: pulumi.Input<inputs.GlobalConnectionSnowflake>;
    /**
     * Starburst/Trino connection configuration.
     */
    starburst?: pulumi.Input<inputs.GlobalConnectionStarburst>;
    /**
     * Azure Synapse Analytics connection configuration.
     */
    synapse?: pulumi.Input<inputs.GlobalConnectionSynapse>;
    /**
     * Teradata connection configuration.
     */
    teradata?: pulumi.Input<inputs.GlobalConnectionTeradata>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@pulumi/dbtcloud";
 *
 * const testMapping = new dbtcloud.SemanticLayerCredentialServiceTokenMapping("test_mapping", {
 *     semanticLayerCredentialId: test.id,
 *     serviceTokenId: testServiceToken.id,
 *     projectId: testProject.id,
 * });
 * ```
 *
 * ## Import
 *
 * using import blocks (requires Terraform >= 1.5)
 *
 * import {
 *
 *   to = dbtcloud_semantic_layer_credential_service_token_mapping.example
 *
 *   id = "id"
 *
 * }
 *
 * import {
 *
 *   to = dbtcloud_semantic_layer_credential_service_token_mapping.example
 *
 *   id = "12345"
 *
 * }
 *
 * using the older import command
 *
 * ```sh
 * $ pulumi import dbtcloud:index/semanticLayerCredentialServiceTokenMapping:SemanticLayerCredentialServiceTokenMapping example "id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/semanticLayerCredentialServiceTokenMapping:SemanticLayerCredentialServiceTokenMapping example 12345
 * ```
 */
export class SemanticLayerCredentialServiceTokenMapping extends pulumi.CustomResource {
    /**
     * Get an existing SemanticLayerCredentialServiceTokenMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SemanticLayerCredentialServiceTokenMappingState, opts?: pulumi.CustomResourceOptions): SemanticLayerCredentialServiceTokenMapping {
        return new SemanticLayerCredentialServiceTokenMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/semanticLayerCredentialServiceTokenMapping:SemanticLayerCredentialServiceTokenMapping';

    /**
     * Returns true if the given object is an instance of SemanticLayerCredentialServiceTokenMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SemanticLayerCredentialServiceTokenMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SemanticLayerCredentialServiceTokenMapping.__pulumiType;
    }

    /**
     * The ID of the project to which the semantic layer credential is associated.
     */
    declare public readonly projectId: pulumi.Output<number>;
    /**
     * The ID of the semantic layer credential to map.
     */
    declare public readonly semanticLayerCredentialId: pulumi.Output<number>;
    /**
     * The ID of the service token to map to the semantic layer credential.
     */
    declare public readonly serviceTokenId: pulumi.Output<number>;

    /**
     * Create a SemanticLayerCredentialServiceTokenMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SemanticLayerCredentialServiceTokenMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SemanticLayerCredentialServiceTokenMappingArgs | SemanticLayerCredentialServiceTokenMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SemanticLayerCredentialServiceTokenMappingState | undefined;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["semanticLayerCredentialId"] = state?.semanticLayerCredentialId;
            resourceInputs["serviceTokenId"] = state?.serviceTokenId;
        } else {
            const args = argsOrState as SemanticLayerCredentialServiceTokenMappingArgs | undefined;
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.semanticLayerCredentialId === undefined && !opts.urn) {
                throw new Error("Missing required property 'semanticLayerCredentialId'");
            }
            if (args?.serviceTokenId === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceTokenId'");
            }
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["semanticLayerCredentialId"] = args?.semanticLayerCredentialId;
            resourceInputs["serviceTokenId"] = args?.serviceTokenId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SemanticLayerCredentialServiceTokenMapping.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SemanticLayerCredentialServiceTokenMapping resources.
 */
export interface SemanticLayerCredentialServiceTokenMappingState {
    /**
     * The ID of the project to which the semantic layer credential is associated.
     */
    projectId?: pulumi.Input<number>;
    /**
     * The ID of the semantic layer credential to map.
     */
    semanticLayerCredentialId?: pulumi.Input<number>;
    /**
     * The ID of the service token to map to the semantic layer credential.
     */
    serviceTokenId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SemanticLayerCredentialServiceTokenMapping resource.
 */
export interface SemanticLayerCredentialServiceTokenMappingArgs {
    /**
     * The ID of the project to which the semantic layer credential is associated.
     */
    projectId: pulumi.Input<number>;
    /**
     * The ID of the semantic layer credential to map.
     */
    semanticLayerCredentialId: pulumi.Input<number>;
    /**
     * The ID of the service token to map to the semantic layer credential.
     */
    serviceTokenId: pulumi.Input<number>;
}

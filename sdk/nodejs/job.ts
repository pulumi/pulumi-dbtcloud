// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > In October 2023, CI improvements have been rolled out to dbt Cloud with minor impacts to some jobs:  [more info](https://docs.getdbt.com/docs/dbt-versions/release-notes/june-2023/ci-updates-phase1-rn).
 * <br/>
 * <br/>
 * Those improvements include modifications to deferral which was historically set at the job level and will now be set at the environment level.
 * Deferral can still be set to "self" by setting `selfDeferring` to `true` but with the new approach, deferral to other runs need to be done with `deferringEnvironmentId` instead of `deferringJobId`.
 *
 * > New with 0.3.1, `triggers` now accepts a `onMerge` value to trigger jobs when code is merged in git. If `onMerge` is `true` all other triggers need to be `false`.
 * <br/>
 * <br/>
 * For now, it is not a mandatory field, but it will be in a future version. Please add `onMerge` in your config or modules.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@pulumi/dbtcloud";
 *
 * // a job that has github_webhook and git_provider_webhook 
 * // set to false will be categorized as a "Deploy Job"
 * const dailyJob = new dbtcloud.Job("daily_job", {
 *     environmentId: prodEnvironment.environmentId,
 *     executeSteps: ["dbt build"],
 *     generateDocs: true,
 *     isActive: true,
 *     name: "Daily job",
 *     numThreads: 64,
 *     projectId: dbtProject.id,
 *     runGenerateSources: true,
 *     targetName: "default",
 *     triggers: {
 *         github_webhook: false,
 *         git_provider_webhook: false,
 *         schedule: true,
 *         on_merge: false,
 *     },
 *     scheduleDays: [
 *         0,
 *         1,
 *         2,
 *         3,
 *         4,
 *         5,
 *         6,
 *     ],
 *     scheduleType: "days_of_week",
 *     scheduleHours: [0],
 * });
 * // a job that has github_webhook and git_provider_webhook set 
 * // to true will be categorized as a "Continuous Integration Job"
 * const ciJob = new dbtcloud.Job("ci_job", {
 *     environmentId: ciEnvironment.environmentId,
 *     executeSteps: ["dbt build -s state:modified+ --fail-fast"],
 *     generateDocs: false,
 *     deferringEnvironmentId: prodEnvironment.environmentId,
 *     name: "CI Job",
 *     numThreads: 32,
 *     projectId: dbtProject.id,
 *     runGenerateSources: false,
 *     runLint: true,
 *     errorsOnLintFailure: true,
 *     triggers: {
 *         github_webhook: true,
 *         git_provider_webhook: true,
 *         schedule: false,
 *         on_merge: false,
 *     },
 *     scheduleDays: [
 *         0,
 *         1,
 *         2,
 *         3,
 *         4,
 *         5,
 *         6,
 *     ],
 *     scheduleType: "days_of_week",
 * });
 * // a job that is set to be triggered after another job finishes
 * // this is sometimes referred as 'job chaining'
 * const downstreamJob = new dbtcloud.Job("downstream_job", {
 *     environmentId: project2ProdEnvironment.environmentId,
 *     executeSteps: ["dbt build -s +my_model"],
 *     generateDocs: true,
 *     name: "Downstream job in project 2",
 *     numThreads: 32,
 *     projectId: dbtProject2.id,
 *     runGenerateSources: true,
 *     triggers: {
 *         github_webhook: false,
 *         git_provider_webhook: false,
 *         schedule: false,
 *         on_merge: false,
 *     },
 *     scheduleDays: [
 *         0,
 *         1,
 *         2,
 *         3,
 *         4,
 *         5,
 *         6,
 *     ],
 *     scheduleType: "days_of_week",
 *     jobCompletionTriggerCondition: {
 *         jobId: dailyJob.id,
 *         projectId: dbtProject.id,
 *         statuses: ["success"],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * using  import blocks (requires Terraform >= 1.5)
 *
 * import {
 *
 *   to = dbtcloud_job.my_job
 *
 *   id = "job_id"
 *
 * }
 *
 * import {
 *
 *   to = dbtcloud_job.my_job
 *
 *   id = "12345"
 *
 * }
 *
 * using the older import command
 *
 * ```sh
 * $ pulumi import dbtcloud:index/job:Job my_job "job_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/job:Job my_job 12345
 * ```
 */
export class Job extends pulumi.CustomResource {
    /**
     * Get an existing Job resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JobState, opts?: pulumi.CustomResourceOptions): Job {
        return new Job(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/job:Job';

    /**
     * Returns true if the given object is an instance of Job.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Job {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Job.__pulumiType;
    }

    /**
     * The model selector for checking changes in the compare changes Advanced CI feature
     */
    public readonly compareChangesFlags!: pulumi.Output<string | undefined>;
    /**
     * Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions
     */
    public readonly dbtVersion!: pulumi.Output<string | undefined>;
    /**
     * Environment identifier that this job defers to (new deferring approach)
     */
    public readonly deferringEnvironmentId!: pulumi.Output<number | undefined>;
    /**
     * Job identifier that this job defers to (legacy deferring approach)
     */
    public readonly deferringJobId!: pulumi.Output<number | undefined>;
    /**
     * Description for the job
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Environment ID to create the job in
     */
    public readonly environmentId!: pulumi.Output<number>;
    /**
     * Whether the CI job should fail when a lint error is found. Only used when `runLint` is set to `true`. Defaults to `true`.
     */
    public readonly errorsOnLintFailure!: pulumi.Output<boolean | undefined>;
    /**
     * List of commands to execute for the job
     */
    public readonly executeSteps!: pulumi.Output<string[]>;
    /**
     * Flag for whether the job should generate documentation
     */
    public readonly generateDocs!: pulumi.Output<boolean | undefined>;
    /**
     * Should always be set to true as setting it to false is the same as creating a job in a deleted state. To create/keep a job in a 'deactivated' state, check  the `triggers` config.
     */
    public readonly isActive!: pulumi.Output<boolean | undefined>;
    /**
     * Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as 'job chaining').
     */
    public readonly jobCompletionTriggerCondition!: pulumi.Output<outputs.JobJobCompletionTriggerCondition | undefined>;
    /**
     * Can be used to enforce the job type betwen `ci`, `merge` and `scheduled`. Without this value the job type is inferred from the triggers configured
     */
    public readonly jobType!: pulumi.Output<string>;
    /**
     * Job name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Number of threads to use in the job
     */
    public readonly numThreads!: pulumi.Output<number | undefined>;
    /**
     * Project ID to create the job in
     */
    public readonly projectId!: pulumi.Output<number>;
    /**
     * Whether the CI job should compare data changes introduced by the code changes. Requires `deferringEnvironmentId` to be set. (Advanced CI needs to be activated in the dbt Cloud Account Settings first as well)
     */
    public readonly runCompareChanges!: pulumi.Output<boolean | undefined>;
    /**
     * Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.
     */
    public readonly runGenerateSources!: pulumi.Output<boolean | undefined>;
    /**
     * Whether the CI job should lint SQL changes. Defaults to `false`.
     */
    public readonly runLint!: pulumi.Output<boolean | undefined>;
    /**
     * Custom cron expression for schedule
     */
    public readonly scheduleCron!: pulumi.Output<string | undefined>;
    /**
     * List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
     */
    public readonly scheduleDays!: pulumi.Output<number[] | undefined>;
    /**
     * List of hours to execute the job at if running on a schedule
     */
    public readonly scheduleHours!: pulumi.Output<number[] | undefined>;
    /**
     * Number of hours between job executions if running on a schedule
     */
    public readonly scheduleInterval!: pulumi.Output<number | undefined>;
    /**
     * Type of schedule to use, one of every*day/ days*of*week/ custom*cron
     */
    public readonly scheduleType!: pulumi.Output<string | undefined>;
    /**
     * Whether this job defers on a previous run of itself
     */
    public readonly selfDeferring!: pulumi.Output<boolean | undefined>;
    /**
     * Target name for the dbt profile
     */
    public readonly targetName!: pulumi.Output<string | undefined>;
    /**
     * Number of seconds to allow the job to run before timing out
     */
    public readonly timeoutSeconds!: pulumi.Output<number | undefined>;
    /**
     * Flags for which types of triggers to use, the values are `githubWebhook`, `gitProviderWebhook`, `schedule` and `onMerge`. All flags should be listed and set with `true` or `false`. When `onMerge` is `true`, all the other values must be false.\n\n`customBranchOnly` used to be allowed but has been deprecated from the API. The jobs will use the custom branch of the environment. Please remove the `customBranchOnly` from your config. \n\nTo create a job in a 'deactivated' state, set all to `false`.
     */
    public readonly triggers!: pulumi.Output<{[key: string]: boolean}>;
    /**
     * Whether the CI job should be automatically triggered on draft PRs
     */
    public readonly triggersOnDraftPr!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Job resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JobArgs | JobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JobState | undefined;
            resourceInputs["compareChangesFlags"] = state ? state.compareChangesFlags : undefined;
            resourceInputs["dbtVersion"] = state ? state.dbtVersion : undefined;
            resourceInputs["deferringEnvironmentId"] = state ? state.deferringEnvironmentId : undefined;
            resourceInputs["deferringJobId"] = state ? state.deferringJobId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["errorsOnLintFailure"] = state ? state.errorsOnLintFailure : undefined;
            resourceInputs["executeSteps"] = state ? state.executeSteps : undefined;
            resourceInputs["generateDocs"] = state ? state.generateDocs : undefined;
            resourceInputs["isActive"] = state ? state.isActive : undefined;
            resourceInputs["jobCompletionTriggerCondition"] = state ? state.jobCompletionTriggerCondition : undefined;
            resourceInputs["jobType"] = state ? state.jobType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numThreads"] = state ? state.numThreads : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["runCompareChanges"] = state ? state.runCompareChanges : undefined;
            resourceInputs["runGenerateSources"] = state ? state.runGenerateSources : undefined;
            resourceInputs["runLint"] = state ? state.runLint : undefined;
            resourceInputs["scheduleCron"] = state ? state.scheduleCron : undefined;
            resourceInputs["scheduleDays"] = state ? state.scheduleDays : undefined;
            resourceInputs["scheduleHours"] = state ? state.scheduleHours : undefined;
            resourceInputs["scheduleInterval"] = state ? state.scheduleInterval : undefined;
            resourceInputs["scheduleType"] = state ? state.scheduleType : undefined;
            resourceInputs["selfDeferring"] = state ? state.selfDeferring : undefined;
            resourceInputs["targetName"] = state ? state.targetName : undefined;
            resourceInputs["timeoutSeconds"] = state ? state.timeoutSeconds : undefined;
            resourceInputs["triggers"] = state ? state.triggers : undefined;
            resourceInputs["triggersOnDraftPr"] = state ? state.triggersOnDraftPr : undefined;
        } else {
            const args = argsOrState as JobArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.executeSteps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'executeSteps'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.triggers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'triggers'");
            }
            resourceInputs["compareChangesFlags"] = args ? args.compareChangesFlags : undefined;
            resourceInputs["dbtVersion"] = args ? args.dbtVersion : undefined;
            resourceInputs["deferringEnvironmentId"] = args ? args.deferringEnvironmentId : undefined;
            resourceInputs["deferringJobId"] = args ? args.deferringJobId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["errorsOnLintFailure"] = args ? args.errorsOnLintFailure : undefined;
            resourceInputs["executeSteps"] = args ? args.executeSteps : undefined;
            resourceInputs["generateDocs"] = args ? args.generateDocs : undefined;
            resourceInputs["isActive"] = args ? args.isActive : undefined;
            resourceInputs["jobCompletionTriggerCondition"] = args ? args.jobCompletionTriggerCondition : undefined;
            resourceInputs["jobType"] = args ? args.jobType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numThreads"] = args ? args.numThreads : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["runCompareChanges"] = args ? args.runCompareChanges : undefined;
            resourceInputs["runGenerateSources"] = args ? args.runGenerateSources : undefined;
            resourceInputs["runLint"] = args ? args.runLint : undefined;
            resourceInputs["scheduleCron"] = args ? args.scheduleCron : undefined;
            resourceInputs["scheduleDays"] = args ? args.scheduleDays : undefined;
            resourceInputs["scheduleHours"] = args ? args.scheduleHours : undefined;
            resourceInputs["scheduleInterval"] = args ? args.scheduleInterval : undefined;
            resourceInputs["scheduleType"] = args ? args.scheduleType : undefined;
            resourceInputs["selfDeferring"] = args ? args.selfDeferring : undefined;
            resourceInputs["targetName"] = args ? args.targetName : undefined;
            resourceInputs["timeoutSeconds"] = args ? args.timeoutSeconds : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["triggersOnDraftPr"] = args ? args.triggersOnDraftPr : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Job.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Job resources.
 */
export interface JobState {
    /**
     * The model selector for checking changes in the compare changes Advanced CI feature
     */
    compareChangesFlags?: pulumi.Input<string>;
    /**
     * Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions
     */
    dbtVersion?: pulumi.Input<string>;
    /**
     * Environment identifier that this job defers to (new deferring approach)
     */
    deferringEnvironmentId?: pulumi.Input<number>;
    /**
     * Job identifier that this job defers to (legacy deferring approach)
     */
    deferringJobId?: pulumi.Input<number>;
    /**
     * Description for the job
     */
    description?: pulumi.Input<string>;
    /**
     * Environment ID to create the job in
     */
    environmentId?: pulumi.Input<number>;
    /**
     * Whether the CI job should fail when a lint error is found. Only used when `runLint` is set to `true`. Defaults to `true`.
     */
    errorsOnLintFailure?: pulumi.Input<boolean>;
    /**
     * List of commands to execute for the job
     */
    executeSteps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flag for whether the job should generate documentation
     */
    generateDocs?: pulumi.Input<boolean>;
    /**
     * Should always be set to true as setting it to false is the same as creating a job in a deleted state. To create/keep a job in a 'deactivated' state, check  the `triggers` config.
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as 'job chaining').
     */
    jobCompletionTriggerCondition?: pulumi.Input<inputs.JobJobCompletionTriggerCondition>;
    /**
     * Can be used to enforce the job type betwen `ci`, `merge` and `scheduled`. Without this value the job type is inferred from the triggers configured
     */
    jobType?: pulumi.Input<string>;
    /**
     * Job name
     */
    name?: pulumi.Input<string>;
    /**
     * Number of threads to use in the job
     */
    numThreads?: pulumi.Input<number>;
    /**
     * Project ID to create the job in
     */
    projectId?: pulumi.Input<number>;
    /**
     * Whether the CI job should compare data changes introduced by the code changes. Requires `deferringEnvironmentId` to be set. (Advanced CI needs to be activated in the dbt Cloud Account Settings first as well)
     */
    runCompareChanges?: pulumi.Input<boolean>;
    /**
     * Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.
     */
    runGenerateSources?: pulumi.Input<boolean>;
    /**
     * Whether the CI job should lint SQL changes. Defaults to `false`.
     */
    runLint?: pulumi.Input<boolean>;
    /**
     * Custom cron expression for schedule
     */
    scheduleCron?: pulumi.Input<string>;
    /**
     * List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
     */
    scheduleDays?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of hours to execute the job at if running on a schedule
     */
    scheduleHours?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Number of hours between job executions if running on a schedule
     */
    scheduleInterval?: pulumi.Input<number>;
    /**
     * Type of schedule to use, one of every*day/ days*of*week/ custom*cron
     */
    scheduleType?: pulumi.Input<string>;
    /**
     * Whether this job defers on a previous run of itself
     */
    selfDeferring?: pulumi.Input<boolean>;
    /**
     * Target name for the dbt profile
     */
    targetName?: pulumi.Input<string>;
    /**
     * Number of seconds to allow the job to run before timing out
     */
    timeoutSeconds?: pulumi.Input<number>;
    /**
     * Flags for which types of triggers to use, the values are `githubWebhook`, `gitProviderWebhook`, `schedule` and `onMerge`. All flags should be listed and set with `true` or `false`. When `onMerge` is `true`, all the other values must be false.\n\n`customBranchOnly` used to be allowed but has been deprecated from the API. The jobs will use the custom branch of the environment. Please remove the `customBranchOnly` from your config. \n\nTo create a job in a 'deactivated' state, set all to `false`.
     */
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
    /**
     * Whether the CI job should be automatically triggered on draft PRs
     */
    triggersOnDraftPr?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Job resource.
 */
export interface JobArgs {
    /**
     * The model selector for checking changes in the compare changes Advanced CI feature
     */
    compareChangesFlags?: pulumi.Input<string>;
    /**
     * Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions
     */
    dbtVersion?: pulumi.Input<string>;
    /**
     * Environment identifier that this job defers to (new deferring approach)
     */
    deferringEnvironmentId?: pulumi.Input<number>;
    /**
     * Job identifier that this job defers to (legacy deferring approach)
     */
    deferringJobId?: pulumi.Input<number>;
    /**
     * Description for the job
     */
    description?: pulumi.Input<string>;
    /**
     * Environment ID to create the job in
     */
    environmentId: pulumi.Input<number>;
    /**
     * Whether the CI job should fail when a lint error is found. Only used when `runLint` is set to `true`. Defaults to `true`.
     */
    errorsOnLintFailure?: pulumi.Input<boolean>;
    /**
     * List of commands to execute for the job
     */
    executeSteps: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flag for whether the job should generate documentation
     */
    generateDocs?: pulumi.Input<boolean>;
    /**
     * Should always be set to true as setting it to false is the same as creating a job in a deleted state. To create/keep a job in a 'deactivated' state, check  the `triggers` config.
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as 'job chaining').
     */
    jobCompletionTriggerCondition?: pulumi.Input<inputs.JobJobCompletionTriggerCondition>;
    /**
     * Can be used to enforce the job type betwen `ci`, `merge` and `scheduled`. Without this value the job type is inferred from the triggers configured
     */
    jobType?: pulumi.Input<string>;
    /**
     * Job name
     */
    name?: pulumi.Input<string>;
    /**
     * Number of threads to use in the job
     */
    numThreads?: pulumi.Input<number>;
    /**
     * Project ID to create the job in
     */
    projectId: pulumi.Input<number>;
    /**
     * Whether the CI job should compare data changes introduced by the code changes. Requires `deferringEnvironmentId` to be set. (Advanced CI needs to be activated in the dbt Cloud Account Settings first as well)
     */
    runCompareChanges?: pulumi.Input<boolean>;
    /**
     * Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.
     */
    runGenerateSources?: pulumi.Input<boolean>;
    /**
     * Whether the CI job should lint SQL changes. Defaults to `false`.
     */
    runLint?: pulumi.Input<boolean>;
    /**
     * Custom cron expression for schedule
     */
    scheduleCron?: pulumi.Input<string>;
    /**
     * List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
     */
    scheduleDays?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of hours to execute the job at if running on a schedule
     */
    scheduleHours?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Number of hours between job executions if running on a schedule
     */
    scheduleInterval?: pulumi.Input<number>;
    /**
     * Type of schedule to use, one of every*day/ days*of*week/ custom*cron
     */
    scheduleType?: pulumi.Input<string>;
    /**
     * Whether this job defers on a previous run of itself
     */
    selfDeferring?: pulumi.Input<boolean>;
    /**
     * Target name for the dbt profile
     */
    targetName?: pulumi.Input<string>;
    /**
     * Number of seconds to allow the job to run before timing out
     */
    timeoutSeconds?: pulumi.Input<number>;
    /**
     * Flags for which types of triggers to use, the values are `githubWebhook`, `gitProviderWebhook`, `schedule` and `onMerge`. All flags should be listed and set with `true` or `false`. When `onMerge` is `true`, all the other values must be false.\n\n`customBranchOnly` used to be allowed but has been deprecated from the API. The jobs will use the custom branch of the environment. Please remove the `customBranchOnly` from your config. \n\nTo create a job in a 'deactivated' state, set all to `false`.
     */
    triggers: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
    /**
     * Whether the CI job should be automatically triggered on draft PRs
     */
    triggersOnDraftPr?: pulumi.Input<boolean>;
}

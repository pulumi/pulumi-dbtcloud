// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages a dbt Cloud project.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@pulumi/dbtcloud";
 *
 * const dbtProject = new dbtcloud.Project("dbt_project", {name: "Analytics"});
 * const dbtProjectWithDescription = new dbtcloud.Project("dbt_project_with_description", {
 *     name: "Analytics with description",
 *     description: "My awesome analytics project",
 * });
 * const dbtProjectWithSubdir = new dbtcloud.Project("dbt_project_with_subdir", {
 *     name: "Analytics in Subdir",
 *     dbtProjectSubdirectory: "path",
 * });
 * ```
 *
 * ## Import
 *
 * using  import blocks (requires Terraform >= 1.5)
 *
 * import {
 *
 *   to = dbtcloud_project.my_project
 *
 *   id = "project_id"
 *
 * }
 *
 * import {
 *
 *   to = dbtcloud_project.my_project
 *
 *   id = "12345"
 *
 * }
 *
 * using the older import command
 *
 * ```sh
 * $ pulumi import dbtcloud:index/project:Project my_project "project_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/project:Project my_project 12345
 * ```
 */
export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    /**
     * DBT project subdirectory
     */
    public readonly dbtProjectSubdirectory!: pulumi.Output<string>;
    /**
     * Description for the project. Will show in dbt Explorer.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Project name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The type of dbt project (0=default or 1=hybrid)
     */
    public readonly type!: pulumi.Output<number>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["dbtProjectSubdirectory"] = state ? state.dbtProjectSubdirectory : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            resourceInputs["dbtProjectSubdirectory"] = args ? args.dbtProjectSubdirectory : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    /**
     * DBT project subdirectory
     */
    dbtProjectSubdirectory?: pulumi.Input<string>;
    /**
     * Description for the project. Will show in dbt Explorer.
     */
    description?: pulumi.Input<string>;
    /**
     * Project name
     */
    name?: pulumi.Input<string>;
    /**
     * The type of dbt project (0=default or 1=hybrid)
     */
    type?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    /**
     * DBT project subdirectory
     */
    dbtProjectSubdirectory?: pulumi.Input<string>;
    /**
     * Description for the project. Will show in dbt Explorer.
     */
    description?: pulumi.Input<string>;
    /**
     * Project name
     */
    name?: pulumi.Input<string>;
    /**
     * The type of dbt project (0=default or 1=hybrid)
     */
    type?: pulumi.Input<number>;
}

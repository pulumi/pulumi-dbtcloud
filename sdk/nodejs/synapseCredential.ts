// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Synapse credential resource
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@pulumi/dbtcloud";
 *
 * // when using sql authentication
 * const mySynapseCredSql = new dbtcloud.SynapseCredential("my_synapse_cred_sql", {
 *     projectId: dbtProject.id,
 *     authentication: "sql",
 *     schema: "my_schema",
 *     user: "my_user",
 *     password: "my_password",
 *     schemaAuthorization: "abcd",
 * });
 * // when using AD authentication
 * const mySynapseCredAd = new dbtcloud.SynapseCredential("my_synapse_cred_ad", {
 *     projectId: dbtProject.id,
 *     authentication: "ActiveDirectoryPassword",
 *     schema: "my_schema",
 *     user: "my_user",
 *     password: "my_password",
 *     schemaAuthorization: "abcd",
 * });
 * // when using service principal authentication
 * const mySynapseCredServPrinc = new dbtcloud.SynapseCredential("my_synapse_cred_serv_princ", {
 *     projectId: dbtProject.id,
 *     authentication: "ServicePrincipal",
 *     schema: "my_schema",
 *     clientId: "my_client_id",
 *     tenantId: "my_tenant_id",
 *     clientSecret: "my_secret",
 *     schemaAuthorization: "abcd",
 * });
 * ```
 *
 * ## Import
 *
 * using  import blocks (requires Terraform >= 1.5)
 *
 * import {
 *
 *   to = dbtcloud_synapse_credential.my_synapse_credential
 *
 *   id = "project_id:credential_id"
 *
 * }
 *
 * import {
 *
 *   to = dbtcloud_synapse_credential.my_synapse_credential
 *
 *   id = "12345:6789"
 *
 * }
 *
 * using the older import command
 *
 * ```sh
 * $ pulumi import dbtcloud:index/synapseCredential:SynapseCredential my_synapse_credential "project_id:credential_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/synapseCredential:SynapseCredential my_synapse_credential 12345:6789
 * ```
 */
export class SynapseCredential extends pulumi.CustomResource {
    /**
     * Get an existing SynapseCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SynapseCredentialState, opts?: pulumi.CustomResourceOptions): SynapseCredential {
        return new SynapseCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/synapseCredential:SynapseCredential';

    /**
     * Returns true if the given object is an instance of SynapseCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SynapseCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SynapseCredential.__pulumiType;
    }

    /**
     * The type of the adapter (synapse)
     */
    declare public readonly adapterType: pulumi.Output<string>;
    /**
     * Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)
     */
    declare public readonly authentication: pulumi.Output<string>;
    /**
     * The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
     */
    declare public readonly clientId: pulumi.Output<string>;
    /**
     * The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
     */
    declare public readonly clientSecret: pulumi.Output<string>;
    /**
     * The internal credential ID
     */
    declare public /*out*/ readonly credentialId: pulumi.Output<number>;
    /**
     * The password for the account to connect to. Only used when connection with AD user/pass
     */
    declare public readonly password: pulumi.Output<string>;
    /**
     * Project ID to create the Synapse credential in
     */
    declare public readonly projectId: pulumi.Output<number>;
    /**
     * The schema where to create the dbt models
     */
    declare public readonly schema: pulumi.Output<string>;
    /**
     * Optionally set this to the principal who should own the schemas created by dbt
     */
    declare public readonly schemaAuthorization: pulumi.Output<string>;
    /**
     * The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
     */
    declare public readonly tenantId: pulumi.Output<string>;
    /**
     * The username of the Synapse account to connect to. Only used when connection with AD user/pass
     */
    declare public readonly user: pulumi.Output<string>;

    /**
     * Create a SynapseCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SynapseCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SynapseCredentialArgs | SynapseCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SynapseCredentialState | undefined;
            resourceInputs["adapterType"] = state?.adapterType;
            resourceInputs["authentication"] = state?.authentication;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["clientSecret"] = state?.clientSecret;
            resourceInputs["credentialId"] = state?.credentialId;
            resourceInputs["password"] = state?.password;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["schemaAuthorization"] = state?.schemaAuthorization;
            resourceInputs["tenantId"] = state?.tenantId;
            resourceInputs["user"] = state?.user;
        } else {
            const args = argsOrState as SynapseCredentialArgs | undefined;
            if (args?.adapterType === undefined && !opts.urn) {
                throw new Error("Missing required property 'adapterType'");
            }
            if (args?.authentication === undefined && !opts.urn) {
                throw new Error("Missing required property 'authentication'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.schema === undefined && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            resourceInputs["adapterType"] = args?.adapterType;
            resourceInputs["authentication"] = args?.authentication;
            resourceInputs["clientId"] = args?.clientId;
            resourceInputs["clientSecret"] = args?.clientSecret ? pulumi.secret(args.clientSecret) : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["schemaAuthorization"] = args?.schemaAuthorization;
            resourceInputs["tenantId"] = args?.tenantId;
            resourceInputs["user"] = args?.user;
            resourceInputs["credentialId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientSecret", "password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SynapseCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SynapseCredential resources.
 */
export interface SynapseCredentialState {
    /**
     * The type of the adapter (synapse)
     */
    adapterType?: pulumi.Input<string>;
    /**
     * Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)
     */
    authentication?: pulumi.Input<string>;
    /**
     * The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * The internal credential ID
     */
    credentialId?: pulumi.Input<number>;
    /**
     * The password for the account to connect to. Only used when connection with AD user/pass
     */
    password?: pulumi.Input<string>;
    /**
     * Project ID to create the Synapse credential in
     */
    projectId?: pulumi.Input<number>;
    /**
     * The schema where to create the dbt models
     */
    schema?: pulumi.Input<string>;
    /**
     * Optionally set this to the principal who should own the schemas created by dbt
     */
    schemaAuthorization?: pulumi.Input<string>;
    /**
     * The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The username of the Synapse account to connect to. Only used when connection with AD user/pass
     */
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SynapseCredential resource.
 */
export interface SynapseCredentialArgs {
    /**
     * The type of the adapter (synapse)
     */
    adapterType: pulumi.Input<string>;
    /**
     * Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)
     */
    authentication: pulumi.Input<string>;
    /**
     * The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * The password for the account to connect to. Only used when connection with AD user/pass
     */
    password?: pulumi.Input<string>;
    /**
     * Project ID to create the Synapse credential in
     */
    projectId: pulumi.Input<number>;
    /**
     * The schema where to create the dbt models
     */
    schema: pulumi.Input<string>;
    /**
     * Optionally set this to the principal who should own the schemas created by dbt
     */
    schemaAuthorization?: pulumi.Input<string>;
    /**
     * The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The username of the Synapse account to connect to. Only used when connection with AD user/pass
     */
    user?: pulumi.Input<string>;
}

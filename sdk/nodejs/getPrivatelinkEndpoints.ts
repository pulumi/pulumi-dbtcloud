// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieve information about all PrivateLink endpoints in the dbt Cloud account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@pulumi/dbtcloud";
 *
 * export = async () => {
 *     const all = await dbtcloud.getPrivatelinkEndpoints({});
 *     const snowflakeEndpoint = .filter(endpoint => endpoint.name == "Snowflake Production Endpoint").map(endpoint => (endpoint))[0];
 *     // Use the endpoint in a global connection
 *     const snowflake = new dbtcloud.GlobalConnection("snowflake", {
 *         name: "Snowflake via PrivateLink",
 *         privateLinkEndpointId: snowflakeEndpoint.id,
 *         snowflake: {
 *             account: "my-snowflake-account",
 *             database: "ANALYTICS",
 *             warehouse: "COMPUTE_WH",
 *         },
 *     });
 *     const snowflakeEndpoints = .filter(endpoint => endpoint.type == "snowflake").map(endpoint => (endpoint));
 *     // Create connections for all Snowflake endpoints
 *     const snowflakeConnections: dbtcloud.GlobalConnection[] = [];
 *     for (const range of Object.entries(.reduce((__obj, ep) => ({ ...__obj, [ep.id]: ep }))).map(([k, v]) => ({key: k, value: v}))) {
 *         snowflakeConnections.push(new dbtcloud.GlobalConnection(`snowflake_connections-${range.key}`, {
 *             name: `Connection for ${range.value.name}`,
 *             privateLinkEndpointId: range.value.id,
 *             snowflake: {
 *                 account: "my-account",
 *                 database: "ANALYTICS",
 *                 warehouse: "COMPUTE_WH",
 *             },
 *         }));
 *     }
 * }
 * ```
 */
export function getPrivatelinkEndpoints(opts?: pulumi.InvokeOptions): Promise<GetPrivatelinkEndpointsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dbtcloud:index/getPrivatelinkEndpoints:getPrivatelinkEndpoints", {
    }, opts);
}

/**
 * A collection of values returned by getPrivatelinkEndpoints.
 */
export interface GetPrivatelinkEndpointsResult {
    /**
     * A list of all PrivateLink endpoints in the account
     */
    readonly endpoints: outputs.GetPrivatelinkEndpointsEndpoint[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
}
/**
 * Retrieve information about all PrivateLink endpoints in the dbt Cloud account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@pulumi/dbtcloud";
 *
 * export = async () => {
 *     const all = await dbtcloud.getPrivatelinkEndpoints({});
 *     const snowflakeEndpoint = .filter(endpoint => endpoint.name == "Snowflake Production Endpoint").map(endpoint => (endpoint))[0];
 *     // Use the endpoint in a global connection
 *     const snowflake = new dbtcloud.GlobalConnection("snowflake", {
 *         name: "Snowflake via PrivateLink",
 *         privateLinkEndpointId: snowflakeEndpoint.id,
 *         snowflake: {
 *             account: "my-snowflake-account",
 *             database: "ANALYTICS",
 *             warehouse: "COMPUTE_WH",
 *         },
 *     });
 *     const snowflakeEndpoints = .filter(endpoint => endpoint.type == "snowflake").map(endpoint => (endpoint));
 *     // Create connections for all Snowflake endpoints
 *     const snowflakeConnections: dbtcloud.GlobalConnection[] = [];
 *     for (const range of Object.entries(.reduce((__obj, ep) => ({ ...__obj, [ep.id]: ep }))).map(([k, v]) => ({key: k, value: v}))) {
 *         snowflakeConnections.push(new dbtcloud.GlobalConnection(`snowflake_connections-${range.key}`, {
 *             name: `Connection for ${range.value.name}`,
 *             privateLinkEndpointId: range.value.id,
 *             snowflake: {
 *                 account: "my-account",
 *                 database: "ANALYTICS",
 *                 warehouse: "COMPUTE_WH",
 *             },
 *         }));
 *     }
 * }
 * ```
 */
export function getPrivatelinkEndpointsOutput(opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetPrivatelinkEndpointsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("dbtcloud:index/getPrivatelinkEndpoints:getPrivatelinkEndpoints", {
    }, opts);
}

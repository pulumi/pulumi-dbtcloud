// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Redshift credential resource
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@pulumi/dbtcloud";
 *
 * const redshift = new dbtcloud.RedshiftCredential("redshift", {
 *     numThreads: 16,
 *     projectId: testProject.id,
 *     defaultSchema: "my_schema",
 *     username: "my_username",
 *     password: "my_sensitive_password",
 *     isActive: true,
 * });
 * ```
 *
 * ## Import
 *
 * using  import blocks (requires Terraform >= 1.5)
 *
 * import {
 *
 *   to = dbtcloud_redshift_credential.my_credential
 *
 *   id = "project_id:credential_id"
 *
 * }
 *
 * import {
 *
 *   to = dbtcloud_redshift_credential.my_credential
 *
 *   id = "12345:6789"
 *
 * }
 *
 * using the older import command
 *
 * ```sh
 * $ pulumi import dbtcloud:index/redshiftCredential:RedshiftCredential my_credential "project_id:credential_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/redshiftCredential:RedshiftCredential my_credential 12345:6789
 * ```
 */
export class RedshiftCredential extends pulumi.CustomResource {
    /**
     * Get an existing RedshiftCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedshiftCredentialState, opts?: pulumi.CustomResourceOptions): RedshiftCredential {
        return new RedshiftCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/redshiftCredential:RedshiftCredential';

    /**
     * Returns true if the given object is an instance of RedshiftCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedshiftCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedshiftCredential.__pulumiType;
    }

    /**
     * The internal credential ID
     */
    public /*out*/ readonly credentialId!: pulumi.Output<number>;
    /**
     * Default schema name
     */
    public readonly defaultSchema!: pulumi.Output<string>;
    /**
     * Whether the Redshift credential is active
     */
    public readonly isActive!: pulumi.Output<boolean>;
    /**
     * Number of threads to use
     */
    public readonly numThreads!: pulumi.Output<number>;
    /**
     * The password for the Redshift account
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Project ID to create the Redshift credential in
     */
    public readonly projectId!: pulumi.Output<number>;
    /**
     * The username for the Redshift account.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a RedshiftCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedshiftCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedshiftCredentialArgs | RedshiftCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedshiftCredentialState | undefined;
            resourceInputs["credentialId"] = state ? state.credentialId : undefined;
            resourceInputs["defaultSchema"] = state ? state.defaultSchema : undefined;
            resourceInputs["isActive"] = state ? state.isActive : undefined;
            resourceInputs["numThreads"] = state ? state.numThreads : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as RedshiftCredentialArgs | undefined;
            if ((!args || args.defaultSchema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultSchema'");
            }
            if ((!args || args.numThreads === undefined) && !opts.urn) {
                throw new Error("Missing required property 'numThreads'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["defaultSchema"] = args ? args.defaultSchema : undefined;
            resourceInputs["isActive"] = args ? args.isActive : undefined;
            resourceInputs["numThreads"] = args ? args.numThreads : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["credentialId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RedshiftCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RedshiftCredential resources.
 */
export interface RedshiftCredentialState {
    /**
     * The internal credential ID
     */
    credentialId?: pulumi.Input<number>;
    /**
     * Default schema name
     */
    defaultSchema?: pulumi.Input<string>;
    /**
     * Whether the Redshift credential is active
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Number of threads to use
     */
    numThreads?: pulumi.Input<number>;
    /**
     * The password for the Redshift account
     */
    password?: pulumi.Input<string>;
    /**
     * Project ID to create the Redshift credential in
     */
    projectId?: pulumi.Input<number>;
    /**
     * The username for the Redshift account.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RedshiftCredential resource.
 */
export interface RedshiftCredentialArgs {
    /**
     * Default schema name
     */
    defaultSchema: pulumi.Input<string>;
    /**
     * Whether the Redshift credential is active
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Number of threads to use
     */
    numThreads: pulumi.Input<number>;
    /**
     * The password for the Redshift account
     */
    password?: pulumi.Input<string>;
    /**
     * Project ID to create the Redshift credential in
     */
    projectId: pulumi.Input<number>;
    /**
     * The username for the Redshift account.
     */
    username?: pulumi.Input<string>;
}

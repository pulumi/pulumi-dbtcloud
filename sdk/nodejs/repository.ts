// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource allows you to manage connections to git repositories in dbt Cloud.
 *
 * By itself, this resource won't show you the repository in the dbt Cloud UI.
 * You will need to also set up a `dbtcloud.ProjectRepository` resource as well to link your dbt Cloud project and the git repository.
 *
 * In order to find the `githubInstallationId`, you can log in to dbt Cloud, replace `<dbt_cloud_url>` by your dbt Cloud
 * URL and run the following commands in the Google Chrome console:
 *
 * Alternatively, you can go to the page `https://<dbt_cloud_url>/api/v2/integrations/github/installations/` and read the
 * value of `id`  or use the `http` provider to retrieve it automatically like in the example below.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * using  import blocks (requires Terraform >= 1.5)
 *
 * import {
 *
 *   to = dbtcloud_repository.my_repository
 *
 *   id = "project_id:repository_id"
 *
 * }
 *
 * import {
 *
 *   to = dbtcloud_repository.my_repository
 *
 *   id = "12345:6789"
 *
 * }
 *
 * using the older import command
 *
 * ```sh
 * $ pulumi import dbtcloud:index/repository:Repository my_repository "project_id:repository_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/repository:Repository my_repository 12345:6789
 * ```
 */
export class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryState, opts?: pulumi.CustomResourceOptions): Repository {
        return new Repository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/repository:Repository';

    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }

    /**
     * The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsProject` and the project name - (required for ADO native integration only)
     */
    declare public readonly azureActiveDirectoryProjectId: pulumi.Output<string>;
    /**
     * The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsRepository` along with the ADO Project ID and the repository name - (required for ADO native integration only)
     */
    declare public readonly azureActiveDirectoryRepositoryId: pulumi.Output<string>;
    /**
     * If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will be triggered - (for ADO native integration only)
     */
    declare public readonly azureBypassWebhookRegistrationFailure: pulumi.Output<boolean>;
    /**
     * Public key generated by dbt when using `deployKey` clone strategy
     */
    declare public /*out*/ readonly deployKey: pulumi.Output<string>;
    /**
     * Whether we should return the public deploy key - (for the `deployKey` strategy)
     *
     * @deprecated This field is deprecated and will be removed in a future version of the provider, please remove it from your configuration. The key is always fetched when the clone strategy is `deployKey`
     */
    declare public readonly fetchDeployKey: pulumi.Output<boolean>;
    /**
     * Git clone strategy for the repository. Can be `deployKey` (default) for cloning via SSH Deploy Key, `githubApp` for GitHub native integration, `deployToken` for the GitLab native integration and `azureActiveDirectoryApp` for ADO native integration
     */
    declare public readonly gitCloneStrategy: pulumi.Output<string>;
    /**
     * Identifier for the GitHub App - (for GitHub native integration only)
     */
    declare public readonly githubInstallationId: pulumi.Output<number | undefined>;
    /**
     * Identifier for the Gitlab project -  (for GitLab native integration only)
     */
    declare public readonly gitlabProjectId: pulumi.Output<number | undefined>;
    /**
     * Whether the repository is active
     */
    declare public readonly isActive: pulumi.Output<boolean>;
    /**
     * Identifier for the PrivateLink endpoint.
     */
    declare public readonly privateLinkEndpointId: pulumi.Output<string | undefined>;
    /**
     * Project ID to create the repository in
     */
    declare public readonly projectId: pulumi.Output<number>;
    /**
     * URL template for creating a pull request. If it is not set, the default template will create a PR from the current branch to the branch configured in the Development environment.
     */
    declare public readonly pullRequestUrlTemplate: pulumi.Output<string>;
    /**
     * Git URL for the repository or <Group>/<Project> for Gitlab
     */
    declare public readonly remoteUrl: pulumi.Output<string>;
    /**
     * Credentials ID for the repository (From the repository side not the dbt Cloud ID)
     */
    declare public /*out*/ readonly repositoryCredentialsId: pulumi.Output<number>;
    /**
     * Repository Identifier
     */
    declare public /*out*/ readonly repositoryId: pulumi.Output<number>;

    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryArgs | RepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryState | undefined;
            resourceInputs["azureActiveDirectoryProjectId"] = state?.azureActiveDirectoryProjectId;
            resourceInputs["azureActiveDirectoryRepositoryId"] = state?.azureActiveDirectoryRepositoryId;
            resourceInputs["azureBypassWebhookRegistrationFailure"] = state?.azureBypassWebhookRegistrationFailure;
            resourceInputs["deployKey"] = state?.deployKey;
            resourceInputs["fetchDeployKey"] = state?.fetchDeployKey;
            resourceInputs["gitCloneStrategy"] = state?.gitCloneStrategy;
            resourceInputs["githubInstallationId"] = state?.githubInstallationId;
            resourceInputs["gitlabProjectId"] = state?.gitlabProjectId;
            resourceInputs["isActive"] = state?.isActive;
            resourceInputs["privateLinkEndpointId"] = state?.privateLinkEndpointId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["pullRequestUrlTemplate"] = state?.pullRequestUrlTemplate;
            resourceInputs["remoteUrl"] = state?.remoteUrl;
            resourceInputs["repositoryCredentialsId"] = state?.repositoryCredentialsId;
            resourceInputs["repositoryId"] = state?.repositoryId;
        } else {
            const args = argsOrState as RepositoryArgs | undefined;
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.remoteUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'remoteUrl'");
            }
            resourceInputs["azureActiveDirectoryProjectId"] = args?.azureActiveDirectoryProjectId;
            resourceInputs["azureActiveDirectoryRepositoryId"] = args?.azureActiveDirectoryRepositoryId;
            resourceInputs["azureBypassWebhookRegistrationFailure"] = args?.azureBypassWebhookRegistrationFailure;
            resourceInputs["fetchDeployKey"] = args?.fetchDeployKey;
            resourceInputs["gitCloneStrategy"] = args?.gitCloneStrategy;
            resourceInputs["githubInstallationId"] = args?.githubInstallationId;
            resourceInputs["gitlabProjectId"] = args?.gitlabProjectId;
            resourceInputs["isActive"] = args?.isActive;
            resourceInputs["privateLinkEndpointId"] = args?.privateLinkEndpointId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["pullRequestUrlTemplate"] = args?.pullRequestUrlTemplate;
            resourceInputs["remoteUrl"] = args?.remoteUrl;
            resourceInputs["deployKey"] = undefined /*out*/;
            resourceInputs["repositoryCredentialsId"] = undefined /*out*/;
            resourceInputs["repositoryId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Repository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Repository resources.
 */
export interface RepositoryState {
    /**
     * The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsProject` and the project name - (required for ADO native integration only)
     */
    azureActiveDirectoryProjectId?: pulumi.Input<string>;
    /**
     * The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsRepository` along with the ADO Project ID and the repository name - (required for ADO native integration only)
     */
    azureActiveDirectoryRepositoryId?: pulumi.Input<string>;
    /**
     * If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will be triggered - (for ADO native integration only)
     */
    azureBypassWebhookRegistrationFailure?: pulumi.Input<boolean>;
    /**
     * Public key generated by dbt when using `deployKey` clone strategy
     */
    deployKey?: pulumi.Input<string>;
    /**
     * Whether we should return the public deploy key - (for the `deployKey` strategy)
     *
     * @deprecated This field is deprecated and will be removed in a future version of the provider, please remove it from your configuration. The key is always fetched when the clone strategy is `deployKey`
     */
    fetchDeployKey?: pulumi.Input<boolean>;
    /**
     * Git clone strategy for the repository. Can be `deployKey` (default) for cloning via SSH Deploy Key, `githubApp` for GitHub native integration, `deployToken` for the GitLab native integration and `azureActiveDirectoryApp` for ADO native integration
     */
    gitCloneStrategy?: pulumi.Input<string>;
    /**
     * Identifier for the GitHub App - (for GitHub native integration only)
     */
    githubInstallationId?: pulumi.Input<number>;
    /**
     * Identifier for the Gitlab project -  (for GitLab native integration only)
     */
    gitlabProjectId?: pulumi.Input<number>;
    /**
     * Whether the repository is active
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Identifier for the PrivateLink endpoint.
     */
    privateLinkEndpointId?: pulumi.Input<string>;
    /**
     * Project ID to create the repository in
     */
    projectId?: pulumi.Input<number>;
    /**
     * URL template for creating a pull request. If it is not set, the default template will create a PR from the current branch to the branch configured in the Development environment.
     */
    pullRequestUrlTemplate?: pulumi.Input<string>;
    /**
     * Git URL for the repository or <Group>/<Project> for Gitlab
     */
    remoteUrl?: pulumi.Input<string>;
    /**
     * Credentials ID for the repository (From the repository side not the dbt Cloud ID)
     */
    repositoryCredentialsId?: pulumi.Input<number>;
    /**
     * Repository Identifier
     */
    repositoryId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    /**
     * The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsProject` and the project name - (required for ADO native integration only)
     */
    azureActiveDirectoryProjectId?: pulumi.Input<string>;
    /**
     * The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsRepository` along with the ADO Project ID and the repository name - (required for ADO native integration only)
     */
    azureActiveDirectoryRepositoryId?: pulumi.Input<string>;
    /**
     * If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will be triggered - (for ADO native integration only)
     */
    azureBypassWebhookRegistrationFailure?: pulumi.Input<boolean>;
    /**
     * Whether we should return the public deploy key - (for the `deployKey` strategy)
     *
     * @deprecated This field is deprecated and will be removed in a future version of the provider, please remove it from your configuration. The key is always fetched when the clone strategy is `deployKey`
     */
    fetchDeployKey?: pulumi.Input<boolean>;
    /**
     * Git clone strategy for the repository. Can be `deployKey` (default) for cloning via SSH Deploy Key, `githubApp` for GitHub native integration, `deployToken` for the GitLab native integration and `azureActiveDirectoryApp` for ADO native integration
     */
    gitCloneStrategy?: pulumi.Input<string>;
    /**
     * Identifier for the GitHub App - (for GitHub native integration only)
     */
    githubInstallationId?: pulumi.Input<number>;
    /**
     * Identifier for the Gitlab project -  (for GitLab native integration only)
     */
    gitlabProjectId?: pulumi.Input<number>;
    /**
     * Whether the repository is active
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Identifier for the PrivateLink endpoint.
     */
    privateLinkEndpointId?: pulumi.Input<string>;
    /**
     * Project ID to create the repository in
     */
    projectId: pulumi.Input<number>;
    /**
     * URL template for creating a pull request. If it is not set, the default template will create a PR from the current branch to the branch configured in the Development environment.
     */
    pullRequestUrlTemplate?: pulumi.Input<string>;
    /**
     * Git URL for the repository or <Group>/<Project> for Gitlab
     */
    remoteUrl: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Databricks credential resource. This resource is composed of a Databricks credential and a Semantic Layer configuration. It is used to create a Databricks credential for the Semantic Layer.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * using import blocks (requires Terraform >= 1.5)
 *
 * import {
 *
 *   to = dbtcloud_databricks_semantic_layer_credential.example
 *
 *   id = "credential_id"
 *
 * }
 *
 * import {
 *
 *   to = dbtcloud_databricks_semantic_layer_credential.example
 *
 *   id = "12345"
 *
 * }
 *
 * using the older import command
 *
 * ```sh
 * $ pulumi import dbtcloud:index/databricksSemanticLayerCredential:DatabricksSemanticLayerCredential example "credential_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/databricksSemanticLayerCredential:DatabricksSemanticLayerCredential example 12345
 * ```
 */
export class DatabricksSemanticLayerCredential extends pulumi.CustomResource {
    /**
     * Get an existing DatabricksSemanticLayerCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabricksSemanticLayerCredentialState, opts?: pulumi.CustomResourceOptions): DatabricksSemanticLayerCredential {
        return new DatabricksSemanticLayerCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/databricksSemanticLayerCredential:DatabricksSemanticLayerCredential';

    /**
     * Returns true if the given object is an instance of DatabricksSemanticLayerCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabricksSemanticLayerCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabricksSemanticLayerCredential.__pulumiType;
    }

    /**
     * Semantic Layer credential configuration details.
     */
    declare public readonly configuration: pulumi.Output<outputs.DatabricksSemanticLayerCredentialConfiguration>;
    /**
     * Databricks credential details, but used in the context of the Semantic Layer.
     */
    declare public readonly credential: pulumi.Output<outputs.DatabricksSemanticLayerCredentialCredential>;

    /**
     * Create a DatabricksSemanticLayerCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabricksSemanticLayerCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabricksSemanticLayerCredentialArgs | DatabricksSemanticLayerCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabricksSemanticLayerCredentialState | undefined;
            resourceInputs["configuration"] = state?.configuration;
            resourceInputs["credential"] = state?.credential;
        } else {
            const args = argsOrState as DatabricksSemanticLayerCredentialArgs | undefined;
            if (args?.configuration === undefined && !opts.urn) {
                throw new Error("Missing required property 'configuration'");
            }
            if (args?.credential === undefined && !opts.urn) {
                throw new Error("Missing required property 'credential'");
            }
            resourceInputs["configuration"] = args?.configuration;
            resourceInputs["credential"] = args?.credential;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabricksSemanticLayerCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatabricksSemanticLayerCredential resources.
 */
export interface DatabricksSemanticLayerCredentialState {
    /**
     * Semantic Layer credential configuration details.
     */
    configuration?: pulumi.Input<inputs.DatabricksSemanticLayerCredentialConfiguration>;
    /**
     * Databricks credential details, but used in the context of the Semantic Layer.
     */
    credential?: pulumi.Input<inputs.DatabricksSemanticLayerCredentialCredential>;
}

/**
 * The set of arguments for constructing a DatabricksSemanticLayerCredential resource.
 */
export interface DatabricksSemanticLayerCredentialArgs {
    /**
     * Semantic Layer credential configuration details.
     */
    configuration: pulumi.Input<inputs.DatabricksSemanticLayerCredentialConfiguration>;
    /**
     * Databricks credential details, but used in the context of the Semantic Layer.
     */
    credential: pulumi.Input<inputs.DatabricksSemanticLayerCredentialCredential>;
}

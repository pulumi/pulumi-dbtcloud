// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Configure an external OAuth integration for the data warehouse. Currently supports Okta and Entra ID (i.e. Azure AD) for Snowflake.
 *
 * See the [documentation](https://docs.getdbt.com/docs/cloud/manage-access/external-oauth) for more information on how to configure it.
 *
 * ## Import
 *
 * using  import blocks (requires Terraform >= 1.5)
 *
 * import {
 *
 *   to = dbtcloud_oauth_configuration.my_external_oauth
 *
 *   id = "external_oauth_id"
 *
 * }
 *
 * import {
 *
 *   to = dbtcloud_oauth_configuration.my_external_oauth
 *
 *   id = "12345"
 *
 * }
 *
 * using the older import command
 *
 * ```sh
 * $ pulumi import dbtcloud:index/oauthConfiguration:OauthConfiguration my_external_oauth "external_oauth_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/oauthConfiguration:OauthConfiguration my_external_oauth 12345
 * ```
 */
export class OauthConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing OauthConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OauthConfigurationState, opts?: pulumi.CustomResourceOptions): OauthConfiguration {
        return new OauthConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/oauthConfiguration:OauthConfiguration';

    /**
     * Returns true if the given object is an instance of OauthConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OauthConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OauthConfiguration.__pulumiType;
    }

    /**
     * The Application ID URI for the OAuth integration. Only for Entra
     */
    public readonly applicationIdUri!: pulumi.Output<string>;
    /**
     * The Authorize URL for the OAuth integration
     */
    public readonly authorizeUrl!: pulumi.Output<string>;
    /**
     * The Client ID for the OAuth integration
     */
    public readonly clientId!: pulumi.Output<string>;
    /**
     * The Client secret for the OAuth integration
     */
    public readonly clientSecret!: pulumi.Output<string>;
    /**
     * The name of OAuth integration
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The redirect URL for the OAuth integration
     */
    public readonly redirectUri!: pulumi.Output<string>;
    /**
     * The Token URL for the OAuth integration
     */
    public readonly tokenUrl!: pulumi.Output<string>;
    /**
     * The type of OAuth integration (`entra` or `okta`)
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a OauthConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OauthConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OauthConfigurationArgs | OauthConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OauthConfigurationState | undefined;
            resourceInputs["applicationIdUri"] = state ? state.applicationIdUri : undefined;
            resourceInputs["authorizeUrl"] = state ? state.authorizeUrl : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["redirectUri"] = state ? state.redirectUri : undefined;
            resourceInputs["tokenUrl"] = state ? state.tokenUrl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as OauthConfigurationArgs | undefined;
            if ((!args || args.authorizeUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizeUrl'");
            }
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.clientSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientSecret'");
            }
            if ((!args || args.redirectUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'redirectUri'");
            }
            if ((!args || args.tokenUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tokenUrl'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["applicationIdUri"] = args ? args.applicationIdUri : undefined;
            resourceInputs["authorizeUrl"] = args ? args.authorizeUrl : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientSecret"] = args?.clientSecret ? pulumi.secret(args.clientSecret) : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["redirectUri"] = args ? args.redirectUri : undefined;
            resourceInputs["tokenUrl"] = args ? args.tokenUrl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(OauthConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OauthConfiguration resources.
 */
export interface OauthConfigurationState {
    /**
     * The Application ID URI for the OAuth integration. Only for Entra
     */
    applicationIdUri?: pulumi.Input<string>;
    /**
     * The Authorize URL for the OAuth integration
     */
    authorizeUrl?: pulumi.Input<string>;
    /**
     * The Client ID for the OAuth integration
     */
    clientId?: pulumi.Input<string>;
    /**
     * The Client secret for the OAuth integration
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * The name of OAuth integration
     */
    name?: pulumi.Input<string>;
    /**
     * The redirect URL for the OAuth integration
     */
    redirectUri?: pulumi.Input<string>;
    /**
     * The Token URL for the OAuth integration
     */
    tokenUrl?: pulumi.Input<string>;
    /**
     * The type of OAuth integration (`entra` or `okta`)
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OauthConfiguration resource.
 */
export interface OauthConfigurationArgs {
    /**
     * The Application ID URI for the OAuth integration. Only for Entra
     */
    applicationIdUri?: pulumi.Input<string>;
    /**
     * The Authorize URL for the OAuth integration
     */
    authorizeUrl: pulumi.Input<string>;
    /**
     * The Client ID for the OAuth integration
     */
    clientId: pulumi.Input<string>;
    /**
     * The Client secret for the OAuth integration
     */
    clientSecret: pulumi.Input<string>;
    /**
     * The name of OAuth integration
     */
    name?: pulumi.Input<string>;
    /**
     * The redirect URL for the OAuth integration
     */
    redirectUri: pulumi.Input<string>;
    /**
     * The Token URL for the OAuth integration
     */
    tokenUrl: pulumi.Input<string>;
    /**
     * The type of OAuth integration (`entra` or `okta`)
     */
    type: pulumi.Input<string>;
}

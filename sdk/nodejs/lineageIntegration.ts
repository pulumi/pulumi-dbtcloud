// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Setup lineage integration for dbt Cloud to automatically fetch lineage from external BI tools in dbt Explorer. Currently supports Tableau.
 *
 * This resource requires having an environment tagged as production already created for you project.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@pulumi/dbtcloud";
 *
 * // the resource can only be configured when a Prod environment has been set
 * // so, you might want to explicitly set the dependency on your Prod environment resource
 * const myLineage = new dbtcloud.LineageIntegration("my_lineage", {
 *     projectId: myProject.id,
 *     host: "my.host.com",
 *     siteId: "mysiteid",
 *     tokenName: "my-token-name",
 *     token: "my-sensitive-token",
 * }, {
 *     dependsOn: [myProdEnv],
 * });
 * ```
 *
 * ## Import
 *
 * using  import blocks (requires Terraform >= 1.5)
 *
 * import {
 *
 *   to = dbtcloud_lineage_integration.my_lineage_integration
 *
 *   id = "projet_id:lineage_integration_id"
 *
 * }
 *
 * import {
 *
 *   to = dbtcloud_lineage_integration.my_lineage_integration
 *
 *   id = "123:4567"
 *
 * }
 *
 * using the older import command
 *
 * ```sh
 * $ pulumi import dbtcloud:index/lineageIntegration:LineageIntegration my_lineage_integration "projet_id:lineage_integration_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/lineageIntegration:LineageIntegration my_lineage_integration 123:4567
 * ```
 */
export class LineageIntegration extends pulumi.CustomResource {
    /**
     * Get an existing LineageIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LineageIntegrationState, opts?: pulumi.CustomResourceOptions): LineageIntegration {
        return new LineageIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/lineageIntegration:LineageIntegration';

    /**
     * Returns true if the given object is an instance of LineageIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LineageIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LineageIntegration.__pulumiType;
    }

    /**
     * The URL of the BI server (see docs for more details)
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * The ID of the lineage integration
     */
    public /*out*/ readonly lineageIntegrationId!: pulumi.Output<number>;
    /**
     * The integration type. Today only 'tableau' is supported
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The dbt Cloud project ID for the integration
     */
    public readonly projectId!: pulumi.Output<number>;
    /**
     * The sitename for the collections of dashboards (see docs for more details)
     */
    public readonly siteId!: pulumi.Output<string>;
    /**
     * The secret token value to use to authenticate to the BI server
     */
    public readonly token!: pulumi.Output<string>;
    /**
     * The token to use to authenticate to the BI server
     */
    public readonly tokenName!: pulumi.Output<string>;

    /**
     * Create a LineageIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LineageIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LineageIntegrationArgs | LineageIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LineageIntegrationState | undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["lineageIntegrationId"] = state ? state.lineageIntegrationId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["tokenName"] = state ? state.tokenName : undefined;
        } else {
            const args = argsOrState as LineageIntegrationArgs | undefined;
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            if ((!args || args.token === undefined) && !opts.urn) {
                throw new Error("Missing required property 'token'");
            }
            if ((!args || args.tokenName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tokenName'");
            }
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
            resourceInputs["tokenName"] = args ? args.tokenName : undefined;
            resourceInputs["lineageIntegrationId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LineageIntegration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LineageIntegration resources.
 */
export interface LineageIntegrationState {
    /**
     * The URL of the BI server (see docs for more details)
     */
    host?: pulumi.Input<string>;
    /**
     * The ID of the lineage integration
     */
    lineageIntegrationId?: pulumi.Input<number>;
    /**
     * The integration type. Today only 'tableau' is supported
     */
    name?: pulumi.Input<string>;
    /**
     * The dbt Cloud project ID for the integration
     */
    projectId?: pulumi.Input<number>;
    /**
     * The sitename for the collections of dashboards (see docs for more details)
     */
    siteId?: pulumi.Input<string>;
    /**
     * The secret token value to use to authenticate to the BI server
     */
    token?: pulumi.Input<string>;
    /**
     * The token to use to authenticate to the BI server
     */
    tokenName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LineageIntegration resource.
 */
export interface LineageIntegrationArgs {
    /**
     * The URL of the BI server (see docs for more details)
     */
    host: pulumi.Input<string>;
    /**
     * The dbt Cloud project ID for the integration
     */
    projectId: pulumi.Input<number>;
    /**
     * The sitename for the collections of dashboards (see docs for more details)
     */
    siteId: pulumi.Input<string>;
    /**
     * The secret token value to use to authenticate to the BI server
     */
    token: pulumi.Input<string>;
    /**
     * The token to use to authenticate to the BI server
     */
    tokenName: pulumi.Input<string>;
}

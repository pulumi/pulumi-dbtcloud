// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages dbt Cloud global features at the account level, like Advanced CI. The same feature should not be configured in different resources to avoid conflicts.
 *
 * When destroying the resource or removing the value for an attribute, the features status will not be changed. Deactivating features will require applying them wih the value set to `false`.
 */
export class AccountFeatures extends pulumi.CustomResource {
    /**
     * Get an existing AccountFeatures resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountFeaturesState, opts?: pulumi.CustomResourceOptions): AccountFeatures {
        return new AccountFeatures(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/accountFeatures:AccountFeatures';

    /**
     * Returns true if the given object is an instance of AccountFeatures.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccountFeatures {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountFeatures.__pulumiType;
    }

    /**
     * Whether advanced CI is enabled.
     */
    public readonly advancedCi!: pulumi.Output<boolean>;
    /**
     * Whether partial parsing is enabled.
     */
    public readonly partialParsing!: pulumi.Output<boolean>;
    /**
     * Whether repository caching is enabled.
     */
    public readonly repoCaching!: pulumi.Output<boolean>;

    /**
     * Create a AccountFeatures resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AccountFeaturesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountFeaturesArgs | AccountFeaturesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountFeaturesState | undefined;
            resourceInputs["advancedCi"] = state ? state.advancedCi : undefined;
            resourceInputs["partialParsing"] = state ? state.partialParsing : undefined;
            resourceInputs["repoCaching"] = state ? state.repoCaching : undefined;
        } else {
            const args = argsOrState as AccountFeaturesArgs | undefined;
            resourceInputs["advancedCi"] = args ? args.advancedCi : undefined;
            resourceInputs["partialParsing"] = args ? args.partialParsing : undefined;
            resourceInputs["repoCaching"] = args ? args.repoCaching : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccountFeatures.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccountFeatures resources.
 */
export interface AccountFeaturesState {
    /**
     * Whether advanced CI is enabled.
     */
    advancedCi?: pulumi.Input<boolean>;
    /**
     * Whether partial parsing is enabled.
     */
    partialParsing?: pulumi.Input<boolean>;
    /**
     * Whether repository caching is enabled.
     */
    repoCaching?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AccountFeatures resource.
 */
export interface AccountFeaturesArgs {
    /**
     * Whether advanced CI is enabled.
     */
    advancedCi?: pulumi.Input<boolean>;
    /**
     * Whether partial parsing is enabled.
     */
    partialParsing?: pulumi.Input<boolean>;
    /**
     * Whether repository caching is enabled.
     */
    repoCaching?: pulumi.Input<boolean>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Retrieve data for a single repository
 */
export function getRepository(args: GetRepositoryArgs, opts?: pulumi.InvokeOptions): Promise<GetRepositoryResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dbtcloud:index/getRepository:getRepository", {
        "fetchDeployKey": args.fetchDeployKey,
        "projectId": args.projectId,
        "repositoryId": args.repositoryId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRepository.
 */
export interface GetRepositoryArgs {
    /**
     * Whether we should return the public deploy key
     *
     * @deprecated This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deployKey`
     */
    fetchDeployKey?: boolean;
    /**
     * Project ID to create the repository in
     */
    projectId: number;
    /**
     * ID for the repository
     */
    repositoryId: number;
}

/**
 * A collection of values returned by getRepository.
 */
export interface GetRepositoryResult {
    /**
     * The Azure Dev Ops project ID
     */
    readonly azureActiveDirectoryProjectId: string;
    /**
     * The Azure Dev Ops repository ID
     */
    readonly azureActiveDirectoryRepositoryId: string;
    /**
     * If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks
     */
    readonly azureBypassWebhookRegistrationFailure: boolean;
    /**
     * Public key generated by dbt when using `deployKey` clone strategy
     */
    readonly deployKey: string;
    /**
     * Whether we should return the public deploy key
     *
     * @deprecated This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deployKey`
     */
    readonly fetchDeployKey: boolean;
    /**
     * Git clone strategy for the repository
     */
    readonly gitCloneStrategy: string;
    /**
     * Identifier for the GitHub installation
     */
    readonly githubInstallationId: number;
    /**
     * Identifier for the Gitlab project
     */
    readonly gitlabProjectId: number;
    /**
     * The ID of this resource
     */
    readonly id: string;
    /**
     * Whether the repository is active
     */
    readonly isActive: boolean;
    /**
     * Project ID to create the repository in
     */
    readonly projectId: number;
    /**
     * The pull request URL template to be used when opening a pull request from within dbt Cloud's IDE
     */
    readonly pullRequestUrlTemplate: string;
    /**
     * Git URL for the repository or <Group>/<Project> for Gitlab
     */
    readonly remoteUrl: string;
    /**
     * Credentials ID for the repository (From the repository side not the dbt Cloud ID)
     */
    readonly repositoryCredentialsId: number;
    /**
     * ID for the repository
     */
    readonly repositoryId: number;
}
/**
 * Retrieve data for a single repository
 */
export function getRepositoryOutput(args: GetRepositoryOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRepositoryResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("dbtcloud:index/getRepository:getRepository", {
        "fetchDeployKey": args.fetchDeployKey,
        "projectId": args.projectId,
        "repositoryId": args.repositoryId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRepository.
 */
export interface GetRepositoryOutputArgs {
    /**
     * Whether we should return the public deploy key
     *
     * @deprecated This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deployKey`
     */
    fetchDeployKey?: pulumi.Input<boolean>;
    /**
     * Project ID to create the repository in
     */
    projectId: pulumi.Input<number>;
    /**
     * ID for the repository
     */
    repositoryId: pulumi.Input<number>;
}

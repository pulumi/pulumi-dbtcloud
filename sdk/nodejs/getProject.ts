// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieve a specific project from dbt Cloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@pulumi/dbtcloud";
 *
 * export = async () => {
 *     // projects data sources can use the project_id parameter (preferred uniqueness is ensured)
 *     const projectById = await dbtcloud.getProject({
 *         id: 0,
 *     });
 *     // or they can use project names
 *     // the provider will raise an error if more than one project is found with the same name
 *     const projectByName = await dbtcloud.getProject({
 *         name: "Project name",
 *     });
 *     const filteredProjects = await dbtcloud.getProjects({
 *         nameContains: "Project",
 *     });
 *     const allProjects = await dbtcloud.getProjects({});
 *     return {
 *         projectIdDetails: projectById,
 *         projectNameDetails: projectByName,
 *         filteredProjectsCount: filteredProjects.projects.length,
 *         filteredProjects: filteredProjects.projects,
 *         projectNames: .map(project => (project.name)),
 *     };
 * }
 * ```
 */
export function getProject(args?: GetProjectArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dbtcloud:index/getProject:getProject", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getProject.
 */
export interface GetProjectArgs {
    /**
     * Project ID
     */
    id?: number;
    /**
     * Project name
     */
    name?: string;
}

/**
 * A collection of values returned by getProject.
 */
export interface GetProjectResult {
    /**
     * When the project was created
     */
    readonly createdAt: string;
    /**
     * Subdirectory for the dbt project inside the git repo
     */
    readonly dbtProjectSubdirectory: string;
    /**
     * Project description
     */
    readonly description: string;
    /**
     * ID of Job for the documentation
     */
    readonly docsJobId: number;
    /**
     * ID of Job for source freshness
     */
    readonly freshnessJobId: number;
    /**
     * Project ID
     */
    readonly id?: number;
    /**
     * Project name
     */
    readonly name: string;
    /**
     * Details for the connection linked to the project
     */
    readonly projectConnection: outputs.GetProjectProjectConnection;
    /**
     * Details for the repository linked to the project
     */
    readonly repository: outputs.GetProjectRepository;
    /**
     * Semantic layer config ID
     */
    readonly semanticLayerConfigId: number;
    /**
     * Project state should be 1 = active, as 2 = deleted
     */
    readonly state: number;
    /**
     * The type of dbt project (default or hybrid)
     */
    readonly type: number;
    /**
     * When the project was last updated
     */
    readonly updatedAt: string;
}
/**
 * Retrieve a specific project from dbt Cloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@pulumi/dbtcloud";
 *
 * export = async () => {
 *     // projects data sources can use the project_id parameter (preferred uniqueness is ensured)
 *     const projectById = await dbtcloud.getProject({
 *         id: 0,
 *     });
 *     // or they can use project names
 *     // the provider will raise an error if more than one project is found with the same name
 *     const projectByName = await dbtcloud.getProject({
 *         name: "Project name",
 *     });
 *     const filteredProjects = await dbtcloud.getProjects({
 *         nameContains: "Project",
 *     });
 *     const allProjects = await dbtcloud.getProjects({});
 *     return {
 *         projectIdDetails: projectById,
 *         projectNameDetails: projectByName,
 *         filteredProjectsCount: filteredProjects.projects.length,
 *         filteredProjects: filteredProjects.projects,
 *         projectNames: .map(project => (project.name)),
 *     };
 * }
 * ```
 */
export function getProjectOutput(args?: GetProjectOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetProjectResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("dbtcloud:index/getProject:getProject", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getProject.
 */
export interface GetProjectOutputArgs {
    /**
     * Project ID
     */
    id?: pulumi.Input<number>;
    /**
     * Project name
     */
    name?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages IP restriction rules in dbt Cloud. IP restriction rules allow you to control access to your dbt Cloud instance based on IP address ranges.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@pulumi/dbtcloud";
 *
 * const test = new dbtcloud.IpRestrictionsRule("test", {
 *     name: "My restriction rule",
 *     description: "Important description",
 *     cidrs: [
 *         {
 *             cidr: "::ffff:106:708",
 *         },
 *         {
 *             cidr: "1.6.7.10/24",
 *         },
 *     ],
 *     type: "deny",
 *     ruleSetEnabled: false,
 * });
 * ```
 *
 * ## Import
 *
 * using  import blocks (requires Terraform >= 1.5)
 *
 * import {
 *
 *   to = dbtcloud_ip_restrictions_rule.my_rule
 *
 *   id = "ip_restriction_rule_id"
 *
 * }
 *
 * import {
 *
 *   to = dbtcloud_ip_restrictions_rule.my_rule
 *
 *   id = "12345"
 *
 * }
 *
 * using the older import command
 *
 * ```sh
 * $ pulumi import dbtcloud:index/ipRestrictionsRule:IpRestrictionsRule my_rule "ip_restriction_rule_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/ipRestrictionsRule:IpRestrictionsRule my_rule 12345
 * ```
 */
export class IpRestrictionsRule extends pulumi.CustomResource {
    /**
     * Get an existing IpRestrictionsRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpRestrictionsRuleState, opts?: pulumi.CustomResourceOptions): IpRestrictionsRule {
        return new IpRestrictionsRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/ipRestrictionsRule:IpRestrictionsRule';

    /**
     * Returns true if the given object is an instance of IpRestrictionsRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpRestrictionsRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpRestrictionsRule.__pulumiType;
    }

    /**
     * Set of CIDR ranges for this rule
     */
    public readonly cidrs!: pulumi.Output<outputs.IpRestrictionsRuleCidr[]>;
    /**
     * A description of the IP restriction rule
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the IP restriction rule
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether the IP restriction rule set is enabled or not. Important!: This value needs to be the same for all rules if multiple rules are defined. All rules must be active or inactive at the same time.
     */
    public readonly ruleSetEnabled!: pulumi.Output<boolean>;
    /**
     * The type of the IP restriction rule (allow or deny)
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a IpRestrictionsRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpRestrictionsRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpRestrictionsRuleArgs | IpRestrictionsRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpRestrictionsRuleState | undefined;
            resourceInputs["cidrs"] = state ? state.cidrs : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ruleSetEnabled"] = state ? state.ruleSetEnabled : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as IpRestrictionsRuleArgs | undefined;
            if ((!args || args.cidrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidrs'");
            }
            if ((!args || args.ruleSetEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleSetEnabled'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["cidrs"] = args ? args.cidrs : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ruleSetEnabled"] = args ? args.ruleSetEnabled : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpRestrictionsRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IpRestrictionsRule resources.
 */
export interface IpRestrictionsRuleState {
    /**
     * Set of CIDR ranges for this rule
     */
    cidrs?: pulumi.Input<pulumi.Input<inputs.IpRestrictionsRuleCidr>[]>;
    /**
     * A description of the IP restriction rule
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the IP restriction rule
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the IP restriction rule set is enabled or not. Important!: This value needs to be the same for all rules if multiple rules are defined. All rules must be active or inactive at the same time.
     */
    ruleSetEnabled?: pulumi.Input<boolean>;
    /**
     * The type of the IP restriction rule (allow or deny)
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpRestrictionsRule resource.
 */
export interface IpRestrictionsRuleArgs {
    /**
     * Set of CIDR ranges for this rule
     */
    cidrs: pulumi.Input<pulumi.Input<inputs.IpRestrictionsRuleCidr>[]>;
    /**
     * A description of the IP restriction rule
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the IP restriction rule
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the IP restriction rule set is enabled or not. Important!: This value needs to be the same for all rules if multiple rules are defined. All rules must be active or inactive at the same time.
     */
    ruleSetEnabled: pulumi.Input<boolean>;
    /**
     * The type of the IP restriction rule (allow or deny)
     */
    type: pulumi.Input<string>;
}

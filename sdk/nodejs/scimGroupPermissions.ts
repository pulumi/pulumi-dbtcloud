// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ScimGroupPermissions extends pulumi.CustomResource {
    /**
     * Get an existing ScimGroupPermissions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScimGroupPermissionsState, opts?: pulumi.CustomResourceOptions): ScimGroupPermissions {
        return new ScimGroupPermissions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/scimGroupPermissions:ScimGroupPermissions';

    /**
     * Returns true if the given object is an instance of ScimGroupPermissions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScimGroupPermissions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScimGroupPermissions.__pulumiType;
    }

    /**
     * The ID of the existing group to manage permissions for. This group must already exist.
     */
    declare public readonly groupId: pulumi.Output<number>;
    /**
     * Set of permissions to apply to the group. This will replace all existing permissions for the group.
     */
    declare public readonly permissions: pulumi.Output<outputs.ScimGroupPermissionsPermission[] | undefined>;

    /**
     * Create a ScimGroupPermissions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScimGroupPermissionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScimGroupPermissionsArgs | ScimGroupPermissionsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScimGroupPermissionsState | undefined;
            resourceInputs["groupId"] = state?.groupId;
            resourceInputs["permissions"] = state?.permissions;
        } else {
            const args = argsOrState as ScimGroupPermissionsArgs | undefined;
            if (args?.groupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            resourceInputs["groupId"] = args?.groupId;
            resourceInputs["permissions"] = args?.permissions;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScimGroupPermissions.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScimGroupPermissions resources.
 */
export interface ScimGroupPermissionsState {
    /**
     * The ID of the existing group to manage permissions for. This group must already exist.
     */
    groupId?: pulumi.Input<number>;
    /**
     * Set of permissions to apply to the group. This will replace all existing permissions for the group.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.ScimGroupPermissionsPermission>[]>;
}

/**
 * The set of arguments for constructing a ScimGroupPermissions resource.
 */
export interface ScimGroupPermissionsArgs {
    /**
     * The ID of the existing group to manage permissions for. This group must already exist.
     */
    groupId: pulumi.Input<number>;
    /**
     * Set of permissions to apply to the group. This will replace all existing permissions for the group.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.ScimGroupPermissionsPermission>[]>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource to manage dbt Cloud environments for the different dbt Cloud projects.
 *
 * In a given dbt Cloud project, one development environment can be defined and as many deployment environments as needed can be created.
 *
 * > In August 2024, dbt Cloud released the "global connection" feature, allowing connections to be defined at the account level and reused across environments and projects.
 * This version of the provider has the `connectionId` as an optional field but it is recommended to start setting it up in your projects. In future versions, this field will become mandatory.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@pulumi/dbtcloud";
 *
 * const ciEnvironment = new dbtcloud.Environment("ci_environment", {
 *     dbtVersion: "latest",
 *     name: "CI",
 *     projectId: dbtProject.id,
 *     type: "deployment",
 *     credentialId: ciCredential.credentialId,
 *     connectionId: myGlobalConnection.id,
 * });
 * // we can also set a deployment environment as being the production one
 * const prodEnvironment = new dbtcloud.Environment("prod_environment", {
 *     dbtVersion: "1.7.0-latest",
 *     name: "Prod",
 *     projectId: dbtProject.id,
 *     type: "deployment",
 *     credentialId: prodCredential.credentialId,
 *     deploymentType: "production",
 *     connectionId: myLegacyConnection.connectionId,
 * });
 * // Creating a development environment
 * const devEnvironment = new dbtcloud.Environment("dev_environment", {
 *     dbtVersion: "latest",
 *     name: "Dev",
 *     projectId: dbtProject.id,
 *     type: "development",
 *     connectionId: myOtherGlobalConnection.id,
 * });
 * ```
 *
 * ## Import
 *
 * using  import blocks (requires Terraform >= 1.5)
 *
 * import {
 *
 *   to = dbtcloud_environment.prod_environment
 *
 *   id = "project_id:environment_id"
 *
 * }
 *
 * import {
 *
 *   to = dbtcloud_environment.prod_environment
 *
 *   id = "12345:6789"
 *
 * }
 *
 * using the older import command
 *
 * ```sh
 * $ pulumi import dbtcloud:index/environment:Environment prod_environment "project_id:environment_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/environment:Environment prod_environment 12345:6789
 * ```
 */
export class Environment extends pulumi.CustomResource {
    /**
     * Get an existing Environment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnvironmentState, opts?: pulumi.CustomResourceOptions): Environment {
        return new Environment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/environment:Environment';

    /**
     * Returns true if the given object is an instance of Environment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Environment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Environment.__pulumiType;
    }

    public readonly connectionId!: pulumi.Output<number | undefined>;
    /**
     * Credential ID to create the environment with. A credential is not required for development environments but is required
     * for deployment environments
     */
    public readonly credentialId!: pulumi.Output<number | undefined>;
    /**
     * Which custom branch to use in this environment
     */
    public readonly customBranch!: pulumi.Output<string | undefined>;
    /**
     * Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` (e.g.
     * `1.5.0-latest`), `major.minor.0-pre`, `versionless`, or `latest`. While `versionless` is still supported, using `latest`
     * is recommended. Defaults to `latest` if no version is provided
     */
    public readonly dbtVersion!: pulumi.Output<string | undefined>;
    /**
     * The type of environment. Only valid for environments of type 'deployment' and for now can only be 'production',
     * 'staging' or left empty for generic environments
     */
    public readonly deploymentType!: pulumi.Output<string | undefined>;
    /**
     * Whether to enable model query history in this environment. As of Oct 2024, works only for Snowflake and BigQuery.
     */
    public readonly enableModelQueryHistory!: pulumi.Output<boolean | undefined>;
    /**
     * Environment ID within the project
     */
    public /*out*/ readonly environmentId!: pulumi.Output<number>;
    /**
     * ID of the extended attributes for the environment
     */
    public readonly extendedAttributesId!: pulumi.Output<number | undefined>;
    /**
     * Whether the environment is active
     */
    public readonly isActive!: pulumi.Output<boolean | undefined>;
    /**
     * Environment name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Project ID to create the environment in
     */
    public readonly projectId!: pulumi.Output<number>;
    /**
     * The type of environment (must be either development or deployment)
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Whether to use a custom git branch in this environment
     */
    public readonly useCustomBranch!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Environment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnvironmentArgs | EnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnvironmentState | undefined;
            resourceInputs["connectionId"] = state ? state.connectionId : undefined;
            resourceInputs["credentialId"] = state ? state.credentialId : undefined;
            resourceInputs["customBranch"] = state ? state.customBranch : undefined;
            resourceInputs["dbtVersion"] = state ? state.dbtVersion : undefined;
            resourceInputs["deploymentType"] = state ? state.deploymentType : undefined;
            resourceInputs["enableModelQueryHistory"] = state ? state.enableModelQueryHistory : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["extendedAttributesId"] = state ? state.extendedAttributesId : undefined;
            resourceInputs["isActive"] = state ? state.isActive : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["useCustomBranch"] = state ? state.useCustomBranch : undefined;
        } else {
            const args = argsOrState as EnvironmentArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["connectionId"] = args ? args.connectionId : undefined;
            resourceInputs["credentialId"] = args ? args.credentialId : undefined;
            resourceInputs["customBranch"] = args ? args.customBranch : undefined;
            resourceInputs["dbtVersion"] = args ? args.dbtVersion : undefined;
            resourceInputs["deploymentType"] = args ? args.deploymentType : undefined;
            resourceInputs["enableModelQueryHistory"] = args ? args.enableModelQueryHistory : undefined;
            resourceInputs["extendedAttributesId"] = args ? args.extendedAttributesId : undefined;
            resourceInputs["isActive"] = args ? args.isActive : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["useCustomBranch"] = args ? args.useCustomBranch : undefined;
            resourceInputs["environmentId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Environment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Environment resources.
 */
export interface EnvironmentState {
    connectionId?: pulumi.Input<number>;
    /**
     * Credential ID to create the environment with. A credential is not required for development environments but is required
     * for deployment environments
     */
    credentialId?: pulumi.Input<number>;
    /**
     * Which custom branch to use in this environment
     */
    customBranch?: pulumi.Input<string>;
    /**
     * Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` (e.g.
     * `1.5.0-latest`), `major.minor.0-pre`, `versionless`, or `latest`. While `versionless` is still supported, using `latest`
     * is recommended. Defaults to `latest` if no version is provided
     */
    dbtVersion?: pulumi.Input<string>;
    /**
     * The type of environment. Only valid for environments of type 'deployment' and for now can only be 'production',
     * 'staging' or left empty for generic environments
     */
    deploymentType?: pulumi.Input<string>;
    /**
     * Whether to enable model query history in this environment. As of Oct 2024, works only for Snowflake and BigQuery.
     */
    enableModelQueryHistory?: pulumi.Input<boolean>;
    /**
     * Environment ID within the project
     */
    environmentId?: pulumi.Input<number>;
    /**
     * ID of the extended attributes for the environment
     */
    extendedAttributesId?: pulumi.Input<number>;
    /**
     * Whether the environment is active
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Environment name
     */
    name?: pulumi.Input<string>;
    /**
     * Project ID to create the environment in
     */
    projectId?: pulumi.Input<number>;
    /**
     * The type of environment (must be either development or deployment)
     */
    type?: pulumi.Input<string>;
    /**
     * Whether to use a custom git branch in this environment
     */
    useCustomBranch?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Environment resource.
 */
export interface EnvironmentArgs {
    connectionId?: pulumi.Input<number>;
    /**
     * Credential ID to create the environment with. A credential is not required for development environments but is required
     * for deployment environments
     */
    credentialId?: pulumi.Input<number>;
    /**
     * Which custom branch to use in this environment
     */
    customBranch?: pulumi.Input<string>;
    /**
     * Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` (e.g.
     * `1.5.0-latest`), `major.minor.0-pre`, `versionless`, or `latest`. While `versionless` is still supported, using `latest`
     * is recommended. Defaults to `latest` if no version is provided
     */
    dbtVersion?: pulumi.Input<string>;
    /**
     * The type of environment. Only valid for environments of type 'deployment' and for now can only be 'production',
     * 'staging' or left empty for generic environments
     */
    deploymentType?: pulumi.Input<string>;
    /**
     * Whether to enable model query history in this environment. As of Oct 2024, works only for Snowflake and BigQuery.
     */
    enableModelQueryHistory?: pulumi.Input<boolean>;
    /**
     * ID of the extended attributes for the environment
     */
    extendedAttributesId?: pulumi.Input<number>;
    /**
     * Whether the environment is active
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Environment name
     */
    name?: pulumi.Input<string>;
    /**
     * Project ID to create the environment in
     */
    projectId: pulumi.Input<number>;
    /**
     * The type of environment (must be either development or deployment)
     */
    type: pulumi.Input<string>;
    /**
     * Whether to use a custom git branch in this environment
     */
    useCustomBranch?: pulumi.Input<boolean>;
}

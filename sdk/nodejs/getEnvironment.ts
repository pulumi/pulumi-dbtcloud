// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Retrieve data for a single environment
 */
export function getEnvironment(args: GetEnvironmentArgs, opts?: pulumi.InvokeOptions): Promise<GetEnvironmentResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dbtcloud:index/getEnvironment:getEnvironment", {
        "environmentId": args.environmentId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getEnvironment.
 */
export interface GetEnvironmentArgs {
    /**
     * The ID of the environment
     */
    environmentId: number;
    /**
     * The project ID to which the environment belong
     */
    projectId: number;
}

/**
 * A collection of values returned by getEnvironment.
 */
export interface GetEnvironmentResult {
    /**
     * A connection ID (used with Global Connections)
     */
    readonly connectionId: number;
    /**
     * The project ID to which the environment belong
     */
    readonly credentialsId: number;
    /**
     * The custom branch name to use
     */
    readonly customBranch: string;
    /**
     * Version number of dbt to use in this environment.
     */
    readonly dbtVersion: string;
    /**
     * The type of deployment environment (currently 'production', 'staging' or empty)
     */
    readonly deploymentType: string;
    /**
     * The ID of the environment
     */
    readonly environmentId: number;
    /**
     * The ID of the extended attributes applied
     */
    readonly extendedAttributesId: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name of the environment
     */
    readonly name: string;
    /**
     * The project ID to which the environment belong
     */
    readonly projectId: number;
    /**
     * The type of environment (must be either development or deployment)
     */
    readonly type: string;
    /**
     * Whether to use a custom git branch in this environment
     */
    readonly useCustomBranch: boolean;
}
/**
 * Retrieve data for a single environment
 */
export function getEnvironmentOutput(args: GetEnvironmentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEnvironmentResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("dbtcloud:index/getEnvironment:getEnvironment", {
        "environmentId": args.environmentId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getEnvironment.
 */
export interface GetEnvironmentOutputArgs {
    /**
     * The ID of the environment
     */
    environmentId: pulumi.Input<number>;
    /**
     * The project ID to which the environment belong
     */
    projectId: pulumi.Input<number>;
}

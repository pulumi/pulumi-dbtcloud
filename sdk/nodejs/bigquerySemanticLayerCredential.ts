// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * BigQuery credential resource. This resource is composed of a BigQuery credential and a Semantic Layer configuration. It is used to create a BigQuery credential for the Semantic Layer.
 *
 * ## Example Usage
 */
export class BigquerySemanticLayerCredential extends pulumi.CustomResource {
    /**
     * Get an existing BigquerySemanticLayerCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BigquerySemanticLayerCredentialState, opts?: pulumi.CustomResourceOptions): BigquerySemanticLayerCredential {
        return new BigquerySemanticLayerCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/bigquerySemanticLayerCredential:BigquerySemanticLayerCredential';

    /**
     * Returns true if the given object is an instance of BigquerySemanticLayerCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BigquerySemanticLayerCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BigquerySemanticLayerCredential.__pulumiType;
    }

    /**
     * Auth Provider X509 Cert URL for the Service Account
     */
    declare public readonly authProviderX509CertUrl: pulumi.Output<string>;
    /**
     * Auth URI for the Service Account
     */
    declare public readonly authUri: pulumi.Output<string>;
    /**
     * Service Account email
     */
    declare public readonly clientEmail: pulumi.Output<string>;
    /**
     * Client ID of the Service Account
     */
    declare public readonly clientId: pulumi.Output<string>;
    /**
     * Client X509 Cert URL for the Service Account
     */
    declare public readonly clientX509CertUrl: pulumi.Output<string>;
    /**
     * Semantic Layer credential configuration details.
     */
    declare public readonly configuration: pulumi.Output<outputs.BigquerySemanticLayerCredentialConfiguration>;
    /**
     * BigQuery credential details, but used in the context of the Semantic Layer.
     */
    declare public readonly credential: pulumi.Output<outputs.BigquerySemanticLayerCredentialCredential>;
    /**
     * Private Key for the Service Account
     */
    declare public readonly privateKey: pulumi.Output<string>;
    /**
     * Private Key ID for the Service Account
     */
    declare public readonly privateKeyId: pulumi.Output<string>;
    /**
     * Token URI for the Service Account
     */
    declare public readonly tokenUri: pulumi.Output<string>;

    /**
     * Create a BigquerySemanticLayerCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BigquerySemanticLayerCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BigquerySemanticLayerCredentialArgs | BigquerySemanticLayerCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BigquerySemanticLayerCredentialState | undefined;
            resourceInputs["authProviderX509CertUrl"] = state?.authProviderX509CertUrl;
            resourceInputs["authUri"] = state?.authUri;
            resourceInputs["clientEmail"] = state?.clientEmail;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["clientX509CertUrl"] = state?.clientX509CertUrl;
            resourceInputs["configuration"] = state?.configuration;
            resourceInputs["credential"] = state?.credential;
            resourceInputs["privateKey"] = state?.privateKey;
            resourceInputs["privateKeyId"] = state?.privateKeyId;
            resourceInputs["tokenUri"] = state?.tokenUri;
        } else {
            const args = argsOrState as BigquerySemanticLayerCredentialArgs | undefined;
            if (args?.authProviderX509CertUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'authProviderX509CertUrl'");
            }
            if (args?.authUri === undefined && !opts.urn) {
                throw new Error("Missing required property 'authUri'");
            }
            if (args?.clientEmail === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientEmail'");
            }
            if (args?.clientId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if (args?.clientX509CertUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientX509CertUrl'");
            }
            if (args?.configuration === undefined && !opts.urn) {
                throw new Error("Missing required property 'configuration'");
            }
            if (args?.credential === undefined && !opts.urn) {
                throw new Error("Missing required property 'credential'");
            }
            if (args?.privateKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'privateKey'");
            }
            if (args?.privateKeyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'privateKeyId'");
            }
            if (args?.tokenUri === undefined && !opts.urn) {
                throw new Error("Missing required property 'tokenUri'");
            }
            resourceInputs["authProviderX509CertUrl"] = args?.authProviderX509CertUrl;
            resourceInputs["authUri"] = args?.authUri;
            resourceInputs["clientEmail"] = args?.clientEmail;
            resourceInputs["clientId"] = args?.clientId;
            resourceInputs["clientX509CertUrl"] = args?.clientX509CertUrl;
            resourceInputs["configuration"] = args?.configuration;
            resourceInputs["credential"] = args?.credential;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["privateKeyId"] = args?.privateKeyId;
            resourceInputs["tokenUri"] = args?.tokenUri;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BigquerySemanticLayerCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BigquerySemanticLayerCredential resources.
 */
export interface BigquerySemanticLayerCredentialState {
    /**
     * Auth Provider X509 Cert URL for the Service Account
     */
    authProviderX509CertUrl?: pulumi.Input<string>;
    /**
     * Auth URI for the Service Account
     */
    authUri?: pulumi.Input<string>;
    /**
     * Service Account email
     */
    clientEmail?: pulumi.Input<string>;
    /**
     * Client ID of the Service Account
     */
    clientId?: pulumi.Input<string>;
    /**
     * Client X509 Cert URL for the Service Account
     */
    clientX509CertUrl?: pulumi.Input<string>;
    /**
     * Semantic Layer credential configuration details.
     */
    configuration?: pulumi.Input<inputs.BigquerySemanticLayerCredentialConfiguration>;
    /**
     * BigQuery credential details, but used in the context of the Semantic Layer.
     */
    credential?: pulumi.Input<inputs.BigquerySemanticLayerCredentialCredential>;
    /**
     * Private Key for the Service Account
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Private Key ID for the Service Account
     */
    privateKeyId?: pulumi.Input<string>;
    /**
     * Token URI for the Service Account
     */
    tokenUri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BigquerySemanticLayerCredential resource.
 */
export interface BigquerySemanticLayerCredentialArgs {
    /**
     * Auth Provider X509 Cert URL for the Service Account
     */
    authProviderX509CertUrl: pulumi.Input<string>;
    /**
     * Auth URI for the Service Account
     */
    authUri: pulumi.Input<string>;
    /**
     * Service Account email
     */
    clientEmail: pulumi.Input<string>;
    /**
     * Client ID of the Service Account
     */
    clientId: pulumi.Input<string>;
    /**
     * Client X509 Cert URL for the Service Account
     */
    clientX509CertUrl: pulumi.Input<string>;
    /**
     * Semantic Layer credential configuration details.
     */
    configuration: pulumi.Input<inputs.BigquerySemanticLayerCredentialConfiguration>;
    /**
     * BigQuery credential details, but used in the context of the Semantic Layer.
     */
    credential: pulumi.Input<inputs.BigquerySemanticLayerCredentialCredential>;
    /**
     * Private Key for the Service Account
     */
    privateKey: pulumi.Input<string>;
    /**
     * Private Key ID for the Service Account
     */
    privateKeyId: pulumi.Input<string>;
    /**
     * Token URI for the Service Account
     */
    tokenUri: pulumi.Input<string>;
}

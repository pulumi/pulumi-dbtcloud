// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@pulumi/dbtcloud";
 *
 * // we add some permissions to the group "TF Group 1" (existing or not) to  a new project 
 * const tfGroup1 = new dbtcloud.GroupPartialPermissions("tf_group_1", {
 *     name: "TF Group 1",
 *     groupPermissions: [
 *         {
 *             permission_set: "developer",
 *             project_id: dbtProject.id,
 *             all_projects: false,
 *             writable_environment_categories: [
 *                 "development",
 *                 "staging",
 *             ],
 *         },
 *         {
 *             permission_set: "git_admin",
 *             project_id: dbtProject.id,
 *             all_projects: false,
 *         },
 *     ],
 * });
 * // we add Admin permissions to the group "TF Group 2" (existing or not) to  a new project 
 * // it is possible to add more permissions to the same group name in other Terraform projects/workspaces, using another `dbtcloud_group_partial_permissions` resource
 * const tfGroup2 = new dbtcloud.GroupPartialPermissions("tf_group_2", {
 *     name: "TF Group 2",
 *     ssoMappingGroups: ["group2"],
 *     groupPermissions: [{
 *         permission_set: "admin",
 *         project_id: dbtProject.id,
 *         all_projects: false,
 *     }],
 * });
 * ```
 */
export class GroupPartialPermissions extends pulumi.CustomResource {
    /**
     * Get an existing GroupPartialPermissions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupPartialPermissionsState, opts?: pulumi.CustomResourceOptions): GroupPartialPermissions {
        return new GroupPartialPermissions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/groupPartialPermissions:GroupPartialPermissions';

    /**
     * Returns true if the given object is an instance of GroupPartialPermissions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupPartialPermissions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupPartialPermissions.__pulumiType;
    }

    /**
     * Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.
     */
    declare public readonly assignByDefault: pulumi.Output<boolean>;
    /**
     * Partial permissions for the group. Those permissions will be added/removed when config is added/removed.
     */
    declare public readonly groupPermissions: pulumi.Output<outputs.GroupPartialPermissionsGroupPermission[] | undefined>;
    /**
     * The name of the group. This is used to identify an existing group
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.
     */
    declare public readonly ssoMappingGroups: pulumi.Output<string[]>;

    /**
     * Create a GroupPartialPermissions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GroupPartialPermissionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupPartialPermissionsArgs | GroupPartialPermissionsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupPartialPermissionsState | undefined;
            resourceInputs["assignByDefault"] = state?.assignByDefault;
            resourceInputs["groupPermissions"] = state?.groupPermissions;
            resourceInputs["name"] = state?.name;
            resourceInputs["ssoMappingGroups"] = state?.ssoMappingGroups;
        } else {
            const args = argsOrState as GroupPartialPermissionsArgs | undefined;
            resourceInputs["assignByDefault"] = args?.assignByDefault;
            resourceInputs["groupPermissions"] = args?.groupPermissions;
            resourceInputs["name"] = args?.name;
            resourceInputs["ssoMappingGroups"] = args?.ssoMappingGroups;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupPartialPermissions.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GroupPartialPermissions resources.
 */
export interface GroupPartialPermissionsState {
    /**
     * Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.
     */
    assignByDefault?: pulumi.Input<boolean>;
    /**
     * Partial permissions for the group. Those permissions will be added/removed when config is added/removed.
     */
    groupPermissions?: pulumi.Input<pulumi.Input<inputs.GroupPartialPermissionsGroupPermission>[]>;
    /**
     * The name of the group. This is used to identify an existing group
     */
    name?: pulumi.Input<string>;
    /**
     * Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.
     */
    ssoMappingGroups?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a GroupPartialPermissions resource.
 */
export interface GroupPartialPermissionsArgs {
    /**
     * Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.
     */
    assignByDefault?: pulumi.Input<boolean>;
    /**
     * Partial permissions for the group. Those permissions will be added/removed when config is added/removed.
     */
    groupPermissions?: pulumi.Input<pulumi.Input<inputs.GroupPartialPermissionsGroupPermission>[]>;
    /**
     * The name of the group. This is used to identify an existing group
     */
    name?: pulumi.Input<string>;
    /**
     * Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.
     */
    ssoMappingGroups?: pulumi.Input<pulumi.Input<string>[]>;
}

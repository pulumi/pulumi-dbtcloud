// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Starburst/Trino credential resource
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@pulumi/dbtcloud";
 *
 * const example = new dbtcloud.StarburstCredential("example", {
 *     projectId: exampleDbtcloudProject.id,
 *     database: "your_catalog",
 *     schema: "your_schema",
 *     user: "your_user",
 *     password: "your_password",
 * });
 * ```
 *
 * ## Import
 *
 * using  import blocks (requires Terraform >= 1.5)
 *
 * import {
 *
 *   to = dbtcloud_starburst_credential.my_starburst_credential
 *
 *   id = "project_id:credential_id"
 *
 * }
 *
 * import {
 *
 *   to = dbtcloud_starburst_credential.my_starburst_credential
 *
 *   id = "12345:6789"
 *
 * }
 *
 * using the older import command
 *
 * ```sh
 * $ pulumi import dbtcloud:index/starburstCredential:StarburstCredential my_starburst_credential "project_id:credential_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/starburstCredential:StarburstCredential my_starburst_credential 12345:6789
 * ```
 */
export class StarburstCredential extends pulumi.CustomResource {
    /**
     * Get an existing StarburstCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StarburstCredentialState, opts?: pulumi.CustomResourceOptions): StarburstCredential {
        return new StarburstCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/starburstCredential:StarburstCredential';

    /**
     * Returns true if the given object is an instance of StarburstCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StarburstCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StarburstCredential.__pulumiType;
    }

    /**
     * The internal credential ID
     */
    declare public /*out*/ readonly credentialId: pulumi.Output<number>;
    /**
     * The catalog to connect use
     */
    declare public readonly database: pulumi.Output<string>;
    /**
     * The password for the Starburst/Trino account
     */
    declare public readonly password: pulumi.Output<string>;
    /**
     * Project ID to create the Starburst/Trino credential in
     */
    declare public readonly projectId: pulumi.Output<number>;
    /**
     * The schema where to create models
     */
    declare public readonly schema: pulumi.Output<string>;
    /**
     * The username for the Starburst/Trino account
     */
    declare public readonly user: pulumi.Output<string>;

    /**
     * Create a StarburstCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StarburstCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StarburstCredentialArgs | StarburstCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StarburstCredentialState | undefined;
            resourceInputs["credentialId"] = state?.credentialId;
            resourceInputs["database"] = state?.database;
            resourceInputs["password"] = state?.password;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["user"] = state?.user;
        } else {
            const args = argsOrState as StarburstCredentialArgs | undefined;
            if (args?.database === undefined && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if (args?.password === undefined && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.schema === undefined && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            if (args?.user === undefined && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["database"] = args?.database;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["user"] = args?.user;
            resourceInputs["credentialId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(StarburstCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StarburstCredential resources.
 */
export interface StarburstCredentialState {
    /**
     * The internal credential ID
     */
    credentialId?: pulumi.Input<number>;
    /**
     * The catalog to connect use
     */
    database?: pulumi.Input<string>;
    /**
     * The password for the Starburst/Trino account
     */
    password?: pulumi.Input<string>;
    /**
     * Project ID to create the Starburst/Trino credential in
     */
    projectId?: pulumi.Input<number>;
    /**
     * The schema where to create models
     */
    schema?: pulumi.Input<string>;
    /**
     * The username for the Starburst/Trino account
     */
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StarburstCredential resource.
 */
export interface StarburstCredentialArgs {
    /**
     * The catalog to connect use
     */
    database: pulumi.Input<string>;
    /**
     * The password for the Starburst/Trino account
     */
    password: pulumi.Input<string>;
    /**
     * Project ID to create the Starburst/Trino credential in
     */
    projectId: pulumi.Input<number>;
    /**
     * The schema where to create models
     */
    schema: pulumi.Input<string>;
    /**
     * The username for the Starburst/Trino account
     */
    user: pulumi.Input<string>;
}

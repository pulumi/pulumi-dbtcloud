// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dbtcloud.ConnectionArgs;
import com.pulumi.dbtcloud.Utilities;
import com.pulumi.dbtcloud.inputs.ConnectionState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource to create a Data Warehouse connection in dbt Cloud.
 * 
 * &gt; This resource is deprecated and is going to be removed in the next major release, please use the `dbtcloud.GlobalConnection` resource instead to create connections.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.dbtcloud.Connection;
 * import com.pulumi.dbtcloud.ConnectionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var databricks = new Connection("databricks", ConnectionArgs.builder()
 *             .projectId(dbtProject.id())
 *             .type("adapter")
 *             .name("Databricks")
 *             .database("")
 *             .hostName("my-databricks-host.cloud.databricks.com")
 *             .httpPath("/my/path")
 *             .catalog("moo")
 *             .oauthClientId("yourclientid")
 *             .oauthClientSecret("yourclientsecret")
 *             .build());
 * 
 *         var redshift = new Connection("redshift", ConnectionArgs.builder()
 *             .projectId(dbtProject.id())
 *             .type("redshift")
 *             .name("My Redshift Warehouse")
 *             .database("my-database")
 *             .port(5439)
 *             .hostName("my-redshift-hostname")
 *             .build());
 * 
 *         var snowflake = new Connection("snowflake", ConnectionArgs.builder()
 *             .projectId(dbtProject.id())
 *             .type("snowflake")
 *             .name("My Snowflake warehouse")
 *             .account("my-snowflake-account")
 *             .database("MY_DATABASE")
 *             .role("MY_ROLE")
 *             .warehouse("MY_WAREHOUSE")
 *             .oauthClientId("yourclientid")
 *             .oauthClientSecret("yourclientsecret")
 *             .allowSso(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * using  import blocks (requires Terraform &gt;= 1.5)
 * 
 * import {
 * 
 *   to = dbtcloud_connection.test_connection
 * 
 *   id = &#34;project_id:connection_id&#34;
 * 
 * }
 * 
 * import {
 * 
 *   to = dbtcloud_connection.test_connection
 * 
 *   id = &#34;12345:6789&#34;
 * 
 * }
 * 
 * using the older import command
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/connection:Connection test_connection &#34;project_id:connection_id&#34;
 * ```
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/connection:Connection test_connection 12345:6789
 * ```
 * 
 */
@ResourceType(type="dbtcloud:index/connection:Connection")
public class Connection extends com.pulumi.resources.CustomResource {
    /**
     * Account name for the connection (for Snowflake)
     * 
     */
    @Export(name="account", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> account;

    /**
     * @return Account name for the connection (for Snowflake)
     * 
     */
    public Output<Optional<String>> account() {
        return Codegen.optional(this.account);
    }
    /**
     * Adapter id created for the Databricks connection (for Databricks)
     * 
     */
    @Export(name="adapterId", refs={Integer.class}, tree="[0]")
    private Output<Integer> adapterId;

    /**
     * @return Adapter id created for the Databricks connection (for Databricks)
     * 
     */
    public Output<Integer> adapterId() {
        return this.adapterId;
    }
    /**
     * Whether or not the connection should allow client session keep alive (for Snowflake)
     * 
     */
    @Export(name="allowKeepAlive", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> allowKeepAlive;

    /**
     * @return Whether or not the connection should allow client session keep alive (for Snowflake)
     * 
     */
    public Output<Optional<Boolean>> allowKeepAlive() {
        return Codegen.optional(this.allowKeepAlive);
    }
    /**
     * Whether or not the connection should allow SSO (for Snowflake)
     * 
     */
    @Export(name="allowSso", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> allowSso;

    /**
     * @return Whether or not the connection should allow SSO (for Snowflake)
     * 
     */
    public Output<Optional<Boolean>> allowSso() {
        return Codegen.optional(this.allowSso);
    }
    /**
     * Catalog name if Unity Catalog is enabled in your Databricks workspace (for Databricks)
     * 
     */
    @Export(name="catalog", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> catalog;

    /**
     * @return Catalog name if Unity Catalog is enabled in your Databricks workspace (for Databricks)
     * 
     */
    public Output<Optional<String>> catalog() {
        return Codegen.optional(this.catalog);
    }
    /**
     * Connection Identifier
     * 
     */
    @Export(name="connectionId", refs={Integer.class}, tree="[0]")
    private Output<Integer> connectionId;

    /**
     * @return Connection Identifier
     * 
     */
    public Output<Integer> connectionId() {
        return this.connectionId;
    }
    /**
     * Database name for the connection
     * 
     */
    @Export(name="database", refs={String.class}, tree="[0]")
    private Output<String> database;

    /**
     * @return Database name for the connection
     * 
     */
    public Output<String> database() {
        return this.database;
    }
    /**
     * Host name for the connection, including Databricks cluster
     * 
     */
    @Export(name="hostName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hostName;

    /**
     * @return Host name for the connection, including Databricks cluster
     * 
     */
    public Output<Optional<String>> hostName() {
        return Codegen.optional(this.hostName);
    }
    /**
     * The HTTP path of the Databricks cluster or SQL warehouse (for Databricks)
     * 
     */
    @Export(name="httpPath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> httpPath;

    /**
     * @return The HTTP path of the Databricks cluster or SQL warehouse (for Databricks)
     * 
     */
    public Output<Optional<String>> httpPath() {
        return Codegen.optional(this.httpPath);
    }
    /**
     * Whether the connection is active
     * 
     */
    @Export(name="isActive", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isActive;

    /**
     * @return Whether the connection is active
     * 
     */
    public Output<Optional<Boolean>> isActive() {
        return Codegen.optional(this.isActive);
    }
    /**
     * Connection name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Connection name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * OAuth client identifier (for Snowflake and Databricks)
     * 
     */
    @Export(name="oauthClientId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> oauthClientId;

    /**
     * @return OAuth client identifier (for Snowflake and Databricks)
     * 
     */
    public Output<Optional<String>> oauthClientId() {
        return Codegen.optional(this.oauthClientId);
    }
    /**
     * OAuth client secret (for Snowflake and Databricks)
     * 
     */
    @Export(name="oauthClientSecret", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> oauthClientSecret;

    /**
     * @return OAuth client secret (for Snowflake and Databricks)
     * 
     */
    public Output<Optional<String>> oauthClientSecret() {
        return Codegen.optional(this.oauthClientSecret);
    }
    /**
     * Port number to connect via
     * 
     */
    @Export(name="port", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> port;

    /**
     * @return Port number to connect via
     * 
     */
    public Output<Optional<Integer>> port() {
        return Codegen.optional(this.port);
    }
    /**
     * The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source
     * 
     */
    @Export(name="privateLinkEndpointId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> privateLinkEndpointId;

    /**
     * @return The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source
     * 
     */
    public Output<Optional<String>> privateLinkEndpointId() {
        return Codegen.optional(this.privateLinkEndpointId);
    }
    /**
     * Project ID to create the connection in
     * 
     */
    @Export(name="projectId", refs={Integer.class}, tree="[0]")
    private Output<Integer> projectId;

    /**
     * @return Project ID to create the connection in
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }
    /**
     * Role name for the connection (for Snowflake)
     * 
     */
    @Export(name="role", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> role;

    /**
     * @return Role name for the connection (for Snowflake)
     * 
     */
    public Output<Optional<String>> role() {
        return Codegen.optional(this.role);
    }
    /**
     * Whether or not tunneling should be enabled on your database connection
     * 
     */
    @Export(name="tunnelEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelEnabled;

    /**
     * @return Whether or not tunneling should be enabled on your database connection
     * 
     */
    public Output<Optional<Boolean>> tunnelEnabled() {
        return Codegen.optional(this.tunnelEnabled);
    }
    /**
     * The type of connection
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of connection
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Warehouse name for the connection (for Snowflake)
     * 
     */
    @Export(name="warehouse", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> warehouse;

    /**
     * @return Warehouse name for the connection (for Snowflake)
     * 
     */
    public Output<Optional<String>> warehouse() {
        return Codegen.optional(this.warehouse);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Connection(java.lang.String name) {
        this(name, ConnectionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Connection(java.lang.String name, ConnectionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Connection(java.lang.String name, ConnectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/connection:Connection", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Connection(java.lang.String name, Output<java.lang.String> id, @Nullable ConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/connection:Connection", name, state, makeResourceOptions(options, id), false);
    }

    private static ConnectionArgs makeArgs(ConnectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ConnectionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Connection get(java.lang.String name, Output<java.lang.String> id, @Nullable ConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Connection(name, id, state, options);
    }
}

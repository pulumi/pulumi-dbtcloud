// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TeradataCredentialState extends com.pulumi.resources.ResourceArgs {

    public static final TeradataCredentialState Empty = new TeradataCredentialState();

    /**
     * The internal credential ID
     * 
     */
    @Import(name="credentialId")
    private @Nullable Output<Integer> credentialId;

    /**
     * @return The internal credential ID
     * 
     */
    public Optional<Output<Integer>> credentialId() {
        return Optional.ofNullable(this.credentialId);
    }

    /**
     * The password for the Teradata account
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password for the Teradata account
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Project ID to create the Teradata/Trino credential in
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<Integer> projectId;

    /**
     * @return Project ID to create the Teradata/Trino credential in
     * 
     */
    public Optional<Output<Integer>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The schema where to create models
     * 
     */
    @Import(name="schema")
    private @Nullable Output<String> schema;

    /**
     * @return The schema where to create models
     * 
     */
    public Optional<Output<String>> schema() {
        return Optional.ofNullable(this.schema);
    }

    /**
     * The number of threads to use. Default is 1
     * 
     */
    @Import(name="threads")
    private @Nullable Output<Integer> threads;

    /**
     * @return The number of threads to use. Default is 1
     * 
     */
    public Optional<Output<Integer>> threads() {
        return Optional.ofNullable(this.threads);
    }

    /**
     * The username for the Teradata account
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return The username for the Teradata account
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private TeradataCredentialState() {}

    private TeradataCredentialState(TeradataCredentialState $) {
        this.credentialId = $.credentialId;
        this.password = $.password;
        this.projectId = $.projectId;
        this.schema = $.schema;
        this.threads = $.threads;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeradataCredentialState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeradataCredentialState $;

        public Builder() {
            $ = new TeradataCredentialState();
        }

        public Builder(TeradataCredentialState defaults) {
            $ = new TeradataCredentialState(Objects.requireNonNull(defaults));
        }

        /**
         * @param credentialId The internal credential ID
         * 
         * @return builder
         * 
         */
        public Builder credentialId(@Nullable Output<Integer> credentialId) {
            $.credentialId = credentialId;
            return this;
        }

        /**
         * @param credentialId The internal credential ID
         * 
         * @return builder
         * 
         */
        public Builder credentialId(Integer credentialId) {
            return credentialId(Output.of(credentialId));
        }

        /**
         * @param password The password for the Teradata account
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password for the Teradata account
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param projectId Project ID to create the Teradata/Trino credential in
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID to create the Teradata/Trino credential in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param schema The schema where to create models
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema where to create models
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param threads The number of threads to use. Default is 1
         * 
         * @return builder
         * 
         */
        public Builder threads(@Nullable Output<Integer> threads) {
            $.threads = threads;
            return this;
        }

        /**
         * @param threads The number of threads to use. Default is 1
         * 
         * @return builder
         * 
         */
        public Builder threads(Integer threads) {
            return threads(Output.of(threads));
        }

        /**
         * @param user The username for the Teradata account
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user The username for the Teradata account
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public TeradataCredentialState build() {
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GlobalConnectionSynapse {
    /**
     * @return The database to connect to for this connection.
     * 
     */
    private String database;
    /**
     * @return The server hostname.
     * 
     */
    private String host;
    /**
     * @return The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
     * 
     */
    private @Nullable Integer loginTimeout;
    /**
     * @return The port to connect to for this connection. Default=1433
     * 
     */
    private @Nullable Integer port;
    /**
     * @return The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
     * 
     */
    private @Nullable Integer queryTimeout;
    /**
     * @return The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
     * 
     */
    private @Nullable Integer retries;

    private GlobalConnectionSynapse() {}
    /**
     * @return The database to connect to for this connection.
     * 
     */
    public String database() {
        return this.database;
    }
    /**
     * @return The server hostname.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
     * 
     */
    public Optional<Integer> loginTimeout() {
        return Optional.ofNullable(this.loginTimeout);
    }
    /**
     * @return The port to connect to for this connection. Default=1433
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
     * 
     */
    public Optional<Integer> queryTimeout() {
        return Optional.ofNullable(this.queryTimeout);
    }
    /**
     * @return The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
     * 
     */
    public Optional<Integer> retries() {
        return Optional.ofNullable(this.retries);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GlobalConnectionSynapse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String database;
        private String host;
        private @Nullable Integer loginTimeout;
        private @Nullable Integer port;
        private @Nullable Integer queryTimeout;
        private @Nullable Integer retries;
        public Builder() {}
        public Builder(GlobalConnectionSynapse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.database = defaults.database;
    	      this.host = defaults.host;
    	      this.loginTimeout = defaults.loginTimeout;
    	      this.port = defaults.port;
    	      this.queryTimeout = defaults.queryTimeout;
    	      this.retries = defaults.retries;
        }

        @CustomType.Setter
        public Builder database(String database) {
            if (database == null) {
              throw new MissingRequiredPropertyException("GlobalConnectionSynapse", "database");
            }
            this.database = database;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GlobalConnectionSynapse", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder loginTimeout(@Nullable Integer loginTimeout) {

            this.loginTimeout = loginTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder queryTimeout(@Nullable Integer queryTimeout) {

            this.queryTimeout = queryTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder retries(@Nullable Integer retries) {

            this.retries = retries;
            return this;
        }
        public GlobalConnectionSynapse build() {
            final var _resultValue = new GlobalConnectionSynapse();
            _resultValue.database = database;
            _resultValue.host = host;
            _resultValue.loginTimeout = loginTimeout;
            _resultValue.port = port;
            _resultValue.queryTimeout = queryTimeout;
            _resultValue.retries = retries;
            return _resultValue;
        }
    }
}

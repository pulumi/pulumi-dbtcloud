// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PostgresSemanticLayerCredentialCredential {
    /**
     * @return The system Postgres/Redshift/AlloyDB credential ID.
     * 
     */
    private @Nullable Integer credentialId;
    /**
     * @return Default schema name. Optional only when semantic*layer*credential is set to true; otherwise, this field is required.
     * 
     */
    private @Nullable String defaultSchema;
    /**
     * @return The ID of this resource. Contains the project ID and the credential ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return Whether the Postgres/Redshift/AlloyDB credential is active
     * 
     */
    private @Nullable Boolean isActive;
    /**
     * @return Number of threads to use (required for Redshift)
     * 
     */
    private @Nullable Integer numThreads;
    /**
     * @return Password for Postgres/Redshift/AlloyDB
     * 
     */
    private @Nullable String password;
    /**
     * @return Project ID to create the Postgres/Redshift/AlloyDB credential in.
     * 
     */
    private Integer projectId;
    /**
     * @return This field indicates that the credential is used as part of the Semantic Layer configuration. It is used to create a Postgres credential for the Semantic Layer.
     * 
     */
    private @Nullable Boolean semanticLayerCredential;
    /**
     * @return Default schema name
     * 
     */
    private @Nullable String targetName;
    /**
     * @return Type of connection. One of (postgres/redshift). Use postgres for alloydb connections. Optional only when semantic*layer*credential is set to true; otherwise, this field is required.
     * 
     */
    private @Nullable String type;
    /**
     * @return Username for Postgres/Redshift/AlloyDB
     * 
     */
    private String username;

    private PostgresSemanticLayerCredentialCredential() {}
    /**
     * @return The system Postgres/Redshift/AlloyDB credential ID.
     * 
     */
    public Optional<Integer> credentialId() {
        return Optional.ofNullable(this.credentialId);
    }
    /**
     * @return Default schema name. Optional only when semantic*layer*credential is set to true; otherwise, this field is required.
     * 
     */
    public Optional<String> defaultSchema() {
        return Optional.ofNullable(this.defaultSchema);
    }
    /**
     * @return The ID of this resource. Contains the project ID and the credential ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Whether the Postgres/Redshift/AlloyDB credential is active
     * 
     */
    public Optional<Boolean> isActive() {
        return Optional.ofNullable(this.isActive);
    }
    /**
     * @return Number of threads to use (required for Redshift)
     * 
     */
    public Optional<Integer> numThreads() {
        return Optional.ofNullable(this.numThreads);
    }
    /**
     * @return Password for Postgres/Redshift/AlloyDB
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return Project ID to create the Postgres/Redshift/AlloyDB credential in.
     * 
     */
    public Integer projectId() {
        return this.projectId;
    }
    /**
     * @return This field indicates that the credential is used as part of the Semantic Layer configuration. It is used to create a Postgres credential for the Semantic Layer.
     * 
     */
    public Optional<Boolean> semanticLayerCredential() {
        return Optional.ofNullable(this.semanticLayerCredential);
    }
    /**
     * @return Default schema name
     * 
     */
    public Optional<String> targetName() {
        return Optional.ofNullable(this.targetName);
    }
    /**
     * @return Type of connection. One of (postgres/redshift). Use postgres for alloydb connections. Optional only when semantic*layer*credential is set to true; otherwise, this field is required.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return Username for Postgres/Redshift/AlloyDB
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PostgresSemanticLayerCredentialCredential defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer credentialId;
        private @Nullable String defaultSchema;
        private @Nullable String id;
        private @Nullable Boolean isActive;
        private @Nullable Integer numThreads;
        private @Nullable String password;
        private Integer projectId;
        private @Nullable Boolean semanticLayerCredential;
        private @Nullable String targetName;
        private @Nullable String type;
        private String username;
        public Builder() {}
        public Builder(PostgresSemanticLayerCredentialCredential defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credentialId = defaults.credentialId;
    	      this.defaultSchema = defaults.defaultSchema;
    	      this.id = defaults.id;
    	      this.isActive = defaults.isActive;
    	      this.numThreads = defaults.numThreads;
    	      this.password = defaults.password;
    	      this.projectId = defaults.projectId;
    	      this.semanticLayerCredential = defaults.semanticLayerCredential;
    	      this.targetName = defaults.targetName;
    	      this.type = defaults.type;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder credentialId(@Nullable Integer credentialId) {

            this.credentialId = credentialId;
            return this;
        }
        @CustomType.Setter
        public Builder defaultSchema(@Nullable String defaultSchema) {

            this.defaultSchema = defaultSchema;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isActive(@Nullable Boolean isActive) {

            this.isActive = isActive;
            return this;
        }
        @CustomType.Setter
        public Builder numThreads(@Nullable Integer numThreads) {

            this.numThreads = numThreads;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(Integer projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("PostgresSemanticLayerCredentialCredential", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder semanticLayerCredential(@Nullable Boolean semanticLayerCredential) {

            this.semanticLayerCredential = semanticLayerCredential;
            return this;
        }
        @CustomType.Setter
        public Builder targetName(@Nullable String targetName) {

            this.targetName = targetName;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("PostgresSemanticLayerCredentialCredential", "username");
            }
            this.username = username;
            return this;
        }
        public PostgresSemanticLayerCredentialCredential build() {
            final var _resultValue = new PostgresSemanticLayerCredentialCredential();
            _resultValue.credentialId = credentialId;
            _resultValue.defaultSchema = defaultSchema;
            _resultValue.id = id;
            _resultValue.isActive = isActive;
            _resultValue.numThreads = numThreads;
            _resultValue.password = password;
            _resultValue.projectId = projectId;
            _resultValue.semanticLayerCredential = semanticLayerCredential;
            _resultValue.targetName = targetName;
            _resultValue.type = type;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}

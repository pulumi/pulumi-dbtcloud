// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.dbtcloud.outputs.GetProjectsProject;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetProjectsResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Used to filter projects by name, Optional
     * 
     */
    private String nameContains;
    /**
     * @return Set of projects with their details
     * 
     */
    private List<GetProjectsProject> projects;

    private GetProjectsResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Used to filter projects by name, Optional
     * 
     */
    public String nameContains() {
        return this.nameContains;
    }
    /**
     * @return Set of projects with their details
     * 
     */
    public List<GetProjectsProject> projects() {
        return this.projects;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private String nameContains;
        private List<GetProjectsProject> projects;
        public Builder() {}
        public Builder(GetProjectsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.nameContains = defaults.nameContains;
    	      this.projects = defaults.projects;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProjectsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder nameContains(String nameContains) {
            if (nameContains == null) {
              throw new MissingRequiredPropertyException("GetProjectsResult", "nameContains");
            }
            this.nameContains = nameContains;
            return this;
        }
        @CustomType.Setter
        public Builder projects(List<GetProjectsProject> projects) {
            if (projects == null) {
              throw new MissingRequiredPropertyException("GetProjectsResult", "projects");
            }
            this.projects = projects;
            return this;
        }
        public Builder projects(GetProjectsProject... projects) {
            return projects(List.of(projects));
        }
        public GetProjectsResult build() {
            final var _resultValue = new GetProjectsResult();
            _resultValue.id = id;
            _resultValue.nameContains = nameContains;
            _resultValue.projects = projects;
            return _resultValue;
        }
    }
}

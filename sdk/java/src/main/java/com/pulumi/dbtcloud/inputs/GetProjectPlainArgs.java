// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetProjectPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetProjectPlainArgs Empty = new GetProjectPlainArgs();

    /**
     * The description of the project
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return The description of the project
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Given name for project
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Given name for project
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * ID of the project to represent
     * 
     */
    @Import(name="projectId")
    private @Nullable Integer projectId;

    /**
     * @return ID of the project to represent
     * 
     */
    public Optional<Integer> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    private GetProjectPlainArgs() {}

    private GetProjectPlainArgs(GetProjectPlainArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProjectPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProjectPlainArgs $;

        public Builder() {
            $ = new GetProjectPlainArgs();
        }

        public Builder(GetProjectPlainArgs defaults) {
            $ = new GetProjectPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the project
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param name Given name for project
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param projectId ID of the project to represent
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Integer projectId) {
            $.projectId = projectId;
            return this;
        }

        public GetProjectPlainArgs build() {
            return $;
        }
    }

}

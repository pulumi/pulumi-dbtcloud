// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.dbtcloud.outputs.GetGlobalConnectionApacheSpark;
import com.pulumi.dbtcloud.outputs.GetGlobalConnectionAthena;
import com.pulumi.dbtcloud.outputs.GetGlobalConnectionBigquery;
import com.pulumi.dbtcloud.outputs.GetGlobalConnectionDatabricks;
import com.pulumi.dbtcloud.outputs.GetGlobalConnectionFabric;
import com.pulumi.dbtcloud.outputs.GetGlobalConnectionPostgres;
import com.pulumi.dbtcloud.outputs.GetGlobalConnectionRedshift;
import com.pulumi.dbtcloud.outputs.GetGlobalConnectionSnowflake;
import com.pulumi.dbtcloud.outputs.GetGlobalConnectionStarburst;
import com.pulumi.dbtcloud.outputs.GetGlobalConnectionSynapse;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetGlobalConnectionResult {
    /**
     * @return Version of the adapter
     * 
     */
    private String adapterVersion;
    /**
     * @return Apache Spark connection configuration.
     * 
     */
    private GetGlobalConnectionApacheSpark apacheSpark;
    /**
     * @return Athena connection configuration.
     * 
     */
    private GetGlobalConnectionAthena athena;
    private GetGlobalConnectionBigquery bigquery;
    /**
     * @return Databricks connection configuration
     * 
     */
    private GetGlobalConnectionDatabricks databricks;
    /**
     * @return Microsoft Fabric connection configuration.
     * 
     */
    private GetGlobalConnectionFabric fabric;
    /**
     * @return Connection Identifier
     * 
     */
    private Integer id;
    /**
     * @return Whether the connection can use an SSH tunnel
     * 
     */
    private Boolean isSshTunnelEnabled;
    /**
     * @return Connection name
     * 
     */
    private String name;
    private Integer oauthConfigurationId;
    /**
     * @return PostgreSQL connection configuration.
     * 
     */
    private GetGlobalConnectionPostgres postgres;
    /**
     * @return Private Link Endpoint ID. This ID can be found using the `privatelink_endpoint` data source
     * 
     */
    private String privateLinkEndpointId;
    /**
     * @return Redshift connection configuration
     * 
     */
    private GetGlobalConnectionRedshift redshift;
    /**
     * @return Snowflake connection configuration
     * 
     */
    private GetGlobalConnectionSnowflake snowflake;
    /**
     * @return Starburst/Trino connection configuration.
     * 
     */
    private GetGlobalConnectionStarburst starburst;
    /**
     * @return Azure Synapse Analytics connection configuration.
     * 
     */
    private GetGlobalConnectionSynapse synapse;

    private GetGlobalConnectionResult() {}
    /**
     * @return Version of the adapter
     * 
     */
    public String adapterVersion() {
        return this.adapterVersion;
    }
    /**
     * @return Apache Spark connection configuration.
     * 
     */
    public GetGlobalConnectionApacheSpark apacheSpark() {
        return this.apacheSpark;
    }
    /**
     * @return Athena connection configuration.
     * 
     */
    public GetGlobalConnectionAthena athena() {
        return this.athena;
    }
    public GetGlobalConnectionBigquery bigquery() {
        return this.bigquery;
    }
    /**
     * @return Databricks connection configuration
     * 
     */
    public GetGlobalConnectionDatabricks databricks() {
        return this.databricks;
    }
    /**
     * @return Microsoft Fabric connection configuration.
     * 
     */
    public GetGlobalConnectionFabric fabric() {
        return this.fabric;
    }
    /**
     * @return Connection Identifier
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return Whether the connection can use an SSH tunnel
     * 
     */
    public Boolean isSshTunnelEnabled() {
        return this.isSshTunnelEnabled;
    }
    /**
     * @return Connection name
     * 
     */
    public String name() {
        return this.name;
    }
    public Integer oauthConfigurationId() {
        return this.oauthConfigurationId;
    }
    /**
     * @return PostgreSQL connection configuration.
     * 
     */
    public GetGlobalConnectionPostgres postgres() {
        return this.postgres;
    }
    /**
     * @return Private Link Endpoint ID. This ID can be found using the `privatelink_endpoint` data source
     * 
     */
    public String privateLinkEndpointId() {
        return this.privateLinkEndpointId;
    }
    /**
     * @return Redshift connection configuration
     * 
     */
    public GetGlobalConnectionRedshift redshift() {
        return this.redshift;
    }
    /**
     * @return Snowflake connection configuration
     * 
     */
    public GetGlobalConnectionSnowflake snowflake() {
        return this.snowflake;
    }
    /**
     * @return Starburst/Trino connection configuration.
     * 
     */
    public GetGlobalConnectionStarburst starburst() {
        return this.starburst;
    }
    /**
     * @return Azure Synapse Analytics connection configuration.
     * 
     */
    public GetGlobalConnectionSynapse synapse() {
        return this.synapse;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGlobalConnectionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String adapterVersion;
        private GetGlobalConnectionApacheSpark apacheSpark;
        private GetGlobalConnectionAthena athena;
        private GetGlobalConnectionBigquery bigquery;
        private GetGlobalConnectionDatabricks databricks;
        private GetGlobalConnectionFabric fabric;
        private Integer id;
        private Boolean isSshTunnelEnabled;
        private String name;
        private Integer oauthConfigurationId;
        private GetGlobalConnectionPostgres postgres;
        private String privateLinkEndpointId;
        private GetGlobalConnectionRedshift redshift;
        private GetGlobalConnectionSnowflake snowflake;
        private GetGlobalConnectionStarburst starburst;
        private GetGlobalConnectionSynapse synapse;
        public Builder() {}
        public Builder(GetGlobalConnectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adapterVersion = defaults.adapterVersion;
    	      this.apacheSpark = defaults.apacheSpark;
    	      this.athena = defaults.athena;
    	      this.bigquery = defaults.bigquery;
    	      this.databricks = defaults.databricks;
    	      this.fabric = defaults.fabric;
    	      this.id = defaults.id;
    	      this.isSshTunnelEnabled = defaults.isSshTunnelEnabled;
    	      this.name = defaults.name;
    	      this.oauthConfigurationId = defaults.oauthConfigurationId;
    	      this.postgres = defaults.postgres;
    	      this.privateLinkEndpointId = defaults.privateLinkEndpointId;
    	      this.redshift = defaults.redshift;
    	      this.snowflake = defaults.snowflake;
    	      this.starburst = defaults.starburst;
    	      this.synapse = defaults.synapse;
        }

        @CustomType.Setter
        public Builder adapterVersion(String adapterVersion) {
            if (adapterVersion == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionResult", "adapterVersion");
            }
            this.adapterVersion = adapterVersion;
            return this;
        }
        @CustomType.Setter
        public Builder apacheSpark(GetGlobalConnectionApacheSpark apacheSpark) {
            if (apacheSpark == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionResult", "apacheSpark");
            }
            this.apacheSpark = apacheSpark;
            return this;
        }
        @CustomType.Setter
        public Builder athena(GetGlobalConnectionAthena athena) {
            if (athena == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionResult", "athena");
            }
            this.athena = athena;
            return this;
        }
        @CustomType.Setter
        public Builder bigquery(GetGlobalConnectionBigquery bigquery) {
            if (bigquery == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionResult", "bigquery");
            }
            this.bigquery = bigquery;
            return this;
        }
        @CustomType.Setter
        public Builder databricks(GetGlobalConnectionDatabricks databricks) {
            if (databricks == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionResult", "databricks");
            }
            this.databricks = databricks;
            return this;
        }
        @CustomType.Setter
        public Builder fabric(GetGlobalConnectionFabric fabric) {
            if (fabric == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionResult", "fabric");
            }
            this.fabric = fabric;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isSshTunnelEnabled(Boolean isSshTunnelEnabled) {
            if (isSshTunnelEnabled == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionResult", "isSshTunnelEnabled");
            }
            this.isSshTunnelEnabled = isSshTunnelEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder oauthConfigurationId(Integer oauthConfigurationId) {
            if (oauthConfigurationId == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionResult", "oauthConfigurationId");
            }
            this.oauthConfigurationId = oauthConfigurationId;
            return this;
        }
        @CustomType.Setter
        public Builder postgres(GetGlobalConnectionPostgres postgres) {
            if (postgres == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionResult", "postgres");
            }
            this.postgres = postgres;
            return this;
        }
        @CustomType.Setter
        public Builder privateLinkEndpointId(String privateLinkEndpointId) {
            if (privateLinkEndpointId == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionResult", "privateLinkEndpointId");
            }
            this.privateLinkEndpointId = privateLinkEndpointId;
            return this;
        }
        @CustomType.Setter
        public Builder redshift(GetGlobalConnectionRedshift redshift) {
            if (redshift == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionResult", "redshift");
            }
            this.redshift = redshift;
            return this;
        }
        @CustomType.Setter
        public Builder snowflake(GetGlobalConnectionSnowflake snowflake) {
            if (snowflake == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionResult", "snowflake");
            }
            this.snowflake = snowflake;
            return this;
        }
        @CustomType.Setter
        public Builder starburst(GetGlobalConnectionStarburst starburst) {
            if (starburst == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionResult", "starburst");
            }
            this.starburst = starburst;
            return this;
        }
        @CustomType.Setter
        public Builder synapse(GetGlobalConnectionSynapse synapse) {
            if (synapse == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionResult", "synapse");
            }
            this.synapse = synapse;
            return this;
        }
        public GetGlobalConnectionResult build() {
            final var _resultValue = new GetGlobalConnectionResult();
            _resultValue.adapterVersion = adapterVersion;
            _resultValue.apacheSpark = apacheSpark;
            _resultValue.athena = athena;
            _resultValue.bigquery = bigquery;
            _resultValue.databricks = databricks;
            _resultValue.fabric = fabric;
            _resultValue.id = id;
            _resultValue.isSshTunnelEnabled = isSshTunnelEnabled;
            _resultValue.name = name;
            _resultValue.oauthConfigurationId = oauthConfigurationId;
            _resultValue.postgres = postgres;
            _resultValue.privateLinkEndpointId = privateLinkEndpointId;
            _resultValue.redshift = redshift;
            _resultValue.snowflake = snowflake;
            _resultValue.starburst = starburst;
            _resultValue.synapse = synapse;
            return _resultValue;
        }
    }
}

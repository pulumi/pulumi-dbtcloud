// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnvironmentState extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentState Empty = new EnvironmentState();

    @Import(name="connectionId")
    private @Nullable Output<Integer> connectionId;

    public Optional<Output<Integer>> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }

    /**
     * Credential ID to create the environment with. A credential is not required for development environments but is required
     * for deployment environments
     * 
     */
    @Import(name="credentialId")
    private @Nullable Output<Integer> credentialId;

    /**
     * @return Credential ID to create the environment with. A credential is not required for development environments but is required
     * for deployment environments
     * 
     */
    public Optional<Output<Integer>> credentialId() {
        return Optional.ofNullable(this.credentialId);
    }

    /**
     * Which custom branch to use in this environment
     * 
     */
    @Import(name="customBranch")
    private @Nullable Output<String> customBranch;

    /**
     * @return Which custom branch to use in this environment
     * 
     */
    public Optional<Output<String>> customBranch() {
        return Optional.ofNullable(this.customBranch);
    }

    /**
     * Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` (e.g.
     * `1.5.0-latest`), `major.minor.0-pre` or `versionless`. Defaults to`versionless` if no version is provided
     * 
     */
    @Import(name="dbtVersion")
    private @Nullable Output<String> dbtVersion;

    /**
     * @return Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` (e.g.
     * `1.5.0-latest`), `major.minor.0-pre` or `versionless`. Defaults to`versionless` if no version is provided
     * 
     */
    public Optional<Output<String>> dbtVersion() {
        return Optional.ofNullable(this.dbtVersion);
    }

    /**
     * The type of environment. Only valid for environments of type &#39;deployment&#39; and for now can only be &#39;production&#39;,
     * &#39;staging&#39; or left empty for generic environments
     * 
     */
    @Import(name="deploymentType")
    private @Nullable Output<String> deploymentType;

    /**
     * @return The type of environment. Only valid for environments of type &#39;deployment&#39; and for now can only be &#39;production&#39;,
     * &#39;staging&#39; or left empty for generic environments
     * 
     */
    public Optional<Output<String>> deploymentType() {
        return Optional.ofNullable(this.deploymentType);
    }

    /**
     * Whether to enable model query history in this environment. As of Oct 2024, works only for Snowflake and BigQuery.
     * 
     */
    @Import(name="enableModelQueryHistory")
    private @Nullable Output<Boolean> enableModelQueryHistory;

    /**
     * @return Whether to enable model query history in this environment. As of Oct 2024, works only for Snowflake and BigQuery.
     * 
     */
    public Optional<Output<Boolean>> enableModelQueryHistory() {
        return Optional.ofNullable(this.enableModelQueryHistory);
    }

    /**
     * Environment ID within the project
     * 
     */
    @Import(name="environmentId")
    private @Nullable Output<Integer> environmentId;

    /**
     * @return Environment ID within the project
     * 
     */
    public Optional<Output<Integer>> environmentId() {
        return Optional.ofNullable(this.environmentId);
    }

    /**
     * ID of the extended attributes for the environment
     * 
     */
    @Import(name="extendedAttributesId")
    private @Nullable Output<Integer> extendedAttributesId;

    /**
     * @return ID of the extended attributes for the environment
     * 
     */
    public Optional<Output<Integer>> extendedAttributesId() {
        return Optional.ofNullable(this.extendedAttributesId);
    }

    /**
     * Whether the environment is active
     * 
     */
    @Import(name="isActive")
    private @Nullable Output<Boolean> isActive;

    /**
     * @return Whether the environment is active
     * 
     */
    public Optional<Output<Boolean>> isActive() {
        return Optional.ofNullable(this.isActive);
    }

    /**
     * Environment name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Environment name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Project ID to create the environment in
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<Integer> projectId;

    /**
     * @return Project ID to create the environment in
     * 
     */
    public Optional<Output<Integer>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The type of environment (must be either development or deployment)
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of environment (must be either development or deployment)
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Whether to use a custom git branch in this environment
     * 
     */
    @Import(name="useCustomBranch")
    private @Nullable Output<Boolean> useCustomBranch;

    /**
     * @return Whether to use a custom git branch in this environment
     * 
     */
    public Optional<Output<Boolean>> useCustomBranch() {
        return Optional.ofNullable(this.useCustomBranch);
    }

    private EnvironmentState() {}

    private EnvironmentState(EnvironmentState $) {
        this.connectionId = $.connectionId;
        this.credentialId = $.credentialId;
        this.customBranch = $.customBranch;
        this.dbtVersion = $.dbtVersion;
        this.deploymentType = $.deploymentType;
        this.enableModelQueryHistory = $.enableModelQueryHistory;
        this.environmentId = $.environmentId;
        this.extendedAttributesId = $.extendedAttributesId;
        this.isActive = $.isActive;
        this.name = $.name;
        this.projectId = $.projectId;
        this.type = $.type;
        this.useCustomBranch = $.useCustomBranch;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentState $;

        public Builder() {
            $ = new EnvironmentState();
        }

        public Builder(EnvironmentState defaults) {
            $ = new EnvironmentState(Objects.requireNonNull(defaults));
        }

        public Builder connectionId(@Nullable Output<Integer> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        public Builder connectionId(Integer connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param credentialId Credential ID to create the environment with. A credential is not required for development environments but is required
         * for deployment environments
         * 
         * @return builder
         * 
         */
        public Builder credentialId(@Nullable Output<Integer> credentialId) {
            $.credentialId = credentialId;
            return this;
        }

        /**
         * @param credentialId Credential ID to create the environment with. A credential is not required for development environments but is required
         * for deployment environments
         * 
         * @return builder
         * 
         */
        public Builder credentialId(Integer credentialId) {
            return credentialId(Output.of(credentialId));
        }

        /**
         * @param customBranch Which custom branch to use in this environment
         * 
         * @return builder
         * 
         */
        public Builder customBranch(@Nullable Output<String> customBranch) {
            $.customBranch = customBranch;
            return this;
        }

        /**
         * @param customBranch Which custom branch to use in this environment
         * 
         * @return builder
         * 
         */
        public Builder customBranch(String customBranch) {
            return customBranch(Output.of(customBranch));
        }

        /**
         * @param dbtVersion Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` (e.g.
         * `1.5.0-latest`), `major.minor.0-pre` or `versionless`. Defaults to`versionless` if no version is provided
         * 
         * @return builder
         * 
         */
        public Builder dbtVersion(@Nullable Output<String> dbtVersion) {
            $.dbtVersion = dbtVersion;
            return this;
        }

        /**
         * @param dbtVersion Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` (e.g.
         * `1.5.0-latest`), `major.minor.0-pre` or `versionless`. Defaults to`versionless` if no version is provided
         * 
         * @return builder
         * 
         */
        public Builder dbtVersion(String dbtVersion) {
            return dbtVersion(Output.of(dbtVersion));
        }

        /**
         * @param deploymentType The type of environment. Only valid for environments of type &#39;deployment&#39; and for now can only be &#39;production&#39;,
         * &#39;staging&#39; or left empty for generic environments
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(@Nullable Output<String> deploymentType) {
            $.deploymentType = deploymentType;
            return this;
        }

        /**
         * @param deploymentType The type of environment. Only valid for environments of type &#39;deployment&#39; and for now can only be &#39;production&#39;,
         * &#39;staging&#39; or left empty for generic environments
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(String deploymentType) {
            return deploymentType(Output.of(deploymentType));
        }

        /**
         * @param enableModelQueryHistory Whether to enable model query history in this environment. As of Oct 2024, works only for Snowflake and BigQuery.
         * 
         * @return builder
         * 
         */
        public Builder enableModelQueryHistory(@Nullable Output<Boolean> enableModelQueryHistory) {
            $.enableModelQueryHistory = enableModelQueryHistory;
            return this;
        }

        /**
         * @param enableModelQueryHistory Whether to enable model query history in this environment. As of Oct 2024, works only for Snowflake and BigQuery.
         * 
         * @return builder
         * 
         */
        public Builder enableModelQueryHistory(Boolean enableModelQueryHistory) {
            return enableModelQueryHistory(Output.of(enableModelQueryHistory));
        }

        /**
         * @param environmentId Environment ID within the project
         * 
         * @return builder
         * 
         */
        public Builder environmentId(@Nullable Output<Integer> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param environmentId Environment ID within the project
         * 
         * @return builder
         * 
         */
        public Builder environmentId(Integer environmentId) {
            return environmentId(Output.of(environmentId));
        }

        /**
         * @param extendedAttributesId ID of the extended attributes for the environment
         * 
         * @return builder
         * 
         */
        public Builder extendedAttributesId(@Nullable Output<Integer> extendedAttributesId) {
            $.extendedAttributesId = extendedAttributesId;
            return this;
        }

        /**
         * @param extendedAttributesId ID of the extended attributes for the environment
         * 
         * @return builder
         * 
         */
        public Builder extendedAttributesId(Integer extendedAttributesId) {
            return extendedAttributesId(Output.of(extendedAttributesId));
        }

        /**
         * @param isActive Whether the environment is active
         * 
         * @return builder
         * 
         */
        public Builder isActive(@Nullable Output<Boolean> isActive) {
            $.isActive = isActive;
            return this;
        }

        /**
         * @param isActive Whether the environment is active
         * 
         * @return builder
         * 
         */
        public Builder isActive(Boolean isActive) {
            return isActive(Output.of(isActive));
        }

        /**
         * @param name Environment name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Environment name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId Project ID to create the environment in
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID to create the environment in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param type The type of environment (must be either development or deployment)
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of environment (must be either development or deployment)
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param useCustomBranch Whether to use a custom git branch in this environment
         * 
         * @return builder
         * 
         */
        public Builder useCustomBranch(@Nullable Output<Boolean> useCustomBranch) {
            $.useCustomBranch = useCustomBranch;
            return this;
        }

        /**
         * @param useCustomBranch Whether to use a custom git branch in this environment
         * 
         * @return builder
         * 
         */
        public Builder useCustomBranch(Boolean useCustomBranch) {
            return useCustomBranch(Output.of(useCustomBranch));
        }

        public EnvironmentState build() {
            return $;
        }
    }

}

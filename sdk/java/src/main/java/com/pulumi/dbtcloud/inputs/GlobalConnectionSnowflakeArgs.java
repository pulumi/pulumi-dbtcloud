// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GlobalConnectionSnowflakeArgs extends com.pulumi.resources.ResourceArgs {

    public static final GlobalConnectionSnowflakeArgs Empty = new GlobalConnectionSnowflakeArgs();

    /**
     * The Snowflake account name
     * 
     */
    @Import(name="account", required=true)
    private Output<String> account;

    /**
     * @return The Snowflake account name
     * 
     */
    public Output<String> account() {
        return this.account;
    }

    /**
     * Whether to allow Snowflake OAuth for the connection. If true, the `oauthClientId` and `oauthClientSecret` fields must be set
     * 
     */
    @Import(name="allowSso")
    private @Nullable Output<Boolean> allowSso;

    /**
     * @return Whether to allow Snowflake OAuth for the connection. If true, the `oauthClientId` and `oauthClientSecret` fields must be set
     * 
     */
    public Optional<Output<Boolean>> allowSso() {
        return Optional.ofNullable(this.allowSso);
    }

    /**
     * If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (&gt; 4 hours)
     * 
     */
    @Import(name="clientSessionKeepAlive")
    private @Nullable Output<Boolean> clientSessionKeepAlive;

    /**
     * @return If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (&gt; 4 hours)
     * 
     */
    public Optional<Output<Boolean>> clientSessionKeepAlive() {
        return Optional.ofNullable(this.clientSessionKeepAlive);
    }

    /**
     * The default database for the connection
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    /**
     * @return The default database for the connection
     * 
     */
    public Output<String> database() {
        return this.database;
    }

    /**
     * OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake
     * 
     */
    @Import(name="oauthClientId")
    private @Nullable Output<String> oauthClientId;

    /**
     * @return OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake
     * 
     */
    public Optional<Output<String>> oauthClientId() {
        return Optional.ofNullable(this.oauthClientId);
    }

    /**
     * OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake
     * 
     */
    @Import(name="oauthClientSecret")
    private @Nullable Output<String> oauthClientSecret;

    /**
     * @return OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake
     * 
     */
    public Optional<Output<String>> oauthClientSecret() {
        return Optional.ofNullable(this.oauthClientSecret);
    }

    /**
     * The Snowflake role to use when running queries on the connection
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The Snowflake role to use when running queries on the connection
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * The default Snowflake Warehouse to use for the connection
     * 
     */
    @Import(name="warehouse", required=true)
    private Output<String> warehouse;

    /**
     * @return The default Snowflake Warehouse to use for the connection
     * 
     */
    public Output<String> warehouse() {
        return this.warehouse;
    }

    private GlobalConnectionSnowflakeArgs() {}

    private GlobalConnectionSnowflakeArgs(GlobalConnectionSnowflakeArgs $) {
        this.account = $.account;
        this.allowSso = $.allowSso;
        this.clientSessionKeepAlive = $.clientSessionKeepAlive;
        this.database = $.database;
        this.oauthClientId = $.oauthClientId;
        this.oauthClientSecret = $.oauthClientSecret;
        this.role = $.role;
        this.warehouse = $.warehouse;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GlobalConnectionSnowflakeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GlobalConnectionSnowflakeArgs $;

        public Builder() {
            $ = new GlobalConnectionSnowflakeArgs();
        }

        public Builder(GlobalConnectionSnowflakeArgs defaults) {
            $ = new GlobalConnectionSnowflakeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param account The Snowflake account name
         * 
         * @return builder
         * 
         */
        public Builder account(Output<String> account) {
            $.account = account;
            return this;
        }

        /**
         * @param account The Snowflake account name
         * 
         * @return builder
         * 
         */
        public Builder account(String account) {
            return account(Output.of(account));
        }

        /**
         * @param allowSso Whether to allow Snowflake OAuth for the connection. If true, the `oauthClientId` and `oauthClientSecret` fields must be set
         * 
         * @return builder
         * 
         */
        public Builder allowSso(@Nullable Output<Boolean> allowSso) {
            $.allowSso = allowSso;
            return this;
        }

        /**
         * @param allowSso Whether to allow Snowflake OAuth for the connection. If true, the `oauthClientId` and `oauthClientSecret` fields must be set
         * 
         * @return builder
         * 
         */
        public Builder allowSso(Boolean allowSso) {
            return allowSso(Output.of(allowSso));
        }

        /**
         * @param clientSessionKeepAlive If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (&gt; 4 hours)
         * 
         * @return builder
         * 
         */
        public Builder clientSessionKeepAlive(@Nullable Output<Boolean> clientSessionKeepAlive) {
            $.clientSessionKeepAlive = clientSessionKeepAlive;
            return this;
        }

        /**
         * @param clientSessionKeepAlive If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (&gt; 4 hours)
         * 
         * @return builder
         * 
         */
        public Builder clientSessionKeepAlive(Boolean clientSessionKeepAlive) {
            return clientSessionKeepAlive(Output.of(clientSessionKeepAlive));
        }

        /**
         * @param database The default database for the connection
         * 
         * @return builder
         * 
         */
        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The default database for the connection
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param oauthClientId OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake
         * 
         * @return builder
         * 
         */
        public Builder oauthClientId(@Nullable Output<String> oauthClientId) {
            $.oauthClientId = oauthClientId;
            return this;
        }

        /**
         * @param oauthClientId OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake
         * 
         * @return builder
         * 
         */
        public Builder oauthClientId(String oauthClientId) {
            return oauthClientId(Output.of(oauthClientId));
        }

        /**
         * @param oauthClientSecret OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake
         * 
         * @return builder
         * 
         */
        public Builder oauthClientSecret(@Nullable Output<String> oauthClientSecret) {
            $.oauthClientSecret = oauthClientSecret;
            return this;
        }

        /**
         * @param oauthClientSecret OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake
         * 
         * @return builder
         * 
         */
        public Builder oauthClientSecret(String oauthClientSecret) {
            return oauthClientSecret(Output.of(oauthClientSecret));
        }

        /**
         * @param role The Snowflake role to use when running queries on the connection
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The Snowflake role to use when running queries on the connection
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param warehouse The default Snowflake Warehouse to use for the connection
         * 
         * @return builder
         * 
         */
        public Builder warehouse(Output<String> warehouse) {
            $.warehouse = warehouse;
            return this;
        }

        /**
         * @param warehouse The default Snowflake Warehouse to use for the connection
         * 
         * @return builder
         * 
         */
        public Builder warehouse(String warehouse) {
            return warehouse(Output.of(warehouse));
        }

        public GlobalConnectionSnowflakeArgs build() {
            if ($.account == null) {
                throw new MissingRequiredPropertyException("GlobalConnectionSnowflakeArgs", "account");
            }
            if ($.database == null) {
                throw new MissingRequiredPropertyException("GlobalConnectionSnowflakeArgs", "database");
            }
            if ($.warehouse == null) {
                throw new MissingRequiredPropertyException("GlobalConnectionSnowflakeArgs", "warehouse");
            }
            return $;
        }
    }

}

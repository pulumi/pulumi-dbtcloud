// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dbtcloud.inputs.ServiceTokenServiceTokenPermissionArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceTokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTokenArgs Empty = new ServiceTokenArgs();

    /**
     * Service token name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Service token name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Permissions set for the service token
     * 
     */
    @Import(name="serviceTokenPermissions")
    private @Nullable Output<List<ServiceTokenServiceTokenPermissionArgs>> serviceTokenPermissions;

    /**
     * @return Permissions set for the service token
     * 
     */
    public Optional<Output<List<ServiceTokenServiceTokenPermissionArgs>>> serviceTokenPermissions() {
        return Optional.ofNullable(this.serviceTokenPermissions);
    }

    /**
     * Service token state (1 is active, 2 is inactive)
     * 
     */
    @Import(name="state")
    private @Nullable Output<Integer> state;

    /**
     * @return Service token state (1 is active, 2 is inactive)
     * 
     */
    public Optional<Output<Integer>> state() {
        return Optional.ofNullable(this.state);
    }

    private ServiceTokenArgs() {}

    private ServiceTokenArgs(ServiceTokenArgs $) {
        this.name = $.name;
        this.serviceTokenPermissions = $.serviceTokenPermissions;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTokenArgs $;

        public Builder() {
            $ = new ServiceTokenArgs();
        }

        public Builder(ServiceTokenArgs defaults) {
            $ = new ServiceTokenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Service token name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Service token name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param serviceTokenPermissions Permissions set for the service token
         * 
         * @return builder
         * 
         */
        public Builder serviceTokenPermissions(@Nullable Output<List<ServiceTokenServiceTokenPermissionArgs>> serviceTokenPermissions) {
            $.serviceTokenPermissions = serviceTokenPermissions;
            return this;
        }

        /**
         * @param serviceTokenPermissions Permissions set for the service token
         * 
         * @return builder
         * 
         */
        public Builder serviceTokenPermissions(List<ServiceTokenServiceTokenPermissionArgs> serviceTokenPermissions) {
            return serviceTokenPermissions(Output.of(serviceTokenPermissions));
        }

        /**
         * @param serviceTokenPermissions Permissions set for the service token
         * 
         * @return builder
         * 
         */
        public Builder serviceTokenPermissions(ServiceTokenServiceTokenPermissionArgs... serviceTokenPermissions) {
            return serviceTokenPermissions(List.of(serviceTokenPermissions));
        }

        /**
         * @param state Service token state (1 is active, 2 is inactive)
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<Integer> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Service token state (1 is active, 2 is inactive)
         * 
         * @return builder
         * 
         */
        public Builder state(Integer state) {
            return state(Output.of(state));
        }

        public ServiceTokenArgs build() {
            return $;
        }
    }

}

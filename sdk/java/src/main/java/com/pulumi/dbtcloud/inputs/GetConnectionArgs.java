// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;


public final class GetConnectionArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetConnectionArgs Empty = new GetConnectionArgs();

    /**
     * ID for the connection
     * 
     */
    @Import(name="connectionId", required=true)
    private Output<Integer> connectionId;

    /**
     * @return ID for the connection
     * 
     */
    public Output<Integer> connectionId() {
        return this.connectionId;
    }

    /**
     * Project ID to create the connection in
     * 
     */
    @Import(name="projectId", required=true)
    private Output<Integer> projectId;

    /**
     * @return Project ID to create the connection in
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }

    private GetConnectionArgs() {}

    private GetConnectionArgs(GetConnectionArgs $) {
        this.connectionId = $.connectionId;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetConnectionArgs $;

        public Builder() {
            $ = new GetConnectionArgs();
        }

        public Builder(GetConnectionArgs defaults) {
            $ = new GetConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionId ID for the connection
         * 
         * @return builder
         * 
         */
        public Builder connectionId(Output<Integer> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId ID for the connection
         * 
         * @return builder
         * 
         */
        public Builder connectionId(Integer connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param projectId Project ID to create the connection in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID to create the connection in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        public GetConnectionArgs build() {
            if ($.connectionId == null) {
                throw new MissingRequiredPropertyException("GetConnectionArgs", "connectionId");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("GetConnectionArgs", "projectId");
            }
            return $;
        }
    }

}

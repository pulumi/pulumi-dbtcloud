// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProjectResult {
    /**
     * @return ID of the connection associated with the project
     * 
     */
    private Integer connectionId;
    /**
     * @return ID of Job for the documentation
     * 
     */
    private Integer docsJobId;
    /**
     * @return ID of Job for source freshness
     * 
     */
    private Integer freshnessJobId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Given name for project
     * 
     */
    private String name;
    /**
     * @return ID of the project to represent
     * 
     */
    private @Nullable Integer projectId;
    /**
     * @return ID of the repository associated with the project
     * 
     */
    private Integer repositoryId;
    /**
     * @return Project state should be 1 = active, as 2 = deleted
     * 
     * @deprecated
     * Remove this attribute&#39;s configuration as it&#39;s no longer in use and the attribute will be removed in the next major version of the provider.
     * 
     */
    @Deprecated /* Remove this attribute's configuration as it's no longer in use and the attribute will be removed in the next major version of the provider. */
    private Integer state;

    private GetProjectResult() {}
    /**
     * @return ID of the connection associated with the project
     * 
     */
    public Integer connectionId() {
        return this.connectionId;
    }
    /**
     * @return ID of Job for the documentation
     * 
     */
    public Integer docsJobId() {
        return this.docsJobId;
    }
    /**
     * @return ID of Job for source freshness
     * 
     */
    public Integer freshnessJobId() {
        return this.freshnessJobId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Given name for project
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return ID of the project to represent
     * 
     */
    public Optional<Integer> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return ID of the repository associated with the project
     * 
     */
    public Integer repositoryId() {
        return this.repositoryId;
    }
    /**
     * @return Project state should be 1 = active, as 2 = deleted
     * 
     * @deprecated
     * Remove this attribute&#39;s configuration as it&#39;s no longer in use and the attribute will be removed in the next major version of the provider.
     * 
     */
    @Deprecated /* Remove this attribute's configuration as it's no longer in use and the attribute will be removed in the next major version of the provider. */
    public Integer state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer connectionId;
        private Integer docsJobId;
        private Integer freshnessJobId;
        private String id;
        private String name;
        private @Nullable Integer projectId;
        private Integer repositoryId;
        private Integer state;
        public Builder() {}
        public Builder(GetProjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionId = defaults.connectionId;
    	      this.docsJobId = defaults.docsJobId;
    	      this.freshnessJobId = defaults.freshnessJobId;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.projectId = defaults.projectId;
    	      this.repositoryId = defaults.repositoryId;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder connectionId(Integer connectionId) {
            if (connectionId == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "connectionId");
            }
            this.connectionId = connectionId;
            return this;
        }
        @CustomType.Setter
        public Builder docsJobId(Integer docsJobId) {
            if (docsJobId == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "docsJobId");
            }
            this.docsJobId = docsJobId;
            return this;
        }
        @CustomType.Setter
        public Builder freshnessJobId(Integer freshnessJobId) {
            if (freshnessJobId == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "freshnessJobId");
            }
            this.freshnessJobId = freshnessJobId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable Integer projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryId(Integer repositoryId) {
            if (repositoryId == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "repositoryId");
            }
            this.repositoryId = repositoryId;
            return this;
        }
        @CustomType.Setter
        public Builder state(Integer state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "state");
            }
            this.state = state;
            return this;
        }
        public GetProjectResult build() {
            final var _resultValue = new GetProjectResult();
            _resultValue.connectionId = connectionId;
            _resultValue.docsJobId = docsJobId;
            _resultValue.freshnessJobId = freshnessJobId;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.projectId = projectId;
            _resultValue.repositoryId = repositoryId;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}

// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.dbtcloud.outputs.GetProjectProjectConnection;
import com.pulumi.dbtcloud.outputs.GetProjectRepository;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProjectResult {
    /**
     * @return When the project was created
     * 
     */
    private String createdAt;
    /**
     * @return Subdirectory for the dbt project inside the git repo
     * 
     */
    private String dbtProjectSubdirectory;
    /**
     * @return Project description
     * 
     */
    private String description;
    /**
     * @return ID of Job for the documentation
     * 
     */
    private Integer docsJobId;
    /**
     * @return ID of Job for source freshness
     * 
     */
    private Integer freshnessJobId;
    /**
     * @return Project ID
     * 
     */
    private @Nullable Integer id;
    /**
     * @return Project name
     * 
     */
    private String name;
    /**
     * @return Details for the connection linked to the project
     * 
     */
    private GetProjectProjectConnection projectConnection;
    /**
     * @return Details for the repository linked to the project
     * 
     */
    private GetProjectRepository repository;
    /**
     * @return Semantic layer config ID
     * 
     */
    private Integer semanticLayerConfigId;
    /**
     * @return Project state should be 1 = active, as 2 = deleted
     * 
     */
    private Integer state;
    /**
     * @return The type of dbt project (default or hybrid)
     * 
     */
    private Integer type;
    /**
     * @return When the project was last updated
     * 
     */
    private String updatedAt;

    private GetProjectResult() {}
    /**
     * @return When the project was created
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Subdirectory for the dbt project inside the git repo
     * 
     */
    public String dbtProjectSubdirectory() {
        return this.dbtProjectSubdirectory;
    }
    /**
     * @return Project description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return ID of Job for the documentation
     * 
     */
    public Integer docsJobId() {
        return this.docsJobId;
    }
    /**
     * @return ID of Job for source freshness
     * 
     */
    public Integer freshnessJobId() {
        return this.freshnessJobId;
    }
    /**
     * @return Project ID
     * 
     */
    public Optional<Integer> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Project name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Details for the connection linked to the project
     * 
     */
    public GetProjectProjectConnection projectConnection() {
        return this.projectConnection;
    }
    /**
     * @return Details for the repository linked to the project
     * 
     */
    public GetProjectRepository repository() {
        return this.repository;
    }
    /**
     * @return Semantic layer config ID
     * 
     */
    public Integer semanticLayerConfigId() {
        return this.semanticLayerConfigId;
    }
    /**
     * @return Project state should be 1 = active, as 2 = deleted
     * 
     */
    public Integer state() {
        return this.state;
    }
    /**
     * @return The type of dbt project (default or hybrid)
     * 
     */
    public Integer type() {
        return this.type;
    }
    /**
     * @return When the project was last updated
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdAt;
        private String dbtProjectSubdirectory;
        private String description;
        private Integer docsJobId;
        private Integer freshnessJobId;
        private @Nullable Integer id;
        private String name;
        private GetProjectProjectConnection projectConnection;
        private GetProjectRepository repository;
        private Integer semanticLayerConfigId;
        private Integer state;
        private Integer type;
        private String updatedAt;
        public Builder() {}
        public Builder(GetProjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdAt = defaults.createdAt;
    	      this.dbtProjectSubdirectory = defaults.dbtProjectSubdirectory;
    	      this.description = defaults.description;
    	      this.docsJobId = defaults.docsJobId;
    	      this.freshnessJobId = defaults.freshnessJobId;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.projectConnection = defaults.projectConnection;
    	      this.repository = defaults.repository;
    	      this.semanticLayerConfigId = defaults.semanticLayerConfigId;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
    	      this.updatedAt = defaults.updatedAt;
        }

        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder dbtProjectSubdirectory(String dbtProjectSubdirectory) {
            if (dbtProjectSubdirectory == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "dbtProjectSubdirectory");
            }
            this.dbtProjectSubdirectory = dbtProjectSubdirectory;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder docsJobId(Integer docsJobId) {
            if (docsJobId == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "docsJobId");
            }
            this.docsJobId = docsJobId;
            return this;
        }
        @CustomType.Setter
        public Builder freshnessJobId(Integer freshnessJobId) {
            if (freshnessJobId == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "freshnessJobId");
            }
            this.freshnessJobId = freshnessJobId;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable Integer id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder projectConnection(GetProjectProjectConnection projectConnection) {
            if (projectConnection == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "projectConnection");
            }
            this.projectConnection = projectConnection;
            return this;
        }
        @CustomType.Setter
        public Builder repository(GetProjectRepository repository) {
            if (repository == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "repository");
            }
            this.repository = repository;
            return this;
        }
        @CustomType.Setter
        public Builder semanticLayerConfigId(Integer semanticLayerConfigId) {
            if (semanticLayerConfigId == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "semanticLayerConfigId");
            }
            this.semanticLayerConfigId = semanticLayerConfigId;
            return this;
        }
        @CustomType.Setter
        public Builder state(Integer state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder type(Integer type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        public GetProjectResult build() {
            final var _resultValue = new GetProjectResult();
            _resultValue.createdAt = createdAt;
            _resultValue.dbtProjectSubdirectory = dbtProjectSubdirectory;
            _resultValue.description = description;
            _resultValue.docsJobId = docsJobId;
            _resultValue.freshnessJobId = freshnessJobId;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.projectConnection = projectConnection;
            _resultValue.repository = repository;
            _resultValue.semanticLayerConfigId = semanticLayerConfigId;
            _resultValue.state = state;
            _resultValue.type = type;
            _resultValue.updatedAt = updatedAt;
            return _resultValue;
        }
    }
}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class JobJobCompletionTriggerConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobJobCompletionTriggerConditionArgs Empty = new JobJobCompletionTriggerConditionArgs();

    /**
     * The ID of the job that would trigger this job after completion.
     * 
     */
    @Import(name="jobId", required=true)
    private Output<Integer> jobId;

    /**
     * @return The ID of the job that would trigger this job after completion.
     * 
     */
    public Output<Integer> jobId() {
        return this.jobId;
    }

    /**
     * The ID of the project where the trigger job is running in.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<Integer> projectId;

    /**
     * @return The ID of the project where the trigger job is running in.
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }

    /**
     * List of statuses to trigger the job on. Possible values are `success`, `error` and `canceled`.
     * 
     */
    @Import(name="statuses", required=true)
    private Output<List<String>> statuses;

    /**
     * @return List of statuses to trigger the job on. Possible values are `success`, `error` and `canceled`.
     * 
     */
    public Output<List<String>> statuses() {
        return this.statuses;
    }

    private JobJobCompletionTriggerConditionArgs() {}

    private JobJobCompletionTriggerConditionArgs(JobJobCompletionTriggerConditionArgs $) {
        this.jobId = $.jobId;
        this.projectId = $.projectId;
        this.statuses = $.statuses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobJobCompletionTriggerConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobJobCompletionTriggerConditionArgs $;

        public Builder() {
            $ = new JobJobCompletionTriggerConditionArgs();
        }

        public Builder(JobJobCompletionTriggerConditionArgs defaults) {
            $ = new JobJobCompletionTriggerConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param jobId The ID of the job that would trigger this job after completion.
         * 
         * @return builder
         * 
         */
        public Builder jobId(Output<Integer> jobId) {
            $.jobId = jobId;
            return this;
        }

        /**
         * @param jobId The ID of the job that would trigger this job after completion.
         * 
         * @return builder
         * 
         */
        public Builder jobId(Integer jobId) {
            return jobId(Output.of(jobId));
        }

        /**
         * @param projectId The ID of the project where the trigger job is running in.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project where the trigger job is running in.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param statuses List of statuses to trigger the job on. Possible values are `success`, `error` and `canceled`.
         * 
         * @return builder
         * 
         */
        public Builder statuses(Output<List<String>> statuses) {
            $.statuses = statuses;
            return this;
        }

        /**
         * @param statuses List of statuses to trigger the job on. Possible values are `success`, `error` and `canceled`.
         * 
         * @return builder
         * 
         */
        public Builder statuses(List<String> statuses) {
            return statuses(Output.of(statuses));
        }

        /**
         * @param statuses List of statuses to trigger the job on. Possible values are `success`, `error` and `canceled`.
         * 
         * @return builder
         * 
         */
        public Builder statuses(String... statuses) {
            return statuses(List.of(statuses));
        }

        public JobJobCompletionTriggerConditionArgs build() {
            if ($.jobId == null) {
                throw new MissingRequiredPropertyException("JobJobCompletionTriggerConditionArgs", "jobId");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("JobJobCompletionTriggerConditionArgs", "projectId");
            }
            if ($.statuses == null) {
                throw new MissingRequiredPropertyException("JobJobCompletionTriggerConditionArgs", "statuses");
            }
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GlobalConnectionApacheSpark {
    /**
     * @return Auth
     * 
     */
    private @Nullable String auth;
    /**
     * @return Spark cluster for the connection
     * 
     */
    private String cluster;
    /**
     * @return Connection retries. Default=0
     * 
     */
    private @Nullable Integer connectRetries;
    /**
     * @return Connection time out in seconds. Default=10
     * 
     */
    private @Nullable Integer connectTimeout;
    /**
     * @return Hostname of the connection
     * 
     */
    private String host;
    /**
     * @return Authentication method for the connection (http or thrift).
     * 
     */
    private String method;
    /**
     * @return Organization ID
     * 
     */
    private @Nullable String organization;
    /**
     * @return Port for the connection. Default=443
     * 
     */
    private @Nullable Integer port;
    /**
     * @return User
     * 
     */
    private @Nullable String user;

    private GlobalConnectionApacheSpark() {}
    /**
     * @return Auth
     * 
     */
    public Optional<String> auth() {
        return Optional.ofNullable(this.auth);
    }
    /**
     * @return Spark cluster for the connection
     * 
     */
    public String cluster() {
        return this.cluster;
    }
    /**
     * @return Connection retries. Default=0
     * 
     */
    public Optional<Integer> connectRetries() {
        return Optional.ofNullable(this.connectRetries);
    }
    /**
     * @return Connection time out in seconds. Default=10
     * 
     */
    public Optional<Integer> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }
    /**
     * @return Hostname of the connection
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return Authentication method for the connection (http or thrift).
     * 
     */
    public String method() {
        return this.method;
    }
    /**
     * @return Organization ID
     * 
     */
    public Optional<String> organization() {
        return Optional.ofNullable(this.organization);
    }
    /**
     * @return Port for the connection. Default=443
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return User
     * 
     */
    public Optional<String> user() {
        return Optional.ofNullable(this.user);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GlobalConnectionApacheSpark defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String auth;
        private String cluster;
        private @Nullable Integer connectRetries;
        private @Nullable Integer connectTimeout;
        private String host;
        private String method;
        private @Nullable String organization;
        private @Nullable Integer port;
        private @Nullable String user;
        public Builder() {}
        public Builder(GlobalConnectionApacheSpark defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auth = defaults.auth;
    	      this.cluster = defaults.cluster;
    	      this.connectRetries = defaults.connectRetries;
    	      this.connectTimeout = defaults.connectTimeout;
    	      this.host = defaults.host;
    	      this.method = defaults.method;
    	      this.organization = defaults.organization;
    	      this.port = defaults.port;
    	      this.user = defaults.user;
        }

        @CustomType.Setter
        public Builder auth(@Nullable String auth) {

            this.auth = auth;
            return this;
        }
        @CustomType.Setter
        public Builder cluster(String cluster) {
            if (cluster == null) {
              throw new MissingRequiredPropertyException("GlobalConnectionApacheSpark", "cluster");
            }
            this.cluster = cluster;
            return this;
        }
        @CustomType.Setter
        public Builder connectRetries(@Nullable Integer connectRetries) {

            this.connectRetries = connectRetries;
            return this;
        }
        @CustomType.Setter
        public Builder connectTimeout(@Nullable Integer connectTimeout) {

            this.connectTimeout = connectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GlobalConnectionApacheSpark", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder method(String method) {
            if (method == null) {
              throw new MissingRequiredPropertyException("GlobalConnectionApacheSpark", "method");
            }
            this.method = method;
            return this;
        }
        @CustomType.Setter
        public Builder organization(@Nullable String organization) {

            this.organization = organization;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder user(@Nullable String user) {

            this.user = user;
            return this;
        }
        public GlobalConnectionApacheSpark build() {
            final var _resultValue = new GlobalConnectionApacheSpark();
            _resultValue.auth = auth;
            _resultValue.cluster = cluster;
            _resultValue.connectRetries = connectRetries;
            _resultValue.connectTimeout = connectTimeout;
            _resultValue.host = host;
            _resultValue.method = method;
            _resultValue.organization = organization;
            _resultValue.port = port;
            _resultValue.user = user;
            return _resultValue;
        }
    }
}

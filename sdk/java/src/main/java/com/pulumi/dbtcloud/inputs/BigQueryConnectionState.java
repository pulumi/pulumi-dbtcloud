// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BigQueryConnectionState extends com.pulumi.resources.ResourceArgs {

    public static final BigQueryConnectionState Empty = new BigQueryConnectionState();

    /**
     * The Application ID for BQ OAuth
     * 
     */
    @Import(name="applicationId")
    private @Nullable Output<String> applicationId;

    /**
     * @return The Application ID for BQ OAuth
     * 
     */
    public Optional<Output<String>> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    /**
     * The Application Secret for BQ OAuth
     * 
     */
    @Import(name="applicationSecret")
    private @Nullable Output<String> applicationSecret;

    /**
     * @return The Application Secret for BQ OAuth
     * 
     */
    public Optional<Output<String>> applicationSecret() {
        return Optional.ofNullable(this.applicationSecret);
    }

    /**
     * Auth Provider X509 Cert URL for the Service Account
     * 
     */
    @Import(name="authProviderX509CertUrl")
    private @Nullable Output<String> authProviderX509CertUrl;

    /**
     * @return Auth Provider X509 Cert URL for the Service Account
     * 
     */
    public Optional<Output<String>> authProviderX509CertUrl() {
        return Optional.ofNullable(this.authProviderX509CertUrl);
    }

    /**
     * Auth URI for the Service Account
     * 
     */
    @Import(name="authUri")
    private @Nullable Output<String> authUri;

    /**
     * @return Auth URI for the Service Account
     * 
     */
    public Optional<Output<String>> authUri() {
        return Optional.ofNullable(this.authUri);
    }

    /**
     * Service Account email
     * 
     */
    @Import(name="clientEmail")
    private @Nullable Output<String> clientEmail;

    /**
     * @return Service Account email
     * 
     */
    public Optional<Output<String>> clientEmail() {
        return Optional.ofNullable(this.clientEmail);
    }

    /**
     * Client ID of the Service Account
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return Client ID of the Service Account
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * Client X509 Cert URL for the Service Account
     * 
     */
    @Import(name="clientX509CertUrl")
    private @Nullable Output<String> clientX509CertUrl;

    /**
     * @return Client X509 Cert URL for the Service Account
     * 
     */
    public Optional<Output<String>> clientX509CertUrl() {
        return Optional.ofNullable(this.clientX509CertUrl);
    }

    /**
     * Connection Identifier
     * 
     */
    @Import(name="connectionId")
    private @Nullable Output<Integer> connectionId;

    /**
     * @return Connection Identifier
     * 
     */
    public Optional<Output<Integer>> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }

    /**
     * Dataproc cluster name for PySpark workloads
     * 
     */
    @Import(name="dataprocClusterName")
    private @Nullable Output<String> dataprocClusterName;

    /**
     * @return Dataproc cluster name for PySpark workloads
     * 
     */
    public Optional<Output<String>> dataprocClusterName() {
        return Optional.ofNullable(this.dataprocClusterName);
    }

    /**
     * Google Cloud region for PySpark workloads on Dataproc
     * 
     */
    @Import(name="dataprocRegion")
    private @Nullable Output<String> dataprocRegion;

    /**
     * @return Google Cloud region for PySpark workloads on Dataproc
     * 
     */
    public Optional<Output<String>> dataprocRegion() {
        return Optional.ofNullable(this.dataprocRegion);
    }

    /**
     * Project to bill for query execution
     * 
     */
    @Import(name="executionProject")
    private @Nullable Output<String> executionProject;

    /**
     * @return Project to bill for query execution
     * 
     */
    public Optional<Output<String>> executionProject() {
        return Optional.ofNullable(this.executionProject);
    }

    /**
     * GCP project ID
     * 
     */
    @Import(name="gcpProjectId")
    private @Nullable Output<String> gcpProjectId;

    /**
     * @return GCP project ID
     * 
     */
    public Optional<Output<String>> gcpProjectId() {
        return Optional.ofNullable(this.gcpProjectId);
    }

    /**
     * URI for a Google Cloud Storage bucket to host Python code executed via Datapro
     * 
     */
    @Import(name="gcsBucket")
    private @Nullable Output<String> gcsBucket;

    /**
     * @return URI for a Google Cloud Storage bucket to host Python code executed via Datapro
     * 
     */
    public Optional<Output<String>> gcsBucket() {
        return Optional.ofNullable(this.gcsBucket);
    }

    /**
     * Whether the connection is active
     * 
     */
    @Import(name="isActive")
    private @Nullable Output<Boolean> isActive;

    /**
     * @return Whether the connection is active
     * 
     */
    public Optional<Output<Boolean>> isActive() {
        return Optional.ofNullable(this.isActive);
    }

    /**
     * Whether the connection is configured for OAuth or not
     * 
     */
    @Import(name="isConfiguredForOauth")
    private @Nullable Output<Boolean> isConfiguredForOauth;

    /**
     * @return Whether the connection is configured for OAuth or not
     * 
     */
    public Optional<Output<Boolean>> isConfiguredForOauth() {
        return Optional.ofNullable(this.isConfiguredForOauth);
    }

    /**
     * Location to create new Datasets in
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Location to create new Datasets in
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Max number of bytes that can be billed for a given BigQuery query
     * 
     */
    @Import(name="maximumBytesBilled")
    private @Nullable Output<Integer> maximumBytesBilled;

    /**
     * @return Max number of bytes that can be billed for a given BigQuery query
     * 
     */
    public Optional<Output<Integer>> maximumBytesBilled() {
        return Optional.ofNullable(this.maximumBytesBilled);
    }

    /**
     * Connection name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Connection name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The priority with which to execute BigQuery queries (batch or interactive)
     * 
     */
    @Import(name="priority")
    private @Nullable Output<String> priority;

    /**
     * @return The priority with which to execute BigQuery queries (batch or interactive)
     * 
     */
    public Optional<Output<String>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Private key of the Service Account
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return Private key of the Service Account
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * Private key ID of the Service Account
     * 
     */
    @Import(name="privateKeyId")
    private @Nullable Output<String> privateKeyId;

    /**
     * @return Private key ID of the Service Account
     * 
     */
    public Optional<Output<String>> privateKeyId() {
        return Optional.ofNullable(this.privateKeyId);
    }

    /**
     * Project ID to create the connection in
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<Integer> projectId;

    /**
     * @return Project ID to create the connection in
     * 
     */
    public Optional<Output<Integer>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Number of retries for queries
     * 
     */
    @Import(name="retries")
    private @Nullable Output<Integer> retries;

    /**
     * @return Number of retries for queries
     * 
     */
    public Optional<Output<Integer>> retries() {
        return Optional.ofNullable(this.retries);
    }

    /**
     * Timeout in seconds for queries
     * 
     */
    @Import(name="timeoutSeconds")
    private @Nullable Output<Integer> timeoutSeconds;

    /**
     * @return Timeout in seconds for queries
     * 
     */
    public Optional<Output<Integer>> timeoutSeconds() {
        return Optional.ofNullable(this.timeoutSeconds);
    }

    /**
     * Token URI for the Service Account
     * 
     */
    @Import(name="tokenUri")
    private @Nullable Output<String> tokenUri;

    /**
     * @return Token URI for the Service Account
     * 
     */
    public Optional<Output<String>> tokenUri() {
        return Optional.ofNullable(this.tokenUri);
    }

    /**
     * The type of connection
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of connection
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private BigQueryConnectionState() {}

    private BigQueryConnectionState(BigQueryConnectionState $) {
        this.applicationId = $.applicationId;
        this.applicationSecret = $.applicationSecret;
        this.authProviderX509CertUrl = $.authProviderX509CertUrl;
        this.authUri = $.authUri;
        this.clientEmail = $.clientEmail;
        this.clientId = $.clientId;
        this.clientX509CertUrl = $.clientX509CertUrl;
        this.connectionId = $.connectionId;
        this.dataprocClusterName = $.dataprocClusterName;
        this.dataprocRegion = $.dataprocRegion;
        this.executionProject = $.executionProject;
        this.gcpProjectId = $.gcpProjectId;
        this.gcsBucket = $.gcsBucket;
        this.isActive = $.isActive;
        this.isConfiguredForOauth = $.isConfiguredForOauth;
        this.location = $.location;
        this.maximumBytesBilled = $.maximumBytesBilled;
        this.name = $.name;
        this.priority = $.priority;
        this.privateKey = $.privateKey;
        this.privateKeyId = $.privateKeyId;
        this.projectId = $.projectId;
        this.retries = $.retries;
        this.timeoutSeconds = $.timeoutSeconds;
        this.tokenUri = $.tokenUri;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BigQueryConnectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BigQueryConnectionState $;

        public Builder() {
            $ = new BigQueryConnectionState();
        }

        public Builder(BigQueryConnectionState defaults) {
            $ = new BigQueryConnectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId The Application ID for BQ OAuth
         * 
         * @return builder
         * 
         */
        public Builder applicationId(@Nullable Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId The Application ID for BQ OAuth
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param applicationSecret The Application Secret for BQ OAuth
         * 
         * @return builder
         * 
         */
        public Builder applicationSecret(@Nullable Output<String> applicationSecret) {
            $.applicationSecret = applicationSecret;
            return this;
        }

        /**
         * @param applicationSecret The Application Secret for BQ OAuth
         * 
         * @return builder
         * 
         */
        public Builder applicationSecret(String applicationSecret) {
            return applicationSecret(Output.of(applicationSecret));
        }

        /**
         * @param authProviderX509CertUrl Auth Provider X509 Cert URL for the Service Account
         * 
         * @return builder
         * 
         */
        public Builder authProviderX509CertUrl(@Nullable Output<String> authProviderX509CertUrl) {
            $.authProviderX509CertUrl = authProviderX509CertUrl;
            return this;
        }

        /**
         * @param authProviderX509CertUrl Auth Provider X509 Cert URL for the Service Account
         * 
         * @return builder
         * 
         */
        public Builder authProviderX509CertUrl(String authProviderX509CertUrl) {
            return authProviderX509CertUrl(Output.of(authProviderX509CertUrl));
        }

        /**
         * @param authUri Auth URI for the Service Account
         * 
         * @return builder
         * 
         */
        public Builder authUri(@Nullable Output<String> authUri) {
            $.authUri = authUri;
            return this;
        }

        /**
         * @param authUri Auth URI for the Service Account
         * 
         * @return builder
         * 
         */
        public Builder authUri(String authUri) {
            return authUri(Output.of(authUri));
        }

        /**
         * @param clientEmail Service Account email
         * 
         * @return builder
         * 
         */
        public Builder clientEmail(@Nullable Output<String> clientEmail) {
            $.clientEmail = clientEmail;
            return this;
        }

        /**
         * @param clientEmail Service Account email
         * 
         * @return builder
         * 
         */
        public Builder clientEmail(String clientEmail) {
            return clientEmail(Output.of(clientEmail));
        }

        /**
         * @param clientId Client ID of the Service Account
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId Client ID of the Service Account
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientX509CertUrl Client X509 Cert URL for the Service Account
         * 
         * @return builder
         * 
         */
        public Builder clientX509CertUrl(@Nullable Output<String> clientX509CertUrl) {
            $.clientX509CertUrl = clientX509CertUrl;
            return this;
        }

        /**
         * @param clientX509CertUrl Client X509 Cert URL for the Service Account
         * 
         * @return builder
         * 
         */
        public Builder clientX509CertUrl(String clientX509CertUrl) {
            return clientX509CertUrl(Output.of(clientX509CertUrl));
        }

        /**
         * @param connectionId Connection Identifier
         * 
         * @return builder
         * 
         */
        public Builder connectionId(@Nullable Output<Integer> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId Connection Identifier
         * 
         * @return builder
         * 
         */
        public Builder connectionId(Integer connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param dataprocClusterName Dataproc cluster name for PySpark workloads
         * 
         * @return builder
         * 
         */
        public Builder dataprocClusterName(@Nullable Output<String> dataprocClusterName) {
            $.dataprocClusterName = dataprocClusterName;
            return this;
        }

        /**
         * @param dataprocClusterName Dataproc cluster name for PySpark workloads
         * 
         * @return builder
         * 
         */
        public Builder dataprocClusterName(String dataprocClusterName) {
            return dataprocClusterName(Output.of(dataprocClusterName));
        }

        /**
         * @param dataprocRegion Google Cloud region for PySpark workloads on Dataproc
         * 
         * @return builder
         * 
         */
        public Builder dataprocRegion(@Nullable Output<String> dataprocRegion) {
            $.dataprocRegion = dataprocRegion;
            return this;
        }

        /**
         * @param dataprocRegion Google Cloud region for PySpark workloads on Dataproc
         * 
         * @return builder
         * 
         */
        public Builder dataprocRegion(String dataprocRegion) {
            return dataprocRegion(Output.of(dataprocRegion));
        }

        /**
         * @param executionProject Project to bill for query execution
         * 
         * @return builder
         * 
         */
        public Builder executionProject(@Nullable Output<String> executionProject) {
            $.executionProject = executionProject;
            return this;
        }

        /**
         * @param executionProject Project to bill for query execution
         * 
         * @return builder
         * 
         */
        public Builder executionProject(String executionProject) {
            return executionProject(Output.of(executionProject));
        }

        /**
         * @param gcpProjectId GCP project ID
         * 
         * @return builder
         * 
         */
        public Builder gcpProjectId(@Nullable Output<String> gcpProjectId) {
            $.gcpProjectId = gcpProjectId;
            return this;
        }

        /**
         * @param gcpProjectId GCP project ID
         * 
         * @return builder
         * 
         */
        public Builder gcpProjectId(String gcpProjectId) {
            return gcpProjectId(Output.of(gcpProjectId));
        }

        /**
         * @param gcsBucket URI for a Google Cloud Storage bucket to host Python code executed via Datapro
         * 
         * @return builder
         * 
         */
        public Builder gcsBucket(@Nullable Output<String> gcsBucket) {
            $.gcsBucket = gcsBucket;
            return this;
        }

        /**
         * @param gcsBucket URI for a Google Cloud Storage bucket to host Python code executed via Datapro
         * 
         * @return builder
         * 
         */
        public Builder gcsBucket(String gcsBucket) {
            return gcsBucket(Output.of(gcsBucket));
        }

        /**
         * @param isActive Whether the connection is active
         * 
         * @return builder
         * 
         */
        public Builder isActive(@Nullable Output<Boolean> isActive) {
            $.isActive = isActive;
            return this;
        }

        /**
         * @param isActive Whether the connection is active
         * 
         * @return builder
         * 
         */
        public Builder isActive(Boolean isActive) {
            return isActive(Output.of(isActive));
        }

        /**
         * @param isConfiguredForOauth Whether the connection is configured for OAuth or not
         * 
         * @return builder
         * 
         */
        public Builder isConfiguredForOauth(@Nullable Output<Boolean> isConfiguredForOauth) {
            $.isConfiguredForOauth = isConfiguredForOauth;
            return this;
        }

        /**
         * @param isConfiguredForOauth Whether the connection is configured for OAuth or not
         * 
         * @return builder
         * 
         */
        public Builder isConfiguredForOauth(Boolean isConfiguredForOauth) {
            return isConfiguredForOauth(Output.of(isConfiguredForOauth));
        }

        /**
         * @param location Location to create new Datasets in
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location to create new Datasets in
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param maximumBytesBilled Max number of bytes that can be billed for a given BigQuery query
         * 
         * @return builder
         * 
         */
        public Builder maximumBytesBilled(@Nullable Output<Integer> maximumBytesBilled) {
            $.maximumBytesBilled = maximumBytesBilled;
            return this;
        }

        /**
         * @param maximumBytesBilled Max number of bytes that can be billed for a given BigQuery query
         * 
         * @return builder
         * 
         */
        public Builder maximumBytesBilled(Integer maximumBytesBilled) {
            return maximumBytesBilled(Output.of(maximumBytesBilled));
        }

        /**
         * @param name Connection name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Connection name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority The priority with which to execute BigQuery queries (batch or interactive)
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<String> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority with which to execute BigQuery queries (batch or interactive)
         * 
         * @return builder
         * 
         */
        public Builder priority(String priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param privateKey Private key of the Service Account
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey Private key of the Service Account
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param privateKeyId Private key ID of the Service Account
         * 
         * @return builder
         * 
         */
        public Builder privateKeyId(@Nullable Output<String> privateKeyId) {
            $.privateKeyId = privateKeyId;
            return this;
        }

        /**
         * @param privateKeyId Private key ID of the Service Account
         * 
         * @return builder
         * 
         */
        public Builder privateKeyId(String privateKeyId) {
            return privateKeyId(Output.of(privateKeyId));
        }

        /**
         * @param projectId Project ID to create the connection in
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID to create the connection in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param retries Number of retries for queries
         * 
         * @return builder
         * 
         */
        public Builder retries(@Nullable Output<Integer> retries) {
            $.retries = retries;
            return this;
        }

        /**
         * @param retries Number of retries for queries
         * 
         * @return builder
         * 
         */
        public Builder retries(Integer retries) {
            return retries(Output.of(retries));
        }

        /**
         * @param timeoutSeconds Timeout in seconds for queries
         * 
         * @return builder
         * 
         */
        public Builder timeoutSeconds(@Nullable Output<Integer> timeoutSeconds) {
            $.timeoutSeconds = timeoutSeconds;
            return this;
        }

        /**
         * @param timeoutSeconds Timeout in seconds for queries
         * 
         * @return builder
         * 
         */
        public Builder timeoutSeconds(Integer timeoutSeconds) {
            return timeoutSeconds(Output.of(timeoutSeconds));
        }

        /**
         * @param tokenUri Token URI for the Service Account
         * 
         * @return builder
         * 
         */
        public Builder tokenUri(@Nullable Output<String> tokenUri) {
            $.tokenUri = tokenUri;
            return this;
        }

        /**
         * @param tokenUri Token URI for the Service Account
         * 
         * @return builder
         * 
         */
        public Builder tokenUri(String tokenUri) {
            return tokenUri(Output.of(tokenUri));
        }

        /**
         * @param type The type of connection
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of connection
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public BigQueryConnectionState build() {
            return $;
        }
    }

}

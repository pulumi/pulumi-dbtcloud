// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetExtendedAttributesResult {
    /**
     * @return A JSON string listing the extended attributes mapping
     * 
     */
    private String extendedAttributes;
    /**
     * @return ID of the extended attributes
     * 
     */
    private Integer extendedAttributesId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Project ID the extended attributes refers to
     * 
     */
    private Integer projectId;
    /**
     * @return The state of the extended attributes (1 = active, 2 = inactive)
     * 
     */
    private Integer state;

    private GetExtendedAttributesResult() {}
    /**
     * @return A JSON string listing the extended attributes mapping
     * 
     */
    public String extendedAttributes() {
        return this.extendedAttributes;
    }
    /**
     * @return ID of the extended attributes
     * 
     */
    public Integer extendedAttributesId() {
        return this.extendedAttributesId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Project ID the extended attributes refers to
     * 
     */
    public Integer projectId() {
        return this.projectId;
    }
    /**
     * @return The state of the extended attributes (1 = active, 2 = inactive)
     * 
     */
    public Integer state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExtendedAttributesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String extendedAttributes;
        private Integer extendedAttributesId;
        private String id;
        private Integer projectId;
        private Integer state;
        public Builder() {}
        public Builder(GetExtendedAttributesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.extendedAttributes = defaults.extendedAttributes;
    	      this.extendedAttributesId = defaults.extendedAttributesId;
    	      this.id = defaults.id;
    	      this.projectId = defaults.projectId;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder extendedAttributes(String extendedAttributes) {
            if (extendedAttributes == null) {
              throw new MissingRequiredPropertyException("GetExtendedAttributesResult", "extendedAttributes");
            }
            this.extendedAttributes = extendedAttributes;
            return this;
        }
        @CustomType.Setter
        public Builder extendedAttributesId(Integer extendedAttributesId) {
            if (extendedAttributesId == null) {
              throw new MissingRequiredPropertyException("GetExtendedAttributesResult", "extendedAttributesId");
            }
            this.extendedAttributesId = extendedAttributesId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetExtendedAttributesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(Integer projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetExtendedAttributesResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder state(Integer state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetExtendedAttributesResult", "state");
            }
            this.state = state;
            return this;
        }
        public GetExtendedAttributesResult build() {
            final var _resultValue = new GetExtendedAttributesResult();
            _resultValue.extendedAttributes = extendedAttributes;
            _resultValue.extendedAttributesId = extendedAttributesId;
            _resultValue.id = id;
            _resultValue.projectId = projectId;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}

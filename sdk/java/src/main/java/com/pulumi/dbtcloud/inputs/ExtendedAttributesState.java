// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExtendedAttributesState extends com.pulumi.resources.ResourceArgs {

    public static final ExtendedAttributesState Empty = new ExtendedAttributesState();

    @Import(name="extendedAttributes")
    private @Nullable Output<String> extendedAttributes;

    public Optional<Output<String>> extendedAttributes() {
        return Optional.ofNullable(this.extendedAttributes);
    }

    /**
     * Extended attributes ID
     * 
     */
    @Import(name="extendedAttributesId")
    private @Nullable Output<Integer> extendedAttributesId;

    /**
     * @return Extended attributes ID
     * 
     */
    public Optional<Output<Integer>> extendedAttributesId() {
        return Optional.ofNullable(this.extendedAttributesId);
    }

    /**
     * Project ID to create the extended attributes in
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<Integer> projectId;

    /**
     * @return Project ID to create the extended attributes in
     * 
     */
    public Optional<Output<Integer>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The state of the extended attributes (1 = active, 2 = inactive)
     * 
     */
    @Import(name="state")
    private @Nullable Output<Integer> state;

    /**
     * @return The state of the extended attributes (1 = active, 2 = inactive)
     * 
     */
    public Optional<Output<Integer>> state() {
        return Optional.ofNullable(this.state);
    }

    private ExtendedAttributesState() {}

    private ExtendedAttributesState(ExtendedAttributesState $) {
        this.extendedAttributes = $.extendedAttributes;
        this.extendedAttributesId = $.extendedAttributesId;
        this.projectId = $.projectId;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExtendedAttributesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExtendedAttributesState $;

        public Builder() {
            $ = new ExtendedAttributesState();
        }

        public Builder(ExtendedAttributesState defaults) {
            $ = new ExtendedAttributesState(Objects.requireNonNull(defaults));
        }

        public Builder extendedAttributes(@Nullable Output<String> extendedAttributes) {
            $.extendedAttributes = extendedAttributes;
            return this;
        }

        public Builder extendedAttributes(String extendedAttributes) {
            return extendedAttributes(Output.of(extendedAttributes));
        }

        /**
         * @param extendedAttributesId Extended attributes ID
         * 
         * @return builder
         * 
         */
        public Builder extendedAttributesId(@Nullable Output<Integer> extendedAttributesId) {
            $.extendedAttributesId = extendedAttributesId;
            return this;
        }

        /**
         * @param extendedAttributesId Extended attributes ID
         * 
         * @return builder
         * 
         */
        public Builder extendedAttributesId(Integer extendedAttributesId) {
            return extendedAttributesId(Output.of(extendedAttributesId));
        }

        /**
         * @param projectId Project ID to create the extended attributes in
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID to create the extended attributes in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param state The state of the extended attributes (1 = active, 2 = inactive)
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<Integer> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the extended attributes (1 = active, 2 = inactive)
         * 
         * @return builder
         * 
         */
        public Builder state(Integer state) {
            return state(Output.of(state));
        }

        public ExtendedAttributesState build() {
            return $;
        }
    }

}

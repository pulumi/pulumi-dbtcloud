// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSynapseCredentialResult {
    /**
     * @return The type of the adapter (synapse)
     * 
     */
    private String adapterType;
    /**
     * @return Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)
     * 
     */
    private String authentication;
    /**
     * @return The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
     * 
     */
    private String clientId;
    /**
     * @return Credential ID
     * 
     */
    private Integer credentialId;
    /**
     * @return The ID of this data source. Contains the project ID and the credential ID.
     * 
     */
    private String id;
    /**
     * @return Project ID
     * 
     */
    private Integer projectId;
    /**
     * @return The schema where to create the dbt models
     * 
     */
    private String schema;
    /**
     * @return Optionally set this to the principal who should own the schemas created by dbt
     * 
     */
    private String schemaAuthorization;
    /**
     * @return The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
     * 
     */
    private String tenantId;
    /**
     * @return The username of the Synapse account to connect to. Only used when connection with AD user/pass
     * 
     */
    private String user;

    private GetSynapseCredentialResult() {}
    /**
     * @return The type of the adapter (synapse)
     * 
     */
    public String adapterType() {
        return this.adapterType;
    }
    /**
     * @return Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)
     * 
     */
    public String authentication() {
        return this.authentication;
    }
    /**
     * @return The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return Credential ID
     * 
     */
    public Integer credentialId() {
        return this.credentialId;
    }
    /**
     * @return The ID of this data source. Contains the project ID and the credential ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Project ID
     * 
     */
    public Integer projectId() {
        return this.projectId;
    }
    /**
     * @return The schema where to create the dbt models
     * 
     */
    public String schema() {
        return this.schema;
    }
    /**
     * @return Optionally set this to the principal who should own the schemas created by dbt
     * 
     */
    public String schemaAuthorization() {
        return this.schemaAuthorization;
    }
    /**
     * @return The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }
    /**
     * @return The username of the Synapse account to connect to. Only used when connection with AD user/pass
     * 
     */
    public String user() {
        return this.user;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSynapseCredentialResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String adapterType;
        private String authentication;
        private String clientId;
        private Integer credentialId;
        private String id;
        private Integer projectId;
        private String schema;
        private String schemaAuthorization;
        private String tenantId;
        private String user;
        public Builder() {}
        public Builder(GetSynapseCredentialResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adapterType = defaults.adapterType;
    	      this.authentication = defaults.authentication;
    	      this.clientId = defaults.clientId;
    	      this.credentialId = defaults.credentialId;
    	      this.id = defaults.id;
    	      this.projectId = defaults.projectId;
    	      this.schema = defaults.schema;
    	      this.schemaAuthorization = defaults.schemaAuthorization;
    	      this.tenantId = defaults.tenantId;
    	      this.user = defaults.user;
        }

        @CustomType.Setter
        public Builder adapterType(String adapterType) {
            if (adapterType == null) {
              throw new MissingRequiredPropertyException("GetSynapseCredentialResult", "adapterType");
            }
            this.adapterType = adapterType;
            return this;
        }
        @CustomType.Setter
        public Builder authentication(String authentication) {
            if (authentication == null) {
              throw new MissingRequiredPropertyException("GetSynapseCredentialResult", "authentication");
            }
            this.authentication = authentication;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetSynapseCredentialResult", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder credentialId(Integer credentialId) {
            if (credentialId == null) {
              throw new MissingRequiredPropertyException("GetSynapseCredentialResult", "credentialId");
            }
            this.credentialId = credentialId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSynapseCredentialResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(Integer projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetSynapseCredentialResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder schema(String schema) {
            if (schema == null) {
              throw new MissingRequiredPropertyException("GetSynapseCredentialResult", "schema");
            }
            this.schema = schema;
            return this;
        }
        @CustomType.Setter
        public Builder schemaAuthorization(String schemaAuthorization) {
            if (schemaAuthorization == null) {
              throw new MissingRequiredPropertyException("GetSynapseCredentialResult", "schemaAuthorization");
            }
            this.schemaAuthorization = schemaAuthorization;
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            if (tenantId == null) {
              throw new MissingRequiredPropertyException("GetSynapseCredentialResult", "tenantId");
            }
            this.tenantId = tenantId;
            return this;
        }
        @CustomType.Setter
        public Builder user(String user) {
            if (user == null) {
              throw new MissingRequiredPropertyException("GetSynapseCredentialResult", "user");
            }
            this.user = user;
            return this;
        }
        public GetSynapseCredentialResult build() {
            final var _resultValue = new GetSynapseCredentialResult();
            _resultValue.adapterType = adapterType;
            _resultValue.authentication = authentication;
            _resultValue.clientId = clientId;
            _resultValue.credentialId = credentialId;
            _resultValue.id = id;
            _resultValue.projectId = projectId;
            _resultValue.schema = schema;
            _resultValue.schemaAuthorization = schemaAuthorization;
            _resultValue.tenantId = tenantId;
            _resultValue.user = user;
            return _resultValue;
        }
    }
}

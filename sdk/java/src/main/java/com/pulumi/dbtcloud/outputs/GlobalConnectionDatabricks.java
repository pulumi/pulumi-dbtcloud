// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GlobalConnectionDatabricks {
    /**
     * @return Catalog name if Unity Catalog is enabled in your Databricks workspace.
     * 
     */
    private @Nullable String catalog;
    /**
     * @return Required to enable Databricks OAuth authentication for IDE developers.
     * 
     */
    private @Nullable String clientId;
    /**
     * @return Required to enable Databricks OAuth authentication for IDE developers.
     * 
     */
    private @Nullable String clientSecret;
    /**
     * @return The hostname of the Databricks cluster or SQL warehouse.
     * 
     */
    private String host;
    /**
     * @return The HTTP path of the Databricks cluster or SQL warehouse.
     * 
     */
    private String httpPath;

    private GlobalConnectionDatabricks() {}
    /**
     * @return Catalog name if Unity Catalog is enabled in your Databricks workspace.
     * 
     */
    public Optional<String> catalog() {
        return Optional.ofNullable(this.catalog);
    }
    /**
     * @return Required to enable Databricks OAuth authentication for IDE developers.
     * 
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    /**
     * @return Required to enable Databricks OAuth authentication for IDE developers.
     * 
     */
    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }
    /**
     * @return The hostname of the Databricks cluster or SQL warehouse.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return The HTTP path of the Databricks cluster or SQL warehouse.
     * 
     */
    public String httpPath() {
        return this.httpPath;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GlobalConnectionDatabricks defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String catalog;
        private @Nullable String clientId;
        private @Nullable String clientSecret;
        private String host;
        private String httpPath;
        public Builder() {}
        public Builder(GlobalConnectionDatabricks defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalog = defaults.catalog;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.host = defaults.host;
    	      this.httpPath = defaults.httpPath;
        }

        @CustomType.Setter
        public Builder catalog(@Nullable String catalog) {

            this.catalog = catalog;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(@Nullable String clientId) {

            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(@Nullable String clientSecret) {

            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GlobalConnectionDatabricks", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder httpPath(String httpPath) {
            if (httpPath == null) {
              throw new MissingRequiredPropertyException("GlobalConnectionDatabricks", "httpPath");
            }
            this.httpPath = httpPath;
            return this;
        }
        public GlobalConnectionDatabricks build() {
            final var _resultValue = new GlobalConnectionDatabricks();
            _resultValue.catalog = catalog;
            _resultValue.clientId = clientId;
            _resultValue.clientSecret = clientSecret;
            _resultValue.host = host;
            _resultValue.httpPath = httpPath;
            return _resultValue;
        }
    }
}

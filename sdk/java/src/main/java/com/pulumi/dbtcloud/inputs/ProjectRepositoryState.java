// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectRepositoryState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectRepositoryState Empty = new ProjectRepositoryState();

    /**
     * Project ID
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<Integer> projectId;

    /**
     * @return Project ID
     * 
     */
    public Optional<Output<Integer>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Repository ID
     * 
     */
    @Import(name="repositoryId")
    private @Nullable Output<Integer> repositoryId;

    /**
     * @return Repository ID
     * 
     */
    public Optional<Output<Integer>> repositoryId() {
        return Optional.ofNullable(this.repositoryId);
    }

    private ProjectRepositoryState() {}

    private ProjectRepositoryState(ProjectRepositoryState $) {
        this.projectId = $.projectId;
        this.repositoryId = $.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectRepositoryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectRepositoryState $;

        public Builder() {
            $ = new ProjectRepositoryState();
        }

        public Builder(ProjectRepositoryState defaults) {
            $ = new ProjectRepositoryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param projectId Project ID
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param repositoryId Repository ID
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(@Nullable Output<Integer> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId Repository ID
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(Integer repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        public ProjectRepositoryState build() {
            return $;
        }
    }

}

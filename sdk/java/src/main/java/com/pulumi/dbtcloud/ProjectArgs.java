// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectArgs Empty = new ProjectArgs();

    /**
     * DBT project subdirectory
     * 
     */
    @Import(name="dbtProjectSubdirectory")
    private @Nullable Output<String> dbtProjectSubdirectory;

    /**
     * @return DBT project subdirectory
     * 
     */
    public Optional<Output<String>> dbtProjectSubdirectory() {
        return Optional.ofNullable(this.dbtProjectSubdirectory);
    }

    /**
     * Description for the project. Will show in dbt Explorer.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description for the project. Will show in dbt Explorer.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Project name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Project name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The type of dbt project (0=default or 1=hybrid)
     * 
     */
    @Import(name="type")
    private @Nullable Output<Integer> type;

    /**
     * @return The type of dbt project (0=default or 1=hybrid)
     * 
     */
    public Optional<Output<Integer>> type() {
        return Optional.ofNullable(this.type);
    }

    private ProjectArgs() {}

    private ProjectArgs(ProjectArgs $) {
        this.dbtProjectSubdirectory = $.dbtProjectSubdirectory;
        this.description = $.description;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectArgs $;

        public Builder() {
            $ = new ProjectArgs();
        }

        public Builder(ProjectArgs defaults) {
            $ = new ProjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dbtProjectSubdirectory DBT project subdirectory
         * 
         * @return builder
         * 
         */
        public Builder dbtProjectSubdirectory(@Nullable Output<String> dbtProjectSubdirectory) {
            $.dbtProjectSubdirectory = dbtProjectSubdirectory;
            return this;
        }

        /**
         * @param dbtProjectSubdirectory DBT project subdirectory
         * 
         * @return builder
         * 
         */
        public Builder dbtProjectSubdirectory(String dbtProjectSubdirectory) {
            return dbtProjectSubdirectory(Output.of(dbtProjectSubdirectory));
        }

        /**
         * @param description Description for the project. Will show in dbt Explorer.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description for the project. Will show in dbt Explorer.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Project name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Project name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type The type of dbt project (0=default or 1=hybrid)
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<Integer> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of dbt project (0=default or 1=hybrid)
         * 
         * @return builder
         * 
         */
        public Builder type(Integer type) {
            return type(Output.of(type));
        }

        public ProjectArgs build() {
            return $;
        }
    }

}

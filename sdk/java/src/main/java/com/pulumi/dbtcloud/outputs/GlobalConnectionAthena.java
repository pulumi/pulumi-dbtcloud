// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GlobalConnectionAthena {
    /**
     * @return Specify the database (data catalog) to build models into (lowercase only).
     * 
     */
    private String database;
    /**
     * @return Number of times to retry boto3 requests (e.g. deleting S3 files for materialized tables).
     * 
     */
    private @Nullable Integer numBoto3Retries;
    /**
     * @return Number of times to retry iceberg commit queries to fix ICEBERG*COMMIT*ERROR.
     * 
     */
    private @Nullable Integer numIcebergRetries;
    /**
     * @return Number of times to retry a failing query.
     * 
     */
    private @Nullable Integer numRetries;
    /**
     * @return Interval in seconds to use for polling the status of query results in Athena.
     * 
     */
    private @Nullable Integer pollInterval;
    /**
     * @return AWS region of your Athena instance.
     * 
     */
    private String regionName;
    /**
     * @return Prefix for storing tables, if different from the connection&#39;s S3 staging directory.
     * 
     */
    private @Nullable String s3DataDir;
    /**
     * @return How to generate table paths in the S3 data directory.
     * 
     */
    private @Nullable String s3DataNaming;
    /**
     * @return S3 location to store Athena query results and metadata.
     * 
     */
    private String s3StagingDir;
    /**
     * @return Prefix for storing temporary tables, if different from the connection&#39;s S3 data directory.
     * 
     */
    private @Nullable String s3TmpTableDir;
    /**
     * @return Identifier of Athena Spark workgroup for running Python models.
     * 
     */
    private @Nullable String sparkWorkGroup;
    /**
     * @return Identifier of Athena workgroup.
     * 
     */
    private @Nullable String workGroup;

    private GlobalConnectionAthena() {}
    /**
     * @return Specify the database (data catalog) to build models into (lowercase only).
     * 
     */
    public String database() {
        return this.database;
    }
    /**
     * @return Number of times to retry boto3 requests (e.g. deleting S3 files for materialized tables).
     * 
     */
    public Optional<Integer> numBoto3Retries() {
        return Optional.ofNullable(this.numBoto3Retries);
    }
    /**
     * @return Number of times to retry iceberg commit queries to fix ICEBERG*COMMIT*ERROR.
     * 
     */
    public Optional<Integer> numIcebergRetries() {
        return Optional.ofNullable(this.numIcebergRetries);
    }
    /**
     * @return Number of times to retry a failing query.
     * 
     */
    public Optional<Integer> numRetries() {
        return Optional.ofNullable(this.numRetries);
    }
    /**
     * @return Interval in seconds to use for polling the status of query results in Athena.
     * 
     */
    public Optional<Integer> pollInterval() {
        return Optional.ofNullable(this.pollInterval);
    }
    /**
     * @return AWS region of your Athena instance.
     * 
     */
    public String regionName() {
        return this.regionName;
    }
    /**
     * @return Prefix for storing tables, if different from the connection&#39;s S3 staging directory.
     * 
     */
    public Optional<String> s3DataDir() {
        return Optional.ofNullable(this.s3DataDir);
    }
    /**
     * @return How to generate table paths in the S3 data directory.
     * 
     */
    public Optional<String> s3DataNaming() {
        return Optional.ofNullable(this.s3DataNaming);
    }
    /**
     * @return S3 location to store Athena query results and metadata.
     * 
     */
    public String s3StagingDir() {
        return this.s3StagingDir;
    }
    /**
     * @return Prefix for storing temporary tables, if different from the connection&#39;s S3 data directory.
     * 
     */
    public Optional<String> s3TmpTableDir() {
        return Optional.ofNullable(this.s3TmpTableDir);
    }
    /**
     * @return Identifier of Athena Spark workgroup for running Python models.
     * 
     */
    public Optional<String> sparkWorkGroup() {
        return Optional.ofNullable(this.sparkWorkGroup);
    }
    /**
     * @return Identifier of Athena workgroup.
     * 
     */
    public Optional<String> workGroup() {
        return Optional.ofNullable(this.workGroup);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GlobalConnectionAthena defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String database;
        private @Nullable Integer numBoto3Retries;
        private @Nullable Integer numIcebergRetries;
        private @Nullable Integer numRetries;
        private @Nullable Integer pollInterval;
        private String regionName;
        private @Nullable String s3DataDir;
        private @Nullable String s3DataNaming;
        private String s3StagingDir;
        private @Nullable String s3TmpTableDir;
        private @Nullable String sparkWorkGroup;
        private @Nullable String workGroup;
        public Builder() {}
        public Builder(GlobalConnectionAthena defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.database = defaults.database;
    	      this.numBoto3Retries = defaults.numBoto3Retries;
    	      this.numIcebergRetries = defaults.numIcebergRetries;
    	      this.numRetries = defaults.numRetries;
    	      this.pollInterval = defaults.pollInterval;
    	      this.regionName = defaults.regionName;
    	      this.s3DataDir = defaults.s3DataDir;
    	      this.s3DataNaming = defaults.s3DataNaming;
    	      this.s3StagingDir = defaults.s3StagingDir;
    	      this.s3TmpTableDir = defaults.s3TmpTableDir;
    	      this.sparkWorkGroup = defaults.sparkWorkGroup;
    	      this.workGroup = defaults.workGroup;
        }

        @CustomType.Setter
        public Builder database(String database) {
            if (database == null) {
              throw new MissingRequiredPropertyException("GlobalConnectionAthena", "database");
            }
            this.database = database;
            return this;
        }
        @CustomType.Setter
        public Builder numBoto3Retries(@Nullable Integer numBoto3Retries) {

            this.numBoto3Retries = numBoto3Retries;
            return this;
        }
        @CustomType.Setter
        public Builder numIcebergRetries(@Nullable Integer numIcebergRetries) {

            this.numIcebergRetries = numIcebergRetries;
            return this;
        }
        @CustomType.Setter
        public Builder numRetries(@Nullable Integer numRetries) {

            this.numRetries = numRetries;
            return this;
        }
        @CustomType.Setter
        public Builder pollInterval(@Nullable Integer pollInterval) {

            this.pollInterval = pollInterval;
            return this;
        }
        @CustomType.Setter
        public Builder regionName(String regionName) {
            if (regionName == null) {
              throw new MissingRequiredPropertyException("GlobalConnectionAthena", "regionName");
            }
            this.regionName = regionName;
            return this;
        }
        @CustomType.Setter
        public Builder s3DataDir(@Nullable String s3DataDir) {

            this.s3DataDir = s3DataDir;
            return this;
        }
        @CustomType.Setter
        public Builder s3DataNaming(@Nullable String s3DataNaming) {

            this.s3DataNaming = s3DataNaming;
            return this;
        }
        @CustomType.Setter
        public Builder s3StagingDir(String s3StagingDir) {
            if (s3StagingDir == null) {
              throw new MissingRequiredPropertyException("GlobalConnectionAthena", "s3StagingDir");
            }
            this.s3StagingDir = s3StagingDir;
            return this;
        }
        @CustomType.Setter
        public Builder s3TmpTableDir(@Nullable String s3TmpTableDir) {

            this.s3TmpTableDir = s3TmpTableDir;
            return this;
        }
        @CustomType.Setter
        public Builder sparkWorkGroup(@Nullable String sparkWorkGroup) {

            this.sparkWorkGroup = sparkWorkGroup;
            return this;
        }
        @CustomType.Setter
        public Builder workGroup(@Nullable String workGroup) {

            this.workGroup = workGroup;
            return this;
        }
        public GlobalConnectionAthena build() {
            final var _resultValue = new GlobalConnectionAthena();
            _resultValue.database = database;
            _resultValue.numBoto3Retries = numBoto3Retries;
            _resultValue.numIcebergRetries = numIcebergRetries;
            _resultValue.numRetries = numRetries;
            _resultValue.pollInterval = pollInterval;
            _resultValue.regionName = regionName;
            _resultValue.s3DataDir = s3DataDir;
            _resultValue.s3DataNaming = s3DataNaming;
            _resultValue.s3StagingDir = s3StagingDir;
            _resultValue.s3TmpTableDir = s3TmpTableDir;
            _resultValue.sparkWorkGroup = sparkWorkGroup;
            _resultValue.workGroup = workGroup;
            return _resultValue;
        }
    }
}

// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StarburstCredentialState extends com.pulumi.resources.ResourceArgs {

    public static final StarburstCredentialState Empty = new StarburstCredentialState();

    /**
     * The internal credential ID
     * 
     */
    @Import(name="credentialId")
    private @Nullable Output<Integer> credentialId;

    /**
     * @return The internal credential ID
     * 
     */
    public Optional<Output<Integer>> credentialId() {
        return Optional.ofNullable(this.credentialId);
    }

    /**
     * The catalog to connect use
     * 
     */
    @Import(name="database")
    private @Nullable Output<String> database;

    /**
     * @return The catalog to connect use
     * 
     */
    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * The password for the Starburst/Trino account
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password for the Starburst/Trino account
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Project ID to create the Starburst/Trino credential in
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<Integer> projectId;

    /**
     * @return Project ID to create the Starburst/Trino credential in
     * 
     */
    public Optional<Output<Integer>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The schema where to create models
     * 
     */
    @Import(name="schema")
    private @Nullable Output<String> schema;

    /**
     * @return The schema where to create models
     * 
     */
    public Optional<Output<String>> schema() {
        return Optional.ofNullable(this.schema);
    }

    /**
     * The username for the Starburst/Trino account
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return The username for the Starburst/Trino account
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private StarburstCredentialState() {}

    private StarburstCredentialState(StarburstCredentialState $) {
        this.credentialId = $.credentialId;
        this.database = $.database;
        this.password = $.password;
        this.projectId = $.projectId;
        this.schema = $.schema;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StarburstCredentialState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StarburstCredentialState $;

        public Builder() {
            $ = new StarburstCredentialState();
        }

        public Builder(StarburstCredentialState defaults) {
            $ = new StarburstCredentialState(Objects.requireNonNull(defaults));
        }

        /**
         * @param credentialId The internal credential ID
         * 
         * @return builder
         * 
         */
        public Builder credentialId(@Nullable Output<Integer> credentialId) {
            $.credentialId = credentialId;
            return this;
        }

        /**
         * @param credentialId The internal credential ID
         * 
         * @return builder
         * 
         */
        public Builder credentialId(Integer credentialId) {
            return credentialId(Output.of(credentialId));
        }

        /**
         * @param database The catalog to connect use
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The catalog to connect use
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param password The password for the Starburst/Trino account
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password for the Starburst/Trino account
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param projectId Project ID to create the Starburst/Trino credential in
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID to create the Starburst/Trino credential in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param schema The schema where to create models
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema where to create models
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param user The username for the Starburst/Trino account
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user The username for the Starburst/Trino account
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public StarburstCredentialState build() {
            return $;
        }
    }

}

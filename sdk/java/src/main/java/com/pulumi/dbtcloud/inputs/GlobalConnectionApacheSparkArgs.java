// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GlobalConnectionApacheSparkArgs extends com.pulumi.resources.ResourceArgs {

    public static final GlobalConnectionApacheSparkArgs Empty = new GlobalConnectionApacheSparkArgs();

    /**
     * Auth
     * 
     */
    @Import(name="auth")
    private @Nullable Output<String> auth;

    /**
     * @return Auth
     * 
     */
    public Optional<Output<String>> auth() {
        return Optional.ofNullable(this.auth);
    }

    /**
     * Spark cluster for the connection
     * 
     */
    @Import(name="cluster", required=true)
    private Output<String> cluster;

    /**
     * @return Spark cluster for the connection
     * 
     */
    public Output<String> cluster() {
        return this.cluster;
    }

    /**
     * Connection retries. Default=0
     * 
     */
    @Import(name="connectRetries")
    private @Nullable Output<Integer> connectRetries;

    /**
     * @return Connection retries. Default=0
     * 
     */
    public Optional<Output<Integer>> connectRetries() {
        return Optional.ofNullable(this.connectRetries);
    }

    /**
     * Connection time out in seconds. Default=10
     * 
     */
    @Import(name="connectTimeout")
    private @Nullable Output<Integer> connectTimeout;

    /**
     * @return Connection time out in seconds. Default=10
     * 
     */
    public Optional<Output<Integer>> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }

    /**
     * Hostname of the connection
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return Hostname of the connection
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * Authentication method for the connection (http or thrift).
     * 
     */
    @Import(name="method", required=true)
    private Output<String> method;

    /**
     * @return Authentication method for the connection (http or thrift).
     * 
     */
    public Output<String> method() {
        return this.method;
    }

    /**
     * Organization ID
     * 
     */
    @Import(name="organization")
    private @Nullable Output<String> organization;

    /**
     * @return Organization ID
     * 
     */
    public Optional<Output<String>> organization() {
        return Optional.ofNullable(this.organization);
    }

    /**
     * Port for the connection. Default=443
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Port for the connection. Default=443
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * User
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return User
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private GlobalConnectionApacheSparkArgs() {}

    private GlobalConnectionApacheSparkArgs(GlobalConnectionApacheSparkArgs $) {
        this.auth = $.auth;
        this.cluster = $.cluster;
        this.connectRetries = $.connectRetries;
        this.connectTimeout = $.connectTimeout;
        this.host = $.host;
        this.method = $.method;
        this.organization = $.organization;
        this.port = $.port;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GlobalConnectionApacheSparkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GlobalConnectionApacheSparkArgs $;

        public Builder() {
            $ = new GlobalConnectionApacheSparkArgs();
        }

        public Builder(GlobalConnectionApacheSparkArgs defaults) {
            $ = new GlobalConnectionApacheSparkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auth Auth
         * 
         * @return builder
         * 
         */
        public Builder auth(@Nullable Output<String> auth) {
            $.auth = auth;
            return this;
        }

        /**
         * @param auth Auth
         * 
         * @return builder
         * 
         */
        public Builder auth(String auth) {
            return auth(Output.of(auth));
        }

        /**
         * @param cluster Spark cluster for the connection
         * 
         * @return builder
         * 
         */
        public Builder cluster(Output<String> cluster) {
            $.cluster = cluster;
            return this;
        }

        /**
         * @param cluster Spark cluster for the connection
         * 
         * @return builder
         * 
         */
        public Builder cluster(String cluster) {
            return cluster(Output.of(cluster));
        }

        /**
         * @param connectRetries Connection retries. Default=0
         * 
         * @return builder
         * 
         */
        public Builder connectRetries(@Nullable Output<Integer> connectRetries) {
            $.connectRetries = connectRetries;
            return this;
        }

        /**
         * @param connectRetries Connection retries. Default=0
         * 
         * @return builder
         * 
         */
        public Builder connectRetries(Integer connectRetries) {
            return connectRetries(Output.of(connectRetries));
        }

        /**
         * @param connectTimeout Connection time out in seconds. Default=10
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(@Nullable Output<Integer> connectTimeout) {
            $.connectTimeout = connectTimeout;
            return this;
        }

        /**
         * @param connectTimeout Connection time out in seconds. Default=10
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(Integer connectTimeout) {
            return connectTimeout(Output.of(connectTimeout));
        }

        /**
         * @param host Hostname of the connection
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host Hostname of the connection
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param method Authentication method for the connection (http or thrift).
         * 
         * @return builder
         * 
         */
        public Builder method(Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method Authentication method for the connection (http or thrift).
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param organization Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organization(@Nullable Output<String> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param port Port for the connection. Default=443
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port for the connection. Default=443
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param user User
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user User
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public GlobalConnectionApacheSparkArgs build() {
            if ($.cluster == null) {
                throw new MissingRequiredPropertyException("GlobalConnectionApacheSparkArgs", "cluster");
            }
            if ($.host == null) {
                throw new MissingRequiredPropertyException("GlobalConnectionApacheSparkArgs", "host");
            }
            if ($.method == null) {
                throw new MissingRequiredPropertyException("GlobalConnectionApacheSparkArgs", "method");
            }
            return $;
        }
    }

}

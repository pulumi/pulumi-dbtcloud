// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GlobalConnectionPostgresSshTunnelArgs extends com.pulumi.resources.ResourceArgs {

    public static final GlobalConnectionPostgresSshTunnelArgs Empty = new GlobalConnectionPostgresSshTunnelArgs();

    /**
     * The hostname for the SSH tunnel.
     * 
     */
    @Import(name="hostname", required=true)
    private Output<String> hostname;

    /**
     * @return The hostname for the SSH tunnel.
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }

    /**
     * The ID of the SSH tunnel connection.
     * 
     */
    @Import(name="id")
    private @Nullable Output<Integer> id;

    /**
     * @return The ID of the SSH tunnel connection.
     * 
     */
    public Optional<Output<Integer>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The HTTP port for the SSH tunnel.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return The HTTP port for the SSH tunnel.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * The SSH public key generated to allow connecting via SSH tunnel.
     * 
     */
    @Import(name="publicKey")
    private @Nullable Output<String> publicKey;

    /**
     * @return The SSH public key generated to allow connecting via SSH tunnel.
     * 
     */
    public Optional<Output<String>> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    /**
     * The username to use for the SSH tunnel.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The username to use for the SSH tunnel.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private GlobalConnectionPostgresSshTunnelArgs() {}

    private GlobalConnectionPostgresSshTunnelArgs(GlobalConnectionPostgresSshTunnelArgs $) {
        this.hostname = $.hostname;
        this.id = $.id;
        this.port = $.port;
        this.publicKey = $.publicKey;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GlobalConnectionPostgresSshTunnelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GlobalConnectionPostgresSshTunnelArgs $;

        public Builder() {
            $ = new GlobalConnectionPostgresSshTunnelArgs();
        }

        public Builder(GlobalConnectionPostgresSshTunnelArgs defaults) {
            $ = new GlobalConnectionPostgresSshTunnelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostname The hostname for the SSH tunnel.
         * 
         * @return builder
         * 
         */
        public Builder hostname(Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The hostname for the SSH tunnel.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param id The ID of the SSH tunnel connection.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the SSH tunnel connection.
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        /**
         * @param port The HTTP port for the SSH tunnel.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The HTTP port for the SSH tunnel.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param publicKey The SSH public key generated to allow connecting via SSH tunnel.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(@Nullable Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param publicKey The SSH public key generated to allow connecting via SSH tunnel.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        /**
         * @param username The username to use for the SSH tunnel.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username to use for the SSH tunnel.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public GlobalConnectionPostgresSshTunnelArgs build() {
            if ($.hostname == null) {
                throw new MissingRequiredPropertyException("GlobalConnectionPostgresSshTunnelArgs", "hostname");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("GlobalConnectionPostgresSshTunnelArgs", "port");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("GlobalConnectionPostgresSshTunnelArgs", "username");
            }
            return $;
        }
    }

}

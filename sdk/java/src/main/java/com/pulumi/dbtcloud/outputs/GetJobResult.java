// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.dbtcloud.outputs.GetJobJobCompletionTriggerCondition;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetJobResult {
    /**
     * @return ID of the environment this job defers to
     * 
     */
    private Integer deferringEnvironmentId;
    /**
     * @return ID of the job this job defers to
     * 
     */
    private Integer deferringJobId;
    /**
     * @return Long description for the job
     * 
     */
    private String description;
    /**
     * @return ID of the environment the job is in
     * 
     */
    private Integer environmentId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Which other job should trigger this job when it finishes, and on which conditions.
     * 
     */
    private List<GetJobJobCompletionTriggerCondition> jobCompletionTriggerConditions;
    /**
     * @return ID of the job
     * 
     */
    private Integer jobId;
    /**
     * @return Given name for the job
     * 
     */
    private String name;
    /**
     * @return ID of the project the job is in
     * 
     */
    private Integer projectId;
    /**
     * @return Whether this job defers on a previous run of itself (overrides value in deferring*job*id)
     * 
     */
    private Boolean selfDeferring;
    /**
     * @return Number of seconds before the job times out
     * 
     */
    private Integer timeoutSeconds;
    /**
     * @return Flags for which types of triggers to use, keys of github*webhook, git*provider*webhook, schedule, custom*branch_only
     * 
     */
    private Map<String,Boolean> triggers;
    /**
     * @return Whether the CI job should be automatically triggered on draft PRs
     * 
     */
    private Boolean triggersOnDraftPr;

    private GetJobResult() {}
    /**
     * @return ID of the environment this job defers to
     * 
     */
    public Integer deferringEnvironmentId() {
        return this.deferringEnvironmentId;
    }
    /**
     * @return ID of the job this job defers to
     * 
     */
    public Integer deferringJobId() {
        return this.deferringJobId;
    }
    /**
     * @return Long description for the job
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return ID of the environment the job is in
     * 
     */
    public Integer environmentId() {
        return this.environmentId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Which other job should trigger this job when it finishes, and on which conditions.
     * 
     */
    public List<GetJobJobCompletionTriggerCondition> jobCompletionTriggerConditions() {
        return this.jobCompletionTriggerConditions;
    }
    /**
     * @return ID of the job
     * 
     */
    public Integer jobId() {
        return this.jobId;
    }
    /**
     * @return Given name for the job
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return ID of the project the job is in
     * 
     */
    public Integer projectId() {
        return this.projectId;
    }
    /**
     * @return Whether this job defers on a previous run of itself (overrides value in deferring*job*id)
     * 
     */
    public Boolean selfDeferring() {
        return this.selfDeferring;
    }
    /**
     * @return Number of seconds before the job times out
     * 
     */
    public Integer timeoutSeconds() {
        return this.timeoutSeconds;
    }
    /**
     * @return Flags for which types of triggers to use, keys of github*webhook, git*provider*webhook, schedule, custom*branch_only
     * 
     */
    public Map<String,Boolean> triggers() {
        return this.triggers;
    }
    /**
     * @return Whether the CI job should be automatically triggered on draft PRs
     * 
     */
    public Boolean triggersOnDraftPr() {
        return this.triggersOnDraftPr;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJobResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer deferringEnvironmentId;
        private Integer deferringJobId;
        private String description;
        private Integer environmentId;
        private String id;
        private List<GetJobJobCompletionTriggerCondition> jobCompletionTriggerConditions;
        private Integer jobId;
        private String name;
        private Integer projectId;
        private Boolean selfDeferring;
        private Integer timeoutSeconds;
        private Map<String,Boolean> triggers;
        private Boolean triggersOnDraftPr;
        public Builder() {}
        public Builder(GetJobResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deferringEnvironmentId = defaults.deferringEnvironmentId;
    	      this.deferringJobId = defaults.deferringJobId;
    	      this.description = defaults.description;
    	      this.environmentId = defaults.environmentId;
    	      this.id = defaults.id;
    	      this.jobCompletionTriggerConditions = defaults.jobCompletionTriggerConditions;
    	      this.jobId = defaults.jobId;
    	      this.name = defaults.name;
    	      this.projectId = defaults.projectId;
    	      this.selfDeferring = defaults.selfDeferring;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
    	      this.triggers = defaults.triggers;
    	      this.triggersOnDraftPr = defaults.triggersOnDraftPr;
        }

        @CustomType.Setter
        public Builder deferringEnvironmentId(Integer deferringEnvironmentId) {
            if (deferringEnvironmentId == null) {
              throw new MissingRequiredPropertyException("GetJobResult", "deferringEnvironmentId");
            }
            this.deferringEnvironmentId = deferringEnvironmentId;
            return this;
        }
        @CustomType.Setter
        public Builder deferringJobId(Integer deferringJobId) {
            if (deferringJobId == null) {
              throw new MissingRequiredPropertyException("GetJobResult", "deferringJobId");
            }
            this.deferringJobId = deferringJobId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetJobResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder environmentId(Integer environmentId) {
            if (environmentId == null) {
              throw new MissingRequiredPropertyException("GetJobResult", "environmentId");
            }
            this.environmentId = environmentId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetJobResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder jobCompletionTriggerConditions(List<GetJobJobCompletionTriggerCondition> jobCompletionTriggerConditions) {
            if (jobCompletionTriggerConditions == null) {
              throw new MissingRequiredPropertyException("GetJobResult", "jobCompletionTriggerConditions");
            }
            this.jobCompletionTriggerConditions = jobCompletionTriggerConditions;
            return this;
        }
        public Builder jobCompletionTriggerConditions(GetJobJobCompletionTriggerCondition... jobCompletionTriggerConditions) {
            return jobCompletionTriggerConditions(List.of(jobCompletionTriggerConditions));
        }
        @CustomType.Setter
        public Builder jobId(Integer jobId) {
            if (jobId == null) {
              throw new MissingRequiredPropertyException("GetJobResult", "jobId");
            }
            this.jobId = jobId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetJobResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(Integer projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetJobResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder selfDeferring(Boolean selfDeferring) {
            if (selfDeferring == null) {
              throw new MissingRequiredPropertyException("GetJobResult", "selfDeferring");
            }
            this.selfDeferring = selfDeferring;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutSeconds(Integer timeoutSeconds) {
            if (timeoutSeconds == null) {
              throw new MissingRequiredPropertyException("GetJobResult", "timeoutSeconds");
            }
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder triggers(Map<String,Boolean> triggers) {
            if (triggers == null) {
              throw new MissingRequiredPropertyException("GetJobResult", "triggers");
            }
            this.triggers = triggers;
            return this;
        }
        @CustomType.Setter
        public Builder triggersOnDraftPr(Boolean triggersOnDraftPr) {
            if (triggersOnDraftPr == null) {
              throw new MissingRequiredPropertyException("GetJobResult", "triggersOnDraftPr");
            }
            this.triggersOnDraftPr = triggersOnDraftPr;
            return this;
        }
        public GetJobResult build() {
            final var _resultValue = new GetJobResult();
            _resultValue.deferringEnvironmentId = deferringEnvironmentId;
            _resultValue.deferringJobId = deferringJobId;
            _resultValue.description = description;
            _resultValue.environmentId = environmentId;
            _resultValue.id = id;
            _resultValue.jobCompletionTriggerConditions = jobCompletionTriggerConditions;
            _resultValue.jobId = jobId;
            _resultValue.name = name;
            _resultValue.projectId = projectId;
            _resultValue.selfDeferring = selfDeferring;
            _resultValue.timeoutSeconds = timeoutSeconds;
            _resultValue.triggers = triggers;
            _resultValue.triggersOnDraftPr = triggersOnDraftPr;
            return _resultValue;
        }
    }
}

// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnvironmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentArgs Empty = new EnvironmentArgs();

    /**
     * A connection ID (used with Global Connections)
     * 
     */
    @Import(name="connectionId")
    private @Nullable Output<Integer> connectionId;

    /**
     * @return A connection ID (used with Global Connections)
     * 
     */
    public Optional<Output<Integer>> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }

    /**
     * The project ID to which the environment belongs.
     * 
     */
    @Import(name="credentialId")
    private @Nullable Output<Integer> credentialId;

    /**
     * @return The project ID to which the environment belongs.
     * 
     */
    public Optional<Output<Integer>> credentialId() {
        return Optional.ofNullable(this.credentialId);
    }

    /**
     * The custom branch name to use
     * 
     */
    @Import(name="customBranch")
    private @Nullable Output<String> customBranch;

    /**
     * @return The custom branch name to use
     * 
     */
    public Optional<Output<String>> customBranch() {
        return Optional.ofNullable(this.customBranch);
    }

    /**
     * Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` (e.g. `1.5.0-latest`), `major.minor.0-pre`, `compatible`, `extended`, `versionless`, `latest` or `latest-fusion`. While `versionless` is still supported, using `latest` is recommended. Defaults to `latest` if no version is provided
     * 
     */
    @Import(name="dbtVersion")
    private @Nullable Output<String> dbtVersion;

    /**
     * @return Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` (e.g. `1.5.0-latest`), `major.minor.0-pre`, `compatible`, `extended`, `versionless`, `latest` or `latest-fusion`. While `versionless` is still supported, using `latest` is recommended. Defaults to `latest` if no version is provided
     * 
     */
    public Optional<Output<String>> dbtVersion() {
        return Optional.ofNullable(this.dbtVersion);
    }

    /**
     * The type of environment. Only valid for environments of type &#39;deployment&#39; and for now can only be &#39;production&#39;, &#39;staging&#39; or left empty for generic environments
     * 
     */
    @Import(name="deploymentType")
    private @Nullable Output<String> deploymentType;

    /**
     * @return The type of environment. Only valid for environments of type &#39;deployment&#39; and for now can only be &#39;production&#39;, &#39;staging&#39; or left empty for generic environments
     * 
     */
    public Optional<Output<String>> deploymentType() {
        return Optional.ofNullable(this.deploymentType);
    }

    /**
     * Whether to enable model query history in this environment. As of Oct 2024, works only for Snowflake and BigQuery.
     * 
     */
    @Import(name="enableModelQueryHistory")
    private @Nullable Output<Boolean> enableModelQueryHistory;

    /**
     * @return Whether to enable model query history in this environment. As of Oct 2024, works only for Snowflake and BigQuery.
     * 
     */
    public Optional<Output<Boolean>> enableModelQueryHistory() {
        return Optional.ofNullable(this.enableModelQueryHistory);
    }

    /**
     * The ID of the extended attributes applied
     * 
     */
    @Import(name="extendedAttributesId")
    private @Nullable Output<Integer> extendedAttributesId;

    /**
     * @return The ID of the extended attributes applied
     * 
     */
    public Optional<Output<Integer>> extendedAttributesId() {
        return Optional.ofNullable(this.extendedAttributesId);
    }

    /**
     * Whether the environment is active
     * 
     */
    @Import(name="isActive")
    private @Nullable Output<Boolean> isActive;

    /**
     * @return Whether the environment is active
     * 
     */
    public Optional<Output<Boolean>> isActive() {
        return Optional.ofNullable(this.isActive);
    }

    /**
     * The name of the environment
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the environment
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Project ID to create the environment in
     * 
     */
    @Import(name="projectId", required=true)
    private Output<Integer> projectId;

    /**
     * @return Project ID to create the environment in
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }

    /**
     * The type of environment (must be either development or deployment)
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of environment (must be either development or deployment)
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Whether to use a custom git branch in this environment
     * 
     */
    @Import(name="useCustomBranch")
    private @Nullable Output<Boolean> useCustomBranch;

    /**
     * @return Whether to use a custom git branch in this environment
     * 
     */
    public Optional<Output<Boolean>> useCustomBranch() {
        return Optional.ofNullable(this.useCustomBranch);
    }

    private EnvironmentArgs() {}

    private EnvironmentArgs(EnvironmentArgs $) {
        this.connectionId = $.connectionId;
        this.credentialId = $.credentialId;
        this.customBranch = $.customBranch;
        this.dbtVersion = $.dbtVersion;
        this.deploymentType = $.deploymentType;
        this.enableModelQueryHistory = $.enableModelQueryHistory;
        this.extendedAttributesId = $.extendedAttributesId;
        this.isActive = $.isActive;
        this.name = $.name;
        this.projectId = $.projectId;
        this.type = $.type;
        this.useCustomBranch = $.useCustomBranch;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentArgs $;

        public Builder() {
            $ = new EnvironmentArgs();
        }

        public Builder(EnvironmentArgs defaults) {
            $ = new EnvironmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionId A connection ID (used with Global Connections)
         * 
         * @return builder
         * 
         */
        public Builder connectionId(@Nullable Output<Integer> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId A connection ID (used with Global Connections)
         * 
         * @return builder
         * 
         */
        public Builder connectionId(Integer connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param credentialId The project ID to which the environment belongs.
         * 
         * @return builder
         * 
         */
        public Builder credentialId(@Nullable Output<Integer> credentialId) {
            $.credentialId = credentialId;
            return this;
        }

        /**
         * @param credentialId The project ID to which the environment belongs.
         * 
         * @return builder
         * 
         */
        public Builder credentialId(Integer credentialId) {
            return credentialId(Output.of(credentialId));
        }

        /**
         * @param customBranch The custom branch name to use
         * 
         * @return builder
         * 
         */
        public Builder customBranch(@Nullable Output<String> customBranch) {
            $.customBranch = customBranch;
            return this;
        }

        /**
         * @param customBranch The custom branch name to use
         * 
         * @return builder
         * 
         */
        public Builder customBranch(String customBranch) {
            return customBranch(Output.of(customBranch));
        }

        /**
         * @param dbtVersion Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` (e.g. `1.5.0-latest`), `major.minor.0-pre`, `compatible`, `extended`, `versionless`, `latest` or `latest-fusion`. While `versionless` is still supported, using `latest` is recommended. Defaults to `latest` if no version is provided
         * 
         * @return builder
         * 
         */
        public Builder dbtVersion(@Nullable Output<String> dbtVersion) {
            $.dbtVersion = dbtVersion;
            return this;
        }

        /**
         * @param dbtVersion Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` (e.g. `1.5.0-latest`), `major.minor.0-pre`, `compatible`, `extended`, `versionless`, `latest` or `latest-fusion`. While `versionless` is still supported, using `latest` is recommended. Defaults to `latest` if no version is provided
         * 
         * @return builder
         * 
         */
        public Builder dbtVersion(String dbtVersion) {
            return dbtVersion(Output.of(dbtVersion));
        }

        /**
         * @param deploymentType The type of environment. Only valid for environments of type &#39;deployment&#39; and for now can only be &#39;production&#39;, &#39;staging&#39; or left empty for generic environments
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(@Nullable Output<String> deploymentType) {
            $.deploymentType = deploymentType;
            return this;
        }

        /**
         * @param deploymentType The type of environment. Only valid for environments of type &#39;deployment&#39; and for now can only be &#39;production&#39;, &#39;staging&#39; or left empty for generic environments
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(String deploymentType) {
            return deploymentType(Output.of(deploymentType));
        }

        /**
         * @param enableModelQueryHistory Whether to enable model query history in this environment. As of Oct 2024, works only for Snowflake and BigQuery.
         * 
         * @return builder
         * 
         */
        public Builder enableModelQueryHistory(@Nullable Output<Boolean> enableModelQueryHistory) {
            $.enableModelQueryHistory = enableModelQueryHistory;
            return this;
        }

        /**
         * @param enableModelQueryHistory Whether to enable model query history in this environment. As of Oct 2024, works only for Snowflake and BigQuery.
         * 
         * @return builder
         * 
         */
        public Builder enableModelQueryHistory(Boolean enableModelQueryHistory) {
            return enableModelQueryHistory(Output.of(enableModelQueryHistory));
        }

        /**
         * @param extendedAttributesId The ID of the extended attributes applied
         * 
         * @return builder
         * 
         */
        public Builder extendedAttributesId(@Nullable Output<Integer> extendedAttributesId) {
            $.extendedAttributesId = extendedAttributesId;
            return this;
        }

        /**
         * @param extendedAttributesId The ID of the extended attributes applied
         * 
         * @return builder
         * 
         */
        public Builder extendedAttributesId(Integer extendedAttributesId) {
            return extendedAttributesId(Output.of(extendedAttributesId));
        }

        /**
         * @param isActive Whether the environment is active
         * 
         * @return builder
         * 
         */
        public Builder isActive(@Nullable Output<Boolean> isActive) {
            $.isActive = isActive;
            return this;
        }

        /**
         * @param isActive Whether the environment is active
         * 
         * @return builder
         * 
         */
        public Builder isActive(Boolean isActive) {
            return isActive(Output.of(isActive));
        }

        /**
         * @param name The name of the environment
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the environment
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId Project ID to create the environment in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID to create the environment in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param type The type of environment (must be either development or deployment)
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of environment (must be either development or deployment)
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param useCustomBranch Whether to use a custom git branch in this environment
         * 
         * @return builder
         * 
         */
        public Builder useCustomBranch(@Nullable Output<Boolean> useCustomBranch) {
            $.useCustomBranch = useCustomBranch;
            return this;
        }

        /**
         * @param useCustomBranch Whether to use a custom git branch in this environment
         * 
         * @return builder
         * 
         */
        public Builder useCustomBranch(Boolean useCustomBranch) {
            return useCustomBranch(Output.of(useCustomBranch));
        }

        public EnvironmentArgs build() {
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("EnvironmentArgs", "projectId");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("EnvironmentArgs", "type");
            }
            return $;
        }
    }

}

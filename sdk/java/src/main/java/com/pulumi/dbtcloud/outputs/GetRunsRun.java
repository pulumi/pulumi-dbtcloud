// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRunsRun {
    /**
     * @return The ID of the account
     * 
     */
    private Integer accountId;
    /**
     * @return The cause of the run
     * 
     */
    private String cause;
    /**
     * @return The branch of the commit
     * 
     */
    private String gitBranch;
    /**
     * @return The SHA of the commit
     * 
     */
    private String gitSha;
    /**
     * @return The ID of the pull request
     * 
     */
    private String githubPullRequestId;
    /**
     * @return The ID of the run
     * 
     */
    private Integer id;
    /**
     * @return The ID of the job
     * 
     */
    private Integer jobId;
    /**
     * @return The schema override
     * 
     */
    private String schemaOverride;

    private GetRunsRun() {}
    /**
     * @return The ID of the account
     * 
     */
    public Integer accountId() {
        return this.accountId;
    }
    /**
     * @return The cause of the run
     * 
     */
    public String cause() {
        return this.cause;
    }
    /**
     * @return The branch of the commit
     * 
     */
    public String gitBranch() {
        return this.gitBranch;
    }
    /**
     * @return The SHA of the commit
     * 
     */
    public String gitSha() {
        return this.gitSha;
    }
    /**
     * @return The ID of the pull request
     * 
     */
    public String githubPullRequestId() {
        return this.githubPullRequestId;
    }
    /**
     * @return The ID of the run
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return The ID of the job
     * 
     */
    public Integer jobId() {
        return this.jobId;
    }
    /**
     * @return The schema override
     * 
     */
    public String schemaOverride() {
        return this.schemaOverride;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRunsRun defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer accountId;
        private String cause;
        private String gitBranch;
        private String gitSha;
        private String githubPullRequestId;
        private Integer id;
        private Integer jobId;
        private String schemaOverride;
        public Builder() {}
        public Builder(GetRunsRun defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.cause = defaults.cause;
    	      this.gitBranch = defaults.gitBranch;
    	      this.gitSha = defaults.gitSha;
    	      this.githubPullRequestId = defaults.githubPullRequestId;
    	      this.id = defaults.id;
    	      this.jobId = defaults.jobId;
    	      this.schemaOverride = defaults.schemaOverride;
        }

        @CustomType.Setter
        public Builder accountId(Integer accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetRunsRun", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder cause(String cause) {
            if (cause == null) {
              throw new MissingRequiredPropertyException("GetRunsRun", "cause");
            }
            this.cause = cause;
            return this;
        }
        @CustomType.Setter
        public Builder gitBranch(String gitBranch) {
            if (gitBranch == null) {
              throw new MissingRequiredPropertyException("GetRunsRun", "gitBranch");
            }
            this.gitBranch = gitBranch;
            return this;
        }
        @CustomType.Setter
        public Builder gitSha(String gitSha) {
            if (gitSha == null) {
              throw new MissingRequiredPropertyException("GetRunsRun", "gitSha");
            }
            this.gitSha = gitSha;
            return this;
        }
        @CustomType.Setter
        public Builder githubPullRequestId(String githubPullRequestId) {
            if (githubPullRequestId == null) {
              throw new MissingRequiredPropertyException("GetRunsRun", "githubPullRequestId");
            }
            this.githubPullRequestId = githubPullRequestId;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRunsRun", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder jobId(Integer jobId) {
            if (jobId == null) {
              throw new MissingRequiredPropertyException("GetRunsRun", "jobId");
            }
            this.jobId = jobId;
            return this;
        }
        @CustomType.Setter
        public Builder schemaOverride(String schemaOverride) {
            if (schemaOverride == null) {
              throw new MissingRequiredPropertyException("GetRunsRun", "schemaOverride");
            }
            this.schemaOverride = schemaOverride;
            return this;
        }
        public GetRunsRun build() {
            final var _resultValue = new GetRunsRun();
            _resultValue.accountId = accountId;
            _resultValue.cause = cause;
            _resultValue.gitBranch = gitBranch;
            _resultValue.gitSha = gitSha;
            _resultValue.githubPullRequestId = githubPullRequestId;
            _resultValue.id = id;
            _resultValue.jobId = jobId;
            _resultValue.schemaOverride = schemaOverride;
            return _resultValue;
        }
    }
}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dbtcloud.NotificationArgs;
import com.pulumi.dbtcloud.Utilities;
import com.pulumi.dbtcloud.inputs.NotificationState;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.dbtcloud.Notification;
 * import com.pulumi.dbtcloud.NotificationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // dbt Cloud allows us to create internal and external notifications
 *         // an internal notification will send emails to the user mentioned in `user_id`
 *         //
 *         // NOTE: If internal notification settings already exist for a user, currently you MUST import
 *         // those first into the state file before you can create a new internal notification for that user.
 *         // Failure to do so, will result in the user losing access to existing notifications and dbt
 *         // support will need to be contacted to restore access.
 *         // cmd: terraform import dbtcloud_notification.prod_job_internal_notification &lt;user_id&gt;
 *         var prodJobInternalNotification = new Notification(&#34;prodJobInternalNotification&#34;, NotificationArgs.builder()        
 *             .userId(100)
 *             .onSuccesses(prodJob.id())
 *             .onFailures(12345)
 *             .notificationType(1)
 *             .build());
 * 
 *         // we can also send &#34;external&#34; email notifications to emails to related to dbt Cloud users
 *         var prodJobExternalNotification = new Notification(&#34;prodJobExternalNotification&#34;, NotificationArgs.builder()        
 *             .userId(100)
 *             .onFailures(            
 *                 23456,
 *                 56788)
 *             .onCancels(prodJob.id())
 *             .notificationType(4)
 *             .externalEmail(&#34;my_email@mail.com&#34;)
 *             .build());
 * 
 *         // and finally, we can set up Slack notifications
 *         var prodJobSlackNotifications = new Notification(&#34;prodJobSlackNotifications&#34;, NotificationArgs.builder()        
 *             .userId(100)
 *             .onFailures(            
 *                 23456,
 *                 56788)
 *             .onCancels(prodJob.id())
 *             .notificationType(2)
 *             .slackChannelId(&#34;C12345ABCDE&#34;)
 *             .slackChannelName(&#34;#my-awesome-channel&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Import using a notification ID
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/notification:Notification my_notification &#34;notification_id&#34;
 * ```
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/notification:Notification my_notification 12345
 * ```
 * 
 */
@ResourceType(type="dbtcloud:index/notification:Notification")
public class Notification extends com.pulumi.resources.CustomResource {
    /**
     * The external email to receive the notification
     * 
     */
    @Export(name="externalEmail", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> externalEmail;

    /**
     * @return The external email to receive the notification
     * 
     */
    public Output<Optional<String>> externalEmail() {
        return Codegen.optional(this.externalEmail);
    }
    /**
     * Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`)
     * 
     */
    @Export(name="notificationType", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> notificationType;

    /**
     * @return Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`)
     * 
     */
    public Output<Optional<Integer>> notificationType() {
        return Codegen.optional(this.notificationType);
    }
    /**
     * List of job IDs to trigger the webhook on cancel
     * 
     */
    @Export(name="onCancels", refs={List.class,Integer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Integer>> onCancels;

    /**
     * @return List of job IDs to trigger the webhook on cancel
     * 
     */
    public Output<Optional<List<Integer>>> onCancels() {
        return Codegen.optional(this.onCancels);
    }
    /**
     * List of job IDs to trigger the webhook on failure
     * 
     */
    @Export(name="onFailures", refs={List.class,Integer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Integer>> onFailures;

    /**
     * @return List of job IDs to trigger the webhook on failure
     * 
     */
    public Output<Optional<List<Integer>>> onFailures() {
        return Codegen.optional(this.onFailures);
    }
    /**
     * List of job IDs to trigger the webhook on success
     * 
     */
    @Export(name="onSuccesses", refs={List.class,Integer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Integer>> onSuccesses;

    /**
     * @return List of job IDs to trigger the webhook on success
     * 
     */
    public Output<Optional<List<Integer>>> onSuccesses() {
        return Codegen.optional(this.onSuccesses);
    }
    /**
     * The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
     * 
     */
    @Export(name="slackChannelId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> slackChannelId;

    /**
     * @return The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
     * 
     */
    public Output<Optional<String>> slackChannelId() {
        return Codegen.optional(this.slackChannelId);
    }
    /**
     * The name of the slack channel
     * 
     */
    @Export(name="slackChannelName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> slackChannelName;

    /**
     * @return The name of the slack channel
     * 
     */
    public Output<Optional<String>> slackChannelName() {
        return Codegen.optional(this.slackChannelName);
    }
    /**
     * State of the notification (1 = active (default), 2 = inactive)
     * 
     */
    @Export(name="state", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> state;

    /**
     * @return State of the notification (1 = active (default), 2 = inactive)
     * 
     */
    public Output<Optional<Integer>> state() {
        return Codegen.optional(this.state);
    }
    /**
     * Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one
     * 
     */
    @Export(name="userId", refs={Integer.class}, tree="[0]")
    private Output<Integer> userId;

    /**
     * @return Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one
     * 
     */
    public Output<Integer> userId() {
        return this.userId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Notification(String name) {
        this(name, NotificationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Notification(String name, NotificationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Notification(String name, NotificationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/notification:Notification", name, args == null ? NotificationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Notification(String name, Output<String> id, @Nullable NotificationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/notification:Notification", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Notification get(String name, Output<String> id, @Nullable NotificationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Notification(name, id, state, options);
    }
}

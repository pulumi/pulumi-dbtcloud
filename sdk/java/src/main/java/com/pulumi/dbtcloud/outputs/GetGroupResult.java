// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGroupResult {
    /**
     * @return Whether or not to assign this group to users by default
     * 
     */
    private Boolean assignByDefault;
    /**
     * @return ID of the group
     * 
     */
    private Integer groupId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Whether the group is active
     * 
     */
    private Boolean isActive;
    /**
     * @return Group name
     * 
     */
    private String name;
    /**
     * @return SSO mapping group names for this group
     * 
     */
    private List<String> ssoMappingGroups;

    private GetGroupResult() {}
    /**
     * @return Whether or not to assign this group to users by default
     * 
     */
    public Boolean assignByDefault() {
        return this.assignByDefault;
    }
    /**
     * @return ID of the group
     * 
     */
    public Integer groupId() {
        return this.groupId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether the group is active
     * 
     */
    public Boolean isActive() {
        return this.isActive;
    }
    /**
     * @return Group name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return SSO mapping group names for this group
     * 
     */
    public List<String> ssoMappingGroups() {
        return this.ssoMappingGroups;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean assignByDefault;
        private Integer groupId;
        private String id;
        private Boolean isActive;
        private String name;
        private List<String> ssoMappingGroups;
        public Builder() {}
        public Builder(GetGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assignByDefault = defaults.assignByDefault;
    	      this.groupId = defaults.groupId;
    	      this.id = defaults.id;
    	      this.isActive = defaults.isActive;
    	      this.name = defaults.name;
    	      this.ssoMappingGroups = defaults.ssoMappingGroups;
        }

        @CustomType.Setter
        public Builder assignByDefault(Boolean assignByDefault) {
            if (assignByDefault == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "assignByDefault");
            }
            this.assignByDefault = assignByDefault;
            return this;
        }
        @CustomType.Setter
        public Builder groupId(Integer groupId) {
            if (groupId == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "groupId");
            }
            this.groupId = groupId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isActive(Boolean isActive) {
            if (isActive == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "isActive");
            }
            this.isActive = isActive;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder ssoMappingGroups(List<String> ssoMappingGroups) {
            if (ssoMappingGroups == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "ssoMappingGroups");
            }
            this.ssoMappingGroups = ssoMappingGroups;
            return this;
        }
        public Builder ssoMappingGroups(String... ssoMappingGroups) {
            return ssoMappingGroups(List.of(ssoMappingGroups));
        }
        public GetGroupResult build() {
            final var _resultValue = new GetGroupResult();
            _resultValue.assignByDefault = assignByDefault;
            _resultValue.groupId = groupId;
            _resultValue.id = id;
            _resultValue.isActive = isActive;
            _resultValue.name = name;
            _resultValue.ssoMappingGroups = ssoMappingGroups;
            return _resultValue;
        }
    }
}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dbtcloud.EnvironmentVariableArgs;
import com.pulumi.dbtcloud.Utilities;
import com.pulumi.dbtcloud.inputs.EnvironmentVariableState;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * *Note*: Some upstream resources can be slow to create, so if creating a project or environment at
 * the same time as the environment variables, it&#39;s recommended to use the `depends_on` meta argument.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.dbtcloud.EnvironmentVariable;
 * import com.pulumi.dbtcloud.EnvironmentVariableArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var dbtMyEnvVar = new EnvironmentVariable("dbtMyEnvVar", EnvironmentVariableArgs.builder()
 *             .name("DBT_MY_ENV_VAR")
 *             .projectId(dbtProject.id())
 *             .environmentValues(Map.ofEntries(
 *                 Map.entry("project", "my_project_level_value"),
 *                 Map.entry("Dev", "my_env_level_value"),
 *                 Map.entry("CI", "my_ci_override_value"),
 *                 Map.entry("Prod", "my_prod_override_value")
 *             ))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     dbtProject,
 *                     devEnv,
 *                     ciEnv,
 *                     prodEnv)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * using  import blocks (requires Terraform &gt;= 1.5)
 * 
 * import {
 * 
 *   to = dbtcloud_environment_variable.test_environment_variable
 * 
 *   id = &#34;project_id:environment_variable_name&#34;
 * 
 * }
 * 
 * import {
 * 
 *   to = dbtcloud_environment_variable.test_environment_variable
 * 
 *   id = &#34;12345:DBT_ENV_VAR&#34;
 * 
 * }
 * 
 * using the older import command
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/environmentVariable:EnvironmentVariable test_environment_variable &#34;project_id:environment_variable_name&#34;
 * ```
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/environmentVariable:EnvironmentVariable test_environment_variable 12345:DBT_ENV_VAR
 * ```
 * 
 */
@ResourceType(type="dbtcloud:index/environmentVariable:EnvironmentVariable")
public class EnvironmentVariable extends com.pulumi.resources.CustomResource {
    /**
     * Map from environment names to respective variable value, a special key `project` should be set for the project default variable value. This field is not set as sensitive so take precautions when using secret environment variables.
     * 
     */
    @Export(name="environmentValues", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> environmentValues;

    /**
     * @return Map from environment names to respective variable value, a special key `project` should be set for the project default variable value. This field is not set as sensitive so take precautions when using secret environment variables.
     * 
     */
    public Output<Map<String,Object>> environmentValues() {
        return this.environmentValues;
    }
    /**
     * Name for the variable, must be unique within a project, must be prefixed with &#39;DBT_&#39;
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name for the variable, must be unique within a project, must be prefixed with &#39;DBT_&#39;
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Project for the variable to be created in
     * 
     */
    @Export(name="projectId", refs={Integer.class}, tree="[0]")
    private Output<Integer> projectId;

    /**
     * @return Project for the variable to be created in
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EnvironmentVariable(java.lang.String name) {
        this(name, EnvironmentVariableArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EnvironmentVariable(java.lang.String name, EnvironmentVariableArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EnvironmentVariable(java.lang.String name, EnvironmentVariableArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/environmentVariable:EnvironmentVariable", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private EnvironmentVariable(java.lang.String name, Output<java.lang.String> id, @Nullable EnvironmentVariableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/environmentVariable:EnvironmentVariable", name, state, makeResourceOptions(options, id), false);
    }

    private static EnvironmentVariableArgs makeArgs(EnvironmentVariableArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? EnvironmentVariableArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EnvironmentVariable get(java.lang.String name, Output<java.lang.String> id, @Nullable EnvironmentVariableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new EnvironmentVariable(name, id, state, options);
    }
}

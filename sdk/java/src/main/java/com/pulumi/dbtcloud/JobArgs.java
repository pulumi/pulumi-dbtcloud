// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dbtcloud.inputs.JobJobCompletionTriggerConditionArgs;
import com.pulumi.dbtcloud.inputs.JobTriggersArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobArgs Empty = new JobArgs();

    /**
     * The model selector for checking changes in the compare changes Advanced CI feature
     * 
     */
    @Import(name="compareChangesFlags")
    private @Nullable Output<String> compareChangesFlags;

    /**
     * @return The model selector for checking changes in the compare changes Advanced CI feature
     * 
     */
    public Optional<Output<String>> compareChangesFlags() {
        return Optional.ofNullable(this.compareChangesFlags);
    }

    /**
     * Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions
     * 
     */
    @Import(name="dbtVersion")
    private @Nullable Output<String> dbtVersion;

    /**
     * @return Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions
     * 
     */
    public Optional<Output<String>> dbtVersion() {
        return Optional.ofNullable(this.dbtVersion);
    }

    /**
     * Environment identifier that this job defers to (new deferring approach)
     * 
     */
    @Import(name="deferringEnvironmentId")
    private @Nullable Output<Integer> deferringEnvironmentId;

    /**
     * @return Environment identifier that this job defers to (new deferring approach)
     * 
     */
    public Optional<Output<Integer>> deferringEnvironmentId() {
        return Optional.ofNullable(this.deferringEnvironmentId);
    }

    /**
     * Job identifier that this job defers to (legacy deferring approach)
     * 
     */
    @Import(name="deferringJobId")
    private @Nullable Output<Integer> deferringJobId;

    /**
     * @return Job identifier that this job defers to (legacy deferring approach)
     * 
     */
    public Optional<Output<Integer>> deferringJobId() {
        return Optional.ofNullable(this.deferringJobId);
    }

    /**
     * Description for the job
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description for the job
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Environment ID to create the job in
     * 
     */
    @Import(name="environmentId", required=true)
    private Output<Integer> environmentId;

    /**
     * @return Environment ID to create the job in
     * 
     */
    public Output<Integer> environmentId() {
        return this.environmentId;
    }

    /**
     * Whether the CI job should fail when a lint error is found. Only used when `runLint` is set to `true`. Defaults to `true`.
     * 
     */
    @Import(name="errorsOnLintFailure")
    private @Nullable Output<Boolean> errorsOnLintFailure;

    /**
     * @return Whether the CI job should fail when a lint error is found. Only used when `runLint` is set to `true`. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> errorsOnLintFailure() {
        return Optional.ofNullable(this.errorsOnLintFailure);
    }

    /**
     * List of commands to execute for the job
     * 
     */
    @Import(name="executeSteps", required=true)
    private Output<List<String>> executeSteps;

    /**
     * @return List of commands to execute for the job
     * 
     */
    public Output<List<String>> executeSteps() {
        return this.executeSteps;
    }

    /**
     * Flag for whether the job should generate documentation
     * 
     */
    @Import(name="generateDocs")
    private @Nullable Output<Boolean> generateDocs;

    /**
     * @return Flag for whether the job should generate documentation
     * 
     */
    public Optional<Output<Boolean>> generateDocs() {
        return Optional.ofNullable(this.generateDocs);
    }

    /**
     * Should always be set to true as setting it to false is the same as creating a job in a deleted state. To create/keep a job in a &#39;deactivated&#39; state, check  the `triggers` config.
     * 
     */
    @Import(name="isActive")
    private @Nullable Output<Boolean> isActive;

    /**
     * @return Should always be set to true as setting it to false is the same as creating a job in a deleted state. To create/keep a job in a &#39;deactivated&#39; state, check  the `triggers` config.
     * 
     */
    public Optional<Output<Boolean>> isActive() {
        return Optional.ofNullable(this.isActive);
    }

    /**
     * Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as &#39;job chaining&#39;).
     * 
     */
    @Import(name="jobCompletionTriggerConditions")
    private @Nullable Output<List<JobJobCompletionTriggerConditionArgs>> jobCompletionTriggerConditions;

    /**
     * @return Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as &#39;job chaining&#39;).
     * 
     */
    public Optional<Output<List<JobJobCompletionTriggerConditionArgs>>> jobCompletionTriggerConditions() {
        return Optional.ofNullable(this.jobCompletionTriggerConditions);
    }

    /**
     * Can be used to enforce the job type betwen `ci`, `merge` and `scheduled`. Without this value the job type is inferred from the triggers configured
     * 
     */
    @Import(name="jobType")
    private @Nullable Output<String> jobType;

    /**
     * @return Can be used to enforce the job type betwen `ci`, `merge` and `scheduled`. Without this value the job type is inferred from the triggers configured
     * 
     */
    public Optional<Output<String>> jobType() {
        return Optional.ofNullable(this.jobType);
    }

    /**
     * Job name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Job name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Number of threads to use in the job
     * 
     */
    @Import(name="numThreads")
    private @Nullable Output<Integer> numThreads;

    /**
     * @return Number of threads to use in the job
     * 
     */
    public Optional<Output<Integer>> numThreads() {
        return Optional.ofNullable(this.numThreads);
    }

    /**
     * Project ID to create the job in
     * 
     */
    @Import(name="projectId", required=true)
    private Output<Integer> projectId;

    /**
     * @return Project ID to create the job in
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }

    /**
     * Whether the CI job should compare data changes introduced by the code changes. Requires `deferringEnvironmentId` to be set. (Advanced CI needs to be activated in the dbt Cloud Account Settings first as well)
     * 
     */
    @Import(name="runCompareChanges")
    private @Nullable Output<Boolean> runCompareChanges;

    /**
     * @return Whether the CI job should compare data changes introduced by the code changes. Requires `deferringEnvironmentId` to be set. (Advanced CI needs to be activated in the dbt Cloud Account Settings first as well)
     * 
     */
    public Optional<Output<Boolean>> runCompareChanges() {
        return Optional.ofNullable(this.runCompareChanges);
    }

    /**
     * Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.
     * 
     */
    @Import(name="runGenerateSources")
    private @Nullable Output<Boolean> runGenerateSources;

    /**
     * @return Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.
     * 
     */
    public Optional<Output<Boolean>> runGenerateSources() {
        return Optional.ofNullable(this.runGenerateSources);
    }

    /**
     * Whether the CI job should lint SQL changes. Defaults to `false`.
     * 
     */
    @Import(name="runLint")
    private @Nullable Output<Boolean> runLint;

    /**
     * @return Whether the CI job should lint SQL changes. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> runLint() {
        return Optional.ofNullable(this.runLint);
    }

    /**
     * Custom cron expression for schedule
     * 
     */
    @Import(name="scheduleCron")
    private @Nullable Output<String> scheduleCron;

    /**
     * @return Custom cron expression for schedule
     * 
     */
    public Optional<Output<String>> scheduleCron() {
        return Optional.ofNullable(this.scheduleCron);
    }

    /**
     * List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
     * 
     */
    @Import(name="scheduleDays")
    private @Nullable Output<List<Integer>> scheduleDays;

    /**
     * @return List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
     * 
     */
    public Optional<Output<List<Integer>>> scheduleDays() {
        return Optional.ofNullable(this.scheduleDays);
    }

    /**
     * List of hours to execute the job at if running on a schedule
     * 
     */
    @Import(name="scheduleHours")
    private @Nullable Output<List<Integer>> scheduleHours;

    /**
     * @return List of hours to execute the job at if running on a schedule
     * 
     */
    public Optional<Output<List<Integer>>> scheduleHours() {
        return Optional.ofNullable(this.scheduleHours);
    }

    /**
     * Number of hours between job executions if running on a schedule
     * 
     */
    @Import(name="scheduleInterval")
    private @Nullable Output<Integer> scheduleInterval;

    /**
     * @return Number of hours between job executions if running on a schedule
     * 
     */
    public Optional<Output<Integer>> scheduleInterval() {
        return Optional.ofNullable(this.scheduleInterval);
    }

    /**
     * Type of schedule to use, one of every*day/ days*of*week/ custom*cron/ interval_cron
     * 
     */
    @Import(name="scheduleType")
    private @Nullable Output<String> scheduleType;

    /**
     * @return Type of schedule to use, one of every*day/ days*of*week/ custom*cron/ interval_cron
     * 
     */
    public Optional<Output<String>> scheduleType() {
        return Optional.ofNullable(this.scheduleType);
    }

    /**
     * Whether this job defers on a previous run of itself
     * 
     */
    @Import(name="selfDeferring")
    private @Nullable Output<Boolean> selfDeferring;

    /**
     * @return Whether this job defers on a previous run of itself
     * 
     */
    public Optional<Output<Boolean>> selfDeferring() {
        return Optional.ofNullable(this.selfDeferring);
    }

    /**
     * Target name for the dbt profile
     * 
     */
    @Import(name="targetName")
    private @Nullable Output<String> targetName;

    /**
     * @return Target name for the dbt profile
     * 
     */
    public Optional<Output<String>> targetName() {
        return Optional.ofNullable(this.targetName);
    }

    /**
     * [Deprectated - Moved to execution.timeout_seconds] Number of seconds to allow the job to run before timing out
     * 
     * @deprecated
     * Moved to execution.timeout_seconds
     * 
     */
    @Deprecated /* Moved to execution.timeout_seconds */
    @Import(name="timeoutSeconds")
    private @Nullable Output<Integer> timeoutSeconds;

    /**
     * @return [Deprectated - Moved to execution.timeout_seconds] Number of seconds to allow the job to run before timing out
     * 
     * @deprecated
     * Moved to execution.timeout_seconds
     * 
     */
    @Deprecated /* Moved to execution.timeout_seconds */
    public Optional<Output<Integer>> timeoutSeconds() {
        return Optional.ofNullable(this.timeoutSeconds);
    }

    /**
     * Flags for which types of triggers to use, the values are `githubWebhook`, `gitProviderWebhook`, `schedule` and `onMerge`. All flags should be listed and set with `true` or `false`. When `onMerge` is `true`, all the other values must be false.\n\n`customBranchOnly` used to be allowed but has been deprecated from the API. The jobs will use the custom branch of the environment. Please remove the `customBranchOnly` from your config. \n\nTo create a job in a &#39;deactivated&#39; state, set all to `false`.
     * 
     */
    @Import(name="triggers", required=true)
    private Output<JobTriggersArgs> triggers;

    /**
     * @return Flags for which types of triggers to use, the values are `githubWebhook`, `gitProviderWebhook`, `schedule` and `onMerge`. All flags should be listed and set with `true` or `false`. When `onMerge` is `true`, all the other values must be false.\n\n`customBranchOnly` used to be allowed but has been deprecated from the API. The jobs will use the custom branch of the environment. Please remove the `customBranchOnly` from your config. \n\nTo create a job in a &#39;deactivated&#39; state, set all to `false`.
     * 
     */
    public Output<JobTriggersArgs> triggers() {
        return this.triggers;
    }

    /**
     * Whether the CI job should be automatically triggered on draft PRs
     * 
     */
    @Import(name="triggersOnDraftPr")
    private @Nullable Output<Boolean> triggersOnDraftPr;

    /**
     * @return Whether the CI job should be automatically triggered on draft PRs
     * 
     */
    public Optional<Output<Boolean>> triggersOnDraftPr() {
        return Optional.ofNullable(this.triggersOnDraftPr);
    }

    private JobArgs() {}

    private JobArgs(JobArgs $) {
        this.compareChangesFlags = $.compareChangesFlags;
        this.dbtVersion = $.dbtVersion;
        this.deferringEnvironmentId = $.deferringEnvironmentId;
        this.deferringJobId = $.deferringJobId;
        this.description = $.description;
        this.environmentId = $.environmentId;
        this.errorsOnLintFailure = $.errorsOnLintFailure;
        this.executeSteps = $.executeSteps;
        this.generateDocs = $.generateDocs;
        this.isActive = $.isActive;
        this.jobCompletionTriggerConditions = $.jobCompletionTriggerConditions;
        this.jobType = $.jobType;
        this.name = $.name;
        this.numThreads = $.numThreads;
        this.projectId = $.projectId;
        this.runCompareChanges = $.runCompareChanges;
        this.runGenerateSources = $.runGenerateSources;
        this.runLint = $.runLint;
        this.scheduleCron = $.scheduleCron;
        this.scheduleDays = $.scheduleDays;
        this.scheduleHours = $.scheduleHours;
        this.scheduleInterval = $.scheduleInterval;
        this.scheduleType = $.scheduleType;
        this.selfDeferring = $.selfDeferring;
        this.targetName = $.targetName;
        this.timeoutSeconds = $.timeoutSeconds;
        this.triggers = $.triggers;
        this.triggersOnDraftPr = $.triggersOnDraftPr;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobArgs $;

        public Builder() {
            $ = new JobArgs();
        }

        public Builder(JobArgs defaults) {
            $ = new JobArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compareChangesFlags The model selector for checking changes in the compare changes Advanced CI feature
         * 
         * @return builder
         * 
         */
        public Builder compareChangesFlags(@Nullable Output<String> compareChangesFlags) {
            $.compareChangesFlags = compareChangesFlags;
            return this;
        }

        /**
         * @param compareChangesFlags The model selector for checking changes in the compare changes Advanced CI feature
         * 
         * @return builder
         * 
         */
        public Builder compareChangesFlags(String compareChangesFlags) {
            return compareChangesFlags(Output.of(compareChangesFlags));
        }

        /**
         * @param dbtVersion Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions
         * 
         * @return builder
         * 
         */
        public Builder dbtVersion(@Nullable Output<String> dbtVersion) {
            $.dbtVersion = dbtVersion;
            return this;
        }

        /**
         * @param dbtVersion Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions
         * 
         * @return builder
         * 
         */
        public Builder dbtVersion(String dbtVersion) {
            return dbtVersion(Output.of(dbtVersion));
        }

        /**
         * @param deferringEnvironmentId Environment identifier that this job defers to (new deferring approach)
         * 
         * @return builder
         * 
         */
        public Builder deferringEnvironmentId(@Nullable Output<Integer> deferringEnvironmentId) {
            $.deferringEnvironmentId = deferringEnvironmentId;
            return this;
        }

        /**
         * @param deferringEnvironmentId Environment identifier that this job defers to (new deferring approach)
         * 
         * @return builder
         * 
         */
        public Builder deferringEnvironmentId(Integer deferringEnvironmentId) {
            return deferringEnvironmentId(Output.of(deferringEnvironmentId));
        }

        /**
         * @param deferringJobId Job identifier that this job defers to (legacy deferring approach)
         * 
         * @return builder
         * 
         */
        public Builder deferringJobId(@Nullable Output<Integer> deferringJobId) {
            $.deferringJobId = deferringJobId;
            return this;
        }

        /**
         * @param deferringJobId Job identifier that this job defers to (legacy deferring approach)
         * 
         * @return builder
         * 
         */
        public Builder deferringJobId(Integer deferringJobId) {
            return deferringJobId(Output.of(deferringJobId));
        }

        /**
         * @param description Description for the job
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description for the job
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param environmentId Environment ID to create the job in
         * 
         * @return builder
         * 
         */
        public Builder environmentId(Output<Integer> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param environmentId Environment ID to create the job in
         * 
         * @return builder
         * 
         */
        public Builder environmentId(Integer environmentId) {
            return environmentId(Output.of(environmentId));
        }

        /**
         * @param errorsOnLintFailure Whether the CI job should fail when a lint error is found. Only used when `runLint` is set to `true`. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder errorsOnLintFailure(@Nullable Output<Boolean> errorsOnLintFailure) {
            $.errorsOnLintFailure = errorsOnLintFailure;
            return this;
        }

        /**
         * @param errorsOnLintFailure Whether the CI job should fail when a lint error is found. Only used when `runLint` is set to `true`. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder errorsOnLintFailure(Boolean errorsOnLintFailure) {
            return errorsOnLintFailure(Output.of(errorsOnLintFailure));
        }

        /**
         * @param executeSteps List of commands to execute for the job
         * 
         * @return builder
         * 
         */
        public Builder executeSteps(Output<List<String>> executeSteps) {
            $.executeSteps = executeSteps;
            return this;
        }

        /**
         * @param executeSteps List of commands to execute for the job
         * 
         * @return builder
         * 
         */
        public Builder executeSteps(List<String> executeSteps) {
            return executeSteps(Output.of(executeSteps));
        }

        /**
         * @param executeSteps List of commands to execute for the job
         * 
         * @return builder
         * 
         */
        public Builder executeSteps(String... executeSteps) {
            return executeSteps(List.of(executeSteps));
        }

        /**
         * @param generateDocs Flag for whether the job should generate documentation
         * 
         * @return builder
         * 
         */
        public Builder generateDocs(@Nullable Output<Boolean> generateDocs) {
            $.generateDocs = generateDocs;
            return this;
        }

        /**
         * @param generateDocs Flag for whether the job should generate documentation
         * 
         * @return builder
         * 
         */
        public Builder generateDocs(Boolean generateDocs) {
            return generateDocs(Output.of(generateDocs));
        }

        /**
         * @param isActive Should always be set to true as setting it to false is the same as creating a job in a deleted state. To create/keep a job in a &#39;deactivated&#39; state, check  the `triggers` config.
         * 
         * @return builder
         * 
         */
        public Builder isActive(@Nullable Output<Boolean> isActive) {
            $.isActive = isActive;
            return this;
        }

        /**
         * @param isActive Should always be set to true as setting it to false is the same as creating a job in a deleted state. To create/keep a job in a &#39;deactivated&#39; state, check  the `triggers` config.
         * 
         * @return builder
         * 
         */
        public Builder isActive(Boolean isActive) {
            return isActive(Output.of(isActive));
        }

        /**
         * @param jobCompletionTriggerConditions Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as &#39;job chaining&#39;).
         * 
         * @return builder
         * 
         */
        public Builder jobCompletionTriggerConditions(@Nullable Output<List<JobJobCompletionTriggerConditionArgs>> jobCompletionTriggerConditions) {
            $.jobCompletionTriggerConditions = jobCompletionTriggerConditions;
            return this;
        }

        /**
         * @param jobCompletionTriggerConditions Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as &#39;job chaining&#39;).
         * 
         * @return builder
         * 
         */
        public Builder jobCompletionTriggerConditions(List<JobJobCompletionTriggerConditionArgs> jobCompletionTriggerConditions) {
            return jobCompletionTriggerConditions(Output.of(jobCompletionTriggerConditions));
        }

        /**
         * @param jobCompletionTriggerConditions Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as &#39;job chaining&#39;).
         * 
         * @return builder
         * 
         */
        public Builder jobCompletionTriggerConditions(JobJobCompletionTriggerConditionArgs... jobCompletionTriggerConditions) {
            return jobCompletionTriggerConditions(List.of(jobCompletionTriggerConditions));
        }

        /**
         * @param jobType Can be used to enforce the job type betwen `ci`, `merge` and `scheduled`. Without this value the job type is inferred from the triggers configured
         * 
         * @return builder
         * 
         */
        public Builder jobType(@Nullable Output<String> jobType) {
            $.jobType = jobType;
            return this;
        }

        /**
         * @param jobType Can be used to enforce the job type betwen `ci`, `merge` and `scheduled`. Without this value the job type is inferred from the triggers configured
         * 
         * @return builder
         * 
         */
        public Builder jobType(String jobType) {
            return jobType(Output.of(jobType));
        }

        /**
         * @param name Job name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Job name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param numThreads Number of threads to use in the job
         * 
         * @return builder
         * 
         */
        public Builder numThreads(@Nullable Output<Integer> numThreads) {
            $.numThreads = numThreads;
            return this;
        }

        /**
         * @param numThreads Number of threads to use in the job
         * 
         * @return builder
         * 
         */
        public Builder numThreads(Integer numThreads) {
            return numThreads(Output.of(numThreads));
        }

        /**
         * @param projectId Project ID to create the job in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID to create the job in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param runCompareChanges Whether the CI job should compare data changes introduced by the code changes. Requires `deferringEnvironmentId` to be set. (Advanced CI needs to be activated in the dbt Cloud Account Settings first as well)
         * 
         * @return builder
         * 
         */
        public Builder runCompareChanges(@Nullable Output<Boolean> runCompareChanges) {
            $.runCompareChanges = runCompareChanges;
            return this;
        }

        /**
         * @param runCompareChanges Whether the CI job should compare data changes introduced by the code changes. Requires `deferringEnvironmentId` to be set. (Advanced CI needs to be activated in the dbt Cloud Account Settings first as well)
         * 
         * @return builder
         * 
         */
        public Builder runCompareChanges(Boolean runCompareChanges) {
            return runCompareChanges(Output.of(runCompareChanges));
        }

        /**
         * @param runGenerateSources Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.
         * 
         * @return builder
         * 
         */
        public Builder runGenerateSources(@Nullable Output<Boolean> runGenerateSources) {
            $.runGenerateSources = runGenerateSources;
            return this;
        }

        /**
         * @param runGenerateSources Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.
         * 
         * @return builder
         * 
         */
        public Builder runGenerateSources(Boolean runGenerateSources) {
            return runGenerateSources(Output.of(runGenerateSources));
        }

        /**
         * @param runLint Whether the CI job should lint SQL changes. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder runLint(@Nullable Output<Boolean> runLint) {
            $.runLint = runLint;
            return this;
        }

        /**
         * @param runLint Whether the CI job should lint SQL changes. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder runLint(Boolean runLint) {
            return runLint(Output.of(runLint));
        }

        /**
         * @param scheduleCron Custom cron expression for schedule
         * 
         * @return builder
         * 
         */
        public Builder scheduleCron(@Nullable Output<String> scheduleCron) {
            $.scheduleCron = scheduleCron;
            return this;
        }

        /**
         * @param scheduleCron Custom cron expression for schedule
         * 
         * @return builder
         * 
         */
        public Builder scheduleCron(String scheduleCron) {
            return scheduleCron(Output.of(scheduleCron));
        }

        /**
         * @param scheduleDays List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
         * 
         * @return builder
         * 
         */
        public Builder scheduleDays(@Nullable Output<List<Integer>> scheduleDays) {
            $.scheduleDays = scheduleDays;
            return this;
        }

        /**
         * @param scheduleDays List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
         * 
         * @return builder
         * 
         */
        public Builder scheduleDays(List<Integer> scheduleDays) {
            return scheduleDays(Output.of(scheduleDays));
        }

        /**
         * @param scheduleDays List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
         * 
         * @return builder
         * 
         */
        public Builder scheduleDays(Integer... scheduleDays) {
            return scheduleDays(List.of(scheduleDays));
        }

        /**
         * @param scheduleHours List of hours to execute the job at if running on a schedule
         * 
         * @return builder
         * 
         */
        public Builder scheduleHours(@Nullable Output<List<Integer>> scheduleHours) {
            $.scheduleHours = scheduleHours;
            return this;
        }

        /**
         * @param scheduleHours List of hours to execute the job at if running on a schedule
         * 
         * @return builder
         * 
         */
        public Builder scheduleHours(List<Integer> scheduleHours) {
            return scheduleHours(Output.of(scheduleHours));
        }

        /**
         * @param scheduleHours List of hours to execute the job at if running on a schedule
         * 
         * @return builder
         * 
         */
        public Builder scheduleHours(Integer... scheduleHours) {
            return scheduleHours(List.of(scheduleHours));
        }

        /**
         * @param scheduleInterval Number of hours between job executions if running on a schedule
         * 
         * @return builder
         * 
         */
        public Builder scheduleInterval(@Nullable Output<Integer> scheduleInterval) {
            $.scheduleInterval = scheduleInterval;
            return this;
        }

        /**
         * @param scheduleInterval Number of hours between job executions if running on a schedule
         * 
         * @return builder
         * 
         */
        public Builder scheduleInterval(Integer scheduleInterval) {
            return scheduleInterval(Output.of(scheduleInterval));
        }

        /**
         * @param scheduleType Type of schedule to use, one of every*day/ days*of*week/ custom*cron/ interval_cron
         * 
         * @return builder
         * 
         */
        public Builder scheduleType(@Nullable Output<String> scheduleType) {
            $.scheduleType = scheduleType;
            return this;
        }

        /**
         * @param scheduleType Type of schedule to use, one of every*day/ days*of*week/ custom*cron/ interval_cron
         * 
         * @return builder
         * 
         */
        public Builder scheduleType(String scheduleType) {
            return scheduleType(Output.of(scheduleType));
        }

        /**
         * @param selfDeferring Whether this job defers on a previous run of itself
         * 
         * @return builder
         * 
         */
        public Builder selfDeferring(@Nullable Output<Boolean> selfDeferring) {
            $.selfDeferring = selfDeferring;
            return this;
        }

        /**
         * @param selfDeferring Whether this job defers on a previous run of itself
         * 
         * @return builder
         * 
         */
        public Builder selfDeferring(Boolean selfDeferring) {
            return selfDeferring(Output.of(selfDeferring));
        }

        /**
         * @param targetName Target name for the dbt profile
         * 
         * @return builder
         * 
         */
        public Builder targetName(@Nullable Output<String> targetName) {
            $.targetName = targetName;
            return this;
        }

        /**
         * @param targetName Target name for the dbt profile
         * 
         * @return builder
         * 
         */
        public Builder targetName(String targetName) {
            return targetName(Output.of(targetName));
        }

        /**
         * @param timeoutSeconds [Deprectated - Moved to execution.timeout_seconds] Number of seconds to allow the job to run before timing out
         * 
         * @return builder
         * 
         * @deprecated
         * Moved to execution.timeout_seconds
         * 
         */
        @Deprecated /* Moved to execution.timeout_seconds */
        public Builder timeoutSeconds(@Nullable Output<Integer> timeoutSeconds) {
            $.timeoutSeconds = timeoutSeconds;
            return this;
        }

        /**
         * @param timeoutSeconds [Deprectated - Moved to execution.timeout_seconds] Number of seconds to allow the job to run before timing out
         * 
         * @return builder
         * 
         * @deprecated
         * Moved to execution.timeout_seconds
         * 
         */
        @Deprecated /* Moved to execution.timeout_seconds */
        public Builder timeoutSeconds(Integer timeoutSeconds) {
            return timeoutSeconds(Output.of(timeoutSeconds));
        }

        /**
         * @param triggers Flags for which types of triggers to use, the values are `githubWebhook`, `gitProviderWebhook`, `schedule` and `onMerge`. All flags should be listed and set with `true` or `false`. When `onMerge` is `true`, all the other values must be false.\n\n`customBranchOnly` used to be allowed but has been deprecated from the API. The jobs will use the custom branch of the environment. Please remove the `customBranchOnly` from your config. \n\nTo create a job in a &#39;deactivated&#39; state, set all to `false`.
         * 
         * @return builder
         * 
         */
        public Builder triggers(Output<JobTriggersArgs> triggers) {
            $.triggers = triggers;
            return this;
        }

        /**
         * @param triggers Flags for which types of triggers to use, the values are `githubWebhook`, `gitProviderWebhook`, `schedule` and `onMerge`. All flags should be listed and set with `true` or `false`. When `onMerge` is `true`, all the other values must be false.\n\n`customBranchOnly` used to be allowed but has been deprecated from the API. The jobs will use the custom branch of the environment. Please remove the `customBranchOnly` from your config. \n\nTo create a job in a &#39;deactivated&#39; state, set all to `false`.
         * 
         * @return builder
         * 
         */
        public Builder triggers(JobTriggersArgs triggers) {
            return triggers(Output.of(triggers));
        }

        /**
         * @param triggersOnDraftPr Whether the CI job should be automatically triggered on draft PRs
         * 
         * @return builder
         * 
         */
        public Builder triggersOnDraftPr(@Nullable Output<Boolean> triggersOnDraftPr) {
            $.triggersOnDraftPr = triggersOnDraftPr;
            return this;
        }

        /**
         * @param triggersOnDraftPr Whether the CI job should be automatically triggered on draft PRs
         * 
         * @return builder
         * 
         */
        public Builder triggersOnDraftPr(Boolean triggersOnDraftPr) {
            return triggersOnDraftPr(Output.of(triggersOnDraftPr));
        }

        public JobArgs build() {
            if ($.environmentId == null) {
                throw new MissingRequiredPropertyException("JobArgs", "environmentId");
            }
            if ($.executeSteps == null) {
                throw new MissingRequiredPropertyException("JobArgs", "executeSteps");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("JobArgs", "projectId");
            }
            if ($.triggers == null) {
                throw new MissingRequiredPropertyException("JobArgs", "triggers");
            }
            return $;
        }
    }

}

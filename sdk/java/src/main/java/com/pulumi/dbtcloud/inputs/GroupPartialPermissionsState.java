// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dbtcloud.inputs.GroupPartialPermissionsGroupPermissionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupPartialPermissionsState extends com.pulumi.resources.ResourceArgs {

    public static final GroupPartialPermissionsState Empty = new GroupPartialPermissionsState();

    /**
     * Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.
     * 
     */
    @Import(name="assignByDefault")
    private @Nullable Output<Boolean> assignByDefault;

    /**
     * @return Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.
     * 
     */
    public Optional<Output<Boolean>> assignByDefault() {
        return Optional.ofNullable(this.assignByDefault);
    }

    /**
     * Partial permissions for the group. Those permissions will be added/removed when config is added/removed.
     * 
     */
    @Import(name="groupPermissions")
    private @Nullable Output<List<GroupPartialPermissionsGroupPermissionArgs>> groupPermissions;

    /**
     * @return Partial permissions for the group. Those permissions will be added/removed when config is added/removed.
     * 
     */
    public Optional<Output<List<GroupPartialPermissionsGroupPermissionArgs>>> groupPermissions() {
        return Optional.ofNullable(this.groupPermissions);
    }

    /**
     * The name of the group. This is used to identify an existing group
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the group. This is used to identify an existing group
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.
     * 
     */
    @Import(name="ssoMappingGroups")
    private @Nullable Output<List<String>> ssoMappingGroups;

    /**
     * @return Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.
     * 
     */
    public Optional<Output<List<String>>> ssoMappingGroups() {
        return Optional.ofNullable(this.ssoMappingGroups);
    }

    private GroupPartialPermissionsState() {}

    private GroupPartialPermissionsState(GroupPartialPermissionsState $) {
        this.assignByDefault = $.assignByDefault;
        this.groupPermissions = $.groupPermissions;
        this.name = $.name;
        this.ssoMappingGroups = $.ssoMappingGroups;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupPartialPermissionsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupPartialPermissionsState $;

        public Builder() {
            $ = new GroupPartialPermissionsState();
        }

        public Builder(GroupPartialPermissionsState defaults) {
            $ = new GroupPartialPermissionsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param assignByDefault Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.
         * 
         * @return builder
         * 
         */
        public Builder assignByDefault(@Nullable Output<Boolean> assignByDefault) {
            $.assignByDefault = assignByDefault;
            return this;
        }

        /**
         * @param assignByDefault Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.
         * 
         * @return builder
         * 
         */
        public Builder assignByDefault(Boolean assignByDefault) {
            return assignByDefault(Output.of(assignByDefault));
        }

        /**
         * @param groupPermissions Partial permissions for the group. Those permissions will be added/removed when config is added/removed.
         * 
         * @return builder
         * 
         */
        public Builder groupPermissions(@Nullable Output<List<GroupPartialPermissionsGroupPermissionArgs>> groupPermissions) {
            $.groupPermissions = groupPermissions;
            return this;
        }

        /**
         * @param groupPermissions Partial permissions for the group. Those permissions will be added/removed when config is added/removed.
         * 
         * @return builder
         * 
         */
        public Builder groupPermissions(List<GroupPartialPermissionsGroupPermissionArgs> groupPermissions) {
            return groupPermissions(Output.of(groupPermissions));
        }

        /**
         * @param groupPermissions Partial permissions for the group. Those permissions will be added/removed when config is added/removed.
         * 
         * @return builder
         * 
         */
        public Builder groupPermissions(GroupPartialPermissionsGroupPermissionArgs... groupPermissions) {
            return groupPermissions(List.of(groupPermissions));
        }

        /**
         * @param name The name of the group. This is used to identify an existing group
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the group. This is used to identify an existing group
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ssoMappingGroups Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.
         * 
         * @return builder
         * 
         */
        public Builder ssoMappingGroups(@Nullable Output<List<String>> ssoMappingGroups) {
            $.ssoMappingGroups = ssoMappingGroups;
            return this;
        }

        /**
         * @param ssoMappingGroups Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.
         * 
         * @return builder
         * 
         */
        public Builder ssoMappingGroups(List<String> ssoMappingGroups) {
            return ssoMappingGroups(Output.of(ssoMappingGroups));
        }

        /**
         * @param ssoMappingGroups Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.
         * 
         * @return builder
         * 
         */
        public Builder ssoMappingGroups(String... ssoMappingGroups) {
            return ssoMappingGroups(List.of(ssoMappingGroups));
        }

        public GroupPartialPermissionsState build() {
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.dbtcloud.outputs.GetProjectsProjectConnection;
import com.pulumi.dbtcloud.outputs.GetProjectsProjectRepository;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetProjectsProject {
    /**
     * @return Details for the connection linked to the project
     * 
     */
    private GetProjectsProjectConnection connection;
    /**
     * @return When the project was created
     * 
     */
    private String createdAt;
    /**
     * @return Subdirectory for the dbt project inside the git repo
     * 
     */
    private String dbtProjectSubdirectory;
    /**
     * @return Project description
     * 
     */
    private String description;
    /**
     * @return Project ID
     * 
     */
    private Integer id;
    /**
     * @return Project name
     * 
     */
    private String name;
    /**
     * @return Details for the repository linked to the project
     * 
     */
    private GetProjectsProjectRepository repository;
    /**
     * @return Semantic layer config ID
     * 
     */
    private Integer semanticLayerConfigId;
    /**
     * @return When the project was last updated
     * 
     */
    private String updatedAt;

    private GetProjectsProject() {}
    /**
     * @return Details for the connection linked to the project
     * 
     */
    public GetProjectsProjectConnection connection() {
        return this.connection;
    }
    /**
     * @return When the project was created
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Subdirectory for the dbt project inside the git repo
     * 
     */
    public String dbtProjectSubdirectory() {
        return this.dbtProjectSubdirectory;
    }
    /**
     * @return Project description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Project ID
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return Project name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Details for the repository linked to the project
     * 
     */
    public GetProjectsProjectRepository repository() {
        return this.repository;
    }
    /**
     * @return Semantic layer config ID
     * 
     */
    public Integer semanticLayerConfigId() {
        return this.semanticLayerConfigId;
    }
    /**
     * @return When the project was last updated
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectsProject defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetProjectsProjectConnection connection;
        private String createdAt;
        private String dbtProjectSubdirectory;
        private String description;
        private Integer id;
        private String name;
        private GetProjectsProjectRepository repository;
        private Integer semanticLayerConfigId;
        private String updatedAt;
        public Builder() {}
        public Builder(GetProjectsProject defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connection = defaults.connection;
    	      this.createdAt = defaults.createdAt;
    	      this.dbtProjectSubdirectory = defaults.dbtProjectSubdirectory;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.repository = defaults.repository;
    	      this.semanticLayerConfigId = defaults.semanticLayerConfigId;
    	      this.updatedAt = defaults.updatedAt;
        }

        @CustomType.Setter
        public Builder connection(GetProjectsProjectConnection connection) {
            if (connection == null) {
              throw new MissingRequiredPropertyException("GetProjectsProject", "connection");
            }
            this.connection = connection;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetProjectsProject", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder dbtProjectSubdirectory(String dbtProjectSubdirectory) {
            if (dbtProjectSubdirectory == null) {
              throw new MissingRequiredPropertyException("GetProjectsProject", "dbtProjectSubdirectory");
            }
            this.dbtProjectSubdirectory = dbtProjectSubdirectory;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetProjectsProject", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProjectsProject", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetProjectsProject", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder repository(GetProjectsProjectRepository repository) {
            if (repository == null) {
              throw new MissingRequiredPropertyException("GetProjectsProject", "repository");
            }
            this.repository = repository;
            return this;
        }
        @CustomType.Setter
        public Builder semanticLayerConfigId(Integer semanticLayerConfigId) {
            if (semanticLayerConfigId == null) {
              throw new MissingRequiredPropertyException("GetProjectsProject", "semanticLayerConfigId");
            }
            this.semanticLayerConfigId = semanticLayerConfigId;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetProjectsProject", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        public GetProjectsProject build() {
            final var _resultValue = new GetProjectsProject();
            _resultValue.connection = connection;
            _resultValue.createdAt = createdAt;
            _resultValue.dbtProjectSubdirectory = dbtProjectSubdirectory;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.repository = repository;
            _resultValue.semanticLayerConfigId = semanticLayerConfigId;
            _resultValue.updatedAt = updatedAt;
            return _resultValue;
        }
    }
}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.dbtcloud.Utilities;
import com.pulumi.dbtcloud.inputs.GetAthenaCredentialArgs;
import com.pulumi.dbtcloud.inputs.GetAthenaCredentialPlainArgs;
import com.pulumi.dbtcloud.inputs.GetAzureDevOpsProjectArgs;
import com.pulumi.dbtcloud.inputs.GetAzureDevOpsProjectPlainArgs;
import com.pulumi.dbtcloud.inputs.GetAzureDevOpsRepositoryArgs;
import com.pulumi.dbtcloud.inputs.GetAzureDevOpsRepositoryPlainArgs;
import com.pulumi.dbtcloud.inputs.GetBigQueryConnectionArgs;
import com.pulumi.dbtcloud.inputs.GetBigQueryConnectionPlainArgs;
import com.pulumi.dbtcloud.inputs.GetBigQueryCredentialArgs;
import com.pulumi.dbtcloud.inputs.GetBigQueryCredentialPlainArgs;
import com.pulumi.dbtcloud.inputs.GetConnectionArgs;
import com.pulumi.dbtcloud.inputs.GetConnectionPlainArgs;
import com.pulumi.dbtcloud.inputs.GetDatabricksCredentialArgs;
import com.pulumi.dbtcloud.inputs.GetDatabricksCredentialPlainArgs;
import com.pulumi.dbtcloud.inputs.GetEnvironmentArgs;
import com.pulumi.dbtcloud.inputs.GetEnvironmentPlainArgs;
import com.pulumi.dbtcloud.inputs.GetEnvironmentVariableArgs;
import com.pulumi.dbtcloud.inputs.GetEnvironmentVariablePlainArgs;
import com.pulumi.dbtcloud.inputs.GetEnvironmentsArgs;
import com.pulumi.dbtcloud.inputs.GetEnvironmentsPlainArgs;
import com.pulumi.dbtcloud.inputs.GetExtendedAttributesArgs;
import com.pulumi.dbtcloud.inputs.GetExtendedAttributesPlainArgs;
import com.pulumi.dbtcloud.inputs.GetGlobalConnectionArgs;
import com.pulumi.dbtcloud.inputs.GetGlobalConnectionPlainArgs;
import com.pulumi.dbtcloud.inputs.GetGroupArgs;
import com.pulumi.dbtcloud.inputs.GetGroupPlainArgs;
import com.pulumi.dbtcloud.inputs.GetGroupUsersArgs;
import com.pulumi.dbtcloud.inputs.GetGroupUsersPlainArgs;
import com.pulumi.dbtcloud.inputs.GetJobArgs;
import com.pulumi.dbtcloud.inputs.GetJobPlainArgs;
import com.pulumi.dbtcloud.inputs.GetJobsArgs;
import com.pulumi.dbtcloud.inputs.GetJobsPlainArgs;
import com.pulumi.dbtcloud.inputs.GetModelNotificationsArgs;
import com.pulumi.dbtcloud.inputs.GetModelNotificationsPlainArgs;
import com.pulumi.dbtcloud.inputs.GetNotificationArgs;
import com.pulumi.dbtcloud.inputs.GetNotificationPlainArgs;
import com.pulumi.dbtcloud.inputs.GetPostgresCredentialArgs;
import com.pulumi.dbtcloud.inputs.GetPostgresCredentialPlainArgs;
import com.pulumi.dbtcloud.inputs.GetPrivatelinkEndpointArgs;
import com.pulumi.dbtcloud.inputs.GetPrivatelinkEndpointPlainArgs;
import com.pulumi.dbtcloud.inputs.GetProjectArgs;
import com.pulumi.dbtcloud.inputs.GetProjectPlainArgs;
import com.pulumi.dbtcloud.inputs.GetProjectsArgs;
import com.pulumi.dbtcloud.inputs.GetProjectsPlainArgs;
import com.pulumi.dbtcloud.inputs.GetRepositoryArgs;
import com.pulumi.dbtcloud.inputs.GetRepositoryPlainArgs;
import com.pulumi.dbtcloud.inputs.GetServiceTokenArgs;
import com.pulumi.dbtcloud.inputs.GetServiceTokenPlainArgs;
import com.pulumi.dbtcloud.inputs.GetSnowflakeCredentialArgs;
import com.pulumi.dbtcloud.inputs.GetSnowflakeCredentialPlainArgs;
import com.pulumi.dbtcloud.inputs.GetStarburstCredentialArgs;
import com.pulumi.dbtcloud.inputs.GetStarburstCredentialPlainArgs;
import com.pulumi.dbtcloud.inputs.GetUserArgs;
import com.pulumi.dbtcloud.inputs.GetUserGroupsArgs;
import com.pulumi.dbtcloud.inputs.GetUserGroupsPlainArgs;
import com.pulumi.dbtcloud.inputs.GetUserPlainArgs;
import com.pulumi.dbtcloud.inputs.GetWebhookArgs;
import com.pulumi.dbtcloud.inputs.GetWebhookPlainArgs;
import com.pulumi.dbtcloud.outputs.GetAthenaCredentialResult;
import com.pulumi.dbtcloud.outputs.GetAzureDevOpsProjectResult;
import com.pulumi.dbtcloud.outputs.GetAzureDevOpsRepositoryResult;
import com.pulumi.dbtcloud.outputs.GetBigQueryConnectionResult;
import com.pulumi.dbtcloud.outputs.GetBigQueryCredentialResult;
import com.pulumi.dbtcloud.outputs.GetConnectionResult;
import com.pulumi.dbtcloud.outputs.GetDatabricksCredentialResult;
import com.pulumi.dbtcloud.outputs.GetEnvironmentResult;
import com.pulumi.dbtcloud.outputs.GetEnvironmentVariableResult;
import com.pulumi.dbtcloud.outputs.GetEnvironmentsResult;
import com.pulumi.dbtcloud.outputs.GetExtendedAttributesResult;
import com.pulumi.dbtcloud.outputs.GetGlobalConnectionResult;
import com.pulumi.dbtcloud.outputs.GetGlobalConnectionsResult;
import com.pulumi.dbtcloud.outputs.GetGroupResult;
import com.pulumi.dbtcloud.outputs.GetGroupUsersResult;
import com.pulumi.dbtcloud.outputs.GetJobResult;
import com.pulumi.dbtcloud.outputs.GetJobsResult;
import com.pulumi.dbtcloud.outputs.GetModelNotificationsResult;
import com.pulumi.dbtcloud.outputs.GetNotificationResult;
import com.pulumi.dbtcloud.outputs.GetPostgresCredentialResult;
import com.pulumi.dbtcloud.outputs.GetPrivatelinkEndpointResult;
import com.pulumi.dbtcloud.outputs.GetProjectResult;
import com.pulumi.dbtcloud.outputs.GetProjectsResult;
import com.pulumi.dbtcloud.outputs.GetRepositoryResult;
import com.pulumi.dbtcloud.outputs.GetServiceTokenResult;
import com.pulumi.dbtcloud.outputs.GetSnowflakeCredentialResult;
import com.pulumi.dbtcloud.outputs.GetStarburstCredentialResult;
import com.pulumi.dbtcloud.outputs.GetUserGroupsResult;
import com.pulumi.dbtcloud.outputs.GetUserResult;
import com.pulumi.dbtcloud.outputs.GetUsersResult;
import com.pulumi.dbtcloud.outputs.GetWebhookResult;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.resources.InvokeArgs;
import java.util.concurrent.CompletableFuture;

public final class DbtcloudFunctions {
    /**
     * Athena credential data source
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetAthenaCredentialArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DbtcloudFunctions.getAthenaCredential(GetAthenaCredentialArgs.builder()
     *             .projectId(123)
     *             .credentialId(456)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAthenaCredentialResult> getAthenaCredential(GetAthenaCredentialArgs args) {
        return getAthenaCredential(args, InvokeOptions.Empty);
    }
    /**
     * Athena credential data source
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetAthenaCredentialArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DbtcloudFunctions.getAthenaCredential(GetAthenaCredentialArgs.builder()
     *             .projectId(123)
     *             .credentialId(456)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAthenaCredentialResult> getAthenaCredentialPlain(GetAthenaCredentialPlainArgs args) {
        return getAthenaCredentialPlain(args, InvokeOptions.Empty);
    }
    /**
     * Athena credential data source
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetAthenaCredentialArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DbtcloudFunctions.getAthenaCredential(GetAthenaCredentialArgs.builder()
     *             .projectId(123)
     *             .credentialId(456)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAthenaCredentialResult> getAthenaCredential(GetAthenaCredentialArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getAthenaCredential:getAthenaCredential", TypeShape.of(GetAthenaCredentialResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Athena credential data source
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetAthenaCredentialArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DbtcloudFunctions.getAthenaCredential(GetAthenaCredentialArgs.builder()
     *             .projectId(123)
     *             .credentialId(456)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAthenaCredentialResult> getAthenaCredential(GetAthenaCredentialArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getAthenaCredential:getAthenaCredential", TypeShape.of(GetAthenaCredentialResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Athena credential data source
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetAthenaCredentialArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DbtcloudFunctions.getAthenaCredential(GetAthenaCredentialArgs.builder()
     *             .projectId(123)
     *             .credentialId(456)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAthenaCredentialResult> getAthenaCredentialPlain(GetAthenaCredentialPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getAthenaCredential:getAthenaCredential", TypeShape.of(GetAthenaCredentialResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the ID of an Azure Dev Ops project
     * based on its name.
     * 
     * This data source requires connecting with a user token and doesn&#39;t work with a service token.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetAzureDevOpsProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myAdoProject = DbtcloudFunctions.getAzureDevOpsProject(GetAzureDevOpsProjectArgs.builder()
     *             .name("my-project-name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAzureDevOpsProjectResult> getAzureDevOpsProject(GetAzureDevOpsProjectArgs args) {
        return getAzureDevOpsProject(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the ID of an Azure Dev Ops project
     * based on its name.
     * 
     * This data source requires connecting with a user token and doesn&#39;t work with a service token.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetAzureDevOpsProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myAdoProject = DbtcloudFunctions.getAzureDevOpsProject(GetAzureDevOpsProjectArgs.builder()
     *             .name("my-project-name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAzureDevOpsProjectResult> getAzureDevOpsProjectPlain(GetAzureDevOpsProjectPlainArgs args) {
        return getAzureDevOpsProjectPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the ID of an Azure Dev Ops project
     * based on its name.
     * 
     * This data source requires connecting with a user token and doesn&#39;t work with a service token.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetAzureDevOpsProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myAdoProject = DbtcloudFunctions.getAzureDevOpsProject(GetAzureDevOpsProjectArgs.builder()
     *             .name("my-project-name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAzureDevOpsProjectResult> getAzureDevOpsProject(GetAzureDevOpsProjectArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getAzureDevOpsProject:getAzureDevOpsProject", TypeShape.of(GetAzureDevOpsProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the ID of an Azure Dev Ops project
     * based on its name.
     * 
     * This data source requires connecting with a user token and doesn&#39;t work with a service token.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetAzureDevOpsProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myAdoProject = DbtcloudFunctions.getAzureDevOpsProject(GetAzureDevOpsProjectArgs.builder()
     *             .name("my-project-name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAzureDevOpsProjectResult> getAzureDevOpsProject(GetAzureDevOpsProjectArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getAzureDevOpsProject:getAzureDevOpsProject", TypeShape.of(GetAzureDevOpsProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the ID of an Azure Dev Ops project
     * based on its name.
     * 
     * This data source requires connecting with a user token and doesn&#39;t work with a service token.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetAzureDevOpsProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myAdoProject = DbtcloudFunctions.getAzureDevOpsProject(GetAzureDevOpsProjectArgs.builder()
     *             .name("my-project-name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAzureDevOpsProjectResult> getAzureDevOpsProjectPlain(GetAzureDevOpsProjectPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getAzureDevOpsProject:getAzureDevOpsProject", TypeShape.of(GetAzureDevOpsProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the ID and details of an Azure Dev Ops repository
     * based on its name and the ID of the Azure Dev Ops project it belongs to.
     * 
     * This data source requires connecting with a user token and doesn&#39;t work with a service token.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetAzureDevOpsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myAdoRepository = DbtcloudFunctions.getAzureDevOpsRepository(GetAzureDevOpsRepositoryArgs.builder()
     *             .name("my-repo-name")
     *             .azureDevOpsProjectId(myAdoProject.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAzureDevOpsRepositoryResult> getAzureDevOpsRepository(GetAzureDevOpsRepositoryArgs args) {
        return getAzureDevOpsRepository(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the ID and details of an Azure Dev Ops repository
     * based on its name and the ID of the Azure Dev Ops project it belongs to.
     * 
     * This data source requires connecting with a user token and doesn&#39;t work with a service token.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetAzureDevOpsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myAdoRepository = DbtcloudFunctions.getAzureDevOpsRepository(GetAzureDevOpsRepositoryArgs.builder()
     *             .name("my-repo-name")
     *             .azureDevOpsProjectId(myAdoProject.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAzureDevOpsRepositoryResult> getAzureDevOpsRepositoryPlain(GetAzureDevOpsRepositoryPlainArgs args) {
        return getAzureDevOpsRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the ID and details of an Azure Dev Ops repository
     * based on its name and the ID of the Azure Dev Ops project it belongs to.
     * 
     * This data source requires connecting with a user token and doesn&#39;t work with a service token.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetAzureDevOpsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myAdoRepository = DbtcloudFunctions.getAzureDevOpsRepository(GetAzureDevOpsRepositoryArgs.builder()
     *             .name("my-repo-name")
     *             .azureDevOpsProjectId(myAdoProject.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAzureDevOpsRepositoryResult> getAzureDevOpsRepository(GetAzureDevOpsRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getAzureDevOpsRepository:getAzureDevOpsRepository", TypeShape.of(GetAzureDevOpsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the ID and details of an Azure Dev Ops repository
     * based on its name and the ID of the Azure Dev Ops project it belongs to.
     * 
     * This data source requires connecting with a user token and doesn&#39;t work with a service token.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetAzureDevOpsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myAdoRepository = DbtcloudFunctions.getAzureDevOpsRepository(GetAzureDevOpsRepositoryArgs.builder()
     *             .name("my-repo-name")
     *             .azureDevOpsProjectId(myAdoProject.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAzureDevOpsRepositoryResult> getAzureDevOpsRepository(GetAzureDevOpsRepositoryArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getAzureDevOpsRepository:getAzureDevOpsRepository", TypeShape.of(GetAzureDevOpsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the ID and details of an Azure Dev Ops repository
     * based on its name and the ID of the Azure Dev Ops project it belongs to.
     * 
     * This data source requires connecting with a user token and doesn&#39;t work with a service token.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetAzureDevOpsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myAdoRepository = DbtcloudFunctions.getAzureDevOpsRepository(GetAzureDevOpsRepositoryArgs.builder()
     *             .name("my-repo-name")
     *             .azureDevOpsProjectId(myAdoProject.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAzureDevOpsRepositoryResult> getAzureDevOpsRepositoryPlain(GetAzureDevOpsRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getAzureDevOpsRepository:getAzureDevOpsRepository", TypeShape.of(GetAzureDevOpsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetBigQueryConnectionResult> getBigQueryConnection(GetBigQueryConnectionArgs args) {
        return getBigQueryConnection(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetBigQueryConnectionResult> getBigQueryConnectionPlain(GetBigQueryConnectionPlainArgs args) {
        return getBigQueryConnectionPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetBigQueryConnectionResult> getBigQueryConnection(GetBigQueryConnectionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getBigQueryConnection:getBigQueryConnection", TypeShape.of(GetBigQueryConnectionResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetBigQueryConnectionResult> getBigQueryConnection(GetBigQueryConnectionArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getBigQueryConnection:getBigQueryConnection", TypeShape.of(GetBigQueryConnectionResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetBigQueryConnectionResult> getBigQueryConnectionPlain(GetBigQueryConnectionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getBigQueryConnection:getBigQueryConnection", TypeShape.of(GetBigQueryConnectionResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetBigQueryCredentialResult> getBigQueryCredential(GetBigQueryCredentialArgs args) {
        return getBigQueryCredential(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetBigQueryCredentialResult> getBigQueryCredentialPlain(GetBigQueryCredentialPlainArgs args) {
        return getBigQueryCredentialPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetBigQueryCredentialResult> getBigQueryCredential(GetBigQueryCredentialArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getBigQueryCredential:getBigQueryCredential", TypeShape.of(GetBigQueryCredentialResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetBigQueryCredentialResult> getBigQueryCredential(GetBigQueryCredentialArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getBigQueryCredential:getBigQueryCredential", TypeShape.of(GetBigQueryCredentialResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetBigQueryCredentialResult> getBigQueryCredentialPlain(GetBigQueryCredentialPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getBigQueryCredential:getBigQueryCredential", TypeShape.of(GetBigQueryCredentialResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetConnectionResult> getConnection(GetConnectionArgs args) {
        return getConnection(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetConnectionResult> getConnectionPlain(GetConnectionPlainArgs args) {
        return getConnectionPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetConnectionResult> getConnection(GetConnectionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getConnection:getConnection", TypeShape.of(GetConnectionResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetConnectionResult> getConnection(GetConnectionArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getConnection:getConnection", TypeShape.of(GetConnectionResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetConnectionResult> getConnectionPlain(GetConnectionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getConnection:getConnection", TypeShape.of(GetConnectionResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetDatabricksCredentialResult> getDatabricksCredential(GetDatabricksCredentialArgs args) {
        return getDatabricksCredential(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetDatabricksCredentialResult> getDatabricksCredentialPlain(GetDatabricksCredentialPlainArgs args) {
        return getDatabricksCredentialPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetDatabricksCredentialResult> getDatabricksCredential(GetDatabricksCredentialArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getDatabricksCredential:getDatabricksCredential", TypeShape.of(GetDatabricksCredentialResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetDatabricksCredentialResult> getDatabricksCredential(GetDatabricksCredentialArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getDatabricksCredential:getDatabricksCredential", TypeShape.of(GetDatabricksCredentialResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetDatabricksCredentialResult> getDatabricksCredentialPlain(GetDatabricksCredentialPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getDatabricksCredential:getDatabricksCredential", TypeShape.of(GetDatabricksCredentialResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve data for a single environment
     * 
     */
    public static Output<GetEnvironmentResult> getEnvironment(GetEnvironmentArgs args) {
        return getEnvironment(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve data for a single environment
     * 
     */
    public static CompletableFuture<GetEnvironmentResult> getEnvironmentPlain(GetEnvironmentPlainArgs args) {
        return getEnvironmentPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve data for a single environment
     * 
     */
    public static Output<GetEnvironmentResult> getEnvironment(GetEnvironmentArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getEnvironment:getEnvironment", TypeShape.of(GetEnvironmentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve data for a single environment
     * 
     */
    public static Output<GetEnvironmentResult> getEnvironment(GetEnvironmentArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getEnvironment:getEnvironment", TypeShape.of(GetEnvironmentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve data for a single environment
     * 
     */
    public static CompletableFuture<GetEnvironmentResult> getEnvironmentPlain(GetEnvironmentPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getEnvironment:getEnvironment", TypeShape.of(GetEnvironmentResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetEnvironmentVariableResult> getEnvironmentVariable(GetEnvironmentVariableArgs args) {
        return getEnvironmentVariable(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetEnvironmentVariableResult> getEnvironmentVariablePlain(GetEnvironmentVariablePlainArgs args) {
        return getEnvironmentVariablePlain(args, InvokeOptions.Empty);
    }
    public static Output<GetEnvironmentVariableResult> getEnvironmentVariable(GetEnvironmentVariableArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getEnvironmentVariable:getEnvironmentVariable", TypeShape.of(GetEnvironmentVariableResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetEnvironmentVariableResult> getEnvironmentVariable(GetEnvironmentVariableArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getEnvironmentVariable:getEnvironmentVariable", TypeShape.of(GetEnvironmentVariableResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetEnvironmentVariableResult> getEnvironmentVariablePlain(GetEnvironmentVariablePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getEnvironmentVariable:getEnvironmentVariable", TypeShape.of(GetEnvironmentVariableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve data for multiple environments
     * 
     */
    public static Output<GetEnvironmentsResult> getEnvironments() {
        return getEnvironments(GetEnvironmentsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve data for multiple environments
     * 
     */
    public static CompletableFuture<GetEnvironmentsResult> getEnvironmentsPlain() {
        return getEnvironmentsPlain(GetEnvironmentsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve data for multiple environments
     * 
     */
    public static Output<GetEnvironmentsResult> getEnvironments(GetEnvironmentsArgs args) {
        return getEnvironments(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve data for multiple environments
     * 
     */
    public static CompletableFuture<GetEnvironmentsResult> getEnvironmentsPlain(GetEnvironmentsPlainArgs args) {
        return getEnvironmentsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve data for multiple environments
     * 
     */
    public static Output<GetEnvironmentsResult> getEnvironments(GetEnvironmentsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getEnvironments:getEnvironments", TypeShape.of(GetEnvironmentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve data for multiple environments
     * 
     */
    public static Output<GetEnvironmentsResult> getEnvironments(GetEnvironmentsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getEnvironments:getEnvironments", TypeShape.of(GetEnvironmentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve data for multiple environments
     * 
     */
    public static CompletableFuture<GetEnvironmentsResult> getEnvironmentsPlain(GetEnvironmentsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getEnvironments:getEnvironments", TypeShape.of(GetEnvironmentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetExtendedAttributesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myExtendedAttributes = DbtcloudFunctions.getExtendedAttributes(GetExtendedAttributesArgs.builder()
     *             .extendedAttributesId(12345)
     *             .projectId(6789)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetExtendedAttributesResult> getExtendedAttributes(GetExtendedAttributesArgs args) {
        return getExtendedAttributes(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetExtendedAttributesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myExtendedAttributes = DbtcloudFunctions.getExtendedAttributes(GetExtendedAttributesArgs.builder()
     *             .extendedAttributesId(12345)
     *             .projectId(6789)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetExtendedAttributesResult> getExtendedAttributesPlain(GetExtendedAttributesPlainArgs args) {
        return getExtendedAttributesPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetExtendedAttributesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myExtendedAttributes = DbtcloudFunctions.getExtendedAttributes(GetExtendedAttributesArgs.builder()
     *             .extendedAttributesId(12345)
     *             .projectId(6789)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetExtendedAttributesResult> getExtendedAttributes(GetExtendedAttributesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getExtendedAttributes:getExtendedAttributes", TypeShape.of(GetExtendedAttributesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetExtendedAttributesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myExtendedAttributes = DbtcloudFunctions.getExtendedAttributes(GetExtendedAttributesArgs.builder()
     *             .extendedAttributesId(12345)
     *             .projectId(6789)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetExtendedAttributesResult> getExtendedAttributes(GetExtendedAttributesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getExtendedAttributes:getExtendedAttributes", TypeShape.of(GetExtendedAttributesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetExtendedAttributesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myExtendedAttributes = DbtcloudFunctions.getExtendedAttributes(GetExtendedAttributesArgs.builder()
     *             .extendedAttributesId(12345)
     *             .projectId(6789)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetExtendedAttributesResult> getExtendedAttributesPlain(GetExtendedAttributesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getExtendedAttributes:getExtendedAttributes", TypeShape.of(GetExtendedAttributesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetGlobalConnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myConnection = DbtcloudFunctions.getGlobalConnection(GetGlobalConnectionArgs.builder()
     *             .id(1234)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGlobalConnectionResult> getGlobalConnection(GetGlobalConnectionArgs args) {
        return getGlobalConnection(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetGlobalConnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myConnection = DbtcloudFunctions.getGlobalConnection(GetGlobalConnectionArgs.builder()
     *             .id(1234)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGlobalConnectionResult> getGlobalConnectionPlain(GetGlobalConnectionPlainArgs args) {
        return getGlobalConnectionPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetGlobalConnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myConnection = DbtcloudFunctions.getGlobalConnection(GetGlobalConnectionArgs.builder()
     *             .id(1234)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGlobalConnectionResult> getGlobalConnection(GetGlobalConnectionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getGlobalConnection:getGlobalConnection", TypeShape.of(GetGlobalConnectionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetGlobalConnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myConnection = DbtcloudFunctions.getGlobalConnection(GetGlobalConnectionArgs.builder()
     *             .id(1234)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGlobalConnectionResult> getGlobalConnection(GetGlobalConnectionArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getGlobalConnection:getGlobalConnection", TypeShape.of(GetGlobalConnectionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetGlobalConnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myConnection = DbtcloudFunctions.getGlobalConnection(GetGlobalConnectionArgs.builder()
     *             .id(1234)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGlobalConnectionResult> getGlobalConnectionPlain(GetGlobalConnectionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getGlobalConnection:getGlobalConnection", TypeShape.of(GetGlobalConnectionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * All the connections created on the account with some summary information, like their name, type, when they were created/updated and the number of environments using them.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myConnections = DbtcloudFunctions.getGlobalConnections(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGlobalConnectionsResult> getGlobalConnections() {
        return getGlobalConnections(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * All the connections created on the account with some summary information, like their name, type, when they were created/updated and the number of environments using them.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myConnections = DbtcloudFunctions.getGlobalConnections(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGlobalConnectionsResult> getGlobalConnectionsPlain() {
        return getGlobalConnectionsPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * All the connections created on the account with some summary information, like their name, type, when they were created/updated and the number of environments using them.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myConnections = DbtcloudFunctions.getGlobalConnections(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGlobalConnectionsResult> getGlobalConnections(InvokeArgs args) {
        return getGlobalConnections(args, InvokeOptions.Empty);
    }
    /**
     * All the connections created on the account with some summary information, like their name, type, when they were created/updated and the number of environments using them.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myConnections = DbtcloudFunctions.getGlobalConnections(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGlobalConnectionsResult> getGlobalConnectionsPlain(InvokeArgs args) {
        return getGlobalConnectionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * All the connections created on the account with some summary information, like their name, type, when they were created/updated and the number of environments using them.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myConnections = DbtcloudFunctions.getGlobalConnections(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGlobalConnectionsResult> getGlobalConnections(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getGlobalConnections:getGlobalConnections", TypeShape.of(GetGlobalConnectionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * All the connections created on the account with some summary information, like their name, type, when they were created/updated and the number of environments using them.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myConnections = DbtcloudFunctions.getGlobalConnections(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGlobalConnectionsResult> getGlobalConnections(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getGlobalConnections:getGlobalConnections", TypeShape.of(GetGlobalConnectionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * All the connections created on the account with some summary information, like their name, type, when they were created/updated and the number of environments using them.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myConnections = DbtcloudFunctions.getGlobalConnections(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGlobalConnectionsResult> getGlobalConnectionsPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getGlobalConnections:getGlobalConnections", TypeShape.of(GetGlobalConnectionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve group details
     * 
     */
    public static Output<GetGroupResult> getGroup(GetGroupArgs args) {
        return getGroup(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve group details
     * 
     */
    public static CompletableFuture<GetGroupResult> getGroupPlain(GetGroupPlainArgs args) {
        return getGroupPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve group details
     * 
     */
    public static Output<GetGroupResult> getGroup(GetGroupArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getGroup:getGroup", TypeShape.of(GetGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve group details
     * 
     */
    public static Output<GetGroupResult> getGroup(GetGroupArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getGroup:getGroup", TypeShape.of(GetGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve group details
     * 
     */
    public static CompletableFuture<GetGroupResult> getGroupPlain(GetGroupPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getGroup:getGroup", TypeShape.of(GetGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns a list of users assigned to a specific dbt Cloud group
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetGroupUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myGroupUsers = DbtcloudFunctions.getGroupUsers(GetGroupUsersArgs.builder()
     *             .groupId(1234)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGroupUsersResult> getGroupUsers(GetGroupUsersArgs args) {
        return getGroupUsers(args, InvokeOptions.Empty);
    }
    /**
     * Returns a list of users assigned to a specific dbt Cloud group
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetGroupUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myGroupUsers = DbtcloudFunctions.getGroupUsers(GetGroupUsersArgs.builder()
     *             .groupId(1234)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGroupUsersResult> getGroupUsersPlain(GetGroupUsersPlainArgs args) {
        return getGroupUsersPlain(args, InvokeOptions.Empty);
    }
    /**
     * Returns a list of users assigned to a specific dbt Cloud group
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetGroupUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myGroupUsers = DbtcloudFunctions.getGroupUsers(GetGroupUsersArgs.builder()
     *             .groupId(1234)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGroupUsersResult> getGroupUsers(GetGroupUsersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getGroupUsers:getGroupUsers", TypeShape.of(GetGroupUsersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns a list of users assigned to a specific dbt Cloud group
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetGroupUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myGroupUsers = DbtcloudFunctions.getGroupUsers(GetGroupUsersArgs.builder()
     *             .groupId(1234)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGroupUsersResult> getGroupUsers(GetGroupUsersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getGroupUsers:getGroupUsers", TypeShape.of(GetGroupUsersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns a list of users assigned to a specific dbt Cloud group
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetGroupUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myGroupUsers = DbtcloudFunctions.getGroupUsers(GetGroupUsersArgs.builder()
     *             .groupId(1234)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGroupUsersResult> getGroupUsersPlain(GetGroupUsersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getGroupUsers:getGroupUsers", TypeShape.of(GetGroupUsersResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetJobResult> getJob(GetJobArgs args) {
        return getJob(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetJobResult> getJobPlain(GetJobPlainArgs args) {
        return getJobPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetJobResult> getJob(GetJobArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getJob:getJob", TypeShape.of(GetJobResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetJobResult> getJob(GetJobArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getJob:getJob", TypeShape.of(GetJobResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetJobResult> getJobPlain(GetJobPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getJob:getJob", TypeShape.of(GetJobResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetJobsResult> getJobs() {
        return getJobs(GetJobsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetJobsResult> getJobsPlain() {
        return getJobsPlain(GetJobsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetJobsResult> getJobs(GetJobsArgs args) {
        return getJobs(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetJobsResult> getJobsPlain(GetJobsPlainArgs args) {
        return getJobsPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetJobsResult> getJobs(GetJobsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getJobs:getJobs", TypeShape.of(GetJobsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetJobsResult> getJobs(GetJobsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getJobs:getJobs", TypeShape.of(GetJobsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetJobsResult> getJobsPlain(GetJobsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getJobs:getJobs", TypeShape.of(GetJobsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get model notifications configuration for a dbt Cloud environment
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetModelNotificationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var prodModelNotifications = DbtcloudFunctions.getModelNotifications(GetModelNotificationsArgs.builder()
     *             .environmentId(prodEnvironment.environmentId())
     *             .build());
     * 
     *         final var qaModelNotifications = DbtcloudFunctions.getModelNotifications(GetModelNotificationsArgs.builder()
     *             .environmentId("12345")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetModelNotificationsResult> getModelNotifications(GetModelNotificationsArgs args) {
        return getModelNotifications(args, InvokeOptions.Empty);
    }
    /**
     * Get model notifications configuration for a dbt Cloud environment
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetModelNotificationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var prodModelNotifications = DbtcloudFunctions.getModelNotifications(GetModelNotificationsArgs.builder()
     *             .environmentId(prodEnvironment.environmentId())
     *             .build());
     * 
     *         final var qaModelNotifications = DbtcloudFunctions.getModelNotifications(GetModelNotificationsArgs.builder()
     *             .environmentId("12345")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetModelNotificationsResult> getModelNotificationsPlain(GetModelNotificationsPlainArgs args) {
        return getModelNotificationsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get model notifications configuration for a dbt Cloud environment
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetModelNotificationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var prodModelNotifications = DbtcloudFunctions.getModelNotifications(GetModelNotificationsArgs.builder()
     *             .environmentId(prodEnvironment.environmentId())
     *             .build());
     * 
     *         final var qaModelNotifications = DbtcloudFunctions.getModelNotifications(GetModelNotificationsArgs.builder()
     *             .environmentId("12345")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetModelNotificationsResult> getModelNotifications(GetModelNotificationsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getModelNotifications:getModelNotifications", TypeShape.of(GetModelNotificationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get model notifications configuration for a dbt Cloud environment
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetModelNotificationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var prodModelNotifications = DbtcloudFunctions.getModelNotifications(GetModelNotificationsArgs.builder()
     *             .environmentId(prodEnvironment.environmentId())
     *             .build());
     * 
     *         final var qaModelNotifications = DbtcloudFunctions.getModelNotifications(GetModelNotificationsArgs.builder()
     *             .environmentId("12345")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetModelNotificationsResult> getModelNotifications(GetModelNotificationsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getModelNotifications:getModelNotifications", TypeShape.of(GetModelNotificationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get model notifications configuration for a dbt Cloud environment
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetModelNotificationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var prodModelNotifications = DbtcloudFunctions.getModelNotifications(GetModelNotificationsArgs.builder()
     *             .environmentId(prodEnvironment.environmentId())
     *             .build());
     * 
     *         final var qaModelNotifications = DbtcloudFunctions.getModelNotifications(GetModelNotificationsArgs.builder()
     *             .environmentId("12345")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetModelNotificationsResult> getModelNotificationsPlain(GetModelNotificationsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getModelNotifications:getModelNotifications", TypeShape.of(GetModelNotificationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve notification details
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetNotificationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myNotification = DbtcloudFunctions.getNotification(GetNotificationArgs.builder()
     *             .notificationId(12345)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNotificationResult> getNotification(GetNotificationArgs args) {
        return getNotification(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve notification details
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetNotificationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myNotification = DbtcloudFunctions.getNotification(GetNotificationArgs.builder()
     *             .notificationId(12345)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNotificationResult> getNotificationPlain(GetNotificationPlainArgs args) {
        return getNotificationPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve notification details
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetNotificationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myNotification = DbtcloudFunctions.getNotification(GetNotificationArgs.builder()
     *             .notificationId(12345)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNotificationResult> getNotification(GetNotificationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getNotification:getNotification", TypeShape.of(GetNotificationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve notification details
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetNotificationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myNotification = DbtcloudFunctions.getNotification(GetNotificationArgs.builder()
     *             .notificationId(12345)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNotificationResult> getNotification(GetNotificationArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getNotification:getNotification", TypeShape.of(GetNotificationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve notification details
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetNotificationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myNotification = DbtcloudFunctions.getNotification(GetNotificationArgs.builder()
     *             .notificationId(12345)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNotificationResult> getNotificationPlain(GetNotificationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getNotification:getNotification", TypeShape.of(GetNotificationResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetPostgresCredentialResult> getPostgresCredential(GetPostgresCredentialArgs args) {
        return getPostgresCredential(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetPostgresCredentialResult> getPostgresCredentialPlain(GetPostgresCredentialPlainArgs args) {
        return getPostgresCredentialPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetPostgresCredentialResult> getPostgresCredential(GetPostgresCredentialArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getPostgresCredential:getPostgresCredential", TypeShape.of(GetPostgresCredentialResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetPostgresCredentialResult> getPostgresCredential(GetPostgresCredentialArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getPostgresCredential:getPostgresCredential", TypeShape.of(GetPostgresCredentialResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetPostgresCredentialResult> getPostgresCredentialPlain(GetPostgresCredentialPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getPostgresCredential:getPostgresCredential", TypeShape.of(GetPostgresCredentialResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetPrivatelinkEndpointArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testWithName = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .name("My Endpoint Name")
     *             .build());
     * 
     *         final var testWithUrl = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .privateLinkEndpointUrl("abc.privatelink.def.com")
     *             .build());
     * 
     *         // in case multiple endpoints have the same name or URL
     *         final var testWithNameAndUrl = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .name("My Endpoint Name")
     *             .privateLinkEndpointUrl("abc.privatelink.def.com")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrivatelinkEndpointResult> getPrivatelinkEndpoint() {
        return getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetPrivatelinkEndpointArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testWithName = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .name("My Endpoint Name")
     *             .build());
     * 
     *         final var testWithUrl = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .privateLinkEndpointUrl("abc.privatelink.def.com")
     *             .build());
     * 
     *         // in case multiple endpoints have the same name or URL
     *         final var testWithNameAndUrl = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .name("My Endpoint Name")
     *             .privateLinkEndpointUrl("abc.privatelink.def.com")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrivatelinkEndpointResult> getPrivatelinkEndpointPlain() {
        return getPrivatelinkEndpointPlain(GetPrivatelinkEndpointPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetPrivatelinkEndpointArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testWithName = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .name("My Endpoint Name")
     *             .build());
     * 
     *         final var testWithUrl = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .privateLinkEndpointUrl("abc.privatelink.def.com")
     *             .build());
     * 
     *         // in case multiple endpoints have the same name or URL
     *         final var testWithNameAndUrl = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .name("My Endpoint Name")
     *             .privateLinkEndpointUrl("abc.privatelink.def.com")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrivatelinkEndpointResult> getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs args) {
        return getPrivatelinkEndpoint(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetPrivatelinkEndpointArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testWithName = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .name("My Endpoint Name")
     *             .build());
     * 
     *         final var testWithUrl = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .privateLinkEndpointUrl("abc.privatelink.def.com")
     *             .build());
     * 
     *         // in case multiple endpoints have the same name or URL
     *         final var testWithNameAndUrl = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .name("My Endpoint Name")
     *             .privateLinkEndpointUrl("abc.privatelink.def.com")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrivatelinkEndpointResult> getPrivatelinkEndpointPlain(GetPrivatelinkEndpointPlainArgs args) {
        return getPrivatelinkEndpointPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetPrivatelinkEndpointArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testWithName = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .name("My Endpoint Name")
     *             .build());
     * 
     *         final var testWithUrl = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .privateLinkEndpointUrl("abc.privatelink.def.com")
     *             .build());
     * 
     *         // in case multiple endpoints have the same name or URL
     *         final var testWithNameAndUrl = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .name("My Endpoint Name")
     *             .privateLinkEndpointUrl("abc.privatelink.def.com")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrivatelinkEndpointResult> getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getPrivatelinkEndpoint:getPrivatelinkEndpoint", TypeShape.of(GetPrivatelinkEndpointResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetPrivatelinkEndpointArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testWithName = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .name("My Endpoint Name")
     *             .build());
     * 
     *         final var testWithUrl = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .privateLinkEndpointUrl("abc.privatelink.def.com")
     *             .build());
     * 
     *         // in case multiple endpoints have the same name or URL
     *         final var testWithNameAndUrl = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .name("My Endpoint Name")
     *             .privateLinkEndpointUrl("abc.privatelink.def.com")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrivatelinkEndpointResult> getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getPrivatelinkEndpoint:getPrivatelinkEndpoint", TypeShape.of(GetPrivatelinkEndpointResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetPrivatelinkEndpointArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testWithName = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .name("My Endpoint Name")
     *             .build());
     * 
     *         final var testWithUrl = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .privateLinkEndpointUrl("abc.privatelink.def.com")
     *             .build());
     * 
     *         // in case multiple endpoints have the same name or URL
     *         final var testWithNameAndUrl = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()
     *             .name("My Endpoint Name")
     *             .privateLinkEndpointUrl("abc.privatelink.def.com")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrivatelinkEndpointResult> getPrivatelinkEndpointPlain(GetPrivatelinkEndpointPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getPrivatelinkEndpoint:getPrivatelinkEndpoint", TypeShape.of(GetPrivatelinkEndpointResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // projects data sources can use the project_id parameter (preferred uniqueness is ensured)
     *         final var testProject = DbtcloudFunctions.getProject(GetProjectArgs.builder()
     *             .projectId(dbtCloudProjectId)
     *             .build());
     * 
     *         // or they can use project names
     *         // the provider will raise an error if more than one project is found with the same name
     *         final var anotherTestProject = DbtcloudFunctions.getProject(GetProjectArgs.builder()
     *             .name("My other project name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectResult> getProject() {
        return getProject(GetProjectArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // projects data sources can use the project_id parameter (preferred uniqueness is ensured)
     *         final var testProject = DbtcloudFunctions.getProject(GetProjectArgs.builder()
     *             .projectId(dbtCloudProjectId)
     *             .build());
     * 
     *         // or they can use project names
     *         // the provider will raise an error if more than one project is found with the same name
     *         final var anotherTestProject = DbtcloudFunctions.getProject(GetProjectArgs.builder()
     *             .name("My other project name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain() {
        return getProjectPlain(GetProjectPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // projects data sources can use the project_id parameter (preferred uniqueness is ensured)
     *         final var testProject = DbtcloudFunctions.getProject(GetProjectArgs.builder()
     *             .projectId(dbtCloudProjectId)
     *             .build());
     * 
     *         // or they can use project names
     *         // the provider will raise an error if more than one project is found with the same name
     *         final var anotherTestProject = DbtcloudFunctions.getProject(GetProjectArgs.builder()
     *             .name("My other project name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectResult> getProject(GetProjectArgs args) {
        return getProject(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // projects data sources can use the project_id parameter (preferred uniqueness is ensured)
     *         final var testProject = DbtcloudFunctions.getProject(GetProjectArgs.builder()
     *             .projectId(dbtCloudProjectId)
     *             .build());
     * 
     *         // or they can use project names
     *         // the provider will raise an error if more than one project is found with the same name
     *         final var anotherTestProject = DbtcloudFunctions.getProject(GetProjectArgs.builder()
     *             .name("My other project name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain(GetProjectPlainArgs args) {
        return getProjectPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // projects data sources can use the project_id parameter (preferred uniqueness is ensured)
     *         final var testProject = DbtcloudFunctions.getProject(GetProjectArgs.builder()
     *             .projectId(dbtCloudProjectId)
     *             .build());
     * 
     *         // or they can use project names
     *         // the provider will raise an error if more than one project is found with the same name
     *         final var anotherTestProject = DbtcloudFunctions.getProject(GetProjectArgs.builder()
     *             .name("My other project name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectResult> getProject(GetProjectArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getProject:getProject", TypeShape.of(GetProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // projects data sources can use the project_id parameter (preferred uniqueness is ensured)
     *         final var testProject = DbtcloudFunctions.getProject(GetProjectArgs.builder()
     *             .projectId(dbtCloudProjectId)
     *             .build());
     * 
     *         // or they can use project names
     *         // the provider will raise an error if more than one project is found with the same name
     *         final var anotherTestProject = DbtcloudFunctions.getProject(GetProjectArgs.builder()
     *             .name("My other project name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectResult> getProject(GetProjectArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getProject:getProject", TypeShape.of(GetProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // projects data sources can use the project_id parameter (preferred uniqueness is ensured)
     *         final var testProject = DbtcloudFunctions.getProject(GetProjectArgs.builder()
     *             .projectId(dbtCloudProjectId)
     *             .build());
     * 
     *         // or they can use project names
     *         // the provider will raise an error if more than one project is found with the same name
     *         final var anotherTestProject = DbtcloudFunctions.getProject(GetProjectArgs.builder()
     *             .name("My other project name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain(GetProjectPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getProject:getProject", TypeShape.of(GetProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve all the projects created in dbt Cloud with an optional filter on parts of the project name.
     * 
     */
    public static Output<GetProjectsResult> getProjects() {
        return getProjects(GetProjectsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve all the projects created in dbt Cloud with an optional filter on parts of the project name.
     * 
     */
    public static CompletableFuture<GetProjectsResult> getProjectsPlain() {
        return getProjectsPlain(GetProjectsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve all the projects created in dbt Cloud with an optional filter on parts of the project name.
     * 
     */
    public static Output<GetProjectsResult> getProjects(GetProjectsArgs args) {
        return getProjects(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve all the projects created in dbt Cloud with an optional filter on parts of the project name.
     * 
     */
    public static CompletableFuture<GetProjectsResult> getProjectsPlain(GetProjectsPlainArgs args) {
        return getProjectsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve all the projects created in dbt Cloud with an optional filter on parts of the project name.
     * 
     */
    public static Output<GetProjectsResult> getProjects(GetProjectsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getProjects:getProjects", TypeShape.of(GetProjectsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve all the projects created in dbt Cloud with an optional filter on parts of the project name.
     * 
     */
    public static Output<GetProjectsResult> getProjects(GetProjectsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getProjects:getProjects", TypeShape.of(GetProjectsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve all the projects created in dbt Cloud with an optional filter on parts of the project name.
     * 
     */
    public static CompletableFuture<GetProjectsResult> getProjectsPlain(GetProjectsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getProjects:getProjects", TypeShape.of(GetProjectsResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetRepositoryResult> getRepository(GetRepositoryArgs args) {
        return getRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetRepositoryResult> getRepositoryPlain(GetRepositoryPlainArgs args) {
        return getRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetRepositoryResult> getRepository(GetRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getRepository:getRepository", TypeShape.of(GetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetRepositoryResult> getRepository(GetRepositoryArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getRepository:getRepository", TypeShape.of(GetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetRepositoryResult> getRepositoryPlain(GetRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getRepository:getRepository", TypeShape.of(GetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetServiceTokenResult> getServiceToken(GetServiceTokenArgs args) {
        return getServiceToken(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetServiceTokenResult> getServiceTokenPlain(GetServiceTokenPlainArgs args) {
        return getServiceTokenPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetServiceTokenResult> getServiceToken(GetServiceTokenArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getServiceToken:getServiceToken", TypeShape.of(GetServiceTokenResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetServiceTokenResult> getServiceToken(GetServiceTokenArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getServiceToken:getServiceToken", TypeShape.of(GetServiceTokenResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetServiceTokenResult> getServiceTokenPlain(GetServiceTokenPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getServiceToken:getServiceToken", TypeShape.of(GetServiceTokenResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetSnowflakeCredentialResult> getSnowflakeCredential(GetSnowflakeCredentialArgs args) {
        return getSnowflakeCredential(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetSnowflakeCredentialResult> getSnowflakeCredentialPlain(GetSnowflakeCredentialPlainArgs args) {
        return getSnowflakeCredentialPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetSnowflakeCredentialResult> getSnowflakeCredential(GetSnowflakeCredentialArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getSnowflakeCredential:getSnowflakeCredential", TypeShape.of(GetSnowflakeCredentialResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetSnowflakeCredentialResult> getSnowflakeCredential(GetSnowflakeCredentialArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getSnowflakeCredential:getSnowflakeCredential", TypeShape.of(GetSnowflakeCredentialResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetSnowflakeCredentialResult> getSnowflakeCredentialPlain(GetSnowflakeCredentialPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getSnowflakeCredential:getSnowflakeCredential", TypeShape.of(GetSnowflakeCredentialResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Starburst/Trino credential data source
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetStarburstCredentialArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DbtcloudFunctions.getStarburstCredential(GetStarburstCredentialArgs.builder()
     *             .projectId(123)
     *             .credentialId(456)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStarburstCredentialResult> getStarburstCredential(GetStarburstCredentialArgs args) {
        return getStarburstCredential(args, InvokeOptions.Empty);
    }
    /**
     * Starburst/Trino credential data source
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetStarburstCredentialArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DbtcloudFunctions.getStarburstCredential(GetStarburstCredentialArgs.builder()
     *             .projectId(123)
     *             .credentialId(456)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStarburstCredentialResult> getStarburstCredentialPlain(GetStarburstCredentialPlainArgs args) {
        return getStarburstCredentialPlain(args, InvokeOptions.Empty);
    }
    /**
     * Starburst/Trino credential data source
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetStarburstCredentialArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DbtcloudFunctions.getStarburstCredential(GetStarburstCredentialArgs.builder()
     *             .projectId(123)
     *             .credentialId(456)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStarburstCredentialResult> getStarburstCredential(GetStarburstCredentialArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getStarburstCredential:getStarburstCredential", TypeShape.of(GetStarburstCredentialResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Starburst/Trino credential data source
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetStarburstCredentialArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DbtcloudFunctions.getStarburstCredential(GetStarburstCredentialArgs.builder()
     *             .projectId(123)
     *             .credentialId(456)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStarburstCredentialResult> getStarburstCredential(GetStarburstCredentialArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getStarburstCredential:getStarburstCredential", TypeShape.of(GetStarburstCredentialResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Starburst/Trino credential data source
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetStarburstCredentialArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DbtcloudFunctions.getStarburstCredential(GetStarburstCredentialArgs.builder()
     *             .projectId(123)
     *             .credentialId(456)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStarburstCredentialResult> getStarburstCredentialPlain(GetStarburstCredentialPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getStarburstCredential:getStarburstCredential", TypeShape.of(GetStarburstCredentialResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve user details
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var myUser = DbtcloudFunctions.getUser(GetUserArgs.builder()
     *             .email("my_user}{@literal @}{@code email.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args) {
        return getUser(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve user details
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var myUser = DbtcloudFunctions.getUser(GetUserArgs.builder()
     *             .email("my_user}{@literal @}{@code email.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args) {
        return getUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve user details
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var myUser = DbtcloudFunctions.getUser(GetUserArgs.builder()
     *             .email("my_user}{@literal @}{@code email.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve user details
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var myUser = DbtcloudFunctions.getUser(GetUserArgs.builder()
     *             .email("my_user}{@literal @}{@code email.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve user details
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var myUser = DbtcloudFunctions.getUser(GetUserArgs.builder()
     *             .email("my_user}{@literal @}{@code email.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetUserGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myUserGroups = DbtcloudFunctions.getUserGroups(GetUserGroupsArgs.builder()
     *             .userId(12345)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserGroupsResult> getUserGroups(GetUserGroupsArgs args) {
        return getUserGroups(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetUserGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myUserGroups = DbtcloudFunctions.getUserGroups(GetUserGroupsArgs.builder()
     *             .userId(12345)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUserGroupsResult> getUserGroupsPlain(GetUserGroupsPlainArgs args) {
        return getUserGroupsPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetUserGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myUserGroups = DbtcloudFunctions.getUserGroups(GetUserGroupsArgs.builder()
     *             .userId(12345)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserGroupsResult> getUserGroups(GetUserGroupsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getUserGroups:getUserGroups", TypeShape.of(GetUserGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetUserGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myUserGroups = DbtcloudFunctions.getUserGroups(GetUserGroupsArgs.builder()
     *             .userId(12345)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserGroupsResult> getUserGroups(GetUserGroupsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getUserGroups:getUserGroups", TypeShape.of(GetUserGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dbtcloud.DbtcloudFunctions;
     * import com.pulumi.dbtcloud.inputs.GetUserGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myUserGroups = DbtcloudFunctions.getUserGroups(GetUserGroupsArgs.builder()
     *             .userId(12345)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUserGroupsResult> getUserGroupsPlain(GetUserGroupsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getUserGroups:getUserGroups", TypeShape.of(GetUserGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve all users
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUsersResult> getUsers() {
        return getUsers(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve all users
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain() {
        return getUsersPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve all users
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUsersResult> getUsers(InvokeArgs args) {
        return getUsers(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve all users
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain(InvokeArgs args) {
        return getUsersPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve all users
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUsersResult> getUsers(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getUsers:getUsers", TypeShape.of(GetUsersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve all users
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUsersResult> getUsers(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getUsers:getUsers", TypeShape.of(GetUsersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve all users
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getUsers:getUsers", TypeShape.of(GetUsersResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetWebhookResult> getWebhook(GetWebhookArgs args) {
        return getWebhook(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetWebhookResult> getWebhookPlain(GetWebhookPlainArgs args) {
        return getWebhookPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetWebhookResult> getWebhook(GetWebhookArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getWebhook:getWebhook", TypeShape.of(GetWebhookResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetWebhookResult> getWebhook(GetWebhookArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("dbtcloud:index/getWebhook:getWebhook", TypeShape.of(GetWebhookResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetWebhookResult> getWebhookPlain(GetWebhookPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dbtcloud:index/getWebhook:getWebhook", TypeShape.of(GetWebhookResult.class), args, Utilities.withVersion(options));
    }
}

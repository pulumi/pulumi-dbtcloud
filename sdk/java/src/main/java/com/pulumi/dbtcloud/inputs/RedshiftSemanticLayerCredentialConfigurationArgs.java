// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class RedshiftSemanticLayerCredentialConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final RedshiftSemanticLayerCredentialConfigurationArgs Empty = new RedshiftSemanticLayerCredentialConfigurationArgs();

    /**
     * The adapter version
     * 
     */
    @Import(name="adapterVersion", required=true)
    private Output<String> adapterVersion;

    /**
     * @return The adapter version
     * 
     */
    public Output<String> adapterVersion() {
        return this.adapterVersion;
    }

    /**
     * The name of the configuration
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the configuration
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The ID of the project
     * 
     */
    @Import(name="projectId", required=true)
    private Output<Integer> projectId;

    /**
     * @return The ID of the project
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }

    private RedshiftSemanticLayerCredentialConfigurationArgs() {}

    private RedshiftSemanticLayerCredentialConfigurationArgs(RedshiftSemanticLayerCredentialConfigurationArgs $) {
        this.adapterVersion = $.adapterVersion;
        this.name = $.name;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RedshiftSemanticLayerCredentialConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RedshiftSemanticLayerCredentialConfigurationArgs $;

        public Builder() {
            $ = new RedshiftSemanticLayerCredentialConfigurationArgs();
        }

        public Builder(RedshiftSemanticLayerCredentialConfigurationArgs defaults) {
            $ = new RedshiftSemanticLayerCredentialConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adapterVersion The adapter version
         * 
         * @return builder
         * 
         */
        public Builder adapterVersion(Output<String> adapterVersion) {
            $.adapterVersion = adapterVersion;
            return this;
        }

        /**
         * @param adapterVersion The adapter version
         * 
         * @return builder
         * 
         */
        public Builder adapterVersion(String adapterVersion) {
            return adapterVersion(Output.of(adapterVersion));
        }

        /**
         * @param name The name of the configuration
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the configuration
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId The ID of the project
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        public RedshiftSemanticLayerCredentialConfigurationArgs build() {
            if ($.adapterVersion == null) {
                throw new MissingRequiredPropertyException("RedshiftSemanticLayerCredentialConfigurationArgs", "adapterVersion");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("RedshiftSemanticLayerCredentialConfigurationArgs", "name");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("RedshiftSemanticLayerCredentialConfigurationArgs", "projectId");
            }
            return $;
        }
    }

}

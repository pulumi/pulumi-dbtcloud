// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dbtcloud.UserGroupsArgs;
import com.pulumi.dbtcloud.Utilities;
import com.pulumi.dbtcloud.inputs.UserGroupsState;
import java.lang.Integer;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Assigns a set of dbt Cloud groups to a given User ID.
 * 
 * &gt; If additional groups were assigned manually in dbt Cloud, they will be removed. The full list of groups need to be provided as config.
 * 
 * &gt; This resource does not currently support deletion (e.g. a deleted resource will stay as-is in dbt Cloud).
 * This is intentional in order to prevent accidental deletion of all users groups assigned to a user.
 * If you would like a different behavior, please open an issue on GitHub. To remove all groups for a user, set &#34;group_ids&#34; to the empty set &#34;[]&#34;.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.dbtcloud.UserGroups;
 * import com.pulumi.dbtcloud.UserGroupsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // we can assign groups to users
 *         var myUserGroups = new UserGroups(&#34;myUserGroups&#34;, UserGroupsArgs.builder()        
 *             .userId(myUser.id())
 *             .groupIds(            
 *                 1234,
 *                 myGroup.id(),
 *                 myGroupId)
 *             .build());
 * 
 *         // as Delete is not handled currently, by design, removing all groups from a user can be done with
 *         var myOtherUserGroups = new UserGroups(&#34;myOtherUserGroups&#34;, UserGroupsArgs.builder()        
 *             .userId(123456)
 *             .groupIds()
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Import using the User ID
 * 
 * The User ID can be retrieved from the dbt Cloud UI or with the data source dbtcloud_user
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/userGroups:UserGroups my_user_groups &#34;user_id&#34;
 * ```
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/userGroups:UserGroups my_user_groups 123456
 * ```
 * 
 */
@ResourceType(type="dbtcloud:index/userGroups:UserGroups")
public class UserGroups extends com.pulumi.resources.CustomResource {
    /**
     * IDs of the groups to assign to the user. If additional groups were assigned manually in dbt Cloud, they will be removed.
     * 
     */
    @Export(name="groupIds", refs={List.class,Integer.class}, tree="[0,1]")
    private Output<List<Integer>> groupIds;

    /**
     * @return IDs of the groups to assign to the user. If additional groups were assigned manually in dbt Cloud, they will be removed.
     * 
     */
    public Output<List<Integer>> groupIds() {
        return this.groupIds;
    }
    /**
     * The internal ID of a dbt Cloud user
     * 
     */
    @Export(name="userId", refs={Integer.class}, tree="[0]")
    private Output<Integer> userId;

    /**
     * @return The internal ID of a dbt Cloud user
     * 
     */
    public Output<Integer> userId() {
        return this.userId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public UserGroups(String name) {
        this(name, UserGroupsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public UserGroups(String name, UserGroupsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public UserGroups(String name, UserGroupsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/userGroups:UserGroups", name, args == null ? UserGroupsArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private UserGroups(String name, Output<String> id, @Nullable UserGroupsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/userGroups:UserGroups", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static UserGroups get(String name, Output<String> id, @Nullable UserGroupsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new UserGroups(name, id, state, options);
    }
}

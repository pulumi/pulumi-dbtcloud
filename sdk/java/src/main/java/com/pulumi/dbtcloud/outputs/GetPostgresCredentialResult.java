// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetPostgresCredentialResult {
    /**
     * @return Credential ID
     * 
     */
    private Integer credentialId;
    /**
     * @return Default schema name
     * 
     */
    private String defaultSchema;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Whether the Postgres credential is active
     * 
     */
    private Boolean isActive;
    /**
     * @return Number of threads to use
     * 
     */
    private Integer numThreads;
    /**
     * @return Project ID
     * 
     */
    private Integer projectId;
    /**
     * @return Username for Postgres
     * 
     */
    private String username;

    private GetPostgresCredentialResult() {}
    /**
     * @return Credential ID
     * 
     */
    public Integer credentialId() {
        return this.credentialId;
    }
    /**
     * @return Default schema name
     * 
     */
    public String defaultSchema() {
        return this.defaultSchema;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether the Postgres credential is active
     * 
     */
    public Boolean isActive() {
        return this.isActive;
    }
    /**
     * @return Number of threads to use
     * 
     */
    public Integer numThreads() {
        return this.numThreads;
    }
    /**
     * @return Project ID
     * 
     */
    public Integer projectId() {
        return this.projectId;
    }
    /**
     * @return Username for Postgres
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPostgresCredentialResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer credentialId;
        private String defaultSchema;
        private String id;
        private Boolean isActive;
        private Integer numThreads;
        private Integer projectId;
        private String username;
        public Builder() {}
        public Builder(GetPostgresCredentialResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credentialId = defaults.credentialId;
    	      this.defaultSchema = defaults.defaultSchema;
    	      this.id = defaults.id;
    	      this.isActive = defaults.isActive;
    	      this.numThreads = defaults.numThreads;
    	      this.projectId = defaults.projectId;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder credentialId(Integer credentialId) {
            if (credentialId == null) {
              throw new MissingRequiredPropertyException("GetPostgresCredentialResult", "credentialId");
            }
            this.credentialId = credentialId;
            return this;
        }
        @CustomType.Setter
        public Builder defaultSchema(String defaultSchema) {
            if (defaultSchema == null) {
              throw new MissingRequiredPropertyException("GetPostgresCredentialResult", "defaultSchema");
            }
            this.defaultSchema = defaultSchema;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPostgresCredentialResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isActive(Boolean isActive) {
            if (isActive == null) {
              throw new MissingRequiredPropertyException("GetPostgresCredentialResult", "isActive");
            }
            this.isActive = isActive;
            return this;
        }
        @CustomType.Setter
        public Builder numThreads(Integer numThreads) {
            if (numThreads == null) {
              throw new MissingRequiredPropertyException("GetPostgresCredentialResult", "numThreads");
            }
            this.numThreads = numThreads;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(Integer projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetPostgresCredentialResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetPostgresCredentialResult", "username");
            }
            this.username = username;
            return this;
        }
        public GetPostgresCredentialResult build() {
            final var _resultValue = new GetPostgresCredentialResult();
            _resultValue.credentialId = credentialId;
            _resultValue.defaultSchema = defaultSchema;
            _resultValue.id = id;
            _resultValue.isActive = isActive;
            _resultValue.numThreads = numThreads;
            _resultValue.projectId = projectId;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}

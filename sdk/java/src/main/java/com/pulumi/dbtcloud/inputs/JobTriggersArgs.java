// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobTriggersArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobTriggersArgs Empty = new JobTriggersArgs();

    /**
     * Whether the job runs automatically on PR creation
     * 
     */
    @Import(name="gitProviderWebhook")
    private @Nullable Output<Boolean> gitProviderWebhook;

    /**
     * @return Whether the job runs automatically on PR creation
     * 
     */
    public Optional<Output<Boolean>> gitProviderWebhook() {
        return Optional.ofNullable(this.gitProviderWebhook);
    }

    /**
     * Whether the job runs automatically on PR creation
     * 
     */
    @Import(name="githubWebhook")
    private @Nullable Output<Boolean> githubWebhook;

    /**
     * @return Whether the job runs automatically on PR creation
     * 
     */
    public Optional<Output<Boolean>> githubWebhook() {
        return Optional.ofNullable(this.githubWebhook);
    }

    /**
     * Whether the job runs automatically once a PR is merged
     * 
     */
    @Import(name="onMerge")
    private @Nullable Output<Boolean> onMerge;

    /**
     * @return Whether the job runs automatically once a PR is merged
     * 
     */
    public Optional<Output<Boolean>> onMerge() {
        return Optional.ofNullable(this.onMerge);
    }

    /**
     * Whether the job runs on a schedule
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<Boolean> schedule;

    /**
     * @return Whether the job runs on a schedule
     * 
     */
    public Optional<Output<Boolean>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    private JobTriggersArgs() {}

    private JobTriggersArgs(JobTriggersArgs $) {
        this.gitProviderWebhook = $.gitProviderWebhook;
        this.githubWebhook = $.githubWebhook;
        this.onMerge = $.onMerge;
        this.schedule = $.schedule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobTriggersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobTriggersArgs $;

        public Builder() {
            $ = new JobTriggersArgs();
        }

        public Builder(JobTriggersArgs defaults) {
            $ = new JobTriggersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param gitProviderWebhook Whether the job runs automatically on PR creation
         * 
         * @return builder
         * 
         */
        public Builder gitProviderWebhook(@Nullable Output<Boolean> gitProviderWebhook) {
            $.gitProviderWebhook = gitProviderWebhook;
            return this;
        }

        /**
         * @param gitProviderWebhook Whether the job runs automatically on PR creation
         * 
         * @return builder
         * 
         */
        public Builder gitProviderWebhook(Boolean gitProviderWebhook) {
            return gitProviderWebhook(Output.of(gitProviderWebhook));
        }

        /**
         * @param githubWebhook Whether the job runs automatically on PR creation
         * 
         * @return builder
         * 
         */
        public Builder githubWebhook(@Nullable Output<Boolean> githubWebhook) {
            $.githubWebhook = githubWebhook;
            return this;
        }

        /**
         * @param githubWebhook Whether the job runs automatically on PR creation
         * 
         * @return builder
         * 
         */
        public Builder githubWebhook(Boolean githubWebhook) {
            return githubWebhook(Output.of(githubWebhook));
        }

        /**
         * @param onMerge Whether the job runs automatically once a PR is merged
         * 
         * @return builder
         * 
         */
        public Builder onMerge(@Nullable Output<Boolean> onMerge) {
            $.onMerge = onMerge;
            return this;
        }

        /**
         * @param onMerge Whether the job runs automatically once a PR is merged
         * 
         * @return builder
         * 
         */
        public Builder onMerge(Boolean onMerge) {
            return onMerge(Output.of(onMerge));
        }

        /**
         * @param schedule Whether the job runs on a schedule
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<Boolean> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule Whether the job runs on a schedule
         * 
         * @return builder
         * 
         */
        public Builder schedule(Boolean schedule) {
            return schedule(Output.of(schedule));
        }

        public JobTriggersArgs build() {
            return $;
        }
    }

}

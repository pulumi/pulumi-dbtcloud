// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dbtcloud.PostgresCredentialArgs;
import com.pulumi.dbtcloud.Utilities;
import com.pulumi.dbtcloud.inputs.PostgresCredentialState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.dbtcloud.PostgresCredential;
 * import com.pulumi.dbtcloud.PostgresCredentialArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // NOTE for customers using the LEGACY dbt_cloud provider:
 *         var postgresProdCredential = new PostgresCredential(&#34;postgresProdCredential&#34;, PostgresCredentialArgs.builder()        
 *             .isActive(true)
 *             .projectId(dbtProject.id())
 *             .type(&#34;postgres&#34;)
 *             .defaultSchema(&#34;my_schema&#34;)
 *             .username(&#34;my_username&#34;)
 *             .password(&#34;my_password&#34;)
 *             .numThreads(16)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Import using a project ID and credential ID found in the URL or via the API.
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/postgresCredential:PostgresCredential my_credential &#34;project_id:credential_id&#34;
 * ```
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/postgresCredential:PostgresCredential my_credential 12345:6789
 * ```
 * 
 */
@ResourceType(type="dbtcloud:index/postgresCredential:PostgresCredential")
public class PostgresCredential extends com.pulumi.resources.CustomResource {
    /**
     * The system Postgres/Redshift/AlloyDB credential ID
     * 
     */
    @Export(name="credentialId", refs={Integer.class}, tree="[0]")
    private Output<Integer> credentialId;

    /**
     * @return The system Postgres/Redshift/AlloyDB credential ID
     * 
     */
    public Output<Integer> credentialId() {
        return this.credentialId;
    }
    /**
     * Default schema name
     * 
     */
    @Export(name="defaultSchema", refs={String.class}, tree="[0]")
    private Output<String> defaultSchema;

    /**
     * @return Default schema name
     * 
     */
    public Output<String> defaultSchema() {
        return this.defaultSchema;
    }
    /**
     * Whether the Postgres/Redshift/AlloyDB credential is active
     * 
     */
    @Export(name="isActive", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isActive;

    /**
     * @return Whether the Postgres/Redshift/AlloyDB credential is active
     * 
     */
    public Output<Optional<Boolean>> isActive() {
        return Codegen.optional(this.isActive);
    }
    /**
     * Number of threads to use
     * 
     */
    @Export(name="numThreads", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> numThreads;

    /**
     * @return Number of threads to use
     * 
     */
    public Output<Optional<Integer>> numThreads() {
        return Codegen.optional(this.numThreads);
    }
    /**
     * Password for Postgres/Redshift/AlloyDB
     * 
     */
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> password;

    /**
     * @return Password for Postgres/Redshift/AlloyDB
     * 
     */
    public Output<Optional<String>> password() {
        return Codegen.optional(this.password);
    }
    /**
     * Project ID to create the Postgres/Redshift/AlloyDB credential in
     * 
     */
    @Export(name="projectId", refs={Integer.class}, tree="[0]")
    private Output<Integer> projectId;

    /**
     * @return Project ID to create the Postgres/Redshift/AlloyDB credential in
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }
    /**
     * Default schema name
     * 
     */
    @Export(name="targetName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> targetName;

    /**
     * @return Default schema name
     * 
     */
    public Output<Optional<String>> targetName() {
        return Codegen.optional(this.targetName);
    }
    /**
     * Type of connection. One of (postgres/redshift). Use postgres for alloydb connections
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Type of connection. One of (postgres/redshift). Use postgres for alloydb connections
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Username for Postgres/Redshift/AlloyDB
     * 
     */
    @Export(name="username", refs={String.class}, tree="[0]")
    private Output<String> username;

    /**
     * @return Username for Postgres/Redshift/AlloyDB
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PostgresCredential(String name) {
        this(name, PostgresCredentialArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PostgresCredential(String name, PostgresCredentialArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PostgresCredential(String name, PostgresCredentialArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/postgresCredential:PostgresCredential", name, args == null ? PostgresCredentialArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private PostgresCredential(String name, Output<String> id, @Nullable PostgresCredentialState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/postgresCredential:PostgresCredential", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "password"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PostgresCredential get(String name, Output<String> id, @Nullable PostgresCredentialState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PostgresCredential(name, id, state, options);
    }
}

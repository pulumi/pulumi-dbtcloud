// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupPartialPermissionsGroupPermissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupPartialPermissionsGroupPermissionArgs Empty = new GroupPartialPermissionsGroupPermissionArgs();

    /**
     * Whether access should be provided for all projects or not.
     * 
     */
    @Import(name="allProjects", required=true)
    private Output<Boolean> allProjects;

    /**
     * @return Whether access should be provided for all projects or not.
     * 
     */
    public Output<Boolean> allProjects() {
        return this.allProjects;
    }

    /**
     * Set of permissions to apply. The permissions allowed are the same as the ones for the `dbtcloud.Group` resource.
     * 
     */
    @Import(name="permissionSet", required=true)
    private Output<String> permissionSet;

    /**
     * @return Set of permissions to apply. The permissions allowed are the same as the ones for the `dbtcloud.Group` resource.
     * 
     */
    public Output<String> permissionSet() {
        return this.permissionSet;
    }

    /**
     * Project ID to apply this permission to for this group.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<Integer> projectId;

    /**
     * @return Project ID to apply this permission to for this group.
     * 
     */
    public Optional<Output<Integer>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * What types of environments to apply Write permissions to.
     * Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
     * The values allowed are `all`, `development`, `staging`, `production` and `other`.
     * Not setting a value is the same as selecting `all`.
     * Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
     * 
     */
    @Import(name="writableEnvironmentCategories")
    private @Nullable Output<List<String>> writableEnvironmentCategories;

    /**
     * @return What types of environments to apply Write permissions to.
     * Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
     * The values allowed are `all`, `development`, `staging`, `production` and `other`.
     * Not setting a value is the same as selecting `all`.
     * Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
     * 
     */
    public Optional<Output<List<String>>> writableEnvironmentCategories() {
        return Optional.ofNullable(this.writableEnvironmentCategories);
    }

    private GroupPartialPermissionsGroupPermissionArgs() {}

    private GroupPartialPermissionsGroupPermissionArgs(GroupPartialPermissionsGroupPermissionArgs $) {
        this.allProjects = $.allProjects;
        this.permissionSet = $.permissionSet;
        this.projectId = $.projectId;
        this.writableEnvironmentCategories = $.writableEnvironmentCategories;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupPartialPermissionsGroupPermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupPartialPermissionsGroupPermissionArgs $;

        public Builder() {
            $ = new GroupPartialPermissionsGroupPermissionArgs();
        }

        public Builder(GroupPartialPermissionsGroupPermissionArgs defaults) {
            $ = new GroupPartialPermissionsGroupPermissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allProjects Whether access should be provided for all projects or not.
         * 
         * @return builder
         * 
         */
        public Builder allProjects(Output<Boolean> allProjects) {
            $.allProjects = allProjects;
            return this;
        }

        /**
         * @param allProjects Whether access should be provided for all projects or not.
         * 
         * @return builder
         * 
         */
        public Builder allProjects(Boolean allProjects) {
            return allProjects(Output.of(allProjects));
        }

        /**
         * @param permissionSet Set of permissions to apply. The permissions allowed are the same as the ones for the `dbtcloud.Group` resource.
         * 
         * @return builder
         * 
         */
        public Builder permissionSet(Output<String> permissionSet) {
            $.permissionSet = permissionSet;
            return this;
        }

        /**
         * @param permissionSet Set of permissions to apply. The permissions allowed are the same as the ones for the `dbtcloud.Group` resource.
         * 
         * @return builder
         * 
         */
        public Builder permissionSet(String permissionSet) {
            return permissionSet(Output.of(permissionSet));
        }

        /**
         * @param projectId Project ID to apply this permission to for this group.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID to apply this permission to for this group.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param writableEnvironmentCategories What types of environments to apply Write permissions to.
         * Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
         * The values allowed are `all`, `development`, `staging`, `production` and `other`.
         * Not setting a value is the same as selecting `all`.
         * Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
         * 
         * @return builder
         * 
         */
        public Builder writableEnvironmentCategories(@Nullable Output<List<String>> writableEnvironmentCategories) {
            $.writableEnvironmentCategories = writableEnvironmentCategories;
            return this;
        }

        /**
         * @param writableEnvironmentCategories What types of environments to apply Write permissions to.
         * Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
         * The values allowed are `all`, `development`, `staging`, `production` and `other`.
         * Not setting a value is the same as selecting `all`.
         * Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
         * 
         * @return builder
         * 
         */
        public Builder writableEnvironmentCategories(List<String> writableEnvironmentCategories) {
            return writableEnvironmentCategories(Output.of(writableEnvironmentCategories));
        }

        /**
         * @param writableEnvironmentCategories What types of environments to apply Write permissions to.
         * Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
         * The values allowed are `all`, `development`, `staging`, `production` and `other`.
         * Not setting a value is the same as selecting `all`.
         * Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
         * 
         * @return builder
         * 
         */
        public Builder writableEnvironmentCategories(String... writableEnvironmentCategories) {
            return writableEnvironmentCategories(List.of(writableEnvironmentCategories));
        }

        public GroupPartialPermissionsGroupPermissionArgs build() {
            if ($.allProjects == null) {
                throw new MissingRequiredPropertyException("GroupPartialPermissionsGroupPermissionArgs", "allProjects");
            }
            if ($.permissionSet == null) {
                throw new MissingRequiredPropertyException("GroupPartialPermissionsGroupPermissionArgs", "permissionSet");
            }
            return $;
        }
    }

}

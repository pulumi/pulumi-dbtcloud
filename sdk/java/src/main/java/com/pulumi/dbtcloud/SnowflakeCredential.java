// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dbtcloud.SnowflakeCredentialArgs;
import com.pulumi.dbtcloud.Utilities;
import com.pulumi.dbtcloud.inputs.SnowflakeCredentialState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Snowflake credential resource. This resource is used both as a stand-alone credential, but also as part of the Semantic Layer credential definition for Snowflake.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.dbtcloud.SnowflakeCredential;
 * import com.pulumi.dbtcloud.SnowflakeCredentialArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var prodCredential = new SnowflakeCredential("prodCredential", SnowflakeCredentialArgs.builder()
 *             .projectId(dbtProject.id())
 *             .authType("password")
 *             .numThreads(16)
 *             .schema("SCHEMA")
 *             .user("user")
 *             .password("password")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * using  import blocks (requires Terraform &gt;= 1.5)
 * 
 * import {
 * 
 *   to = dbtcloud_snowflake_credential.prod_snowflake_credential
 * 
 *   id = &#34;project_id:credential_id&#34;
 * 
 * }
 * 
 * import {
 * 
 *   to = dbtcloud_snowflake_credential.prod_snowflake_credential
 * 
 *   id = &#34;12345:6789&#34;
 * 
 * }
 * 
 * using the older import command
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/snowflakeCredential:SnowflakeCredential prod_snowflake_credential &#34;project_id:credential_id&#34;
 * ```
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/snowflakeCredential:SnowflakeCredential prod_snowflake_credential 12345:6789
 * ```
 * 
 */
@ResourceType(type="dbtcloud:index/snowflakeCredential:SnowflakeCredential")
public class SnowflakeCredential extends com.pulumi.resources.CustomResource {
    /**
     * The type of Snowflake credential (&#39;password&#39; or &#39;keypair&#39;)
     * 
     */
    @Export(name="authType", refs={String.class}, tree="[0]")
    private Output<String> authType;

    /**
     * @return The type of Snowflake credential (&#39;password&#39; or &#39;keypair&#39;)
     * 
     */
    public Output<String> authType() {
        return this.authType;
    }
    /**
     * The internal credential ID
     * 
     */
    @Export(name="credentialId", refs={Integer.class}, tree="[0]")
    private Output<Integer> credentialId;

    /**
     * @return The internal credential ID
     * 
     */
    public Output<Integer> credentialId() {
        return this.credentialId;
    }
    /**
     * The catalog to connect use
     * 
     */
    @Export(name="database", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> database;

    /**
     * @return The catalog to connect use
     * 
     */
    public Output<Optional<String>> database() {
        return Codegen.optional(this.database);
    }
    /**
     * Whether the Snowflake credential is active
     * 
     */
    @Export(name="isActive", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isActive;

    /**
     * @return Whether the Snowflake credential is active
     * 
     */
    public Output<Boolean> isActive() {
        return this.isActive;
    }
    /**
     * Number of threads to use
     * 
     */
    @Export(name="numThreads", refs={Integer.class}, tree="[0]")
    private Output<Integer> numThreads;

    /**
     * @return Number of threads to use
     * 
     */
    public Output<Integer> numThreads() {
        return this.numThreads;
    }
    /**
     * The password for the Snowflake account
     * 
     */
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output<String> password;

    /**
     * @return The password for the Snowflake account
     * 
     */
    public Output<String> password() {
        return this.password;
    }
    /**
     * The private key for the Snowflake account
     * 
     */
    @Export(name="privateKey", refs={String.class}, tree="[0]")
    private Output<String> privateKey;

    /**
     * @return The private key for the Snowflake account
     * 
     */
    public Output<String> privateKey() {
        return this.privateKey;
    }
    /**
     * The passphrase for the private key
     * 
     */
    @Export(name="privateKeyPassphrase", refs={String.class}, tree="[0]")
    private Output<String> privateKeyPassphrase;

    /**
     * @return The passphrase for the private key
     * 
     */
    public Output<String> privateKeyPassphrase() {
        return this.privateKeyPassphrase;
    }
    /**
     * Project ID to create the Snowflake credential in
     * 
     */
    @Export(name="projectId", refs={Integer.class}, tree="[0]")
    private Output<Integer> projectId;

    /**
     * @return Project ID to create the Snowflake credential in
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }
    /**
     * The role to assume
     * 
     */
    @Export(name="role", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> role;

    /**
     * @return The role to assume
     * 
     */
    public Output<Optional<String>> role() {
        return Codegen.optional(this.role);
    }
    /**
     * The schema where to create models. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.
     * 
     */
    @Export(name="schema", refs={String.class}, tree="[0]")
    private Output<String> schema;

    /**
     * @return The schema where to create models. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }
    /**
     * This field indicates that the credential is used as part of the Semantic Layer configuration. It is used to create a Snowflake credential for the Semantic Layer.
     * 
     */
    @Export(name="semanticLayerCredential", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> semanticLayerCredential;

    /**
     * @return This field indicates that the credential is used as part of the Semantic Layer configuration. It is used to create a Snowflake credential for the Semantic Layer.
     * 
     */
    public Output<Boolean> semanticLayerCredential() {
        return this.semanticLayerCredential;
    }
    /**
     * The username for the Snowflake account. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.
     * 
     */
    @Export(name="user", refs={String.class}, tree="[0]")
    private Output<String> user;

    /**
     * @return The username for the Snowflake account. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.
     * 
     */
    public Output<String> user() {
        return this.user;
    }
    /**
     * The warehouse to use
     * 
     */
    @Export(name="warehouse", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> warehouse;

    /**
     * @return The warehouse to use
     * 
     */
    public Output<Optional<String>> warehouse() {
        return Codegen.optional(this.warehouse);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SnowflakeCredential(java.lang.String name) {
        this(name, SnowflakeCredentialArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SnowflakeCredential(java.lang.String name, SnowflakeCredentialArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SnowflakeCredential(java.lang.String name, SnowflakeCredentialArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/snowflakeCredential:SnowflakeCredential", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private SnowflakeCredential(java.lang.String name, Output<java.lang.String> id, @Nullable SnowflakeCredentialState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/snowflakeCredential:SnowflakeCredential", name, state, makeResourceOptions(options, id), false);
    }

    private static SnowflakeCredentialArgs makeArgs(SnowflakeCredentialArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SnowflakeCredentialArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi/pulumi-dbtcloud")
            .additionalSecretOutputs(List.of(
                "password",
                "privateKey",
                "privateKeyPassphrase"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SnowflakeCredential get(java.lang.String name, Output<java.lang.String> id, @Nullable SnowflakeCredentialState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SnowflakeCredential(name, id, state, options);
    }
}

// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.dbtcloud.inputs.GetServiceTokenServiceTokenPermission;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetServiceTokenPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetServiceTokenPlainArgs Empty = new GetServiceTokenPlainArgs();

    /**
     * The ID of the service token
     * 
     */
    @Import(name="serviceTokenId", required=true)
    private Integer serviceTokenId;

    /**
     * @return The ID of the service token
     * 
     */
    public Integer serviceTokenId() {
        return this.serviceTokenId;
    }

    /**
     * Permissions set for the service token
     * 
     */
    @Import(name="serviceTokenPermissions")
    private @Nullable List<GetServiceTokenServiceTokenPermission> serviceTokenPermissions;

    /**
     * @return Permissions set for the service token
     * 
     */
    public Optional<List<GetServiceTokenServiceTokenPermission>> serviceTokenPermissions() {
        return Optional.ofNullable(this.serviceTokenPermissions);
    }

    private GetServiceTokenPlainArgs() {}

    private GetServiceTokenPlainArgs(GetServiceTokenPlainArgs $) {
        this.serviceTokenId = $.serviceTokenId;
        this.serviceTokenPermissions = $.serviceTokenPermissions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetServiceTokenPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetServiceTokenPlainArgs $;

        public Builder() {
            $ = new GetServiceTokenPlainArgs();
        }

        public Builder(GetServiceTokenPlainArgs defaults) {
            $ = new GetServiceTokenPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param serviceTokenId The ID of the service token
         * 
         * @return builder
         * 
         */
        public Builder serviceTokenId(Integer serviceTokenId) {
            $.serviceTokenId = serviceTokenId;
            return this;
        }

        /**
         * @param serviceTokenPermissions Permissions set for the service token
         * 
         * @return builder
         * 
         */
        public Builder serviceTokenPermissions(@Nullable List<GetServiceTokenServiceTokenPermission> serviceTokenPermissions) {
            $.serviceTokenPermissions = serviceTokenPermissions;
            return this;
        }

        /**
         * @param serviceTokenPermissions Permissions set for the service token
         * 
         * @return builder
         * 
         */
        public Builder serviceTokenPermissions(GetServiceTokenServiceTokenPermission... serviceTokenPermissions) {
            return serviceTokenPermissions(List.of(serviceTokenPermissions));
        }

        public GetServiceTokenPlainArgs build() {
            if ($.serviceTokenId == null) {
                throw new MissingRequiredPropertyException("GetServiceTokenPlainArgs", "serviceTokenId");
            }
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGlobalConnectionBigquery {
    /**
     * @return OAuth Client ID
     * 
     */
    private String applicationId;
    /**
     * @return OAuth Client Secret
     * 
     */
    private String applicationSecret;
    /**
     * @return Auth Provider X509 Cert URL for the Service Account
     * 
     */
    private String authProviderX509CertUrl;
    /**
     * @return Auth URI for the Service Account
     * 
     */
    private String authUri;
    /**
     * @return Service Account email
     * 
     */
    private String clientEmail;
    /**
     * @return Client ID of the Service Account
     * 
     */
    private String clientId;
    /**
     * @return Client X509 Cert URL for the Service Account
     * 
     */
    private String clientX509CertUrl;
    /**
     * @return Dataproc cluster name for PySpark workloads
     * 
     */
    private String dataprocClusterName;
    /**
     * @return Google Cloud region for PySpark workloads on Dataproc
     * 
     */
    private String dataprocRegion;
    /**
     * @return Project to bill for query execution
     * 
     */
    private String executionProject;
    /**
     * @return The GCP project ID to use for the connection
     * 
     */
    private String gcpProjectId;
    /**
     * @return URI for a Google Cloud Storage bucket to host Python code executed via Datapro
     * 
     */
    private String gcsBucket;
    /**
     * @return Service Account to impersonate when running queries
     * 
     */
    private String impersonateServiceAccount;
    /**
     * @return Maximum timeout for the job creation step
     * 
     */
    private Integer jobCreationTimeoutSeconds;
    /**
     * @return Total number of seconds to wait while retrying the same query
     * 
     */
    private Integer jobRetryDeadlineSeconds;
    /**
     * @return Location to create new Datasets in
     * 
     */
    private String location;
    /**
     * @return Max number of bytes that can be billed for a given BigQuery query
     * 
     */
    private Integer maximumBytesBilled;
    /**
     * @return The priority with which to execute BigQuery queries (batch or interactive)
     * 
     */
    private String priority;
    /**
     * @return Private Key for the Service Account
     * 
     */
    private String privateKey;
    /**
     * @return Private Key ID for the Service Account
     * 
     */
    private String privateKeyId;
    /**
     * @return Number of retries for queries
     * 
     */
    private Integer retries;
    /**
     * @return OAuth scopes for the BigQuery connection
     * 
     */
    private List<String> scopes;
    /**
     * @return Timeout in seconds for queries
     * 
     */
    private Integer timeoutSeconds;
    /**
     * @return Token URI for the Service Account
     * 
     */
    private String tokenUri;

    private GetGlobalConnectionBigquery() {}
    /**
     * @return OAuth Client ID
     * 
     */
    public String applicationId() {
        return this.applicationId;
    }
    /**
     * @return OAuth Client Secret
     * 
     */
    public String applicationSecret() {
        return this.applicationSecret;
    }
    /**
     * @return Auth Provider X509 Cert URL for the Service Account
     * 
     */
    public String authProviderX509CertUrl() {
        return this.authProviderX509CertUrl;
    }
    /**
     * @return Auth URI for the Service Account
     * 
     */
    public String authUri() {
        return this.authUri;
    }
    /**
     * @return Service Account email
     * 
     */
    public String clientEmail() {
        return this.clientEmail;
    }
    /**
     * @return Client ID of the Service Account
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return Client X509 Cert URL for the Service Account
     * 
     */
    public String clientX509CertUrl() {
        return this.clientX509CertUrl;
    }
    /**
     * @return Dataproc cluster name for PySpark workloads
     * 
     */
    public String dataprocClusterName() {
        return this.dataprocClusterName;
    }
    /**
     * @return Google Cloud region for PySpark workloads on Dataproc
     * 
     */
    public String dataprocRegion() {
        return this.dataprocRegion;
    }
    /**
     * @return Project to bill for query execution
     * 
     */
    public String executionProject() {
        return this.executionProject;
    }
    /**
     * @return The GCP project ID to use for the connection
     * 
     */
    public String gcpProjectId() {
        return this.gcpProjectId;
    }
    /**
     * @return URI for a Google Cloud Storage bucket to host Python code executed via Datapro
     * 
     */
    public String gcsBucket() {
        return this.gcsBucket;
    }
    /**
     * @return Service Account to impersonate when running queries
     * 
     */
    public String impersonateServiceAccount() {
        return this.impersonateServiceAccount;
    }
    /**
     * @return Maximum timeout for the job creation step
     * 
     */
    public Integer jobCreationTimeoutSeconds() {
        return this.jobCreationTimeoutSeconds;
    }
    /**
     * @return Total number of seconds to wait while retrying the same query
     * 
     */
    public Integer jobRetryDeadlineSeconds() {
        return this.jobRetryDeadlineSeconds;
    }
    /**
     * @return Location to create new Datasets in
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Max number of bytes that can be billed for a given BigQuery query
     * 
     */
    public Integer maximumBytesBilled() {
        return this.maximumBytesBilled;
    }
    /**
     * @return The priority with which to execute BigQuery queries (batch or interactive)
     * 
     */
    public String priority() {
        return this.priority;
    }
    /**
     * @return Private Key for the Service Account
     * 
     */
    public String privateKey() {
        return this.privateKey;
    }
    /**
     * @return Private Key ID for the Service Account
     * 
     */
    public String privateKeyId() {
        return this.privateKeyId;
    }
    /**
     * @return Number of retries for queries
     * 
     */
    public Integer retries() {
        return this.retries;
    }
    /**
     * @return OAuth scopes for the BigQuery connection
     * 
     */
    public List<String> scopes() {
        return this.scopes;
    }
    /**
     * @return Timeout in seconds for queries
     * 
     */
    public Integer timeoutSeconds() {
        return this.timeoutSeconds;
    }
    /**
     * @return Token URI for the Service Account
     * 
     */
    public String tokenUri() {
        return this.tokenUri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGlobalConnectionBigquery defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applicationId;
        private String applicationSecret;
        private String authProviderX509CertUrl;
        private String authUri;
        private String clientEmail;
        private String clientId;
        private String clientX509CertUrl;
        private String dataprocClusterName;
        private String dataprocRegion;
        private String executionProject;
        private String gcpProjectId;
        private String gcsBucket;
        private String impersonateServiceAccount;
        private Integer jobCreationTimeoutSeconds;
        private Integer jobRetryDeadlineSeconds;
        private String location;
        private Integer maximumBytesBilled;
        private String priority;
        private String privateKey;
        private String privateKeyId;
        private Integer retries;
        private List<String> scopes;
        private Integer timeoutSeconds;
        private String tokenUri;
        public Builder() {}
        public Builder(GetGlobalConnectionBigquery defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationId = defaults.applicationId;
    	      this.applicationSecret = defaults.applicationSecret;
    	      this.authProviderX509CertUrl = defaults.authProviderX509CertUrl;
    	      this.authUri = defaults.authUri;
    	      this.clientEmail = defaults.clientEmail;
    	      this.clientId = defaults.clientId;
    	      this.clientX509CertUrl = defaults.clientX509CertUrl;
    	      this.dataprocClusterName = defaults.dataprocClusterName;
    	      this.dataprocRegion = defaults.dataprocRegion;
    	      this.executionProject = defaults.executionProject;
    	      this.gcpProjectId = defaults.gcpProjectId;
    	      this.gcsBucket = defaults.gcsBucket;
    	      this.impersonateServiceAccount = defaults.impersonateServiceAccount;
    	      this.jobCreationTimeoutSeconds = defaults.jobCreationTimeoutSeconds;
    	      this.jobRetryDeadlineSeconds = defaults.jobRetryDeadlineSeconds;
    	      this.location = defaults.location;
    	      this.maximumBytesBilled = defaults.maximumBytesBilled;
    	      this.priority = defaults.priority;
    	      this.privateKey = defaults.privateKey;
    	      this.privateKeyId = defaults.privateKeyId;
    	      this.retries = defaults.retries;
    	      this.scopes = defaults.scopes;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
    	      this.tokenUri = defaults.tokenUri;
        }

        @CustomType.Setter
        public Builder applicationId(String applicationId) {
            if (applicationId == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "applicationId");
            }
            this.applicationId = applicationId;
            return this;
        }
        @CustomType.Setter
        public Builder applicationSecret(String applicationSecret) {
            if (applicationSecret == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "applicationSecret");
            }
            this.applicationSecret = applicationSecret;
            return this;
        }
        @CustomType.Setter
        public Builder authProviderX509CertUrl(String authProviderX509CertUrl) {
            if (authProviderX509CertUrl == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "authProviderX509CertUrl");
            }
            this.authProviderX509CertUrl = authProviderX509CertUrl;
            return this;
        }
        @CustomType.Setter
        public Builder authUri(String authUri) {
            if (authUri == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "authUri");
            }
            this.authUri = authUri;
            return this;
        }
        @CustomType.Setter
        public Builder clientEmail(String clientEmail) {
            if (clientEmail == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "clientEmail");
            }
            this.clientEmail = clientEmail;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientX509CertUrl(String clientX509CertUrl) {
            if (clientX509CertUrl == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "clientX509CertUrl");
            }
            this.clientX509CertUrl = clientX509CertUrl;
            return this;
        }
        @CustomType.Setter
        public Builder dataprocClusterName(String dataprocClusterName) {
            if (dataprocClusterName == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "dataprocClusterName");
            }
            this.dataprocClusterName = dataprocClusterName;
            return this;
        }
        @CustomType.Setter
        public Builder dataprocRegion(String dataprocRegion) {
            if (dataprocRegion == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "dataprocRegion");
            }
            this.dataprocRegion = dataprocRegion;
            return this;
        }
        @CustomType.Setter
        public Builder executionProject(String executionProject) {
            if (executionProject == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "executionProject");
            }
            this.executionProject = executionProject;
            return this;
        }
        @CustomType.Setter
        public Builder gcpProjectId(String gcpProjectId) {
            if (gcpProjectId == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "gcpProjectId");
            }
            this.gcpProjectId = gcpProjectId;
            return this;
        }
        @CustomType.Setter
        public Builder gcsBucket(String gcsBucket) {
            if (gcsBucket == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "gcsBucket");
            }
            this.gcsBucket = gcsBucket;
            return this;
        }
        @CustomType.Setter
        public Builder impersonateServiceAccount(String impersonateServiceAccount) {
            if (impersonateServiceAccount == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "impersonateServiceAccount");
            }
            this.impersonateServiceAccount = impersonateServiceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder jobCreationTimeoutSeconds(Integer jobCreationTimeoutSeconds) {
            if (jobCreationTimeoutSeconds == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "jobCreationTimeoutSeconds");
            }
            this.jobCreationTimeoutSeconds = jobCreationTimeoutSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder jobRetryDeadlineSeconds(Integer jobRetryDeadlineSeconds) {
            if (jobRetryDeadlineSeconds == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "jobRetryDeadlineSeconds");
            }
            this.jobRetryDeadlineSeconds = jobRetryDeadlineSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder maximumBytesBilled(Integer maximumBytesBilled) {
            if (maximumBytesBilled == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "maximumBytesBilled");
            }
            this.maximumBytesBilled = maximumBytesBilled;
            return this;
        }
        @CustomType.Setter
        public Builder priority(String priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder privateKey(String privateKey) {
            if (privateKey == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "privateKey");
            }
            this.privateKey = privateKey;
            return this;
        }
        @CustomType.Setter
        public Builder privateKeyId(String privateKeyId) {
            if (privateKeyId == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "privateKeyId");
            }
            this.privateKeyId = privateKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder retries(Integer retries) {
            if (retries == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "retries");
            }
            this.retries = retries;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(List<String> scopes) {
            if (scopes == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "scopes");
            }
            this.scopes = scopes;
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder timeoutSeconds(Integer timeoutSeconds) {
            if (timeoutSeconds == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "timeoutSeconds");
            }
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder tokenUri(String tokenUri) {
            if (tokenUri == null) {
              throw new MissingRequiredPropertyException("GetGlobalConnectionBigquery", "tokenUri");
            }
            this.tokenUri = tokenUri;
            return this;
        }
        public GetGlobalConnectionBigquery build() {
            final var _resultValue = new GetGlobalConnectionBigquery();
            _resultValue.applicationId = applicationId;
            _resultValue.applicationSecret = applicationSecret;
            _resultValue.authProviderX509CertUrl = authProviderX509CertUrl;
            _resultValue.authUri = authUri;
            _resultValue.clientEmail = clientEmail;
            _resultValue.clientId = clientId;
            _resultValue.clientX509CertUrl = clientX509CertUrl;
            _resultValue.dataprocClusterName = dataprocClusterName;
            _resultValue.dataprocRegion = dataprocRegion;
            _resultValue.executionProject = executionProject;
            _resultValue.gcpProjectId = gcpProjectId;
            _resultValue.gcsBucket = gcsBucket;
            _resultValue.impersonateServiceAccount = impersonateServiceAccount;
            _resultValue.jobCreationTimeoutSeconds = jobCreationTimeoutSeconds;
            _resultValue.jobRetryDeadlineSeconds = jobRetryDeadlineSeconds;
            _resultValue.location = location;
            _resultValue.maximumBytesBilled = maximumBytesBilled;
            _resultValue.priority = priority;
            _resultValue.privateKey = privateKey;
            _resultValue.privateKeyId = privateKeyId;
            _resultValue.retries = retries;
            _resultValue.scopes = scopes;
            _resultValue.timeoutSeconds = timeoutSeconds;
            _resultValue.tokenUri = tokenUri;
            return _resultValue;
        }
    }
}

// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class StarburstCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final StarburstCredentialArgs Empty = new StarburstCredentialArgs();

    /**
     * The catalog to connect use
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    /**
     * @return The catalog to connect use
     * 
     */
    public Output<String> database() {
        return this.database;
    }

    /**
     * The password for the Starburst/Trino account
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return The password for the Starburst/Trino account
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * Project ID to create the Starburst/Trino credential in
     * 
     */
    @Import(name="projectId", required=true)
    private Output<Integer> projectId;

    /**
     * @return Project ID to create the Starburst/Trino credential in
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }

    /**
     * The schema where to create models
     * 
     */
    @Import(name="schema", required=true)
    private Output<String> schema;

    /**
     * @return The schema where to create models
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }

    /**
     * The username for the Starburst/Trino account
     * 
     */
    @Import(name="user", required=true)
    private Output<String> user;

    /**
     * @return The username for the Starburst/Trino account
     * 
     */
    public Output<String> user() {
        return this.user;
    }

    private StarburstCredentialArgs() {}

    private StarburstCredentialArgs(StarburstCredentialArgs $) {
        this.database = $.database;
        this.password = $.password;
        this.projectId = $.projectId;
        this.schema = $.schema;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StarburstCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StarburstCredentialArgs $;

        public Builder() {
            $ = new StarburstCredentialArgs();
        }

        public Builder(StarburstCredentialArgs defaults) {
            $ = new StarburstCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param database The catalog to connect use
         * 
         * @return builder
         * 
         */
        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The catalog to connect use
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param password The password for the Starburst/Trino account
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password for the Starburst/Trino account
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param projectId Project ID to create the Starburst/Trino credential in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID to create the Starburst/Trino credential in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param schema The schema where to create models
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema where to create models
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param user The username for the Starburst/Trino account
         * 
         * @return builder
         * 
         */
        public Builder user(Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user The username for the Starburst/Trino account
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public StarburstCredentialArgs build() {
            if ($.database == null) {
                throw new MissingRequiredPropertyException("StarburstCredentialArgs", "database");
            }
            if ($.password == null) {
                throw new MissingRequiredPropertyException("StarburstCredentialArgs", "password");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("StarburstCredentialArgs", "projectId");
            }
            if ($.schema == null) {
                throw new MissingRequiredPropertyException("StarburstCredentialArgs", "schema");
            }
            if ($.user == null) {
                throw new MissingRequiredPropertyException("StarburstCredentialArgs", "user");
            }
            return $;
        }
    }

}

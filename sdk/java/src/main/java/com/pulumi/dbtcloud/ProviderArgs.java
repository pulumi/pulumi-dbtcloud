// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * Account identifier for your dbt Cloud implementation. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_ACCOUNT_ID`
     * 
     */
    @Import(name="accountId", json=true)
    private @Nullable Output<Integer> accountId;

    /**
     * @return Account identifier for your dbt Cloud implementation. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_ACCOUNT_ID`
     * 
     */
    public Optional<Output<Integer>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * If set to true, the provider will not retry requests that fail due to rate limiting. Defaults to false.
     * 
     */
    @Import(name="disableRetry", json=true)
    private @Nullable Output<Boolean> disableRetry;

    /**
     * @return If set to true, the provider will not retry requests that fail due to rate limiting. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> disableRetry() {
        return Optional.ofNullable(this.disableRetry);
    }

    /**
     * URL for your dbt Cloud deployment. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_HOST_URL` - Defaults to https://cloud.getdbt.com/api
     * 
     */
    @Import(name="hostUrl")
    private @Nullable Output<String> hostUrl;

    /**
     * @return URL for your dbt Cloud deployment. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_HOST_URL` - Defaults to https://cloud.getdbt.com/api
     * 
     */
    public Optional<Output<String>> hostUrl() {
        return Optional.ofNullable(this.hostUrl);
    }

    /**
     * The maximum number of retries to attempt for requests that fail due to rate limiting. Defaults to 3 retries.
     * 
     */
    @Import(name="maxRetries", json=true)
    private @Nullable Output<Integer> maxRetries;

    /**
     * @return The maximum number of retries to attempt for requests that fail due to rate limiting. Defaults to 3 retries.
     * 
     */
    public Optional<Output<Integer>> maxRetries() {
        return Optional.ofNullable(this.maxRetries);
    }

    /**
     * List of HTTP status codes that should be retried when encountered. Defaults to [429, 500, 502, 503, 504].
     * 
     */
    @Import(name="retriableStatusCodes", json=true)
    private @Nullable Output<List<String>> retriableStatusCodes;

    /**
     * @return List of HTTP status codes that should be retried when encountered. Defaults to [429, 500, 502, 503, 504].
     * 
     */
    public Optional<Output<List<String>>> retriableStatusCodes() {
        return Optional.ofNullable(this.retriableStatusCodes);
    }

    /**
     * The number of seconds to wait before retrying a request that failed due to rate limiting. Defaults to 10 seconds.
     * 
     */
    @Import(name="retryIntervalSeconds", json=true)
    private @Nullable Output<Integer> retryIntervalSeconds;

    /**
     * @return The number of seconds to wait before retrying a request that failed due to rate limiting. Defaults to 10 seconds.
     * 
     */
    public Optional<Output<Integer>> retryIntervalSeconds() {
        return Optional.ofNullable(this.retryIntervalSeconds);
    }

    /**
     * API token for your dbt Cloud. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_TOKEN`
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return API token for your dbt Cloud. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_TOKEN`
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.accountId = $.accountId;
        this.disableRetry = $.disableRetry;
        this.hostUrl = $.hostUrl;
        this.maxRetries = $.maxRetries;
        this.retriableStatusCodes = $.retriableStatusCodes;
        this.retryIntervalSeconds = $.retryIntervalSeconds;
        this.token = $.token;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account identifier for your dbt Cloud implementation. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_ACCOUNT_ID`
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<Integer> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account identifier for your dbt Cloud implementation. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_ACCOUNT_ID`
         * 
         * @return builder
         * 
         */
        public Builder accountId(Integer accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param disableRetry If set to true, the provider will not retry requests that fail due to rate limiting. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder disableRetry(@Nullable Output<Boolean> disableRetry) {
            $.disableRetry = disableRetry;
            return this;
        }

        /**
         * @param disableRetry If set to true, the provider will not retry requests that fail due to rate limiting. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder disableRetry(Boolean disableRetry) {
            return disableRetry(Output.of(disableRetry));
        }

        /**
         * @param hostUrl URL for your dbt Cloud deployment. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_HOST_URL` - Defaults to https://cloud.getdbt.com/api
         * 
         * @return builder
         * 
         */
        public Builder hostUrl(@Nullable Output<String> hostUrl) {
            $.hostUrl = hostUrl;
            return this;
        }

        /**
         * @param hostUrl URL for your dbt Cloud deployment. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_HOST_URL` - Defaults to https://cloud.getdbt.com/api
         * 
         * @return builder
         * 
         */
        public Builder hostUrl(String hostUrl) {
            return hostUrl(Output.of(hostUrl));
        }

        /**
         * @param maxRetries The maximum number of retries to attempt for requests that fail due to rate limiting. Defaults to 3 retries.
         * 
         * @return builder
         * 
         */
        public Builder maxRetries(@Nullable Output<Integer> maxRetries) {
            $.maxRetries = maxRetries;
            return this;
        }

        /**
         * @param maxRetries The maximum number of retries to attempt for requests that fail due to rate limiting. Defaults to 3 retries.
         * 
         * @return builder
         * 
         */
        public Builder maxRetries(Integer maxRetries) {
            return maxRetries(Output.of(maxRetries));
        }

        /**
         * @param retriableStatusCodes List of HTTP status codes that should be retried when encountered. Defaults to [429, 500, 502, 503, 504].
         * 
         * @return builder
         * 
         */
        public Builder retriableStatusCodes(@Nullable Output<List<String>> retriableStatusCodes) {
            $.retriableStatusCodes = retriableStatusCodes;
            return this;
        }

        /**
         * @param retriableStatusCodes List of HTTP status codes that should be retried when encountered. Defaults to [429, 500, 502, 503, 504].
         * 
         * @return builder
         * 
         */
        public Builder retriableStatusCodes(List<String> retriableStatusCodes) {
            return retriableStatusCodes(Output.of(retriableStatusCodes));
        }

        /**
         * @param retriableStatusCodes List of HTTP status codes that should be retried when encountered. Defaults to [429, 500, 502, 503, 504].
         * 
         * @return builder
         * 
         */
        public Builder retriableStatusCodes(String... retriableStatusCodes) {
            return retriableStatusCodes(List.of(retriableStatusCodes));
        }

        /**
         * @param retryIntervalSeconds The number of seconds to wait before retrying a request that failed due to rate limiting. Defaults to 10 seconds.
         * 
         * @return builder
         * 
         */
        public Builder retryIntervalSeconds(@Nullable Output<Integer> retryIntervalSeconds) {
            $.retryIntervalSeconds = retryIntervalSeconds;
            return this;
        }

        /**
         * @param retryIntervalSeconds The number of seconds to wait before retrying a request that failed due to rate limiting. Defaults to 10 seconds.
         * 
         * @return builder
         * 
         */
        public Builder retryIntervalSeconds(Integer retryIntervalSeconds) {
            return retryIntervalSeconds(Output.of(retryIntervalSeconds));
        }

        /**
         * @param token API token for your dbt Cloud. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_TOKEN`
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token API token for your dbt Cloud. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_TOKEN`
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        public ProviderArgs build() {
            $.accountId = Codegen.integerProp("accountId").output().arg($.accountId).env("DBT_CLOUD_ACCOUNT_ID").getNullable();
            $.hostUrl = Codegen.stringProp("hostUrl").output().arg($.hostUrl).env("DBT_CLOUD_HOST_URL").def("https://cloud.getdbt.com/api").getNullable();
            $.token = Codegen.stringProp("token").secret().arg($.token).env("DBT_CLOUD_TOKEN").getNullable();
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRunsFilter extends com.pulumi.resources.InvokeArgs {

    public static final GetRunsFilter Empty = new GetRunsFilter();

    /**
     * The ID of the environment
     * 
     */
    @Import(name="environmentId")
    private @Nullable Integer environmentId;

    /**
     * @return The ID of the environment
     * 
     */
    public Optional<Integer> environmentId() {
        return Optional.ofNullable(this.environmentId);
    }

    /**
     * The ID of the job definition
     * 
     */
    @Import(name="jobDefinitionId")
    private @Nullable Integer jobDefinitionId;

    /**
     * @return The ID of the job definition
     * 
     */
    public Optional<Integer> jobDefinitionId() {
        return Optional.ofNullable(this.jobDefinitionId);
    }

    /**
     * The limit of the runs
     * 
     */
    @Import(name="limit")
    private @Nullable Integer limit;

    /**
     * @return The limit of the runs
     * 
     */
    public Optional<Integer> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * The ID of the project
     * 
     */
    @Import(name="projectId")
    private @Nullable Integer projectId;

    /**
     * @return The ID of the project
     * 
     */
    public Optional<Integer> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The ID of the pull request
     * 
     */
    @Import(name="pullRequestId")
    private @Nullable Integer pullRequestId;

    /**
     * @return The ID of the pull request
     * 
     */
    public Optional<Integer> pullRequestId() {
        return Optional.ofNullable(this.pullRequestId);
    }

    /**
     * The status of the run
     * 
     */
    @Import(name="status")
    private @Nullable Integer status;

    /**
     * @return The status of the run
     * 
     */
    public Optional<Integer> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The status of the run
     * 
     */
    @Import(name="statusIn")
    private @Nullable String statusIn;

    /**
     * @return The status of the run
     * 
     */
    public Optional<String> statusIn() {
        return Optional.ofNullable(this.statusIn);
    }

    /**
     * The ID of the trigger
     * 
     */
    @Import(name="triggerId")
    private @Nullable Integer triggerId;

    /**
     * @return The ID of the trigger
     * 
     */
    public Optional<Integer> triggerId() {
        return Optional.ofNullable(this.triggerId);
    }

    private GetRunsFilter() {}

    private GetRunsFilter(GetRunsFilter $) {
        this.environmentId = $.environmentId;
        this.jobDefinitionId = $.jobDefinitionId;
        this.limit = $.limit;
        this.projectId = $.projectId;
        this.pullRequestId = $.pullRequestId;
        this.status = $.status;
        this.statusIn = $.statusIn;
        this.triggerId = $.triggerId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRunsFilter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRunsFilter $;

        public Builder() {
            $ = new GetRunsFilter();
        }

        public Builder(GetRunsFilter defaults) {
            $ = new GetRunsFilter(Objects.requireNonNull(defaults));
        }

        /**
         * @param environmentId The ID of the environment
         * 
         * @return builder
         * 
         */
        public Builder environmentId(@Nullable Integer environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param jobDefinitionId The ID of the job definition
         * 
         * @return builder
         * 
         */
        public Builder jobDefinitionId(@Nullable Integer jobDefinitionId) {
            $.jobDefinitionId = jobDefinitionId;
            return this;
        }

        /**
         * @param limit The limit of the runs
         * 
         * @return builder
         * 
         */
        public Builder limit(@Nullable Integer limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param projectId The ID of the project
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Integer projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param pullRequestId The ID of the pull request
         * 
         * @return builder
         * 
         */
        public Builder pullRequestId(@Nullable Integer pullRequestId) {
            $.pullRequestId = pullRequestId;
            return this;
        }

        /**
         * @param status The status of the run
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Integer status) {
            $.status = status;
            return this;
        }

        /**
         * @param statusIn The status of the run
         * 
         * @return builder
         * 
         */
        public Builder statusIn(@Nullable String statusIn) {
            $.statusIn = statusIn;
            return this;
        }

        /**
         * @param triggerId The ID of the trigger
         * 
         * @return builder
         * 
         */
        public Builder triggerId(@Nullable Integer triggerId) {
            $.triggerId = triggerId;
            return this;
        }

        public GetRunsFilter build() {
            return $;
        }
    }

}

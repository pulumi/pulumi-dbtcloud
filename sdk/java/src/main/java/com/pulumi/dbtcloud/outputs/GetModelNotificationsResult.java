// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetModelNotificationsResult {
    /**
     * @return Whether model notifications are enabled for this environment
     * 
     */
    private Boolean enabled;
    /**
     * @return The ID of the dbt Cloud environment
     * 
     */
    private String environmentId;
    /**
     * @return The internal ID of the model notifications configuration
     * 
     */
    private Integer id;
    /**
     * @return Whether to send notifications for failed model runs
     * 
     */
    private Boolean onFailure;
    /**
     * @return Whether to send notifications for skipped model runs
     * 
     */
    private Boolean onSkipped;
    /**
     * @return Whether to send notifications for successful model runs
     * 
     */
    private Boolean onSuccess;
    /**
     * @return Whether to send notifications for model runs with warnings
     * 
     */
    private Boolean onWarning;

    private GetModelNotificationsResult() {}
    /**
     * @return Whether model notifications are enabled for this environment
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The ID of the dbt Cloud environment
     * 
     */
    public String environmentId() {
        return this.environmentId;
    }
    /**
     * @return The internal ID of the model notifications configuration
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return Whether to send notifications for failed model runs
     * 
     */
    public Boolean onFailure() {
        return this.onFailure;
    }
    /**
     * @return Whether to send notifications for skipped model runs
     * 
     */
    public Boolean onSkipped() {
        return this.onSkipped;
    }
    /**
     * @return Whether to send notifications for successful model runs
     * 
     */
    public Boolean onSuccess() {
        return this.onSuccess;
    }
    /**
     * @return Whether to send notifications for model runs with warnings
     * 
     */
    public Boolean onWarning() {
        return this.onWarning;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetModelNotificationsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean enabled;
        private String environmentId;
        private Integer id;
        private Boolean onFailure;
        private Boolean onSkipped;
        private Boolean onSuccess;
        private Boolean onWarning;
        public Builder() {}
        public Builder(GetModelNotificationsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.environmentId = defaults.environmentId;
    	      this.id = defaults.id;
    	      this.onFailure = defaults.onFailure;
    	      this.onSkipped = defaults.onSkipped;
    	      this.onSuccess = defaults.onSuccess;
    	      this.onWarning = defaults.onWarning;
        }

        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetModelNotificationsResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder environmentId(String environmentId) {
            if (environmentId == null) {
              throw new MissingRequiredPropertyException("GetModelNotificationsResult", "environmentId");
            }
            this.environmentId = environmentId;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetModelNotificationsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder onFailure(Boolean onFailure) {
            if (onFailure == null) {
              throw new MissingRequiredPropertyException("GetModelNotificationsResult", "onFailure");
            }
            this.onFailure = onFailure;
            return this;
        }
        @CustomType.Setter
        public Builder onSkipped(Boolean onSkipped) {
            if (onSkipped == null) {
              throw new MissingRequiredPropertyException("GetModelNotificationsResult", "onSkipped");
            }
            this.onSkipped = onSkipped;
            return this;
        }
        @CustomType.Setter
        public Builder onSuccess(Boolean onSuccess) {
            if (onSuccess == null) {
              throw new MissingRequiredPropertyException("GetModelNotificationsResult", "onSuccess");
            }
            this.onSuccess = onSuccess;
            return this;
        }
        @CustomType.Setter
        public Builder onWarning(Boolean onWarning) {
            if (onWarning == null) {
              throw new MissingRequiredPropertyException("GetModelNotificationsResult", "onWarning");
            }
            this.onWarning = onWarning;
            return this;
        }
        public GetModelNotificationsResult build() {
            final var _resultValue = new GetModelNotificationsResult();
            _resultValue.enabled = enabled;
            _resultValue.environmentId = environmentId;
            _resultValue.id = id;
            _resultValue.onFailure = onFailure;
            _resultValue.onSkipped = onSkipped;
            _resultValue.onSuccess = onSuccess;
            _resultValue.onWarning = onWarning;
            return _resultValue;
        }
    }
}

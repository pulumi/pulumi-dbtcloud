// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dbtcloud.inputs.ScimGroupPermissionsPermissionArgs;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScimGroupPermissionsState extends com.pulumi.resources.ResourceArgs {

    public static final ScimGroupPermissionsState Empty = new ScimGroupPermissionsState();

    /**
     * The ID of the existing group to manage permissions for. This group must already exist.
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<Integer> groupId;

    /**
     * @return The ID of the existing group to manage permissions for. This group must already exist.
     * 
     */
    public Optional<Output<Integer>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    /**
     * Set of permissions to apply to the group. This will replace all existing permissions for the group.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<List<ScimGroupPermissionsPermissionArgs>> permissions;

    /**
     * @return Set of permissions to apply to the group. This will replace all existing permissions for the group.
     * 
     */
    public Optional<Output<List<ScimGroupPermissionsPermissionArgs>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    private ScimGroupPermissionsState() {}

    private ScimGroupPermissionsState(ScimGroupPermissionsState $) {
        this.groupId = $.groupId;
        this.permissions = $.permissions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScimGroupPermissionsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScimGroupPermissionsState $;

        public Builder() {
            $ = new ScimGroupPermissionsState();
        }

        public Builder(ScimGroupPermissionsState defaults) {
            $ = new ScimGroupPermissionsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param groupId The ID of the existing group to manage permissions for. This group must already exist.
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<Integer> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The ID of the existing group to manage permissions for. This group must already exist.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Integer groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param permissions Set of permissions to apply to the group. This will replace all existing permissions for the group.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<List<ScimGroupPermissionsPermissionArgs>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions Set of permissions to apply to the group. This will replace all existing permissions for the group.
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<ScimGroupPermissionsPermissionArgs> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions Set of permissions to apply to the group. This will replace all existing permissions for the group.
         * 
         * @return builder
         * 
         */
        public Builder permissions(ScimGroupPermissionsPermissionArgs... permissions) {
            return permissions(List.of(permissions));
        }

        public ScimGroupPermissionsState build() {
            return $;
        }
    }

}

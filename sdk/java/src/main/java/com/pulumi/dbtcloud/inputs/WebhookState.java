// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebhookState extends com.pulumi.resources.ResourceArgs {

    public static final WebhookState Empty = new WebhookState();

    /**
     * Webhooks Account Identifier
     * 
     */
    @Import(name="accountIdentifier")
    private @Nullable Output<String> accountIdentifier;

    /**
     * @return Webhooks Account Identifier
     * 
     */
    public Optional<Output<String>> accountIdentifier() {
        return Optional.ofNullable(this.accountIdentifier);
    }

    /**
     * Webhooks active flag
     * 
     */
    @Import(name="active")
    private @Nullable Output<Boolean> active;

    /**
     * @return Webhooks active flag
     * 
     */
    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * Webhooks Client URL
     * 
     */
    @Import(name="clientUrl")
    private @Nullable Output<String> clientUrl;

    /**
     * @return Webhooks Client URL
     * 
     */
    public Optional<Output<String>> clientUrl() {
        return Optional.ofNullable(this.clientUrl);
    }

    /**
     * Webhooks Description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Webhooks Description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Webhooks Event Types
     * 
     */
    @Import(name="eventTypes")
    private @Nullable Output<List<String>> eventTypes;

    /**
     * @return Webhooks Event Types
     * 
     */
    public Optional<Output<List<String>>> eventTypes() {
        return Optional.ofNullable(this.eventTypes);
    }

    /**
     * Secret key for the webhook. Can be used to validate the authenticity of the webhook.
     * 
     */
    @Import(name="hmacSecret")
    private @Nullable Output<String> hmacSecret;

    /**
     * @return Secret key for the webhook. Can be used to validate the authenticity of the webhook.
     * 
     */
    public Optional<Output<String>> hmacSecret() {
        return Optional.ofNullable(this.hmacSecret);
    }

    /**
     * Latest HTTP status of the webhook
     * 
     */
    @Import(name="httpStatusCode")
    private @Nullable Output<String> httpStatusCode;

    /**
     * @return Latest HTTP status of the webhook
     * 
     */
    public Optional<Output<String>> httpStatusCode() {
        return Optional.ofNullable(this.httpStatusCode);
    }

    /**
     * List of job IDs to trigger the webhook. When null or empty, the webhook will trigger on all jobs
     * 
     */
    @Import(name="jobIds")
    private @Nullable Output<List<Integer>> jobIds;

    /**
     * @return List of job IDs to trigger the webhook. When null or empty, the webhook will trigger on all jobs
     * 
     */
    public Optional<Output<List<Integer>>> jobIds() {
        return Optional.ofNullable(this.jobIds);
    }

    /**
     * Webhooks Name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Webhooks Name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Webhook&#39;s ID
     * 
     * @deprecated
     * Use `id` instead
     * 
     */
    @Deprecated /* Use `id` instead */
    @Import(name="webhookId")
    private @Nullable Output<String> webhookId;

    /**
     * @return Webhook&#39;s ID
     * 
     * @deprecated
     * Use `id` instead
     * 
     */
    @Deprecated /* Use `id` instead */
    public Optional<Output<String>> webhookId() {
        return Optional.ofNullable(this.webhookId);
    }

    private WebhookState() {}

    private WebhookState(WebhookState $) {
        this.accountIdentifier = $.accountIdentifier;
        this.active = $.active;
        this.clientUrl = $.clientUrl;
        this.description = $.description;
        this.eventTypes = $.eventTypes;
        this.hmacSecret = $.hmacSecret;
        this.httpStatusCode = $.httpStatusCode;
        this.jobIds = $.jobIds;
        this.name = $.name;
        this.webhookId = $.webhookId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebhookState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebhookState $;

        public Builder() {
            $ = new WebhookState();
        }

        public Builder(WebhookState defaults) {
            $ = new WebhookState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountIdentifier Webhooks Account Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountIdentifier(@Nullable Output<String> accountIdentifier) {
            $.accountIdentifier = accountIdentifier;
            return this;
        }

        /**
         * @param accountIdentifier Webhooks Account Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountIdentifier(String accountIdentifier) {
            return accountIdentifier(Output.of(accountIdentifier));
        }

        /**
         * @param active Webhooks active flag
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active Webhooks active flag
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param clientUrl Webhooks Client URL
         * 
         * @return builder
         * 
         */
        public Builder clientUrl(@Nullable Output<String> clientUrl) {
            $.clientUrl = clientUrl;
            return this;
        }

        /**
         * @param clientUrl Webhooks Client URL
         * 
         * @return builder
         * 
         */
        public Builder clientUrl(String clientUrl) {
            return clientUrl(Output.of(clientUrl));
        }

        /**
         * @param description Webhooks Description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Webhooks Description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param eventTypes Webhooks Event Types
         * 
         * @return builder
         * 
         */
        public Builder eventTypes(@Nullable Output<List<String>> eventTypes) {
            $.eventTypes = eventTypes;
            return this;
        }

        /**
         * @param eventTypes Webhooks Event Types
         * 
         * @return builder
         * 
         */
        public Builder eventTypes(List<String> eventTypes) {
            return eventTypes(Output.of(eventTypes));
        }

        /**
         * @param eventTypes Webhooks Event Types
         * 
         * @return builder
         * 
         */
        public Builder eventTypes(String... eventTypes) {
            return eventTypes(List.of(eventTypes));
        }

        /**
         * @param hmacSecret Secret key for the webhook. Can be used to validate the authenticity of the webhook.
         * 
         * @return builder
         * 
         */
        public Builder hmacSecret(@Nullable Output<String> hmacSecret) {
            $.hmacSecret = hmacSecret;
            return this;
        }

        /**
         * @param hmacSecret Secret key for the webhook. Can be used to validate the authenticity of the webhook.
         * 
         * @return builder
         * 
         */
        public Builder hmacSecret(String hmacSecret) {
            return hmacSecret(Output.of(hmacSecret));
        }

        /**
         * @param httpStatusCode Latest HTTP status of the webhook
         * 
         * @return builder
         * 
         */
        public Builder httpStatusCode(@Nullable Output<String> httpStatusCode) {
            $.httpStatusCode = httpStatusCode;
            return this;
        }

        /**
         * @param httpStatusCode Latest HTTP status of the webhook
         * 
         * @return builder
         * 
         */
        public Builder httpStatusCode(String httpStatusCode) {
            return httpStatusCode(Output.of(httpStatusCode));
        }

        /**
         * @param jobIds List of job IDs to trigger the webhook. When null or empty, the webhook will trigger on all jobs
         * 
         * @return builder
         * 
         */
        public Builder jobIds(@Nullable Output<List<Integer>> jobIds) {
            $.jobIds = jobIds;
            return this;
        }

        /**
         * @param jobIds List of job IDs to trigger the webhook. When null or empty, the webhook will trigger on all jobs
         * 
         * @return builder
         * 
         */
        public Builder jobIds(List<Integer> jobIds) {
            return jobIds(Output.of(jobIds));
        }

        /**
         * @param jobIds List of job IDs to trigger the webhook. When null or empty, the webhook will trigger on all jobs
         * 
         * @return builder
         * 
         */
        public Builder jobIds(Integer... jobIds) {
            return jobIds(List.of(jobIds));
        }

        /**
         * @param name Webhooks Name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Webhooks Name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param webhookId Webhook&#39;s ID
         * 
         * @return builder
         * 
         * @deprecated
         * Use `id` instead
         * 
         */
        @Deprecated /* Use `id` instead */
        public Builder webhookId(@Nullable Output<String> webhookId) {
            $.webhookId = webhookId;
            return this;
        }

        /**
         * @param webhookId Webhook&#39;s ID
         * 
         * @return builder
         * 
         * @deprecated
         * Use `id` instead
         * 
         */
        @Deprecated /* Use `id` instead */
        public Builder webhookId(String webhookId) {
            return webhookId(Output.of(webhookId));
        }

        public WebhookState build() {
            return $;
        }
    }

}

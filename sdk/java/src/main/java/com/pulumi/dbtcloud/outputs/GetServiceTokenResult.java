// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.dbtcloud.outputs.GetServiceTokenServiceTokenPermission;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetServiceTokenResult {
    /**
     * @return The ID of the service token
     * 
     */
    private String id;
    /**
     * @return Service token name
     * 
     */
    private String name;
    /**
     * @return The ID of the service token
     * 
     */
    private Integer serviceTokenId;
    /**
     * @return Permissions set for the service token
     * 
     */
    private @Nullable List<GetServiceTokenServiceTokenPermission> serviceTokenPermissions;
    /**
     * @return Service token UID (part of the token)
     * 
     */
    private String uid;

    private GetServiceTokenResult() {}
    /**
     * @return The ID of the service token
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Service token name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The ID of the service token
     * 
     */
    public Integer serviceTokenId() {
        return this.serviceTokenId;
    }
    /**
     * @return Permissions set for the service token
     * 
     */
    public List<GetServiceTokenServiceTokenPermission> serviceTokenPermissions() {
        return this.serviceTokenPermissions == null ? List.of() : this.serviceTokenPermissions;
    }
    /**
     * @return Service token UID (part of the token)
     * 
     */
    public String uid() {
        return this.uid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceTokenResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private String name;
        private Integer serviceTokenId;
        private @Nullable List<GetServiceTokenServiceTokenPermission> serviceTokenPermissions;
        private String uid;
        public Builder() {}
        public Builder(GetServiceTokenResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.serviceTokenId = defaults.serviceTokenId;
    	      this.serviceTokenPermissions = defaults.serviceTokenPermissions;
    	      this.uid = defaults.uid;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceTokenResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceTokenResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTokenId(Integer serviceTokenId) {
            if (serviceTokenId == null) {
              throw new MissingRequiredPropertyException("GetServiceTokenResult", "serviceTokenId");
            }
            this.serviceTokenId = serviceTokenId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTokenPermissions(@Nullable List<GetServiceTokenServiceTokenPermission> serviceTokenPermissions) {

            this.serviceTokenPermissions = serviceTokenPermissions;
            return this;
        }
        public Builder serviceTokenPermissions(GetServiceTokenServiceTokenPermission... serviceTokenPermissions) {
            return serviceTokenPermissions(List.of(serviceTokenPermissions));
        }
        @CustomType.Setter
        public Builder uid(String uid) {
            if (uid == null) {
              throw new MissingRequiredPropertyException("GetServiceTokenResult", "uid");
            }
            this.uid = uid;
            return this;
        }
        public GetServiceTokenResult build() {
            final var _resultValue = new GetServiceTokenResult();
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.serviceTokenId = serviceTokenId;
            _resultValue.serviceTokenPermissions = serviceTokenPermissions;
            _resultValue.uid = uid;
            return _resultValue;
        }
    }
}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PostgresCredentialState extends com.pulumi.resources.ResourceArgs {

    public static final PostgresCredentialState Empty = new PostgresCredentialState();

    /**
     * The system Postgres/Redshift/AlloyDB credential ID
     * 
     */
    @Import(name="credentialId")
    private @Nullable Output<Integer> credentialId;

    /**
     * @return The system Postgres/Redshift/AlloyDB credential ID
     * 
     */
    public Optional<Output<Integer>> credentialId() {
        return Optional.ofNullable(this.credentialId);
    }

    /**
     * Default schema name
     * 
     */
    @Import(name="defaultSchema")
    private @Nullable Output<String> defaultSchema;

    /**
     * @return Default schema name
     * 
     */
    public Optional<Output<String>> defaultSchema() {
        return Optional.ofNullable(this.defaultSchema);
    }

    /**
     * Whether the Postgres/Redshift/AlloyDB credential is active
     * 
     */
    @Import(name="isActive")
    private @Nullable Output<Boolean> isActive;

    /**
     * @return Whether the Postgres/Redshift/AlloyDB credential is active
     * 
     */
    public Optional<Output<Boolean>> isActive() {
        return Optional.ofNullable(this.isActive);
    }

    /**
     * Number of threads to use
     * 
     */
    @Import(name="numThreads")
    private @Nullable Output<Integer> numThreads;

    /**
     * @return Number of threads to use
     * 
     */
    public Optional<Output<Integer>> numThreads() {
        return Optional.ofNullable(this.numThreads);
    }

    /**
     * Password for Postgres/Redshift/AlloyDB
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password for Postgres/Redshift/AlloyDB
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Project ID to create the Postgres/Redshift/AlloyDB credential in
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<Integer> projectId;

    /**
     * @return Project ID to create the Postgres/Redshift/AlloyDB credential in
     * 
     */
    public Optional<Output<Integer>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Default schema name
     * 
     */
    @Import(name="targetName")
    private @Nullable Output<String> targetName;

    /**
     * @return Default schema name
     * 
     */
    public Optional<Output<String>> targetName() {
        return Optional.ofNullable(this.targetName);
    }

    /**
     * Type of connection. One of (postgres/redshift). Use postgres for alloydb connections
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of connection. One of (postgres/redshift). Use postgres for alloydb connections
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Username for Postgres/Redshift/AlloyDB
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Username for Postgres/Redshift/AlloyDB
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private PostgresCredentialState() {}

    private PostgresCredentialState(PostgresCredentialState $) {
        this.credentialId = $.credentialId;
        this.defaultSchema = $.defaultSchema;
        this.isActive = $.isActive;
        this.numThreads = $.numThreads;
        this.password = $.password;
        this.projectId = $.projectId;
        this.targetName = $.targetName;
        this.type = $.type;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PostgresCredentialState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PostgresCredentialState $;

        public Builder() {
            $ = new PostgresCredentialState();
        }

        public Builder(PostgresCredentialState defaults) {
            $ = new PostgresCredentialState(Objects.requireNonNull(defaults));
        }

        /**
         * @param credentialId The system Postgres/Redshift/AlloyDB credential ID
         * 
         * @return builder
         * 
         */
        public Builder credentialId(@Nullable Output<Integer> credentialId) {
            $.credentialId = credentialId;
            return this;
        }

        /**
         * @param credentialId The system Postgres/Redshift/AlloyDB credential ID
         * 
         * @return builder
         * 
         */
        public Builder credentialId(Integer credentialId) {
            return credentialId(Output.of(credentialId));
        }

        /**
         * @param defaultSchema Default schema name
         * 
         * @return builder
         * 
         */
        public Builder defaultSchema(@Nullable Output<String> defaultSchema) {
            $.defaultSchema = defaultSchema;
            return this;
        }

        /**
         * @param defaultSchema Default schema name
         * 
         * @return builder
         * 
         */
        public Builder defaultSchema(String defaultSchema) {
            return defaultSchema(Output.of(defaultSchema));
        }

        /**
         * @param isActive Whether the Postgres/Redshift/AlloyDB credential is active
         * 
         * @return builder
         * 
         */
        public Builder isActive(@Nullable Output<Boolean> isActive) {
            $.isActive = isActive;
            return this;
        }

        /**
         * @param isActive Whether the Postgres/Redshift/AlloyDB credential is active
         * 
         * @return builder
         * 
         */
        public Builder isActive(Boolean isActive) {
            return isActive(Output.of(isActive));
        }

        /**
         * @param numThreads Number of threads to use
         * 
         * @return builder
         * 
         */
        public Builder numThreads(@Nullable Output<Integer> numThreads) {
            $.numThreads = numThreads;
            return this;
        }

        /**
         * @param numThreads Number of threads to use
         * 
         * @return builder
         * 
         */
        public Builder numThreads(Integer numThreads) {
            return numThreads(Output.of(numThreads));
        }

        /**
         * @param password Password for Postgres/Redshift/AlloyDB
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password for Postgres/Redshift/AlloyDB
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param projectId Project ID to create the Postgres/Redshift/AlloyDB credential in
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID to create the Postgres/Redshift/AlloyDB credential in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param targetName Default schema name
         * 
         * @return builder
         * 
         */
        public Builder targetName(@Nullable Output<String> targetName) {
            $.targetName = targetName;
            return this;
        }

        /**
         * @param targetName Default schema name
         * 
         * @return builder
         * 
         */
        public Builder targetName(String targetName) {
            return targetName(Output.of(targetName));
        }

        /**
         * @param type Type of connection. One of (postgres/redshift). Use postgres for alloydb connections
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of connection. One of (postgres/redshift). Use postgres for alloydb connections
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param username Username for Postgres/Redshift/AlloyDB
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username for Postgres/Redshift/AlloyDB
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public PostgresCredentialState build() {
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SemanticLayerCredentialServiceTokenMappingState extends com.pulumi.resources.ResourceArgs {

    public static final SemanticLayerCredentialServiceTokenMappingState Empty = new SemanticLayerCredentialServiceTokenMappingState();

    /**
     * The ID of the project to which the semantic layer credential is associated.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<Integer> projectId;

    /**
     * @return The ID of the project to which the semantic layer credential is associated.
     * 
     */
    public Optional<Output<Integer>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The ID of the semantic layer credential to map.
     * 
     */
    @Import(name="semanticLayerCredentialId")
    private @Nullable Output<Integer> semanticLayerCredentialId;

    /**
     * @return The ID of the semantic layer credential to map.
     * 
     */
    public Optional<Output<Integer>> semanticLayerCredentialId() {
        return Optional.ofNullable(this.semanticLayerCredentialId);
    }

    /**
     * The ID of the service token to map to the semantic layer credential.
     * 
     */
    @Import(name="serviceTokenId")
    private @Nullable Output<Integer> serviceTokenId;

    /**
     * @return The ID of the service token to map to the semantic layer credential.
     * 
     */
    public Optional<Output<Integer>> serviceTokenId() {
        return Optional.ofNullable(this.serviceTokenId);
    }

    private SemanticLayerCredentialServiceTokenMappingState() {}

    private SemanticLayerCredentialServiceTokenMappingState(SemanticLayerCredentialServiceTokenMappingState $) {
        this.projectId = $.projectId;
        this.semanticLayerCredentialId = $.semanticLayerCredentialId;
        this.serviceTokenId = $.serviceTokenId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SemanticLayerCredentialServiceTokenMappingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SemanticLayerCredentialServiceTokenMappingState $;

        public Builder() {
            $ = new SemanticLayerCredentialServiceTokenMappingState();
        }

        public Builder(SemanticLayerCredentialServiceTokenMappingState defaults) {
            $ = new SemanticLayerCredentialServiceTokenMappingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param projectId The ID of the project to which the semantic layer credential is associated.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project to which the semantic layer credential is associated.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param semanticLayerCredentialId The ID of the semantic layer credential to map.
         * 
         * @return builder
         * 
         */
        public Builder semanticLayerCredentialId(@Nullable Output<Integer> semanticLayerCredentialId) {
            $.semanticLayerCredentialId = semanticLayerCredentialId;
            return this;
        }

        /**
         * @param semanticLayerCredentialId The ID of the semantic layer credential to map.
         * 
         * @return builder
         * 
         */
        public Builder semanticLayerCredentialId(Integer semanticLayerCredentialId) {
            return semanticLayerCredentialId(Output.of(semanticLayerCredentialId));
        }

        /**
         * @param serviceTokenId The ID of the service token to map to the semantic layer credential.
         * 
         * @return builder
         * 
         */
        public Builder serviceTokenId(@Nullable Output<Integer> serviceTokenId) {
            $.serviceTokenId = serviceTokenId;
            return this;
        }

        /**
         * @param serviceTokenId The ID of the service token to map to the semantic layer credential.
         * 
         * @return builder
         * 
         */
        public Builder serviceTokenId(Integer serviceTokenId) {
            return serviceTokenId(Output.of(serviceTokenId));
        }

        public SemanticLayerCredentialServiceTokenMappingState build() {
            return $;
        }
    }

}

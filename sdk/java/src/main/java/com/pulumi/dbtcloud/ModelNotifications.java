// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dbtcloud.ModelNotificationsArgs;
import com.pulumi.dbtcloud.Utilities;
import com.pulumi.dbtcloud.inputs.ModelNotificationsState;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Configure model notifications for a dbt Cloud environment. By default all the `on_...` are set to false. When destroyed, the model notifications are disabled.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.dbtcloud.ModelNotifications;
 * import com.pulumi.dbtcloud.ModelNotificationsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var prodModelNotifications = new ModelNotifications("prodModelNotifications", ModelNotificationsArgs.builder()
 *             .environmentId(prodEnvironment.environmentId())
 *             .enabled(true)
 *             .onSuccess(false)
 *             .onFailure(true)
 *             .onWarning(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Model notifications are imported using the environment ID where the notifications are enabled
 * 
 * Using import blocks (requires Terraform &gt;= 1.5)
 * 
 * import {
 * 
 *   to = dbtcloud_model_notifications.my_model_notifications
 * 
 *   id = &#34;environment_id&#34;
 * 
 * }
 * 
 * import {
 * 
 *   to = dbtcloud_model_notifications.my_model_notifications
 * 
 *   id = &#34;12345&#34;
 * 
 * }
 * 
 * Using the older import command
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/modelNotifications:ModelNotifications my_model_notifications &#34;environment_id&#34;
 * ```
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/modelNotifications:ModelNotifications my_model_notifications 12345
 * ```
 * 
 */
@ResourceType(type="dbtcloud:index/modelNotifications:ModelNotifications")
public class ModelNotifications extends com.pulumi.resources.CustomResource {
    /**
     * Whether model notifications are enabled for this environment
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return Whether model notifications are enabled for this environment
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * The ID of the dbt Cloud environment
     * 
     */
    @Export(name="environmentId", refs={String.class}, tree="[0]")
    private Output<String> environmentId;

    /**
     * @return The ID of the dbt Cloud environment
     * 
     */
    public Output<String> environmentId() {
        return this.environmentId;
    }
    /**
     * Whether to send notifications for failed model runs
     * 
     */
    @Export(name="onFailure", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> onFailure;

    /**
     * @return Whether to send notifications for failed model runs
     * 
     */
    public Output<Boolean> onFailure() {
        return this.onFailure;
    }
    /**
     * Whether to send notifications for skipped model runs
     * 
     */
    @Export(name="onSkipped", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> onSkipped;

    /**
     * @return Whether to send notifications for skipped model runs
     * 
     */
    public Output<Boolean> onSkipped() {
        return this.onSkipped;
    }
    /**
     * Whether to send notifications for successful model runs
     * 
     */
    @Export(name="onSuccess", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> onSuccess;

    /**
     * @return Whether to send notifications for successful model runs
     * 
     */
    public Output<Boolean> onSuccess() {
        return this.onSuccess;
    }
    /**
     * Whether to send notifications for model runs with warnings
     * 
     */
    @Export(name="onWarning", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> onWarning;

    /**
     * @return Whether to send notifications for model runs with warnings
     * 
     */
    public Output<Boolean> onWarning() {
        return this.onWarning;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ModelNotifications(java.lang.String name) {
        this(name, ModelNotificationsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ModelNotifications(java.lang.String name, ModelNotificationsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ModelNotifications(java.lang.String name, ModelNotificationsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/modelNotifications:ModelNotifications", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ModelNotifications(java.lang.String name, Output<java.lang.String> id, @Nullable ModelNotificationsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/modelNotifications:ModelNotifications", name, state, makeResourceOptions(options, id), false);
    }

    private static ModelNotificationsArgs makeArgs(ModelNotificationsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ModelNotificationsArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi/pulumi-dbtcloud")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ModelNotifications get(java.lang.String name, Output<java.lang.String> id, @Nullable ModelNotificationsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ModelNotifications(name, id, state, options);
    }
}

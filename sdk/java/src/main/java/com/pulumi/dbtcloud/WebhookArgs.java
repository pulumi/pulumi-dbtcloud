// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebhookArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebhookArgs Empty = new WebhookArgs();

    /**
     * Webhooks active flag
     * 
     */
    @Import(name="active")
    private @Nullable Output<Boolean> active;

    /**
     * @return Webhooks active flag
     * 
     */
    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * Webhooks Client URL
     * 
     */
    @Import(name="clientUrl", required=true)
    private Output<String> clientUrl;

    /**
     * @return Webhooks Client URL
     * 
     */
    public Output<String> clientUrl() {
        return this.clientUrl;
    }

    /**
     * Webhooks Description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Webhooks Description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Webhooks Event Types
     * 
     */
    @Import(name="eventTypes", required=true)
    private Output<List<String>> eventTypes;

    /**
     * @return Webhooks Event Types
     * 
     */
    public Output<List<String>> eventTypes() {
        return this.eventTypes;
    }

    /**
     * List of job IDs to trigger the webhook, An empty list will trigger on all jobs
     * 
     */
    @Import(name="jobIds")
    private @Nullable Output<List<Integer>> jobIds;

    /**
     * @return List of job IDs to trigger the webhook, An empty list will trigger on all jobs
     * 
     */
    public Optional<Output<List<Integer>>> jobIds() {
        return Optional.ofNullable(this.jobIds);
    }

    /**
     * Webhooks Name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Webhooks Name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private WebhookArgs() {}

    private WebhookArgs(WebhookArgs $) {
        this.active = $.active;
        this.clientUrl = $.clientUrl;
        this.description = $.description;
        this.eventTypes = $.eventTypes;
        this.jobIds = $.jobIds;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebhookArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebhookArgs $;

        public Builder() {
            $ = new WebhookArgs();
        }

        public Builder(WebhookArgs defaults) {
            $ = new WebhookArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param active Webhooks active flag
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active Webhooks active flag
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param clientUrl Webhooks Client URL
         * 
         * @return builder
         * 
         */
        public Builder clientUrl(Output<String> clientUrl) {
            $.clientUrl = clientUrl;
            return this;
        }

        /**
         * @param clientUrl Webhooks Client URL
         * 
         * @return builder
         * 
         */
        public Builder clientUrl(String clientUrl) {
            return clientUrl(Output.of(clientUrl));
        }

        /**
         * @param description Webhooks Description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Webhooks Description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param eventTypes Webhooks Event Types
         * 
         * @return builder
         * 
         */
        public Builder eventTypes(Output<List<String>> eventTypes) {
            $.eventTypes = eventTypes;
            return this;
        }

        /**
         * @param eventTypes Webhooks Event Types
         * 
         * @return builder
         * 
         */
        public Builder eventTypes(List<String> eventTypes) {
            return eventTypes(Output.of(eventTypes));
        }

        /**
         * @param eventTypes Webhooks Event Types
         * 
         * @return builder
         * 
         */
        public Builder eventTypes(String... eventTypes) {
            return eventTypes(List.of(eventTypes));
        }

        /**
         * @param jobIds List of job IDs to trigger the webhook, An empty list will trigger on all jobs
         * 
         * @return builder
         * 
         */
        public Builder jobIds(@Nullable Output<List<Integer>> jobIds) {
            $.jobIds = jobIds;
            return this;
        }

        /**
         * @param jobIds List of job IDs to trigger the webhook, An empty list will trigger on all jobs
         * 
         * @return builder
         * 
         */
        public Builder jobIds(List<Integer> jobIds) {
            return jobIds(Output.of(jobIds));
        }

        /**
         * @param jobIds List of job IDs to trigger the webhook, An empty list will trigger on all jobs
         * 
         * @return builder
         * 
         */
        public Builder jobIds(Integer... jobIds) {
            return jobIds(List.of(jobIds));
        }

        /**
         * @param name Webhooks Name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Webhooks Name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public WebhookArgs build() {
            if ($.clientUrl == null) {
                throw new MissingRequiredPropertyException("WebhookArgs", "clientUrl");
            }
            if ($.eventTypes == null) {
                throw new MissingRequiredPropertyException("WebhookArgs", "eventTypes");
            }
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dbtcloud.GlobalConnectionArgs;
import com.pulumi.dbtcloud.Utilities;
import com.pulumi.dbtcloud.inputs.GlobalConnectionState;
import com.pulumi.dbtcloud.outputs.GlobalConnectionApacheSpark;
import com.pulumi.dbtcloud.outputs.GlobalConnectionAthena;
import com.pulumi.dbtcloud.outputs.GlobalConnectionBigquery;
import com.pulumi.dbtcloud.outputs.GlobalConnectionDatabricks;
import com.pulumi.dbtcloud.outputs.GlobalConnectionFabric;
import com.pulumi.dbtcloud.outputs.GlobalConnectionPostgres;
import com.pulumi.dbtcloud.outputs.GlobalConnectionRedshift;
import com.pulumi.dbtcloud.outputs.GlobalConnectionSnowflake;
import com.pulumi.dbtcloud.outputs.GlobalConnectionStarburst;
import com.pulumi.dbtcloud.outputs.GlobalConnectionSynapse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource can be used to create global connections as introduced in dbt Cloud in August 2024.
 * 
 * Those connections are not linked to a specific project and can be linked to environments from different projects by using the `connection_id` field in the `dbtcloud.Environment` resource.
 * 
 * All connections types are supported, and the old resources `dbtcloud.Connection`, `dbtcloud.BigQueryConnection` and `dbtcloud.FabricConnection` are now flagged as deprecated and will be removed from the next major version of the provider.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.dbtcloud.GlobalConnection;
 * import com.pulumi.dbtcloud.GlobalConnectionArgs;
 * import com.pulumi.dbtcloud.inputs.GlobalConnectionApacheSparkArgs;
 * import com.pulumi.dbtcloud.inputs.GlobalConnectionAthenaArgs;
 * import com.pulumi.dbtcloud.inputs.GlobalConnectionBigqueryArgs;
 * import com.pulumi.dbtcloud.inputs.GlobalConnectionDatabricksArgs;
 * import com.pulumi.dbtcloud.inputs.GlobalConnectionFabricArgs;
 * import com.pulumi.dbtcloud.inputs.GlobalConnectionPostgresArgs;
 * import com.pulumi.dbtcloud.inputs.GlobalConnectionRedshiftArgs;
 * import com.pulumi.dbtcloud.inputs.GlobalConnectionSnowflakeArgs;
 * import com.pulumi.dbtcloud.inputs.GlobalConnectionStarburstArgs;
 * import com.pulumi.dbtcloud.inputs.GlobalConnectionSynapseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var apacheSpark = new GlobalConnection("apacheSpark", GlobalConnectionArgs.builder()
 *             .name("My Apache Spark connection")
 *             .apacheSpark(GlobalConnectionApacheSparkArgs.builder()
 *                 .method("http")
 *                 .host("my-spark-host.com")
 *                 .cluster("my-cluster")
 *                 .connect_timeout(100)
 *                 .build())
 *             .build());
 * 
 *         var athena = new GlobalConnection("athena", GlobalConnectionArgs.builder()
 *             .name("My Athena connection")
 *             .athena(GlobalConnectionAthenaArgs.builder()
 *                 .region_name("us-east-1")
 *                 .database("mydatabase")
 *                 .s3_staging_dir("my_dir")
 *                 .work_group("my_work_group")
 *                 .build())
 *             .build());
 * 
 *         var bigquery = new GlobalConnection("bigquery", GlobalConnectionArgs.builder()
 *             .name("My BigQuery connection")
 *             .bigquery(GlobalConnectionBigqueryArgs.builder()
 *                 .gcp_project_id("my-gcp-project-id")
 *                 .timeout_seconds(1000)
 *                 .private_key_id("my-private-key-id")
 *                 .private_key("ABCDEFGHIJKL")
 *                 .client_email("my_client_email")
 *                 .client_id("my_client_id")
 *                 .auth_uri("my_auth_uri")
 *                 .token_uri("my_token_uri")
 *                 .auth_provider_x509_cert_url("my_auth_provider_x509_cert_url")
 *                 .client_x509_cert_url("my_client_x509_cert_url")
 *                 .application_id("oauth_application_id")
 *                 .application_secret("oauth_secret_id")
 *                 .build())
 *             .build());
 * 
 *         var databricks = new GlobalConnection("databricks", GlobalConnectionArgs.builder()
 *             .name("My Databricks connection")
 *             .databricks(GlobalConnectionDatabricksArgs.builder()
 *                 .host("my-databricks-host.cloud.databricks.com")
 *                 .http_path("/sql/my/http/path")
 *                 .catalog("dbt_catalog")
 *                 .client_id("yourclientid")
 *                 .client_secret("yourclientsecret")
 *                 .build())
 *             .build());
 * 
 *         var fabric = new GlobalConnection("fabric", GlobalConnectionArgs.builder()
 *             .name("My Fabric connection")
 *             .fabric(GlobalConnectionFabricArgs.builder()
 *                 .server("my-fabric-server.com")
 *                 .database("mydb")
 *                 .port(1234)
 *                 .retries(3)
 *                 .login_timeout(60)
 *                 .query_timeout(3600)
 *                 .build())
 *             .build());
 * 
 *         var postgres = new GlobalConnection("postgres", GlobalConnectionArgs.builder()
 *             .name("My PostgreSQL connection")
 *             .postgres(GlobalConnectionPostgresArgs.builder()
 *                 .hostname("my-postgresql-server.com")
 *                 .port(5432)
 *                 .dbname("my_database")
 *                 .build())
 *             .build());
 * 
 *         var redshift = new GlobalConnection("redshift", GlobalConnectionArgs.builder()
 *             .name("My Redshift connection")
 *             .redshift(GlobalConnectionRedshiftArgs.builder()
 *                 .hostname("my-redshift-connection.com")
 *                 .port(5432)
 *                 .dbname("my_database")
 *                 .build())
 *             .build());
 * 
 *         var snowflake = new GlobalConnection("snowflake", GlobalConnectionArgs.builder()
 *             .name("My Snowflake connection")
 *             .privateLinkEndpointId(myPrivateLink.id())
 *             .snowflake(GlobalConnectionSnowflakeArgs.builder()
 *                 .account("my-snowflake-account")
 *                 .database("MY_DATABASE")
 *                 .warehouse("MY_WAREHOUSE")
 *                 .client_session_keep_alive(false)
 *                 .allow_sso(true)
 *                 .oauth_client_id("yourclientid")
 *                 .oauth_client_secret("yourclientsecret")
 *                 .build())
 *             .build());
 * 
 *         var starburst = new GlobalConnection("starburst", GlobalConnectionArgs.builder()
 *             .name("My Starburst connection")
 *             .starburst(GlobalConnectionStarburstArgs.builder()
 *                 .host("my-starburst-host.com")
 *                 .database("mydb")
 *                 .build())
 *             .build());
 * 
 *         var synapse = new GlobalConnection("synapse", GlobalConnectionArgs.builder()
 *             .name("My Synapse connection")
 *             .synapse(GlobalConnectionSynapseArgs.builder()
 *                 .host("my-synapse-server.com")
 *                 .database("mydb")
 *                 .port(1234)
 *                 .retries(3)
 *                 .login_timeout(60)
 *                 .query_timeout(3600)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * A project-scoped connection can be imported as a global connection by specifying the connection ID
 * 
 * Migrating from project-scoped connections to global connections could be done by:
 * 
 * 1. Adding the config for the global connection and importing it (see below)
 * 
 * 2. Removing the project-scoped connection from the config AND from the state
 *    
 *    - CAREFUL: If the connection is removed from the config but not the state, it will be destroyed on the next apply
 * 
 * using  import blocks (requires Terraform &gt;= 1.5)
 * 
 * import {
 * 
 *   to = dbtcloud_global_connection.my_connection
 * 
 *   id = &#34;connection_id&#34;
 * 
 * }
 * 
 * import {
 * 
 *   to = dbtcloud_global_connection.my_connection
 * 
 *   id = &#34;1234&#34;
 * 
 * }
 * 
 * using the older import command
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/globalConnection:GlobalConnection my_connection &#34;connection_id&#34;
 * ```
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/globalConnection:GlobalConnection my_connection 1234
 * ```
 * 
 */
@ResourceType(type="dbtcloud:index/globalConnection:GlobalConnection")
public class GlobalConnection extends com.pulumi.resources.CustomResource {
    /**
     * Version of the adapter
     * 
     */
    @Export(name="adapterVersion", refs={String.class}, tree="[0]")
    private Output<String> adapterVersion;

    /**
     * @return Version of the adapter
     * 
     */
    public Output<String> adapterVersion() {
        return this.adapterVersion;
    }
    /**
     * Apache Spark connection configuration.
     * 
     */
    @Export(name="apacheSpark", refs={GlobalConnectionApacheSpark.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionApacheSpark> apacheSpark;

    /**
     * @return Apache Spark connection configuration.
     * 
     */
    public Output<Optional<GlobalConnectionApacheSpark>> apacheSpark() {
        return Codegen.optional(this.apacheSpark);
    }
    /**
     * Athena connection configuration.
     * 
     */
    @Export(name="athena", refs={GlobalConnectionAthena.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionAthena> athena;

    /**
     * @return Athena connection configuration.
     * 
     */
    public Output<Optional<GlobalConnectionAthena>> athena() {
        return Codegen.optional(this.athena);
    }
    @Export(name="bigquery", refs={GlobalConnectionBigquery.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionBigquery> bigquery;

    public Output<Optional<GlobalConnectionBigquery>> bigquery() {
        return Codegen.optional(this.bigquery);
    }
    /**
     * Databricks connection configuration
     * 
     */
    @Export(name="databricks", refs={GlobalConnectionDatabricks.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionDatabricks> databricks;

    /**
     * @return Databricks connection configuration
     * 
     */
    public Output<Optional<GlobalConnectionDatabricks>> databricks() {
        return Codegen.optional(this.databricks);
    }
    /**
     * Microsoft Fabric connection configuration.
     * 
     */
    @Export(name="fabric", refs={GlobalConnectionFabric.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionFabric> fabric;

    /**
     * @return Microsoft Fabric connection configuration.
     * 
     */
    public Output<Optional<GlobalConnectionFabric>> fabric() {
        return Codegen.optional(this.fabric);
    }
    /**
     * Whether the connection can use an SSH tunnel
     * 
     */
    @Export(name="isSshTunnelEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isSshTunnelEnabled;

    /**
     * @return Whether the connection can use an SSH tunnel
     * 
     */
    public Output<Boolean> isSshTunnelEnabled() {
        return this.isSshTunnelEnabled;
    }
    /**
     * Connection name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Connection name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * External OAuth configuration ID (only Snowflake for now)
     * 
     */
    @Export(name="oauthConfigurationId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> oauthConfigurationId;

    /**
     * @return External OAuth configuration ID (only Snowflake for now)
     * 
     */
    public Output<Optional<Integer>> oauthConfigurationId() {
        return Codegen.optional(this.oauthConfigurationId);
    }
    /**
     * PostgreSQL connection configuration.
     * 
     */
    @Export(name="postgres", refs={GlobalConnectionPostgres.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionPostgres> postgres;

    /**
     * @return PostgreSQL connection configuration.
     * 
     */
    public Output<Optional<GlobalConnectionPostgres>> postgres() {
        return Codegen.optional(this.postgres);
    }
    /**
     * Private Link Endpoint ID. This ID can be found using the `privatelink_endpoint` data source
     * 
     */
    @Export(name="privateLinkEndpointId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> privateLinkEndpointId;

    /**
     * @return Private Link Endpoint ID. This ID can be found using the `privatelink_endpoint` data source
     * 
     */
    public Output<Optional<String>> privateLinkEndpointId() {
        return Codegen.optional(this.privateLinkEndpointId);
    }
    /**
     * Redshift connection configuration
     * 
     */
    @Export(name="redshift", refs={GlobalConnectionRedshift.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionRedshift> redshift;

    /**
     * @return Redshift connection configuration
     * 
     */
    public Output<Optional<GlobalConnectionRedshift>> redshift() {
        return Codegen.optional(this.redshift);
    }
    /**
     * Snowflake connection configuration
     * 
     */
    @Export(name="snowflake", refs={GlobalConnectionSnowflake.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionSnowflake> snowflake;

    /**
     * @return Snowflake connection configuration
     * 
     */
    public Output<Optional<GlobalConnectionSnowflake>> snowflake() {
        return Codegen.optional(this.snowflake);
    }
    /**
     * Starburst/Trino connection configuration.
     * 
     */
    @Export(name="starburst", refs={GlobalConnectionStarburst.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionStarburst> starburst;

    /**
     * @return Starburst/Trino connection configuration.
     * 
     */
    public Output<Optional<GlobalConnectionStarburst>> starburst() {
        return Codegen.optional(this.starburst);
    }
    /**
     * Azure Synapse Analytics connection configuration.
     * 
     */
    @Export(name="synapse", refs={GlobalConnectionSynapse.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionSynapse> synapse;

    /**
     * @return Azure Synapse Analytics connection configuration.
     * 
     */
    public Output<Optional<GlobalConnectionSynapse>> synapse() {
        return Codegen.optional(this.synapse);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GlobalConnection(java.lang.String name) {
        this(name, GlobalConnectionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GlobalConnection(java.lang.String name, @Nullable GlobalConnectionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GlobalConnection(java.lang.String name, @Nullable GlobalConnectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/globalConnection:GlobalConnection", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private GlobalConnection(java.lang.String name, Output<java.lang.String> id, @Nullable GlobalConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/globalConnection:GlobalConnection", name, state, makeResourceOptions(options, id), false);
    }

    private static GlobalConnectionArgs makeArgs(@Nullable GlobalConnectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? GlobalConnectionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi/pulumi-dbtcloud")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GlobalConnection get(java.lang.String name, Output<java.lang.String> id, @Nullable GlobalConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GlobalConnection(name, id, state, options);
    }
}

// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dbtcloud.GlobalConnectionArgs;
import com.pulumi.dbtcloud.Utilities;
import com.pulumi.dbtcloud.inputs.GlobalConnectionState;
import com.pulumi.dbtcloud.outputs.GlobalConnectionApacheSpark;
import com.pulumi.dbtcloud.outputs.GlobalConnectionAthena;
import com.pulumi.dbtcloud.outputs.GlobalConnectionBigquery;
import com.pulumi.dbtcloud.outputs.GlobalConnectionDatabricks;
import com.pulumi.dbtcloud.outputs.GlobalConnectionFabric;
import com.pulumi.dbtcloud.outputs.GlobalConnectionPostgres;
import com.pulumi.dbtcloud.outputs.GlobalConnectionRedshift;
import com.pulumi.dbtcloud.outputs.GlobalConnectionSnowflake;
import com.pulumi.dbtcloud.outputs.GlobalConnectionStarburst;
import com.pulumi.dbtcloud.outputs.GlobalConnectionSynapse;
import com.pulumi.dbtcloud.outputs.GlobalConnectionTeradata;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource can be used to create global connections as introduced in dbt Cloud in August 2024.
 * 
 * Those connections are not linked to a specific project and can be linked to environments from different projects by using the `connectionId` field in the `dbtcloud.Environment` resource.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * A project-scoped connection can be imported as a global connection by specifying the connection ID
 * 
 * Migrating from project-scoped connections to global connections could be done by:
 * 
 * 1. Adding the config for the global connection and importing it (see below)
 * 
 * 2. Removing the project-scoped connection from the config AND from the state
 *    
 *    - CAREFUL: If the connection is removed from the config but not the state, it will be destroyed on the next apply
 * 
 * using  import blocks (requires Terraform &gt;= 1.5)
 * 
 * import {
 * 
 *   to = dbtcloud_global_connection.my_connection
 * 
 *   id = &#34;connection_id&#34;
 * 
 * }
 * 
 * import {
 * 
 *   to = dbtcloud_global_connection.my_connection
 * 
 *   id = &#34;1234&#34;
 * 
 * }
 * 
 * using the older import command
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/globalConnection:GlobalConnection my_connection &#34;connection_id&#34;
 * ```
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/globalConnection:GlobalConnection my_connection 1234
 * ```
 * 
 */
@ResourceType(type="dbtcloud:index/globalConnection:GlobalConnection")
public class GlobalConnection extends com.pulumi.resources.CustomResource {
    /**
     * Version of the adapter
     * 
     */
    @Export(name="adapterVersion", refs={String.class}, tree="[0]")
    private Output<String> adapterVersion;

    /**
     * @return Version of the adapter
     * 
     */
    public Output<String> adapterVersion() {
        return this.adapterVersion;
    }
    /**
     * Apache Spark connection configuration.
     * 
     */
    @Export(name="apacheSpark", refs={GlobalConnectionApacheSpark.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionApacheSpark> apacheSpark;

    /**
     * @return Apache Spark connection configuration.
     * 
     */
    public Output<Optional<GlobalConnectionApacheSpark>> apacheSpark() {
        return Codegen.optional(this.apacheSpark);
    }
    /**
     * Athena connection configuration.
     * 
     */
    @Export(name="athena", refs={GlobalConnectionAthena.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionAthena> athena;

    /**
     * @return Athena connection configuration.
     * 
     */
    public Output<Optional<GlobalConnectionAthena>> athena() {
        return Codegen.optional(this.athena);
    }
    @Export(name="bigquery", refs={GlobalConnectionBigquery.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionBigquery> bigquery;

    public Output<Optional<GlobalConnectionBigquery>> bigquery() {
        return Codegen.optional(this.bigquery);
    }
    /**
     * Databricks connection configuration
     * 
     */
    @Export(name="databricks", refs={GlobalConnectionDatabricks.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionDatabricks> databricks;

    /**
     * @return Databricks connection configuration
     * 
     */
    public Output<Optional<GlobalConnectionDatabricks>> databricks() {
        return Codegen.optional(this.databricks);
    }
    /**
     * Microsoft Fabric connection configuration.
     * 
     */
    @Export(name="fabric", refs={GlobalConnectionFabric.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionFabric> fabric;

    /**
     * @return Microsoft Fabric connection configuration.
     * 
     */
    public Output<Optional<GlobalConnectionFabric>> fabric() {
        return Codegen.optional(this.fabric);
    }
    /**
     * Whether the connection can use an SSH tunnel
     * 
     */
    @Export(name="isSshTunnelEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isSshTunnelEnabled;

    /**
     * @return Whether the connection can use an SSH tunnel
     * 
     */
    public Output<Boolean> isSshTunnelEnabled() {
        return this.isSshTunnelEnabled;
    }
    /**
     * Connection name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Connection name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * External OAuth configuration ID (only Snowflake for now)
     * 
     */
    @Export(name="oauthConfigurationId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> oauthConfigurationId;

    /**
     * @return External OAuth configuration ID (only Snowflake for now)
     * 
     */
    public Output<Optional<Integer>> oauthConfigurationId() {
        return Codegen.optional(this.oauthConfigurationId);
    }
    /**
     * PostgreSQL connection configuration.
     * 
     */
    @Export(name="postgres", refs={GlobalConnectionPostgres.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionPostgres> postgres;

    /**
     * @return PostgreSQL connection configuration.
     * 
     */
    public Output<Optional<GlobalConnectionPostgres>> postgres() {
        return Codegen.optional(this.postgres);
    }
    /**
     * Private Link Endpoint ID. This ID can be found using the `privatelinkEndpoint` data source
     * 
     */
    @Export(name="privateLinkEndpointId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> privateLinkEndpointId;

    /**
     * @return Private Link Endpoint ID. This ID can be found using the `privatelinkEndpoint` data source
     * 
     */
    public Output<Optional<String>> privateLinkEndpointId() {
        return Codegen.optional(this.privateLinkEndpointId);
    }
    /**
     * Redshift connection configuration
     * 
     */
    @Export(name="redshift", refs={GlobalConnectionRedshift.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionRedshift> redshift;

    /**
     * @return Redshift connection configuration
     * 
     */
    public Output<Optional<GlobalConnectionRedshift>> redshift() {
        return Codegen.optional(this.redshift);
    }
    /**
     * Snowflake connection configuration
     * 
     */
    @Export(name="snowflake", refs={GlobalConnectionSnowflake.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionSnowflake> snowflake;

    /**
     * @return Snowflake connection configuration
     * 
     */
    public Output<Optional<GlobalConnectionSnowflake>> snowflake() {
        return Codegen.optional(this.snowflake);
    }
    /**
     * Starburst/Trino connection configuration.
     * 
     */
    @Export(name="starburst", refs={GlobalConnectionStarburst.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionStarburst> starburst;

    /**
     * @return Starburst/Trino connection configuration.
     * 
     */
    public Output<Optional<GlobalConnectionStarburst>> starburst() {
        return Codegen.optional(this.starburst);
    }
    /**
     * Azure Synapse Analytics connection configuration.
     * 
     */
    @Export(name="synapse", refs={GlobalConnectionSynapse.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionSynapse> synapse;

    /**
     * @return Azure Synapse Analytics connection configuration.
     * 
     */
    public Output<Optional<GlobalConnectionSynapse>> synapse() {
        return Codegen.optional(this.synapse);
    }
    /**
     * Teradata connection configuration.
     * 
     */
    @Export(name="teradata", refs={GlobalConnectionTeradata.class}, tree="[0]")
    private Output</* @Nullable */ GlobalConnectionTeradata> teradata;

    /**
     * @return Teradata connection configuration.
     * 
     */
    public Output<Optional<GlobalConnectionTeradata>> teradata() {
        return Codegen.optional(this.teradata);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GlobalConnection(java.lang.String name) {
        this(name, GlobalConnectionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GlobalConnection(java.lang.String name, @Nullable GlobalConnectionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GlobalConnection(java.lang.String name, @Nullable GlobalConnectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/globalConnection:GlobalConnection", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private GlobalConnection(java.lang.String name, Output<java.lang.String> id, @Nullable GlobalConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/globalConnection:GlobalConnection", name, state, makeResourceOptions(options, id), false);
    }

    private static GlobalConnectionArgs makeArgs(@Nullable GlobalConnectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? GlobalConnectionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi/pulumi-dbtcloud")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GlobalConnection get(java.lang.String name, Output<java.lang.String> id, @Nullable GlobalConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GlobalConnection(name, id, state, options);
    }
}

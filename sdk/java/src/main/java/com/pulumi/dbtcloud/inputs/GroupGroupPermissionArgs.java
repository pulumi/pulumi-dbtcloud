// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupGroupPermissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupGroupPermissionArgs Empty = new GroupGroupPermissionArgs();

    /**
     * Whether or not to apply this permission to all projects for this group
     * 
     */
    @Import(name="allProjects", required=true)
    private Output<Boolean> allProjects;

    /**
     * @return Whether or not to apply this permission to all projects for this group
     * 
     */
    public Output<Boolean> allProjects() {
        return this.allProjects;
    }

    /**
     * Set of permissions to apply
     * 
     */
    @Import(name="permissionSet", required=true)
    private Output<String> permissionSet;

    /**
     * @return Set of permissions to apply
     * 
     */
    public Output<String> permissionSet() {
        return this.permissionSet;
    }

    /**
     * Project ID to apply this permission to for this group
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<Integer> projectId;

    /**
     * @return Project ID to apply this permission to for this group
     * 
     */
    public Optional<Output<Integer>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    private GroupGroupPermissionArgs() {}

    private GroupGroupPermissionArgs(GroupGroupPermissionArgs $) {
        this.allProjects = $.allProjects;
        this.permissionSet = $.permissionSet;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupGroupPermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupGroupPermissionArgs $;

        public Builder() {
            $ = new GroupGroupPermissionArgs();
        }

        public Builder(GroupGroupPermissionArgs defaults) {
            $ = new GroupGroupPermissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allProjects Whether or not to apply this permission to all projects for this group
         * 
         * @return builder
         * 
         */
        public Builder allProjects(Output<Boolean> allProjects) {
            $.allProjects = allProjects;
            return this;
        }

        /**
         * @param allProjects Whether or not to apply this permission to all projects for this group
         * 
         * @return builder
         * 
         */
        public Builder allProjects(Boolean allProjects) {
            return allProjects(Output.of(allProjects));
        }

        /**
         * @param permissionSet Set of permissions to apply
         * 
         * @return builder
         * 
         */
        public Builder permissionSet(Output<String> permissionSet) {
            $.permissionSet = permissionSet;
            return this;
        }

        /**
         * @param permissionSet Set of permissions to apply
         * 
         * @return builder
         * 
         */
        public Builder permissionSet(String permissionSet) {
            return permissionSet(Output.of(permissionSet));
        }

        /**
         * @param projectId Project ID to apply this permission to for this group
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID to apply this permission to for this group
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        public GroupGroupPermissionArgs build() {
            if ($.allProjects == null) {
                throw new MissingRequiredPropertyException("GroupGroupPermissionArgs", "allProjects");
            }
            if ($.permissionSet == null) {
                throw new MissingRequiredPropertyException("GroupGroupPermissionArgs", "permissionSet");
            }
            return $;
        }
    }

}

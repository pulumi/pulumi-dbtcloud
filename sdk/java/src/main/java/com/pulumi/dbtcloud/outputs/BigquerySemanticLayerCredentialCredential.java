// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BigquerySemanticLayerCredentialCredential {
    /**
     * @return The internal credential ID
     * 
     */
    private @Nullable Integer credentialId;
    /**
     * @return Default dataset name
     * 
     */
    private String dataset;
    /**
     * @return The ID of this resource. Contains the project ID and the credential ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return Whether the BigQuery credential is active
     * 
     */
    private @Nullable Boolean isActive;
    /**
     * @return Number of threads to use
     * 
     */
    private Integer numThreads;
    /**
     * @return Project ID to create the BigQuery credential in
     * 
     */
    private Integer projectId;

    private BigquerySemanticLayerCredentialCredential() {}
    /**
     * @return The internal credential ID
     * 
     */
    public Optional<Integer> credentialId() {
        return Optional.ofNullable(this.credentialId);
    }
    /**
     * @return Default dataset name
     * 
     */
    public String dataset() {
        return this.dataset;
    }
    /**
     * @return The ID of this resource. Contains the project ID and the credential ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Whether the BigQuery credential is active
     * 
     */
    public Optional<Boolean> isActive() {
        return Optional.ofNullable(this.isActive);
    }
    /**
     * @return Number of threads to use
     * 
     */
    public Integer numThreads() {
        return this.numThreads;
    }
    /**
     * @return Project ID to create the BigQuery credential in
     * 
     */
    public Integer projectId() {
        return this.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BigquerySemanticLayerCredentialCredential defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer credentialId;
        private String dataset;
        private @Nullable String id;
        private @Nullable Boolean isActive;
        private Integer numThreads;
        private Integer projectId;
        public Builder() {}
        public Builder(BigquerySemanticLayerCredentialCredential defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credentialId = defaults.credentialId;
    	      this.dataset = defaults.dataset;
    	      this.id = defaults.id;
    	      this.isActive = defaults.isActive;
    	      this.numThreads = defaults.numThreads;
    	      this.projectId = defaults.projectId;
        }

        @CustomType.Setter
        public Builder credentialId(@Nullable Integer credentialId) {

            this.credentialId = credentialId;
            return this;
        }
        @CustomType.Setter
        public Builder dataset(String dataset) {
            if (dataset == null) {
              throw new MissingRequiredPropertyException("BigquerySemanticLayerCredentialCredential", "dataset");
            }
            this.dataset = dataset;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isActive(@Nullable Boolean isActive) {

            this.isActive = isActive;
            return this;
        }
        @CustomType.Setter
        public Builder numThreads(Integer numThreads) {
            if (numThreads == null) {
              throw new MissingRequiredPropertyException("BigquerySemanticLayerCredentialCredential", "numThreads");
            }
            this.numThreads = numThreads;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(Integer projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("BigquerySemanticLayerCredentialCredential", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        public BigquerySemanticLayerCredentialCredential build() {
            final var _resultValue = new BigquerySemanticLayerCredentialCredential();
            _resultValue.credentialId = credentialId;
            _resultValue.dataset = dataset;
            _resultValue.id = id;
            _resultValue.isActive = isActive;
            _resultValue.numThreads = numThreads;
            _resultValue.projectId = projectId;
            return _resultValue;
        }
    }
}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionArgs Empty = new ConnectionArgs();

    /**
     * Account name for the connection
     * 
     */
    @Import(name="account")
    private @Nullable Output<String> account;

    /**
     * @return Account name for the connection
     * 
     */
    public Optional<Output<String>> account() {
        return Optional.ofNullable(this.account);
    }

    /**
     * Whether or not the connection should allow client session keep alive
     * 
     */
    @Import(name="allowKeepAlive")
    private @Nullable Output<Boolean> allowKeepAlive;

    /**
     * @return Whether or not the connection should allow client session keep alive
     * 
     */
    public Optional<Output<Boolean>> allowKeepAlive() {
        return Optional.ofNullable(this.allowKeepAlive);
    }

    /**
     * Whether or not the connection should allow SSO
     * 
     */
    @Import(name="allowSso")
    private @Nullable Output<Boolean> allowSso;

    /**
     * @return Whether or not the connection should allow SSO
     * 
     */
    public Optional<Output<Boolean>> allowSso() {
        return Optional.ofNullable(this.allowSso);
    }

    /**
     * Catalog name if Unity Catalog is enabled in your Databricks workspace
     * 
     */
    @Import(name="catalog")
    private @Nullable Output<String> catalog;

    /**
     * @return Catalog name if Unity Catalog is enabled in your Databricks workspace
     * 
     */
    public Optional<Output<String>> catalog() {
        return Optional.ofNullable(this.catalog);
    }

    /**
     * Database name for the connection
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    /**
     * @return Database name for the connection
     * 
     */
    public Output<String> database() {
        return this.database;
    }

    /**
     * Host name for the connection, including Databricks cluster
     * 
     */
    @Import(name="hostName")
    private @Nullable Output<String> hostName;

    /**
     * @return Host name for the connection, including Databricks cluster
     * 
     */
    public Optional<Output<String>> hostName() {
        return Optional.ofNullable(this.hostName);
    }

    /**
     * The HTTP path of the Databricks cluster or SQL warehouse
     * 
     */
    @Import(name="httpPath")
    private @Nullable Output<String> httpPath;

    /**
     * @return The HTTP path of the Databricks cluster or SQL warehouse
     * 
     */
    public Optional<Output<String>> httpPath() {
        return Optional.ofNullable(this.httpPath);
    }

    /**
     * Whether the connection is active
     * 
     */
    @Import(name="isActive")
    private @Nullable Output<Boolean> isActive;

    /**
     * @return Whether the connection is active
     * 
     */
    public Optional<Output<Boolean>> isActive() {
        return Optional.ofNullable(this.isActive);
    }

    /**
     * Connection name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Connection name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * OAuth client identifier
     * 
     */
    @Import(name="oauthClientId")
    private @Nullable Output<String> oauthClientId;

    /**
     * @return OAuth client identifier
     * 
     */
    public Optional<Output<String>> oauthClientId() {
        return Optional.ofNullable(this.oauthClientId);
    }

    /**
     * OAuth client secret
     * 
     */
    @Import(name="oauthClientSecret")
    private @Nullable Output<String> oauthClientSecret;

    /**
     * @return OAuth client secret
     * 
     */
    public Optional<Output<String>> oauthClientSecret() {
        return Optional.ofNullable(this.oauthClientSecret);
    }

    /**
     * Port number to connect via
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Port number to connect via
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source
     * 
     */
    @Import(name="privateLinkEndpointId")
    private @Nullable Output<String> privateLinkEndpointId;

    /**
     * @return The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source
     * 
     */
    public Optional<Output<String>> privateLinkEndpointId() {
        return Optional.ofNullable(this.privateLinkEndpointId);
    }

    /**
     * Project ID to create the connection in
     * 
     */
    @Import(name="projectId", required=true)
    private Output<Integer> projectId;

    /**
     * @return Project ID to create the connection in
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }

    /**
     * Role name for the connection
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return Role name for the connection
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * Whether or not tunneling should be enabled on your database connection
     * 
     */
    @Import(name="tunnelEnabled")
    private @Nullable Output<Boolean> tunnelEnabled;

    /**
     * @return Whether or not tunneling should be enabled on your database connection
     * 
     */
    public Optional<Output<Boolean>> tunnelEnabled() {
        return Optional.ofNullable(this.tunnelEnabled);
    }

    /**
     * The type of connection
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of connection
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Warehouse name for the connection
     * 
     */
    @Import(name="warehouse")
    private @Nullable Output<String> warehouse;

    /**
     * @return Warehouse name for the connection
     * 
     */
    public Optional<Output<String>> warehouse() {
        return Optional.ofNullable(this.warehouse);
    }

    private ConnectionArgs() {}

    private ConnectionArgs(ConnectionArgs $) {
        this.account = $.account;
        this.allowKeepAlive = $.allowKeepAlive;
        this.allowSso = $.allowSso;
        this.catalog = $.catalog;
        this.database = $.database;
        this.hostName = $.hostName;
        this.httpPath = $.httpPath;
        this.isActive = $.isActive;
        this.name = $.name;
        this.oauthClientId = $.oauthClientId;
        this.oauthClientSecret = $.oauthClientSecret;
        this.port = $.port;
        this.privateLinkEndpointId = $.privateLinkEndpointId;
        this.projectId = $.projectId;
        this.role = $.role;
        this.tunnelEnabled = $.tunnelEnabled;
        this.type = $.type;
        this.warehouse = $.warehouse;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionArgs $;

        public Builder() {
            $ = new ConnectionArgs();
        }

        public Builder(ConnectionArgs defaults) {
            $ = new ConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param account Account name for the connection
         * 
         * @return builder
         * 
         */
        public Builder account(@Nullable Output<String> account) {
            $.account = account;
            return this;
        }

        /**
         * @param account Account name for the connection
         * 
         * @return builder
         * 
         */
        public Builder account(String account) {
            return account(Output.of(account));
        }

        /**
         * @param allowKeepAlive Whether or not the connection should allow client session keep alive
         * 
         * @return builder
         * 
         */
        public Builder allowKeepAlive(@Nullable Output<Boolean> allowKeepAlive) {
            $.allowKeepAlive = allowKeepAlive;
            return this;
        }

        /**
         * @param allowKeepAlive Whether or not the connection should allow client session keep alive
         * 
         * @return builder
         * 
         */
        public Builder allowKeepAlive(Boolean allowKeepAlive) {
            return allowKeepAlive(Output.of(allowKeepAlive));
        }

        /**
         * @param allowSso Whether or not the connection should allow SSO
         * 
         * @return builder
         * 
         */
        public Builder allowSso(@Nullable Output<Boolean> allowSso) {
            $.allowSso = allowSso;
            return this;
        }

        /**
         * @param allowSso Whether or not the connection should allow SSO
         * 
         * @return builder
         * 
         */
        public Builder allowSso(Boolean allowSso) {
            return allowSso(Output.of(allowSso));
        }

        /**
         * @param catalog Catalog name if Unity Catalog is enabled in your Databricks workspace
         * 
         * @return builder
         * 
         */
        public Builder catalog(@Nullable Output<String> catalog) {
            $.catalog = catalog;
            return this;
        }

        /**
         * @param catalog Catalog name if Unity Catalog is enabled in your Databricks workspace
         * 
         * @return builder
         * 
         */
        public Builder catalog(String catalog) {
            return catalog(Output.of(catalog));
        }

        /**
         * @param database Database name for the connection
         * 
         * @return builder
         * 
         */
        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database Database name for the connection
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param hostName Host name for the connection, including Databricks cluster
         * 
         * @return builder
         * 
         */
        public Builder hostName(@Nullable Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param hostName Host name for the connection, including Databricks cluster
         * 
         * @return builder
         * 
         */
        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        /**
         * @param httpPath The HTTP path of the Databricks cluster or SQL warehouse
         * 
         * @return builder
         * 
         */
        public Builder httpPath(@Nullable Output<String> httpPath) {
            $.httpPath = httpPath;
            return this;
        }

        /**
         * @param httpPath The HTTP path of the Databricks cluster or SQL warehouse
         * 
         * @return builder
         * 
         */
        public Builder httpPath(String httpPath) {
            return httpPath(Output.of(httpPath));
        }

        /**
         * @param isActive Whether the connection is active
         * 
         * @return builder
         * 
         */
        public Builder isActive(@Nullable Output<Boolean> isActive) {
            $.isActive = isActive;
            return this;
        }

        /**
         * @param isActive Whether the connection is active
         * 
         * @return builder
         * 
         */
        public Builder isActive(Boolean isActive) {
            return isActive(Output.of(isActive));
        }

        /**
         * @param name Connection name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Connection name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param oauthClientId OAuth client identifier
         * 
         * @return builder
         * 
         */
        public Builder oauthClientId(@Nullable Output<String> oauthClientId) {
            $.oauthClientId = oauthClientId;
            return this;
        }

        /**
         * @param oauthClientId OAuth client identifier
         * 
         * @return builder
         * 
         */
        public Builder oauthClientId(String oauthClientId) {
            return oauthClientId(Output.of(oauthClientId));
        }

        /**
         * @param oauthClientSecret OAuth client secret
         * 
         * @return builder
         * 
         */
        public Builder oauthClientSecret(@Nullable Output<String> oauthClientSecret) {
            $.oauthClientSecret = oauthClientSecret;
            return this;
        }

        /**
         * @param oauthClientSecret OAuth client secret
         * 
         * @return builder
         * 
         */
        public Builder oauthClientSecret(String oauthClientSecret) {
            return oauthClientSecret(Output.of(oauthClientSecret));
        }

        /**
         * @param port Port number to connect via
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port number to connect via
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param privateLinkEndpointId The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source
         * 
         * @return builder
         * 
         */
        public Builder privateLinkEndpointId(@Nullable Output<String> privateLinkEndpointId) {
            $.privateLinkEndpointId = privateLinkEndpointId;
            return this;
        }

        /**
         * @param privateLinkEndpointId The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source
         * 
         * @return builder
         * 
         */
        public Builder privateLinkEndpointId(String privateLinkEndpointId) {
            return privateLinkEndpointId(Output.of(privateLinkEndpointId));
        }

        /**
         * @param projectId Project ID to create the connection in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID to create the connection in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param role Role name for the connection
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role Role name for the connection
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param tunnelEnabled Whether or not tunneling should be enabled on your database connection
         * 
         * @return builder
         * 
         */
        public Builder tunnelEnabled(@Nullable Output<Boolean> tunnelEnabled) {
            $.tunnelEnabled = tunnelEnabled;
            return this;
        }

        /**
         * @param tunnelEnabled Whether or not tunneling should be enabled on your database connection
         * 
         * @return builder
         * 
         */
        public Builder tunnelEnabled(Boolean tunnelEnabled) {
            return tunnelEnabled(Output.of(tunnelEnabled));
        }

        /**
         * @param type The type of connection
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of connection
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param warehouse Warehouse name for the connection
         * 
         * @return builder
         * 
         */
        public Builder warehouse(@Nullable Output<String> warehouse) {
            $.warehouse = warehouse;
            return this;
        }

        /**
         * @param warehouse Warehouse name for the connection
         * 
         * @return builder
         * 
         */
        public Builder warehouse(String warehouse) {
            return warehouse(Output.of(warehouse));
        }

        public ConnectionArgs build() {
            if ($.database == null) {
                throw new MissingRequiredPropertyException("ConnectionArgs", "database");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("ConnectionArgs", "projectId");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("ConnectionArgs", "type");
            }
            return $;
        }
    }

}

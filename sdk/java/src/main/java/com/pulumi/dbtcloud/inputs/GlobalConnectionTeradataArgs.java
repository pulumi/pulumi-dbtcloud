// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GlobalConnectionTeradataArgs extends com.pulumi.resources.ResourceArgs {

    public static final GlobalConnectionTeradataArgs Empty = new GlobalConnectionTeradataArgs();

    /**
     * The hostname of the database.
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return The hostname of the database.
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * The port to connect to for this connection. Default=1025
     * 
     */
    @Import(name="port")
    private @Nullable Output<String> port;

    /**
     * @return The port to connect to for this connection. Default=1025
     * 
     */
    public Optional<Output<String>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
     * 
     */
    @Import(name="requestTimeout")
    private @Nullable Output<Integer> requestTimeout;

    /**
     * @return The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
     * 
     */
    public Optional<Output<Integer>> requestTimeout() {
        return Optional.ofNullable(this.requestTimeout);
    }

    /**
     * The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
     * 
     */
    @Import(name="retries")
    private @Nullable Output<Integer> retries;

    /**
     * @return The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
     * 
     */
    public Optional<Output<Integer>> retries() {
        return Optional.ofNullable(this.retries);
    }

    /**
     * The transaction mode to use for the connection.
     * 
     */
    @Import(name="tmode", required=true)
    private Output<String> tmode;

    /**
     * @return The transaction mode to use for the connection.
     * 
     */
    public Output<String> tmode() {
        return this.tmode;
    }

    private GlobalConnectionTeradataArgs() {}

    private GlobalConnectionTeradataArgs(GlobalConnectionTeradataArgs $) {
        this.host = $.host;
        this.port = $.port;
        this.requestTimeout = $.requestTimeout;
        this.retries = $.retries;
        this.tmode = $.tmode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GlobalConnectionTeradataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GlobalConnectionTeradataArgs $;

        public Builder() {
            $ = new GlobalConnectionTeradataArgs();
        }

        public Builder(GlobalConnectionTeradataArgs defaults) {
            $ = new GlobalConnectionTeradataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param host The hostname of the database.
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The hostname of the database.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param port The port to connect to for this connection. Default=1025
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port to connect to for this connection. Default=1025
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        /**
         * @param requestTimeout The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeout(@Nullable Output<Integer> requestTimeout) {
            $.requestTimeout = requestTimeout;
            return this;
        }

        /**
         * @param requestTimeout The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeout(Integer requestTimeout) {
            return requestTimeout(Output.of(requestTimeout));
        }

        /**
         * @param retries The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
         * 
         * @return builder
         * 
         */
        public Builder retries(@Nullable Output<Integer> retries) {
            $.retries = retries;
            return this;
        }

        /**
         * @param retries The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
         * 
         * @return builder
         * 
         */
        public Builder retries(Integer retries) {
            return retries(Output.of(retries));
        }

        /**
         * @param tmode The transaction mode to use for the connection.
         * 
         * @return builder
         * 
         */
        public Builder tmode(Output<String> tmode) {
            $.tmode = tmode;
            return this;
        }

        /**
         * @param tmode The transaction mode to use for the connection.
         * 
         * @return builder
         * 
         */
        public Builder tmode(String tmode) {
            return tmode(Output.of(tmode));
        }

        public GlobalConnectionTeradataArgs build() {
            if ($.host == null) {
                throw new MissingRequiredPropertyException("GlobalConnectionTeradataArgs", "host");
            }
            if ($.tmode == null) {
                throw new MissingRequiredPropertyException("GlobalConnectionTeradataArgs", "tmode");
            }
            return $;
        }
    }

}

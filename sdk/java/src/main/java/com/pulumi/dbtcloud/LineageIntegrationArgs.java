// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class LineageIntegrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final LineageIntegrationArgs Empty = new LineageIntegrationArgs();

    /**
     * The URL of the BI server (see docs for more details)
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return The URL of the BI server (see docs for more details)
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * The dbt Cloud project ID for the integration
     * 
     */
    @Import(name="projectId", required=true)
    private Output<Integer> projectId;

    /**
     * @return The dbt Cloud project ID for the integration
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }

    /**
     * The sitename for the collections of dashboards (see docs for more details)
     * 
     */
    @Import(name="siteId", required=true)
    private Output<String> siteId;

    /**
     * @return The sitename for the collections of dashboards (see docs for more details)
     * 
     */
    public Output<String> siteId() {
        return this.siteId;
    }

    /**
     * The secret token value to use to authenticate to the BI server
     * 
     */
    @Import(name="token", required=true)
    private Output<String> token;

    /**
     * @return The secret token value to use to authenticate to the BI server
     * 
     */
    public Output<String> token() {
        return this.token;
    }

    /**
     * The token to use to authenticate to the BI server
     * 
     */
    @Import(name="tokenName", required=true)
    private Output<String> tokenName;

    /**
     * @return The token to use to authenticate to the BI server
     * 
     */
    public Output<String> tokenName() {
        return this.tokenName;
    }

    private LineageIntegrationArgs() {}

    private LineageIntegrationArgs(LineageIntegrationArgs $) {
        this.host = $.host;
        this.projectId = $.projectId;
        this.siteId = $.siteId;
        this.token = $.token;
        this.tokenName = $.tokenName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LineageIntegrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LineageIntegrationArgs $;

        public Builder() {
            $ = new LineageIntegrationArgs();
        }

        public Builder(LineageIntegrationArgs defaults) {
            $ = new LineageIntegrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param host The URL of the BI server (see docs for more details)
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The URL of the BI server (see docs for more details)
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param projectId The dbt Cloud project ID for the integration
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The dbt Cloud project ID for the integration
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param siteId The sitename for the collections of dashboards (see docs for more details)
         * 
         * @return builder
         * 
         */
        public Builder siteId(Output<String> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId The sitename for the collections of dashboards (see docs for more details)
         * 
         * @return builder
         * 
         */
        public Builder siteId(String siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param token The secret token value to use to authenticate to the BI server
         * 
         * @return builder
         * 
         */
        public Builder token(Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token The secret token value to use to authenticate to the BI server
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param tokenName The token to use to authenticate to the BI server
         * 
         * @return builder
         * 
         */
        public Builder tokenName(Output<String> tokenName) {
            $.tokenName = tokenName;
            return this;
        }

        /**
         * @param tokenName The token to use to authenticate to the BI server
         * 
         * @return builder
         * 
         */
        public Builder tokenName(String tokenName) {
            return tokenName(Output.of(tokenName));
        }

        public LineageIntegrationArgs build() {
            if ($.host == null) {
                throw new MissingRequiredPropertyException("LineageIntegrationArgs", "host");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("LineageIntegrationArgs", "projectId");
            }
            if ($.siteId == null) {
                throw new MissingRequiredPropertyException("LineageIntegrationArgs", "siteId");
            }
            if ($.token == null) {
                throw new MissingRequiredPropertyException("LineageIntegrationArgs", "token");
            }
            if ($.tokenName == null) {
                throw new MissingRequiredPropertyException("LineageIntegrationArgs", "tokenName");
            }
            return $;
        }
    }

}

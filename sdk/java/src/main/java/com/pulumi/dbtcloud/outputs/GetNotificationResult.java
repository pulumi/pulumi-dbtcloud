// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNotificationResult {
    /**
     * @return The external email to receive the notification
     * 
     */
    private String externalEmail;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return ID of the notification
     * 
     */
    private Integer notificationId;
    /**
     * @return Type of notification (1 = dbt Cloud user email (default): does not require an external*email ; 4 = external email: requires setting an external*email)
     * 
     */
    private Integer notificationType;
    /**
     * @return List of job IDs to trigger the webhook on cancel
     * 
     */
    private List<Integer> onCancels;
    /**
     * @return List of job IDs to trigger the webhook on failure
     * 
     */
    private List<Integer> onFailures;
    /**
     * @return List of job IDs to trigger the webhook on success
     * 
     */
    private List<Integer> onSuccesses;
    /**
     * @return Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one
     * 
     */
    private Integer userId;

    private GetNotificationResult() {}
    /**
     * @return The external email to receive the notification
     * 
     */
    public String externalEmail() {
        return this.externalEmail;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ID of the notification
     * 
     */
    public Integer notificationId() {
        return this.notificationId;
    }
    /**
     * @return Type of notification (1 = dbt Cloud user email (default): does not require an external*email ; 4 = external email: requires setting an external*email)
     * 
     */
    public Integer notificationType() {
        return this.notificationType;
    }
    /**
     * @return List of job IDs to trigger the webhook on cancel
     * 
     */
    public List<Integer> onCancels() {
        return this.onCancels;
    }
    /**
     * @return List of job IDs to trigger the webhook on failure
     * 
     */
    public List<Integer> onFailures() {
        return this.onFailures;
    }
    /**
     * @return List of job IDs to trigger the webhook on success
     * 
     */
    public List<Integer> onSuccesses() {
        return this.onSuccesses;
    }
    /**
     * @return Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one
     * 
     */
    public Integer userId() {
        return this.userId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNotificationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String externalEmail;
        private String id;
        private Integer notificationId;
        private Integer notificationType;
        private List<Integer> onCancels;
        private List<Integer> onFailures;
        private List<Integer> onSuccesses;
        private Integer userId;
        public Builder() {}
        public Builder(GetNotificationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.externalEmail = defaults.externalEmail;
    	      this.id = defaults.id;
    	      this.notificationId = defaults.notificationId;
    	      this.notificationType = defaults.notificationType;
    	      this.onCancels = defaults.onCancels;
    	      this.onFailures = defaults.onFailures;
    	      this.onSuccesses = defaults.onSuccesses;
    	      this.userId = defaults.userId;
        }

        @CustomType.Setter
        public Builder externalEmail(String externalEmail) {
            if (externalEmail == null) {
              throw new MissingRequiredPropertyException("GetNotificationResult", "externalEmail");
            }
            this.externalEmail = externalEmail;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNotificationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder notificationId(Integer notificationId) {
            if (notificationId == null) {
              throw new MissingRequiredPropertyException("GetNotificationResult", "notificationId");
            }
            this.notificationId = notificationId;
            return this;
        }
        @CustomType.Setter
        public Builder notificationType(Integer notificationType) {
            if (notificationType == null) {
              throw new MissingRequiredPropertyException("GetNotificationResult", "notificationType");
            }
            this.notificationType = notificationType;
            return this;
        }
        @CustomType.Setter
        public Builder onCancels(List<Integer> onCancels) {
            if (onCancels == null) {
              throw new MissingRequiredPropertyException("GetNotificationResult", "onCancels");
            }
            this.onCancels = onCancels;
            return this;
        }
        public Builder onCancels(Integer... onCancels) {
            return onCancels(List.of(onCancels));
        }
        @CustomType.Setter
        public Builder onFailures(List<Integer> onFailures) {
            if (onFailures == null) {
              throw new MissingRequiredPropertyException("GetNotificationResult", "onFailures");
            }
            this.onFailures = onFailures;
            return this;
        }
        public Builder onFailures(Integer... onFailures) {
            return onFailures(List.of(onFailures));
        }
        @CustomType.Setter
        public Builder onSuccesses(List<Integer> onSuccesses) {
            if (onSuccesses == null) {
              throw new MissingRequiredPropertyException("GetNotificationResult", "onSuccesses");
            }
            this.onSuccesses = onSuccesses;
            return this;
        }
        public Builder onSuccesses(Integer... onSuccesses) {
            return onSuccesses(List.of(onSuccesses));
        }
        @CustomType.Setter
        public Builder userId(Integer userId) {
            if (userId == null) {
              throw new MissingRequiredPropertyException("GetNotificationResult", "userId");
            }
            this.userId = userId;
            return this;
        }
        public GetNotificationResult build() {
            final var _resultValue = new GetNotificationResult();
            _resultValue.externalEmail = externalEmail;
            _resultValue.id = id;
            _resultValue.notificationId = notificationId;
            _resultValue.notificationType = notificationType;
            _resultValue.onCancels = onCancels;
            _resultValue.onFailures = onFailures;
            _resultValue.onSuccesses = onSuccesses;
            _resultValue.userId = userId;
            return _resultValue;
        }
    }
}

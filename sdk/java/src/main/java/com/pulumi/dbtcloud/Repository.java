// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dbtcloud.RepositoryArgs;
import com.pulumi.dbtcloud.Utilities;
import com.pulumi.dbtcloud.inputs.RepositoryState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource allows you to manage connections to git repositories in dbt Cloud.
 * 
 * By itself, this resource won&#39;t show you the repository in the dbt Cloud UI.
 * You will need to also set up a `dbtcloud.ProjectRepository` resource as well to link your dbt Cloud project and the git repository.
 * 
 * In order to find the `github_installation_id`, you can log in to dbt Cloud, replace `&lt;dbt_cloud_url&gt;` by your dbt Cloud
 * URL and run the following commands in the Google Chrome console:
 * 
 * Alternatively, you can go to the page `https://&lt;dbt_cloud_url&gt;/api/v2/integrations/github/installations/` and read the
 * value of `id`  or use the `http` provider to retrieve it automatically like in the example below.
 * 
 * ## Example Usage
 * 
 * ### repo cloned via the GitHub integration, manually entering the `github_installation_id`
 * resource &#34;dbtcloud.Repository&#34; &#34;github_repo&#34; {
 *   project_id             = dbtcloud_project.dbt_project.id
 *   remote_url             = &#34;git{@literal @}github.com:&lt;github_org&gt;/&lt;github_repo&gt;.git&#34;
 *   github_installation_id = 9876
 *   git_clone_strategy     = &#34;github_app&#34;
 * }
 * 
 * ### repo cloned via the GitHub integration, with auto-retrieval of the `github_installation_id`
 * # here, we assume that `token` and `host_url` are respectively accessible via `var.dbt_token` and `var.dbt_host_url`
 * # NOTE: the following requires connecting via a user token and can&#39;t be retrieved with a service token
 * data &#34;http&#34; &#34;github_installations_response&#34; {
 *   url = format(&#34;%s/v2/integrations/github/installations/&#34;, var.dbt_host_url)
 *   request_headers = {
 *     Authorization = format(&#34;Bearer %s&#34;, var.dbt_token)
 *   }
 * }
 * 
 * locals {
 *   github_installation_id = jsondecode(data.http.github_installations_response.response_body)[0].id
 * }
 * 
 * resource &#34;dbtcloud.Repository&#34; &#34;github_repo_other&#34; {
 *   project_id             = dbtcloud_project.dbt_project.id
 *   remote_url             = &#34;git{@literal @}github.com:&lt;github_org&gt;/&lt;github_repo&gt;.git&#34;
 *   github_installation_id = local.github_installation_id
 *   git_clone_strategy     = &#34;github_app&#34;
 * }
 * 
 * ### repo cloned via the GitLab integration
 * # as of 15 Sept 2023 this resource requires using a user token and can&#39;t be set with a service token - CC-791
 * resource &#34;dbtcloud.Repository&#34; &#34;gitlab_repo&#34; {
 *   project_id         = dbtcloud_project.dbt_project.id
 *   remote_url         = &#34;&lt;gitlab-group&gt;/&lt;gitlab-project&gt;&#34;
 *   gitlab_project_id  = 8765
 *   git_clone_strategy = &#34;deploy_token&#34;
 * }
 * 
 * ### repo cloned via the deploy token strategy
 * resource &#34;dbtcloud.Repository&#34; &#34;deploy_repo&#34; {
 *   project_id         = dbtcloud_project.dbt_project.id
 *   remote_url         = &#34;git://github.com/&lt;github_org&gt;/&lt;github_repo&gt;.git&#34;
 *   git_clone_strategy = &#34;deploy_key&#34;
 * }
 * 
 * ### repo cloned via the Azure Dev Ops integration
 * resource &#34;dbtcloud.Repository&#34; &#34;ado_repo&#34; {
 *   project_id = dbtcloud_project.dbt_project.id
 * # the following values can be added manually (IDs can be retrieved from the ADO API) or via data sources
 * # remote_url                              = &#34;https://abc{@literal @}dev.azure.com/abc/def/_git/my_repo&#34;
 * # azure_active_directory_project_id       = &#34;12345678-1234-1234-1234-1234567890ab&#34;
 * # azure_active_directory_repository_id    = &#34;87654321-4321-abcd-abcd-464327678642&#34;
 *   remote_url                                = data.dbtcloud_azure_dev_ops_repository.my_devops_repo.remote_url
 *   azure_active_directory_repository_id      = data.dbtcloud_azure_dev_ops_repository.my_devops_repo.id
 *   azure_active_directory_project_id         = data.dbtcloud_azure_dev_ops_project.my_devops_project.id
 *   azure_bypass_webhook_registration_failure = false
 *   git_clone_strategy                        = &#34;azure_active_directory_app&#34;
 * }
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/repository:Repository my_repository 12345:6789
 * ```
 * 
 */
@ResourceType(type="dbtcloud:index/repository:Repository")
public class Repository extends com.pulumi.resources.CustomResource {
    /**
     * The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsProject` and the project name - (for ADO native integration only)
     * 
     */
    @Export(name="azureActiveDirectoryProjectId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> azureActiveDirectoryProjectId;

    /**
     * @return The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsProject` and the project name - (for ADO native integration only)
     * 
     */
    public Output<Optional<String>> azureActiveDirectoryProjectId() {
        return Codegen.optional(this.azureActiveDirectoryProjectId);
    }
    /**
     * The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsRepository` along with the ADO Project ID and the repository name - (for ADO native integration only)
     * 
     */
    @Export(name="azureActiveDirectoryRepositoryId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> azureActiveDirectoryRepositoryId;

    /**
     * @return The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsRepository` along with the ADO Project ID and the repository name - (for ADO native integration only)
     * 
     */
    public Output<Optional<String>> azureActiveDirectoryRepositoryId() {
        return Codegen.optional(this.azureActiveDirectoryRepositoryId);
    }
    /**
     * If set to False (the default), the connection will fail if the service user doesn&#39;t have access to set webhooks (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will be triggered - (for ADO native integration only)
     * 
     */
    @Export(name="azureBypassWebhookRegistrationFailure", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> azureBypassWebhookRegistrationFailure;

    /**
     * @return If set to False (the default), the connection will fail if the service user doesn&#39;t have access to set webhooks (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will be triggered - (for ADO native integration only)
     * 
     */
    public Output<Optional<Boolean>> azureBypassWebhookRegistrationFailure() {
        return Codegen.optional(this.azureBypassWebhookRegistrationFailure);
    }
    /**
     * Public key generated by dbt when using `deploy_key` clone strategy
     * 
     */
    @Export(name="deployKey", refs={String.class}, tree="[0]")
    private Output<String> deployKey;

    /**
     * @return Public key generated by dbt when using `deploy_key` clone strategy
     * 
     */
    public Output<String> deployKey() {
        return this.deployKey;
    }
    /**
     * Whether we should return the public deploy key - (for the `deploy_key` strategy)
     * 
     * @deprecated
     * This field is deprecated and will be removed in a future version of the provider, please remove it from your configuration. The key is always fetched when the clone strategy is `deploy_key`
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in a future version of the provider, please remove it from your configuration. The key is always fetched when the clone strategy is `deploy_key` */
    @Export(name="fetchDeployKey", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> fetchDeployKey;

    /**
     * @return Whether we should return the public deploy key - (for the `deploy_key` strategy)
     * 
     */
    public Output<Optional<Boolean>> fetchDeployKey() {
        return Codegen.optional(this.fetchDeployKey);
    }
    /**
     * Git clone strategy for the repository. Can be `deploy_key` (default) for cloning via SSH Deploy Key, `github_app` for GitHub native integration, `deploy_token` for the GitLab native integration and `azure_active_directory_app` for ADO native integration
     * 
     */
    @Export(name="gitCloneStrategy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> gitCloneStrategy;

    /**
     * @return Git clone strategy for the repository. Can be `deploy_key` (default) for cloning via SSH Deploy Key, `github_app` for GitHub native integration, `deploy_token` for the GitLab native integration and `azure_active_directory_app` for ADO native integration
     * 
     */
    public Output<Optional<String>> gitCloneStrategy() {
        return Codegen.optional(this.gitCloneStrategy);
    }
    /**
     * Identifier for the GitHub App - (for GitHub native integration only)
     * 
     */
    @Export(name="githubInstallationId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> githubInstallationId;

    /**
     * @return Identifier for the GitHub App - (for GitHub native integration only)
     * 
     */
    public Output<Optional<Integer>> githubInstallationId() {
        return Codegen.optional(this.githubInstallationId);
    }
    /**
     * Identifier for the Gitlab project -  (for GitLab native integration only)
     * 
     */
    @Export(name="gitlabProjectId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> gitlabProjectId;

    /**
     * @return Identifier for the Gitlab project -  (for GitLab native integration only)
     * 
     */
    public Output<Optional<Integer>> gitlabProjectId() {
        return Codegen.optional(this.gitlabProjectId);
    }
    /**
     * Whether the repository is active
     * 
     */
    @Export(name="isActive", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isActive;

    /**
     * @return Whether the repository is active
     * 
     */
    public Output<Optional<Boolean>> isActive() {
        return Codegen.optional(this.isActive);
    }
    /**
     * Project ID to create the repository in
     * 
     */
    @Export(name="projectId", refs={Integer.class}, tree="[0]")
    private Output<Integer> projectId;

    /**
     * @return Project ID to create the repository in
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }
    /**
     * Git URL for the repository or &lt;Group&gt;/&lt;Project&gt; for Gitlab
     * 
     */
    @Export(name="remoteUrl", refs={String.class}, tree="[0]")
    private Output<String> remoteUrl;

    /**
     * @return Git URL for the repository or &lt;Group&gt;/&lt;Project&gt; for Gitlab
     * 
     */
    public Output<String> remoteUrl() {
        return this.remoteUrl;
    }
    /**
     * Credentials ID for the repository (From the repository side not the dbt Cloud ID)
     * 
     */
    @Export(name="repositoryCredentialsId", refs={Integer.class}, tree="[0]")
    private Output<Integer> repositoryCredentialsId;

    /**
     * @return Credentials ID for the repository (From the repository side not the dbt Cloud ID)
     * 
     */
    public Output<Integer> repositoryCredentialsId() {
        return this.repositoryCredentialsId;
    }
    /**
     * Repository Identifier
     * 
     */
    @Export(name="repositoryId", refs={Integer.class}, tree="[0]")
    private Output<Integer> repositoryId;

    /**
     * @return Repository Identifier
     * 
     */
    public Output<Integer> repositoryId() {
        return this.repositoryId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Repository(String name) {
        this(name, RepositoryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Repository(String name, RepositoryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Repository(String name, RepositoryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/repository:Repository", name, args == null ? RepositoryArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Repository(String name, Output<String> id, @Nullable RepositoryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/repository:Repository", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Repository get(String name, Output<String> id, @Nullable RepositoryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Repository(name, id, state, options);
    }
}

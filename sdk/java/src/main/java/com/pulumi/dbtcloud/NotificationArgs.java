// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationArgs Empty = new NotificationArgs();

    /**
     * The external email to receive the notification
     * 
     */
    @Import(name="externalEmail")
    private @Nullable Output<String> externalEmail;

    /**
     * @return The external email to receive the notification
     * 
     */
    public Optional<Output<String>> externalEmail() {
        return Optional.ofNullable(this.externalEmail);
    }

    /**
     * Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`)
     * 
     */
    @Import(name="notificationType")
    private @Nullable Output<Integer> notificationType;

    /**
     * @return Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`)
     * 
     */
    public Optional<Output<Integer>> notificationType() {
        return Optional.ofNullable(this.notificationType);
    }

    /**
     * List of job IDs to trigger the webhook on cancel
     * 
     */
    @Import(name="onCancels")
    private @Nullable Output<List<Integer>> onCancels;

    /**
     * @return List of job IDs to trigger the webhook on cancel
     * 
     */
    public Optional<Output<List<Integer>>> onCancels() {
        return Optional.ofNullable(this.onCancels);
    }

    /**
     * List of job IDs to trigger the webhook on failure
     * 
     */
    @Import(name="onFailures")
    private @Nullable Output<List<Integer>> onFailures;

    /**
     * @return List of job IDs to trigger the webhook on failure
     * 
     */
    public Optional<Output<List<Integer>>> onFailures() {
        return Optional.ofNullable(this.onFailures);
    }

    /**
     * List of job IDs to trigger the webhook on success
     * 
     */
    @Import(name="onSuccesses")
    private @Nullable Output<List<Integer>> onSuccesses;

    /**
     * @return List of job IDs to trigger the webhook on success
     * 
     */
    public Optional<Output<List<Integer>>> onSuccesses() {
        return Optional.ofNullable(this.onSuccesses);
    }

    /**
     * The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
     * 
     */
    @Import(name="slackChannelId")
    private @Nullable Output<String> slackChannelId;

    /**
     * @return The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
     * 
     */
    public Optional<Output<String>> slackChannelId() {
        return Optional.ofNullable(this.slackChannelId);
    }

    /**
     * The name of the slack channel
     * 
     */
    @Import(name="slackChannelName")
    private @Nullable Output<String> slackChannelName;

    /**
     * @return The name of the slack channel
     * 
     */
    public Optional<Output<String>> slackChannelName() {
        return Optional.ofNullable(this.slackChannelName);
    }

    /**
     * State of the notification (1 = active (default), 2 = inactive)
     * 
     */
    @Import(name="state")
    private @Nullable Output<Integer> state;

    /**
     * @return State of the notification (1 = active (default), 2 = inactive)
     * 
     */
    public Optional<Output<Integer>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one
     * 
     */
    @Import(name="userId", required=true)
    private Output<Integer> userId;

    /**
     * @return Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one
     * 
     */
    public Output<Integer> userId() {
        return this.userId;
    }

    private NotificationArgs() {}

    private NotificationArgs(NotificationArgs $) {
        this.externalEmail = $.externalEmail;
        this.notificationType = $.notificationType;
        this.onCancels = $.onCancels;
        this.onFailures = $.onFailures;
        this.onSuccesses = $.onSuccesses;
        this.slackChannelId = $.slackChannelId;
        this.slackChannelName = $.slackChannelName;
        this.state = $.state;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationArgs $;

        public Builder() {
            $ = new NotificationArgs();
        }

        public Builder(NotificationArgs defaults) {
            $ = new NotificationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param externalEmail The external email to receive the notification
         * 
         * @return builder
         * 
         */
        public Builder externalEmail(@Nullable Output<String> externalEmail) {
            $.externalEmail = externalEmail;
            return this;
        }

        /**
         * @param externalEmail The external email to receive the notification
         * 
         * @return builder
         * 
         */
        public Builder externalEmail(String externalEmail) {
            return externalEmail(Output.of(externalEmail));
        }

        /**
         * @param notificationType Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`)
         * 
         * @return builder
         * 
         */
        public Builder notificationType(@Nullable Output<Integer> notificationType) {
            $.notificationType = notificationType;
            return this;
        }

        /**
         * @param notificationType Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`)
         * 
         * @return builder
         * 
         */
        public Builder notificationType(Integer notificationType) {
            return notificationType(Output.of(notificationType));
        }

        /**
         * @param onCancels List of job IDs to trigger the webhook on cancel
         * 
         * @return builder
         * 
         */
        public Builder onCancels(@Nullable Output<List<Integer>> onCancels) {
            $.onCancels = onCancels;
            return this;
        }

        /**
         * @param onCancels List of job IDs to trigger the webhook on cancel
         * 
         * @return builder
         * 
         */
        public Builder onCancels(List<Integer> onCancels) {
            return onCancels(Output.of(onCancels));
        }

        /**
         * @param onCancels List of job IDs to trigger the webhook on cancel
         * 
         * @return builder
         * 
         */
        public Builder onCancels(Integer... onCancels) {
            return onCancels(List.of(onCancels));
        }

        /**
         * @param onFailures List of job IDs to trigger the webhook on failure
         * 
         * @return builder
         * 
         */
        public Builder onFailures(@Nullable Output<List<Integer>> onFailures) {
            $.onFailures = onFailures;
            return this;
        }

        /**
         * @param onFailures List of job IDs to trigger the webhook on failure
         * 
         * @return builder
         * 
         */
        public Builder onFailures(List<Integer> onFailures) {
            return onFailures(Output.of(onFailures));
        }

        /**
         * @param onFailures List of job IDs to trigger the webhook on failure
         * 
         * @return builder
         * 
         */
        public Builder onFailures(Integer... onFailures) {
            return onFailures(List.of(onFailures));
        }

        /**
         * @param onSuccesses List of job IDs to trigger the webhook on success
         * 
         * @return builder
         * 
         */
        public Builder onSuccesses(@Nullable Output<List<Integer>> onSuccesses) {
            $.onSuccesses = onSuccesses;
            return this;
        }

        /**
         * @param onSuccesses List of job IDs to trigger the webhook on success
         * 
         * @return builder
         * 
         */
        public Builder onSuccesses(List<Integer> onSuccesses) {
            return onSuccesses(Output.of(onSuccesses));
        }

        /**
         * @param onSuccesses List of job IDs to trigger the webhook on success
         * 
         * @return builder
         * 
         */
        public Builder onSuccesses(Integer... onSuccesses) {
            return onSuccesses(List.of(onSuccesses));
        }

        /**
         * @param slackChannelId The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
         * 
         * @return builder
         * 
         */
        public Builder slackChannelId(@Nullable Output<String> slackChannelId) {
            $.slackChannelId = slackChannelId;
            return this;
        }

        /**
         * @param slackChannelId The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
         * 
         * @return builder
         * 
         */
        public Builder slackChannelId(String slackChannelId) {
            return slackChannelId(Output.of(slackChannelId));
        }

        /**
         * @param slackChannelName The name of the slack channel
         * 
         * @return builder
         * 
         */
        public Builder slackChannelName(@Nullable Output<String> slackChannelName) {
            $.slackChannelName = slackChannelName;
            return this;
        }

        /**
         * @param slackChannelName The name of the slack channel
         * 
         * @return builder
         * 
         */
        public Builder slackChannelName(String slackChannelName) {
            return slackChannelName(Output.of(slackChannelName));
        }

        /**
         * @param state State of the notification (1 = active (default), 2 = inactive)
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<Integer> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of the notification (1 = active (default), 2 = inactive)
         * 
         * @return builder
         * 
         */
        public Builder state(Integer state) {
            return state(Output.of(state));
        }

        /**
         * @param userId Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one
         * 
         * @return builder
         * 
         */
        public Builder userId(Output<Integer> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one
         * 
         * @return builder
         * 
         */
        public Builder userId(Integer userId) {
            return userId(Output.of(userId));
        }

        public NotificationArgs build() {
            if ($.userId == null) {
                throw new MissingRequiredPropertyException("NotificationArgs", "userId");
            }
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GlobalConnectionPostgresSshTunnel {
    /**
     * @return The hostname for the SSH tunnel.
     * 
     */
    private String hostname;
    /**
     * @return The ID of the SSH tunnel connection.
     * 
     */
    private @Nullable Integer id;
    /**
     * @return The HTTP port for the SSH tunnel.
     * 
     */
    private Integer port;
    /**
     * @return The SSH public key generated to allow connecting via SSH tunnel.
     * 
     */
    private @Nullable String publicKey;
    /**
     * @return The username to use for the SSH tunnel.
     * 
     */
    private String username;

    private GlobalConnectionPostgresSshTunnel() {}
    /**
     * @return The hostname for the SSH tunnel.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The ID of the SSH tunnel connection.
     * 
     */
    public Optional<Integer> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The HTTP port for the SSH tunnel.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The SSH public key generated to allow connecting via SSH tunnel.
     * 
     */
    public Optional<String> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }
    /**
     * @return The username to use for the SSH tunnel.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GlobalConnectionPostgresSshTunnel defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String hostname;
        private @Nullable Integer id;
        private Integer port;
        private @Nullable String publicKey;
        private String username;
        public Builder() {}
        public Builder(GlobalConnectionPostgresSshTunnel defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.port = defaults.port;
    	      this.publicKey = defaults.publicKey;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GlobalConnectionPostgresSshTunnel", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable Integer id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GlobalConnectionPostgresSshTunnel", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder publicKey(@Nullable String publicKey) {

            this.publicKey = publicKey;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GlobalConnectionPostgresSshTunnel", "username");
            }
            this.username = username;
            return this;
        }
        public GlobalConnectionPostgresSshTunnel build() {
            final var _resultValue = new GlobalConnectionPostgresSshTunnel();
            _resultValue.hostname = hostname;
            _resultValue.id = id;
            _resultValue.port = port;
            _resultValue.publicKey = publicKey;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dbtcloud.SemanticLayerConfigurationArgs;
import com.pulumi.dbtcloud.Utilities;
import com.pulumi.dbtcloud.inputs.SemanticLayerConfigurationState;
import java.lang.Integer;
import javax.annotation.Nullable;

/**
 * The resource allows basic configuration of the Semantic Layer for a specific project. For the feature to be completely functional, a Semantic Layer Credential is also required.
 * See the documentationh ttps://docs.getdbt.com/docs/use-dbt-semantic-layer/dbt-sl for more information on the Semantic Layer.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.dbtcloud.SemanticLayerConfiguration;
 * import com.pulumi.dbtcloud.SemanticLayerConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new SemanticLayerConfiguration("example", SemanticLayerConfigurationArgs.builder()
 *             .projectId(projectId)
 *             .environmentId(environmentId)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * using import blocks (requires Terraform &gt;= 1.5)
 * 
 * import {
 * 
 *   to = dbtcloud_semantic_layer_configuration.example
 * 
 *   id = &#34;project_id:id&#34;
 * 
 * }
 * 
 * import {
 * 
 *   to = dbtcloud_semantic_layer_configuration.example
 * 
 *   id = &#34;12345:5678&#34;
 * 
 * }
 * 
 * using the older import command
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/semanticLayerConfiguration:SemanticLayerConfiguration example &#34;project_id:id&#34;
 * ```
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/semanticLayerConfiguration:SemanticLayerConfiguration example 12345:5678
 * ```
 * 
 */
@ResourceType(type="dbtcloud:index/semanticLayerConfiguration:SemanticLayerConfiguration")
public class SemanticLayerConfiguration extends com.pulumi.resources.CustomResource {
    /**
     * The ID of the environment
     * 
     */
    @Export(name="environmentId", refs={Integer.class}, tree="[0]")
    private Output<Integer> environmentId;

    /**
     * @return The ID of the environment
     * 
     */
    public Output<Integer> environmentId() {
        return this.environmentId;
    }
    /**
     * The ID of the project
     * 
     */
    @Export(name="projectId", refs={Integer.class}, tree="[0]")
    private Output<Integer> projectId;

    /**
     * @return The ID of the project
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SemanticLayerConfiguration(java.lang.String name) {
        this(name, SemanticLayerConfigurationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SemanticLayerConfiguration(java.lang.String name, SemanticLayerConfigurationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SemanticLayerConfiguration(java.lang.String name, SemanticLayerConfigurationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/semanticLayerConfiguration:SemanticLayerConfiguration", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private SemanticLayerConfiguration(java.lang.String name, Output<java.lang.String> id, @Nullable SemanticLayerConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/semanticLayerConfiguration:SemanticLayerConfiguration", name, state, makeResourceOptions(options, id), false);
    }

    private static SemanticLayerConfigurationArgs makeArgs(SemanticLayerConfigurationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SemanticLayerConfigurationArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi/pulumi-dbtcloud")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SemanticLayerConfiguration get(java.lang.String name, Output<java.lang.String> id, @Nullable SemanticLayerConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SemanticLayerConfiguration(name, id, state, options);
    }
}

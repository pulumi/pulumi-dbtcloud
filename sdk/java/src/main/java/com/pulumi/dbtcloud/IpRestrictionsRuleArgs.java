// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dbtcloud.inputs.IpRestrictionsRuleCidrArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IpRestrictionsRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final IpRestrictionsRuleArgs Empty = new IpRestrictionsRuleArgs();

    /**
     * Set of CIDR ranges for this rule
     * 
     */
    @Import(name="cidrs", required=true)
    private Output<List<IpRestrictionsRuleCidrArgs>> cidrs;

    /**
     * @return Set of CIDR ranges for this rule
     * 
     */
    public Output<List<IpRestrictionsRuleCidrArgs>> cidrs() {
        return this.cidrs;
    }

    /**
     * A description of the IP restriction rule
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the IP restriction rule
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the IP restriction rule
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the IP restriction rule
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Whether the IP restriction rule set is enabled or not. Important!: This value needs to be the same for all rules if multiple rules are defined. All rules must be active or inactive at the same time.
     * 
     */
    @Import(name="ruleSetEnabled", required=true)
    private Output<Boolean> ruleSetEnabled;

    /**
     * @return Whether the IP restriction rule set is enabled or not. Important!: This value needs to be the same for all rules if multiple rules are defined. All rules must be active or inactive at the same time.
     * 
     */
    public Output<Boolean> ruleSetEnabled() {
        return this.ruleSetEnabled;
    }

    /**
     * The type of the IP restriction rule (allow or deny)
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the IP restriction rule (allow or deny)
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private IpRestrictionsRuleArgs() {}

    private IpRestrictionsRuleArgs(IpRestrictionsRuleArgs $) {
        this.cidrs = $.cidrs;
        this.description = $.description;
        this.name = $.name;
        this.ruleSetEnabled = $.ruleSetEnabled;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpRestrictionsRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpRestrictionsRuleArgs $;

        public Builder() {
            $ = new IpRestrictionsRuleArgs();
        }

        public Builder(IpRestrictionsRuleArgs defaults) {
            $ = new IpRestrictionsRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cidrs Set of CIDR ranges for this rule
         * 
         * @return builder
         * 
         */
        public Builder cidrs(Output<List<IpRestrictionsRuleCidrArgs>> cidrs) {
            $.cidrs = cidrs;
            return this;
        }

        /**
         * @param cidrs Set of CIDR ranges for this rule
         * 
         * @return builder
         * 
         */
        public Builder cidrs(List<IpRestrictionsRuleCidrArgs> cidrs) {
            return cidrs(Output.of(cidrs));
        }

        /**
         * @param cidrs Set of CIDR ranges for this rule
         * 
         * @return builder
         * 
         */
        public Builder cidrs(IpRestrictionsRuleCidrArgs... cidrs) {
            return cidrs(List.of(cidrs));
        }

        /**
         * @param description A description of the IP restriction rule
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the IP restriction rule
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the IP restriction rule
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the IP restriction rule
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ruleSetEnabled Whether the IP restriction rule set is enabled or not. Important!: This value needs to be the same for all rules if multiple rules are defined. All rules must be active or inactive at the same time.
         * 
         * @return builder
         * 
         */
        public Builder ruleSetEnabled(Output<Boolean> ruleSetEnabled) {
            $.ruleSetEnabled = ruleSetEnabled;
            return this;
        }

        /**
         * @param ruleSetEnabled Whether the IP restriction rule set is enabled or not. Important!: This value needs to be the same for all rules if multiple rules are defined. All rules must be active or inactive at the same time.
         * 
         * @return builder
         * 
         */
        public Builder ruleSetEnabled(Boolean ruleSetEnabled) {
            return ruleSetEnabled(Output.of(ruleSetEnabled));
        }

        /**
         * @param type The type of the IP restriction rule (allow or deny)
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the IP restriction rule (allow or deny)
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public IpRestrictionsRuleArgs build() {
            if ($.cidrs == null) {
                throw new MissingRequiredPropertyException("IpRestrictionsRuleArgs", "cidrs");
            }
            if ($.ruleSetEnabled == null) {
                throw new MissingRequiredPropertyException("IpRestrictionsRuleArgs", "ruleSetEnabled");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("IpRestrictionsRuleArgs", "type");
            }
            return $;
        }
    }

}

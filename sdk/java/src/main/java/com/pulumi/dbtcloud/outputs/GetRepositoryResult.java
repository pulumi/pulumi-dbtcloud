// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRepositoryResult {
    /**
     * @return The Azure Dev Ops project ID
     * 
     */
    private String azureActiveDirectoryProjectId;
    /**
     * @return The Azure Dev Ops repository ID
     * 
     */
    private String azureActiveDirectoryRepositoryId;
    /**
     * @return If set to False (the default), the connection will fail if the service user doesn&#39;t have access to set webhooks
     * 
     */
    private Boolean azureBypassWebhookRegistrationFailure;
    /**
     * @return Public key generated by dbt when using `deploy_key` clone strategy
     * 
     */
    private String deployKey;
    /**
     * @return Whether we should return the public deploy key
     * 
     * @deprecated
     * This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deploy_key`
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deploy_key` */
    private Boolean fetchDeployKey;
    /**
     * @return Git clone strategy for the repository
     * 
     */
    private String gitCloneStrategy;
    /**
     * @return Identifier for the GitHub installation
     * 
     */
    private Integer githubInstallationId;
    /**
     * @return Identifier for the Gitlab project
     * 
     */
    private Integer gitlabProjectId;
    /**
     * @return The ID of this resource
     * 
     */
    private String id;
    /**
     * @return Whether the repository is active
     * 
     */
    private Boolean isActive;
    /**
     * @return Identifier for the PrivateLink endpoint.
     * 
     */
    private String privateLinkEndpointId;
    /**
     * @return Project ID to create the repository in
     * 
     */
    private Integer projectId;
    /**
     * @return The pull request URL template to be used when opening a pull request from within dbt Cloud&#39;s IDE
     * 
     */
    private String pullRequestUrlTemplate;
    /**
     * @return Git URL for the repository or &lt;Group&gt;/&lt;Project&gt; for Gitlab
     * 
     */
    private String remoteUrl;
    /**
     * @return Credentials ID for the repository (From the repository side not the dbt Cloud ID)
     * 
     */
    private Integer repositoryCredentialsId;
    /**
     * @return ID for the repository
     * 
     */
    private Integer repositoryId;

    private GetRepositoryResult() {}
    /**
     * @return The Azure Dev Ops project ID
     * 
     */
    public String azureActiveDirectoryProjectId() {
        return this.azureActiveDirectoryProjectId;
    }
    /**
     * @return The Azure Dev Ops repository ID
     * 
     */
    public String azureActiveDirectoryRepositoryId() {
        return this.azureActiveDirectoryRepositoryId;
    }
    /**
     * @return If set to False (the default), the connection will fail if the service user doesn&#39;t have access to set webhooks
     * 
     */
    public Boolean azureBypassWebhookRegistrationFailure() {
        return this.azureBypassWebhookRegistrationFailure;
    }
    /**
     * @return Public key generated by dbt when using `deploy_key` clone strategy
     * 
     */
    public String deployKey() {
        return this.deployKey;
    }
    /**
     * @return Whether we should return the public deploy key
     * 
     * @deprecated
     * This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deploy_key`
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deploy_key` */
    public Boolean fetchDeployKey() {
        return this.fetchDeployKey;
    }
    /**
     * @return Git clone strategy for the repository
     * 
     */
    public String gitCloneStrategy() {
        return this.gitCloneStrategy;
    }
    /**
     * @return Identifier for the GitHub installation
     * 
     */
    public Integer githubInstallationId() {
        return this.githubInstallationId;
    }
    /**
     * @return Identifier for the Gitlab project
     * 
     */
    public Integer gitlabProjectId() {
        return this.gitlabProjectId;
    }
    /**
     * @return The ID of this resource
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether the repository is active
     * 
     */
    public Boolean isActive() {
        return this.isActive;
    }
    /**
     * @return Identifier for the PrivateLink endpoint.
     * 
     */
    public String privateLinkEndpointId() {
        return this.privateLinkEndpointId;
    }
    /**
     * @return Project ID to create the repository in
     * 
     */
    public Integer projectId() {
        return this.projectId;
    }
    /**
     * @return The pull request URL template to be used when opening a pull request from within dbt Cloud&#39;s IDE
     * 
     */
    public String pullRequestUrlTemplate() {
        return this.pullRequestUrlTemplate;
    }
    /**
     * @return Git URL for the repository or &lt;Group&gt;/&lt;Project&gt; for Gitlab
     * 
     */
    public String remoteUrl() {
        return this.remoteUrl;
    }
    /**
     * @return Credentials ID for the repository (From the repository side not the dbt Cloud ID)
     * 
     */
    public Integer repositoryCredentialsId() {
        return this.repositoryCredentialsId;
    }
    /**
     * @return ID for the repository
     * 
     */
    public Integer repositoryId() {
        return this.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String azureActiveDirectoryProjectId;
        private String azureActiveDirectoryRepositoryId;
        private Boolean azureBypassWebhookRegistrationFailure;
        private String deployKey;
        private Boolean fetchDeployKey;
        private String gitCloneStrategy;
        private Integer githubInstallationId;
        private Integer gitlabProjectId;
        private String id;
        private Boolean isActive;
        private String privateLinkEndpointId;
        private Integer projectId;
        private String pullRequestUrlTemplate;
        private String remoteUrl;
        private Integer repositoryCredentialsId;
        private Integer repositoryId;
        public Builder() {}
        public Builder(GetRepositoryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.azureActiveDirectoryProjectId = defaults.azureActiveDirectoryProjectId;
    	      this.azureActiveDirectoryRepositoryId = defaults.azureActiveDirectoryRepositoryId;
    	      this.azureBypassWebhookRegistrationFailure = defaults.azureBypassWebhookRegistrationFailure;
    	      this.deployKey = defaults.deployKey;
    	      this.fetchDeployKey = defaults.fetchDeployKey;
    	      this.gitCloneStrategy = defaults.gitCloneStrategy;
    	      this.githubInstallationId = defaults.githubInstallationId;
    	      this.gitlabProjectId = defaults.gitlabProjectId;
    	      this.id = defaults.id;
    	      this.isActive = defaults.isActive;
    	      this.privateLinkEndpointId = defaults.privateLinkEndpointId;
    	      this.projectId = defaults.projectId;
    	      this.pullRequestUrlTemplate = defaults.pullRequestUrlTemplate;
    	      this.remoteUrl = defaults.remoteUrl;
    	      this.repositoryCredentialsId = defaults.repositoryCredentialsId;
    	      this.repositoryId = defaults.repositoryId;
        }

        @CustomType.Setter
        public Builder azureActiveDirectoryProjectId(String azureActiveDirectoryProjectId) {
            if (azureActiveDirectoryProjectId == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "azureActiveDirectoryProjectId");
            }
            this.azureActiveDirectoryProjectId = azureActiveDirectoryProjectId;
            return this;
        }
        @CustomType.Setter
        public Builder azureActiveDirectoryRepositoryId(String azureActiveDirectoryRepositoryId) {
            if (azureActiveDirectoryRepositoryId == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "azureActiveDirectoryRepositoryId");
            }
            this.azureActiveDirectoryRepositoryId = azureActiveDirectoryRepositoryId;
            return this;
        }
        @CustomType.Setter
        public Builder azureBypassWebhookRegistrationFailure(Boolean azureBypassWebhookRegistrationFailure) {
            if (azureBypassWebhookRegistrationFailure == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "azureBypassWebhookRegistrationFailure");
            }
            this.azureBypassWebhookRegistrationFailure = azureBypassWebhookRegistrationFailure;
            return this;
        }
        @CustomType.Setter
        public Builder deployKey(String deployKey) {
            if (deployKey == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "deployKey");
            }
            this.deployKey = deployKey;
            return this;
        }
        @CustomType.Setter
        public Builder fetchDeployKey(Boolean fetchDeployKey) {
            if (fetchDeployKey == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "fetchDeployKey");
            }
            this.fetchDeployKey = fetchDeployKey;
            return this;
        }
        @CustomType.Setter
        public Builder gitCloneStrategy(String gitCloneStrategy) {
            if (gitCloneStrategy == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "gitCloneStrategy");
            }
            this.gitCloneStrategy = gitCloneStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder githubInstallationId(Integer githubInstallationId) {
            if (githubInstallationId == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "githubInstallationId");
            }
            this.githubInstallationId = githubInstallationId;
            return this;
        }
        @CustomType.Setter
        public Builder gitlabProjectId(Integer gitlabProjectId) {
            if (gitlabProjectId == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "gitlabProjectId");
            }
            this.gitlabProjectId = gitlabProjectId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isActive(Boolean isActive) {
            if (isActive == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "isActive");
            }
            this.isActive = isActive;
            return this;
        }
        @CustomType.Setter
        public Builder privateLinkEndpointId(String privateLinkEndpointId) {
            if (privateLinkEndpointId == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "privateLinkEndpointId");
            }
            this.privateLinkEndpointId = privateLinkEndpointId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(Integer projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder pullRequestUrlTemplate(String pullRequestUrlTemplate) {
            if (pullRequestUrlTemplate == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "pullRequestUrlTemplate");
            }
            this.pullRequestUrlTemplate = pullRequestUrlTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder remoteUrl(String remoteUrl) {
            if (remoteUrl == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "remoteUrl");
            }
            this.remoteUrl = remoteUrl;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryCredentialsId(Integer repositoryCredentialsId) {
            if (repositoryCredentialsId == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "repositoryCredentialsId");
            }
            this.repositoryCredentialsId = repositoryCredentialsId;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryId(Integer repositoryId) {
            if (repositoryId == null) {
              throw new MissingRequiredPropertyException("GetRepositoryResult", "repositoryId");
            }
            this.repositoryId = repositoryId;
            return this;
        }
        public GetRepositoryResult build() {
            final var _resultValue = new GetRepositoryResult();
            _resultValue.azureActiveDirectoryProjectId = azureActiveDirectoryProjectId;
            _resultValue.azureActiveDirectoryRepositoryId = azureActiveDirectoryRepositoryId;
            _resultValue.azureBypassWebhookRegistrationFailure = azureBypassWebhookRegistrationFailure;
            _resultValue.deployKey = deployKey;
            _resultValue.fetchDeployKey = fetchDeployKey;
            _resultValue.gitCloneStrategy = gitCloneStrategy;
            _resultValue.githubInstallationId = githubInstallationId;
            _resultValue.gitlabProjectId = gitlabProjectId;
            _resultValue.id = id;
            _resultValue.isActive = isActive;
            _resultValue.privateLinkEndpointId = privateLinkEndpointId;
            _resultValue.projectId = projectId;
            _resultValue.pullRequestUrlTemplate = pullRequestUrlTemplate;
            _resultValue.remoteUrl = remoteUrl;
            _resultValue.repositoryCredentialsId = repositoryCredentialsId;
            _resultValue.repositoryId = repositoryId;
            return _resultValue;
        }
    }
}

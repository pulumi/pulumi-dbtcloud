// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceTokenServiceTokenPermission {
    /**
     * @return Whether or not to apply this permission to all projects for this service token
     * 
     */
    private Boolean allProjects;
    /**
     * @return Set of permissions to apply
     * 
     */
    private String permissionSet;
    /**
     * @return Project ID to apply this permission to for this service token
     * 
     */
    private Integer projectId;
    /**
     * @return What types of environments to apply Write permissions to.
     * Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
     * The values allowed are `all`, `development`, `staging`, `production` and `other`.
     * Not setting a value is the same as selecting `all`.
     * Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
     * 
     */
    private List<String> writableEnvironmentCategories;

    private GetServiceTokenServiceTokenPermission() {}
    /**
     * @return Whether or not to apply this permission to all projects for this service token
     * 
     */
    public Boolean allProjects() {
        return this.allProjects;
    }
    /**
     * @return Set of permissions to apply
     * 
     */
    public String permissionSet() {
        return this.permissionSet;
    }
    /**
     * @return Project ID to apply this permission to for this service token
     * 
     */
    public Integer projectId() {
        return this.projectId;
    }
    /**
     * @return What types of environments to apply Write permissions to.
     * Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
     * The values allowed are `all`, `development`, `staging`, `production` and `other`.
     * Not setting a value is the same as selecting `all`.
     * Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
     * 
     */
    public List<String> writableEnvironmentCategories() {
        return this.writableEnvironmentCategories;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceTokenServiceTokenPermission defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allProjects;
        private String permissionSet;
        private Integer projectId;
        private List<String> writableEnvironmentCategories;
        public Builder() {}
        public Builder(GetServiceTokenServiceTokenPermission defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allProjects = defaults.allProjects;
    	      this.permissionSet = defaults.permissionSet;
    	      this.projectId = defaults.projectId;
    	      this.writableEnvironmentCategories = defaults.writableEnvironmentCategories;
        }

        @CustomType.Setter
        public Builder allProjects(Boolean allProjects) {
            if (allProjects == null) {
              throw new MissingRequiredPropertyException("GetServiceTokenServiceTokenPermission", "allProjects");
            }
            this.allProjects = allProjects;
            return this;
        }
        @CustomType.Setter
        public Builder permissionSet(String permissionSet) {
            if (permissionSet == null) {
              throw new MissingRequiredPropertyException("GetServiceTokenServiceTokenPermission", "permissionSet");
            }
            this.permissionSet = permissionSet;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(Integer projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetServiceTokenServiceTokenPermission", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder writableEnvironmentCategories(List<String> writableEnvironmentCategories) {
            if (writableEnvironmentCategories == null) {
              throw new MissingRequiredPropertyException("GetServiceTokenServiceTokenPermission", "writableEnvironmentCategories");
            }
            this.writableEnvironmentCategories = writableEnvironmentCategories;
            return this;
        }
        public Builder writableEnvironmentCategories(String... writableEnvironmentCategories) {
            return writableEnvironmentCategories(List.of(writableEnvironmentCategories));
        }
        public GetServiceTokenServiceTokenPermission build() {
            final var _resultValue = new GetServiceTokenServiceTokenPermission();
            _resultValue.allProjects = allProjects;
            _resultValue.permissionSet = permissionSet;
            _resultValue.projectId = projectId;
            _resultValue.writableEnvironmentCategories = writableEnvironmentCategories;
            return _resultValue;
        }
    }
}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dbtcloud.LicenseMapArgs;
import com.pulumi.dbtcloud.Utilities;
import com.pulumi.dbtcloud.inputs.LicenseMapState;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.dbtcloud.LicenseMap;
 * import com.pulumi.dbtcloud.LicenseMapArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Developer license group mapping
 *         var devLicenseMap = new LicenseMap("devLicenseMap", LicenseMapArgs.builder()
 *             .licenseType("developer")
 *             .ssoLicenseMappingGroups("DEV-SSO-GROUP")
 *             .build());
 * 
 *         // Read-only license mapping
 *         var readOnlyLicenseMap = new LicenseMap("readOnlyLicenseMap", LicenseMapArgs.builder()
 *             .licenseType("read_only")
 *             .ssoLicenseMappingGroups("READ-ONLY-SSO-GROUP")
 *             .build());
 * 
 *         // IT license mapping
 *         var itLicenseMap = new LicenseMap("itLicenseMap", LicenseMapArgs.builder()
 *             .licenseType("it")
 *             .ssoLicenseMappingGroups("IT-SSO-GROUP")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Import using a license map ID found in the URL or via the API.
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/licenseMap:LicenseMap test_license_map &#34;license_map_id&#34;
 * ```
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/licenseMap:LicenseMap test_license_map 12345
 * ```
 * 
 */
@ResourceType(type="dbtcloud:index/licenseMap:LicenseMap")
public class LicenseMap extends com.pulumi.resources.CustomResource {
    /**
     * License type
     * 
     */
    @Export(name="licenseType", refs={String.class}, tree="[0]")
    private Output<String> licenseType;

    /**
     * @return License type
     * 
     */
    public Output<String> licenseType() {
        return this.licenseType;
    }
    /**
     * SSO license mapping group names for this group
     * 
     */
    @Export(name="ssoLicenseMappingGroups", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> ssoLicenseMappingGroups;

    /**
     * @return SSO license mapping group names for this group
     * 
     */
    public Output<Optional<List<String>>> ssoLicenseMappingGroups() {
        return Codegen.optional(this.ssoLicenseMappingGroups);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LicenseMap(String name) {
        this(name, LicenseMapArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LicenseMap(String name, LicenseMapArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LicenseMap(String name, LicenseMapArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/licenseMap:LicenseMap", name, args == null ? LicenseMapArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private LicenseMap(String name, Output<String> id, @Nullable LicenseMapState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/licenseMap:LicenseMap", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LicenseMap get(String name, Output<String> id, @Nullable LicenseMapState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LicenseMap(name, id, state, options);
    }
}

// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.dbtcloud.inputs.GetJobJobCompletionTriggerCondition;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetJobPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetJobPlainArgs Empty = new GetJobPlainArgs();

    /**
     * Which other job should trigger this job when it finishes, and on which conditions. Format for the property will change in the next release to match the one from the one from dbtcloud*jobs.
     * 
     */
    @Import(name="jobCompletionTriggerConditions")
    private @Nullable List<GetJobJobCompletionTriggerCondition> jobCompletionTriggerConditions;

    /**
     * @return Which other job should trigger this job when it finishes, and on which conditions. Format for the property will change in the next release to match the one from the one from dbtcloud*jobs.
     * 
     */
    public Optional<List<GetJobJobCompletionTriggerCondition>> jobCompletionTriggerConditions() {
        return Optional.ofNullable(this.jobCompletionTriggerConditions);
    }

    /**
     * The ID of the job
     * 
     */
    @Import(name="jobId", required=true)
    private Integer jobId;

    /**
     * @return The ID of the job
     * 
     */
    public Integer jobId() {
        return this.jobId;
    }

    private GetJobPlainArgs() {}

    private GetJobPlainArgs(GetJobPlainArgs $) {
        this.jobCompletionTriggerConditions = $.jobCompletionTriggerConditions;
        this.jobId = $.jobId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetJobPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetJobPlainArgs $;

        public Builder() {
            $ = new GetJobPlainArgs();
        }

        public Builder(GetJobPlainArgs defaults) {
            $ = new GetJobPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param jobCompletionTriggerConditions Which other job should trigger this job when it finishes, and on which conditions. Format for the property will change in the next release to match the one from the one from dbtcloud*jobs.
         * 
         * @return builder
         * 
         */
        public Builder jobCompletionTriggerConditions(@Nullable List<GetJobJobCompletionTriggerCondition> jobCompletionTriggerConditions) {
            $.jobCompletionTriggerConditions = jobCompletionTriggerConditions;
            return this;
        }

        /**
         * @param jobCompletionTriggerConditions Which other job should trigger this job when it finishes, and on which conditions. Format for the property will change in the next release to match the one from the one from dbtcloud*jobs.
         * 
         * @return builder
         * 
         */
        public Builder jobCompletionTriggerConditions(GetJobJobCompletionTriggerCondition... jobCompletionTriggerConditions) {
            return jobCompletionTriggerConditions(List.of(jobCompletionTriggerConditions));
        }

        /**
         * @param jobId The ID of the job
         * 
         * @return builder
         * 
         */
        public Builder jobId(Integer jobId) {
            $.jobId = jobId;
            return this;
        }

        public GetJobPlainArgs build() {
            if ($.jobId == null) {
                throw new MissingRequiredPropertyException("GetJobPlainArgs", "jobId");
            }
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GlobalConnectionTeradata {
    /**
     * @return The hostname of the database.
     * 
     */
    private String host;
    /**
     * @return The port to connect to for this connection. Default=1025
     * 
     */
    private @Nullable String port;
    /**
     * @return The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
     * 
     */
    private @Nullable Integer requestTimeout;
    /**
     * @return The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
     * 
     */
    private @Nullable Integer retries;
    /**
     * @return The transaction mode to use for the connection.
     * 
     */
    private String tmode;

    private GlobalConnectionTeradata() {}
    /**
     * @return The hostname of the database.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return The port to connect to for this connection. Default=1025
     * 
     */
    public Optional<String> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
     * 
     */
    public Optional<Integer> requestTimeout() {
        return Optional.ofNullable(this.requestTimeout);
    }
    /**
     * @return The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
     * 
     */
    public Optional<Integer> retries() {
        return Optional.ofNullable(this.retries);
    }
    /**
     * @return The transaction mode to use for the connection.
     * 
     */
    public String tmode() {
        return this.tmode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GlobalConnectionTeradata defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String host;
        private @Nullable String port;
        private @Nullable Integer requestTimeout;
        private @Nullable Integer retries;
        private String tmode;
        public Builder() {}
        public Builder(GlobalConnectionTeradata defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.host = defaults.host;
    	      this.port = defaults.port;
    	      this.requestTimeout = defaults.requestTimeout;
    	      this.retries = defaults.retries;
    	      this.tmode = defaults.tmode;
        }

        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GlobalConnectionTeradata", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable String port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder requestTimeout(@Nullable Integer requestTimeout) {

            this.requestTimeout = requestTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder retries(@Nullable Integer retries) {

            this.retries = retries;
            return this;
        }
        @CustomType.Setter
        public Builder tmode(String tmode) {
            if (tmode == null) {
              throw new MissingRequiredPropertyException("GlobalConnectionTeradata", "tmode");
            }
            this.tmode = tmode;
            return this;
        }
        public GlobalConnectionTeradata build() {
            final var _resultValue = new GlobalConnectionTeradata();
            _resultValue.host = host;
            _resultValue.port = port;
            _resultValue.requestTimeout = requestTimeout;
            _resultValue.retries = retries;
            _resultValue.tmode = tmode;
            return _resultValue;
        }
    }
}

// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dbtcloud.JobArgs;
import com.pulumi.dbtcloud.Utilities;
import com.pulumi.dbtcloud.inputs.JobState;
import com.pulumi.dbtcloud.outputs.JobJobCompletionTriggerCondition;
import com.pulumi.dbtcloud.outputs.JobTriggers;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * using  import blocks (requires Terraform &gt;= 1.5)
 * 
 * import {
 * 
 *   to = dbtcloud_job.my_job
 * 
 *   id = &#34;job_id&#34;
 * 
 * }
 * 
 * import {
 * 
 *   to = dbtcloud_job.my_job
 * 
 *   id = &#34;12345&#34;
 * 
 * }
 * 
 * using the older import command
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/job:Job my_job &#34;job_id&#34;
 * ```
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/job:Job my_job 12345
 * ```
 * 
 */
@ResourceType(type="dbtcloud:index/job:Job")
public class Job extends com.pulumi.resources.CustomResource {
    /**
     * The model selector for checking changes in the compare changes Advanced CI feature
     * 
     */
    @Export(name="compareChangesFlags", refs={String.class}, tree="[0]")
    private Output<String> compareChangesFlags;

    /**
     * @return The model selector for checking changes in the compare changes Advanced CI feature
     * 
     */
    public Output<String> compareChangesFlags() {
        return this.compareChangesFlags;
    }
    /**
     * Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions
     * 
     */
    @Export(name="dbtVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dbtVersion;

    /**
     * @return Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions
     * 
     */
    public Output<Optional<String>> dbtVersion() {
        return Codegen.optional(this.dbtVersion);
    }
    /**
     * Environment identifier that this job defers to (new deferring approach)
     * 
     */
    @Export(name="deferringEnvironmentId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> deferringEnvironmentId;

    /**
     * @return Environment identifier that this job defers to (new deferring approach)
     * 
     */
    public Output<Optional<Integer>> deferringEnvironmentId() {
        return Codegen.optional(this.deferringEnvironmentId);
    }
    /**
     * Job identifier that this job defers to (legacy deferring approach)
     * 
     */
    @Export(name="deferringJobId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> deferringJobId;

    /**
     * @return Job identifier that this job defers to (legacy deferring approach)
     * 
     */
    public Output<Optional<Integer>> deferringJobId() {
        return Codegen.optional(this.deferringJobId);
    }
    /**
     * Description for the job
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return Description for the job
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Environment ID to create the job in
     * 
     */
    @Export(name="environmentId", refs={Integer.class}, tree="[0]")
    private Output<Integer> environmentId;

    /**
     * @return Environment ID to create the job in
     * 
     */
    public Output<Integer> environmentId() {
        return this.environmentId;
    }
    /**
     * Whether the CI job should fail when a lint error is found. Only used when `run_lint` is set to `true`. Defaults to `true`.
     * 
     */
    @Export(name="errorsOnLintFailure", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> errorsOnLintFailure;

    /**
     * @return Whether the CI job should fail when a lint error is found. Only used when `run_lint` is set to `true`. Defaults to `true`.
     * 
     */
    public Output<Boolean> errorsOnLintFailure() {
        return this.errorsOnLintFailure;
    }
    /**
     * List of commands to execute for the job
     * 
     */
    @Export(name="executeSteps", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> executeSteps;

    /**
     * @return List of commands to execute for the job
     * 
     */
    public Output<List<String>> executeSteps() {
        return this.executeSteps;
    }
    /**
     * Flag for whether the job should generate documentation
     * 
     */
    @Export(name="generateDocs", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> generateDocs;

    /**
     * @return Flag for whether the job should generate documentation
     * 
     */
    public Output<Boolean> generateDocs() {
        return this.generateDocs;
    }
    /**
     * Should always be set to true as setting it to false is the same as creating a job in a deleted state. To create/keep a job in a &#39;deactivated&#39; state, check  the `triggers` config.
     * 
     */
    @Export(name="isActive", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isActive;

    /**
     * @return Should always be set to true as setting it to false is the same as creating a job in a deleted state. To create/keep a job in a &#39;deactivated&#39; state, check  the `triggers` config.
     * 
     */
    public Output<Boolean> isActive() {
        return this.isActive;
    }
    /**
     * Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as &#39;job chaining&#39;).
     * 
     */
    @Export(name="jobCompletionTriggerConditions", refs={List.class,JobJobCompletionTriggerCondition.class}, tree="[0,1]")
    private Output</* @Nullable */ List<JobJobCompletionTriggerCondition>> jobCompletionTriggerConditions;

    /**
     * @return Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as &#39;job chaining&#39;).
     * 
     */
    public Output<Optional<List<JobJobCompletionTriggerCondition>>> jobCompletionTriggerConditions() {
        return Codegen.optional(this.jobCompletionTriggerConditions);
    }
    /**
     * Job identifier
     * 
     */
    @Export(name="jobId", refs={Integer.class}, tree="[0]")
    private Output<Integer> jobId;

    /**
     * @return Job identifier
     * 
     */
    public Output<Integer> jobId() {
        return this.jobId;
    }
    /**
     * Can be used to enforce the job type betwen `ci`, `merge` and `scheduled`. Without this value the job type is inferred from the triggers configured
     * 
     */
    @Export(name="jobType", refs={String.class}, tree="[0]")
    private Output<String> jobType;

    /**
     * @return Can be used to enforce the job type betwen `ci`, `merge` and `scheduled`. Without this value the job type is inferred from the triggers configured
     * 
     */
    public Output<String> jobType() {
        return this.jobType;
    }
    /**
     * Job name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Job name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Number of threads to use in the job
     * 
     */
    @Export(name="numThreads", refs={Integer.class}, tree="[0]")
    private Output<Integer> numThreads;

    /**
     * @return Number of threads to use in the job
     * 
     */
    public Output<Integer> numThreads() {
        return this.numThreads;
    }
    /**
     * Project ID to create the job in
     * 
     */
    @Export(name="projectId", refs={Integer.class}, tree="[0]")
    private Output<Integer> projectId;

    /**
     * @return Project ID to create the job in
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }
    /**
     * Whether the CI job should compare data changes introduced by the code changes. Requires `deferring_environment_id` to be set. (Advanced CI needs to be activated in the dbt Cloud Account Settings first as well)
     * 
     */
    @Export(name="runCompareChanges", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> runCompareChanges;

    /**
     * @return Whether the CI job should compare data changes introduced by the code changes. Requires `deferring_environment_id` to be set. (Advanced CI needs to be activated in the dbt Cloud Account Settings first as well)
     * 
     */
    public Output<Boolean> runCompareChanges() {
        return this.runCompareChanges;
    }
    /**
     * Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.
     * 
     */
    @Export(name="runGenerateSources", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> runGenerateSources;

    /**
     * @return Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.
     * 
     */
    public Output<Boolean> runGenerateSources() {
        return this.runGenerateSources;
    }
    /**
     * Whether the CI job should lint SQL changes. Defaults to `false`.
     * 
     */
    @Export(name="runLint", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> runLint;

    /**
     * @return Whether the CI job should lint SQL changes. Defaults to `false`.
     * 
     */
    public Output<Boolean> runLint() {
        return this.runLint;
    }
    /**
     * Custom cron expression for schedule
     * 
     */
    @Export(name="scheduleCron", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> scheduleCron;

    /**
     * @return Custom cron expression for schedule
     * 
     */
    public Output<Optional<String>> scheduleCron() {
        return Codegen.optional(this.scheduleCron);
    }
    /**
     * List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
     * 
     */
    @Export(name="scheduleDays", refs={List.class,Integer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Integer>> scheduleDays;

    /**
     * @return List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
     * 
     */
    public Output<Optional<List<Integer>>> scheduleDays() {
        return Codegen.optional(this.scheduleDays);
    }
    /**
     * List of hours to execute the job at if running on a schedule
     * 
     */
    @Export(name="scheduleHours", refs={List.class,Integer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Integer>> scheduleHours;

    /**
     * @return List of hours to execute the job at if running on a schedule
     * 
     */
    public Output<Optional<List<Integer>>> scheduleHours() {
        return Codegen.optional(this.scheduleHours);
    }
    /**
     * Number of hours between job executions if running on a schedule
     * 
     */
    @Export(name="scheduleInterval", refs={Integer.class}, tree="[0]")
    private Output<Integer> scheduleInterval;

    /**
     * @return Number of hours between job executions if running on a schedule
     * 
     */
    public Output<Integer> scheduleInterval() {
        return this.scheduleInterval;
    }
    /**
     * Type of schedule to use, one of every*day/ days*of*week/ custom*cron/ interval_cron
     * 
     */
    @Export(name="scheduleType", refs={String.class}, tree="[0]")
    private Output<String> scheduleType;

    /**
     * @return Type of schedule to use, one of every*day/ days*of*week/ custom*cron/ interval_cron
     * 
     */
    public Output<String> scheduleType() {
        return this.scheduleType;
    }
    /**
     * Whether this job defers on a previous run of itself
     * 
     */
    @Export(name="selfDeferring", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> selfDeferring;

    /**
     * @return Whether this job defers on a previous run of itself
     * 
     */
    public Output<Boolean> selfDeferring() {
        return this.selfDeferring;
    }
    /**
     * Target name for the dbt profile
     * 
     */
    @Export(name="targetName", refs={String.class}, tree="[0]")
    private Output<String> targetName;

    /**
     * @return Target name for the dbt profile
     * 
     */
    public Output<String> targetName() {
        return this.targetName;
    }
    /**
     * [Deprectated - Moved to execution.timeout_seconds] Number of seconds to allow the job to run before timing out
     * 
     * @deprecated
     * Moved to execution.timeout_seconds
     * 
     */
    @Deprecated /* Moved to execution.timeout_seconds */
    @Export(name="timeoutSeconds", refs={Integer.class}, tree="[0]")
    private Output<Integer> timeoutSeconds;

    /**
     * @return [Deprectated - Moved to execution.timeout_seconds] Number of seconds to allow the job to run before timing out
     * 
     */
    public Output<Integer> timeoutSeconds() {
        return this.timeoutSeconds;
    }
    /**
     * Flags for which types of triggers to use, the values are `github_webhook`, `git_provider_webhook`, `schedule` and `on_merge`. All flags should be listed and set with `true` or `false`. When `on_merge` is `true`, all the other values must be false.\n\n`custom_branch_only` used to be allowed but has been deprecated from the API. The jobs will use the custom branch of the environment. Please remove the `custom_branch_only` from your config. \n\nTo create a job in a &#39;deactivated&#39; state, set all to `false`.
     * 
     */
    @Export(name="triggers", refs={JobTriggers.class}, tree="[0]")
    private Output<JobTriggers> triggers;

    /**
     * @return Flags for which types of triggers to use, the values are `github_webhook`, `git_provider_webhook`, `schedule` and `on_merge`. All flags should be listed and set with `true` or `false`. When `on_merge` is `true`, all the other values must be false.\n\n`custom_branch_only` used to be allowed but has been deprecated from the API. The jobs will use the custom branch of the environment. Please remove the `custom_branch_only` from your config. \n\nTo create a job in a &#39;deactivated&#39; state, set all to `false`.
     * 
     */
    public Output<JobTriggers> triggers() {
        return this.triggers;
    }
    /**
     * Whether the CI job should be automatically triggered on draft PRs
     * 
     */
    @Export(name="triggersOnDraftPr", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> triggersOnDraftPr;

    /**
     * @return Whether the CI job should be automatically triggered on draft PRs
     * 
     */
    public Output<Boolean> triggersOnDraftPr() {
        return this.triggersOnDraftPr;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Job(java.lang.String name) {
        this(name, JobArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Job(java.lang.String name, JobArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Job(java.lang.String name, JobArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/job:Job", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Job(java.lang.String name, Output<java.lang.String> id, @Nullable JobState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/job:Job", name, state, makeResourceOptions(options, id), false);
    }

    private static JobArgs makeArgs(JobArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? JobArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi/pulumi-dbtcloud")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Job get(java.lang.String name, Output<java.lang.String> id, @Nullable JobState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Job(name, id, state, options);
    }
}

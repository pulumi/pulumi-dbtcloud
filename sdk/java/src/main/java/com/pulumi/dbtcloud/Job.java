// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dbtcloud.JobArgs;
import com.pulumi.dbtcloud.Utilities;
import com.pulumi.dbtcloud.inputs.JobState;
import com.pulumi.dbtcloud.outputs.JobJobCompletionTriggerCondition;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * &gt; As of October 2023, CI improvements have been rolled out to dbt Cloud with minor impacts to some jobs:  [more info](https://docs.getdbt.com/docs/dbt-versions/release-notes/june-2023/ci-updates-phase1-rn).
 * &lt;br/&gt;
 * &lt;br/&gt;
 * Those improvements include modifications to deferral which was historically set at the job level and will now be set at the environment level.
 * Deferral can still be set to &#34;self&#34; by setting `self_deferring` to `true` but with the new approach, deferral to other runs need to be done with `deferring_environment_id` instead of `deferring_job_id`.
 * 
 * &gt; As of beginning of February 2024, job chaining with `job_completion_trigger_condition` is in private beta and not available to all users.
 * &lt;br/&gt;
 * &lt;br/&gt;
 * This notice will be removed once the feature is generally available.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.dbtcloud.Job;
 * import com.pulumi.dbtcloud.JobArgs;
 * import com.pulumi.dbtcloud.inputs.JobJobCompletionTriggerConditionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // NOTE for customers using the LEGACY dbt_cloud provider:
 *         // a job that has github_webhook and git_provider_webhook 
 *         // set to false will be categorized as a &#34;Deploy Job&#34;
 *         var dailyJob = new Job(&#34;dailyJob&#34;, JobArgs.builder()        
 *             .environmentId(prodEnvironment.environmentId())
 *             .executeSteps(&#34;dbt build&#34;)
 *             .generateDocs(true)
 *             .isActive(true)
 *             .name(&#34;Daily job&#34;)
 *             .numThreads(64)
 *             .projectId(dbtProject.id())
 *             .runGenerateSources(true)
 *             .targetName(&#34;default&#34;)
 *             .triggers(Map.ofEntries(
 *                 Map.entry(&#34;custom_branch_only&#34;, false),
 *                 Map.entry(&#34;github_webhook&#34;, false),
 *                 Map.entry(&#34;git_provider_webhook&#34;, false),
 *                 Map.entry(&#34;schedule&#34;, true)
 *             ))
 *             .scheduleDays(            
 *                 0,
 *                 1,
 *                 2,
 *                 3,
 *                 4,
 *                 5,
 *                 6)
 *             .scheduleType(&#34;days_of_week&#34;)
 *             .scheduleHours(0)
 *             .build());
 * 
 *         // a job that has github_webhook and git_provider_webhook set 
 *         // to true will be categorized as a &#34;Continuous Integration Job&#34;
 *         var ciJob = new Job(&#34;ciJob&#34;, JobArgs.builder()        
 *             .environmentId(ciEnvironment.environmentId())
 *             .executeSteps(&#34;dbt build -s state:modified+ --fail-fast&#34;)
 *             .generateDocs(false)
 *             .deferringEnvironmentId(prodEnvironment.environmentId())
 *             .name(&#34;CI Job&#34;)
 *             .numThreads(32)
 *             .projectId(dbtProject.id())
 *             .runGenerateSources(false)
 *             .triggers(Map.ofEntries(
 *                 Map.entry(&#34;custom_branch_only&#34;, true),
 *                 Map.entry(&#34;github_webhook&#34;, true),
 *                 Map.entry(&#34;git_provider_webhook&#34;, true),
 *                 Map.entry(&#34;schedule&#34;, false)
 *             ))
 *             .scheduleDays(            
 *                 0,
 *                 1,
 *                 2,
 *                 3,
 *                 4,
 *                 5,
 *                 6)
 *             .scheduleType(&#34;days_of_week&#34;)
 *             .build());
 * 
 *         // a job that is set to be triggered after another job finishes
 *         // this is sometimes referred as &#39;job chaining&#39;
 *         var downstreamJob = new Job(&#34;downstreamJob&#34;, JobArgs.builder()        
 *             .environmentId(project2ProdEnvironment.environmentId())
 *             .executeSteps(&#34;dbt build -s +my_model&#34;)
 *             .generateDocs(true)
 *             .name(&#34;Downstream job in project 2&#34;)
 *             .numThreads(32)
 *             .projectId(dbtProject2.id())
 *             .runGenerateSources(true)
 *             .triggers(Map.ofEntries(
 *                 Map.entry(&#34;custom_branch_only&#34;, false),
 *                 Map.entry(&#34;github_webhook&#34;, false),
 *                 Map.entry(&#34;git_provider_webhook&#34;, false),
 *                 Map.entry(&#34;schedule&#34;, false)
 *             ))
 *             .scheduleDays(            
 *                 0,
 *                 1,
 *                 2,
 *                 3,
 *                 4,
 *                 5,
 *                 6)
 *             .scheduleType(&#34;days_of_week&#34;)
 *             .jobCompletionTriggerCondition(JobJobCompletionTriggerConditionArgs.builder()
 *                 .jobId(dailyJob.id())
 *                 .projectId(dbtProject.id())
 *                 .statuses(&#34;success&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Import using a job ID found in the URL or via the API.
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/job:Job test_job &#34;job_id&#34;
 * ```
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/job:Job test_job 12345
 * ```
 * 
 */
@ResourceType(type="dbtcloud:index/job:Job")
public class Job extends com.pulumi.resources.CustomResource {
    /**
     * Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions
     * 
     */
    @Export(name="dbtVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dbtVersion;

    /**
     * @return Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions
     * 
     */
    public Output<Optional<String>> dbtVersion() {
        return Codegen.optional(this.dbtVersion);
    }
    /**
     * Environment identifier that this job defers to (new deferring approach)
     * 
     */
    @Export(name="deferringEnvironmentId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> deferringEnvironmentId;

    /**
     * @return Environment identifier that this job defers to (new deferring approach)
     * 
     */
    public Output<Optional<Integer>> deferringEnvironmentId() {
        return Codegen.optional(this.deferringEnvironmentId);
    }
    /**
     * Job identifier that this job defers to (legacy deferring approach)
     * 
     */
    @Export(name="deferringJobId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> deferringJobId;

    /**
     * @return Job identifier that this job defers to (legacy deferring approach)
     * 
     */
    public Output<Optional<Integer>> deferringJobId() {
        return Codegen.optional(this.deferringJobId);
    }
    /**
     * Description for the job
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description for the job
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Environment ID to create the job in
     * 
     */
    @Export(name="environmentId", refs={Integer.class}, tree="[0]")
    private Output<Integer> environmentId;

    /**
     * @return Environment ID to create the job in
     * 
     */
    public Output<Integer> environmentId() {
        return this.environmentId;
    }
    /**
     * List of commands to execute for the job
     * 
     */
    @Export(name="executeSteps", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> executeSteps;

    /**
     * @return List of commands to execute for the job
     * 
     */
    public Output<List<String>> executeSteps() {
        return this.executeSteps;
    }
    /**
     * Flag for whether the job should generate documentation
     * 
     */
    @Export(name="generateDocs", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> generateDocs;

    /**
     * @return Flag for whether the job should generate documentation
     * 
     */
    public Output<Optional<Boolean>> generateDocs() {
        return Codegen.optional(this.generateDocs);
    }
    /**
     * Flag for whether the job is marked active or deleted. To create/keep a job in a &#39;deactivated&#39; state, check  the `triggers` config.
     * 
     */
    @Export(name="isActive", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isActive;

    /**
     * @return Flag for whether the job is marked active or deleted. To create/keep a job in a &#39;deactivated&#39; state, check  the `triggers` config.
     * 
     */
    public Output<Optional<Boolean>> isActive() {
        return Codegen.optional(this.isActive);
    }
    /**
     * Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as &#39;job chaining&#39;).
     * 
     */
    @Export(name="jobCompletionTriggerCondition", refs={JobJobCompletionTriggerCondition.class}, tree="[0]")
    private Output</* @Nullable */ JobJobCompletionTriggerCondition> jobCompletionTriggerCondition;

    /**
     * @return Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as &#39;job chaining&#39;).
     * 
     */
    public Output<Optional<JobJobCompletionTriggerCondition>> jobCompletionTriggerCondition() {
        return Codegen.optional(this.jobCompletionTriggerCondition);
    }
    /**
     * Job name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Job name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Number of threads to use in the job
     * 
     */
    @Export(name="numThreads", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> numThreads;

    /**
     * @return Number of threads to use in the job
     * 
     */
    public Output<Optional<Integer>> numThreads() {
        return Codegen.optional(this.numThreads);
    }
    /**
     * Project ID to create the job in
     * 
     */
    @Export(name="projectId", refs={Integer.class}, tree="[0]")
    private Output<Integer> projectId;

    /**
     * @return Project ID to create the job in
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }
    /**
     * Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.
     * 
     */
    @Export(name="runGenerateSources", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> runGenerateSources;

    /**
     * @return Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.
     * 
     */
    public Output<Optional<Boolean>> runGenerateSources() {
        return Codegen.optional(this.runGenerateSources);
    }
    /**
     * Custom cron expression for schedule
     * 
     */
    @Export(name="scheduleCron", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> scheduleCron;

    /**
     * @return Custom cron expression for schedule
     * 
     */
    public Output<Optional<String>> scheduleCron() {
        return Codegen.optional(this.scheduleCron);
    }
    /**
     * List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
     * 
     */
    @Export(name="scheduleDays", refs={List.class,Integer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Integer>> scheduleDays;

    /**
     * @return List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
     * 
     */
    public Output<Optional<List<Integer>>> scheduleDays() {
        return Codegen.optional(this.scheduleDays);
    }
    /**
     * List of hours to execute the job at if running on a schedule
     * 
     */
    @Export(name="scheduleHours", refs={List.class,Integer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Integer>> scheduleHours;

    /**
     * @return List of hours to execute the job at if running on a schedule
     * 
     */
    public Output<Optional<List<Integer>>> scheduleHours() {
        return Codegen.optional(this.scheduleHours);
    }
    /**
     * Number of hours between job executions if running on a schedule
     * 
     */
    @Export(name="scheduleInterval", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> scheduleInterval;

    /**
     * @return Number of hours between job executions if running on a schedule
     * 
     */
    public Output<Optional<Integer>> scheduleInterval() {
        return Codegen.optional(this.scheduleInterval);
    }
    /**
     * Type of schedule to use, one of every*day/ days*of*week/ custom*cron
     * 
     */
    @Export(name="scheduleType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> scheduleType;

    /**
     * @return Type of schedule to use, one of every*day/ days*of*week/ custom*cron
     * 
     */
    public Output<Optional<String>> scheduleType() {
        return Codegen.optional(this.scheduleType);
    }
    /**
     * Whether this job defers on a previous run of itself
     * 
     */
    @Export(name="selfDeferring", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> selfDeferring;

    /**
     * @return Whether this job defers on a previous run of itself
     * 
     */
    public Output<Optional<Boolean>> selfDeferring() {
        return Codegen.optional(this.selfDeferring);
    }
    /**
     * Target name for the dbt profile
     * 
     */
    @Export(name="targetName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> targetName;

    /**
     * @return Target name for the dbt profile
     * 
     */
    public Output<Optional<String>> targetName() {
        return Codegen.optional(this.targetName);
    }
    /**
     * Number of seconds to allow the job to run before timing out
     * 
     */
    @Export(name="timeoutSeconds", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> timeoutSeconds;

    /**
     * @return Number of seconds to allow the job to run before timing out
     * 
     */
    public Output<Optional<Integer>> timeoutSeconds() {
        return Codegen.optional(this.timeoutSeconds);
    }
    /**
     * Flags for which types of triggers to use, possible values are `github_webhook`, `git_provider_webhook`, `schedule` and `custom_branch_only`. \n\n`custom_branch_only` is only relevant for CI jobs triggered automatically on PR creation to only trigger a job on a PR to the custom branch of the environment. To create a job in a &#39;deactivated&#39; state, set all to `false`.
     * 
     */
    @Export(name="triggers", refs={Map.class,String.class,Boolean.class}, tree="[0,1,2]")
    private Output<Map<String,Boolean>> triggers;

    /**
     * @return Flags for which types of triggers to use, possible values are `github_webhook`, `git_provider_webhook`, `schedule` and `custom_branch_only`. \n\n`custom_branch_only` is only relevant for CI jobs triggered automatically on PR creation to only trigger a job on a PR to the custom branch of the environment. To create a job in a &#39;deactivated&#39; state, set all to `false`.
     * 
     */
    public Output<Map<String,Boolean>> triggers() {
        return this.triggers;
    }
    /**
     * Whether the CI job should be automatically triggered on draft PRs
     * 
     */
    @Export(name="triggersOnDraftPr", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> triggersOnDraftPr;

    /**
     * @return Whether the CI job should be automatically triggered on draft PRs
     * 
     */
    public Output<Optional<Boolean>> triggersOnDraftPr() {
        return Codegen.optional(this.triggersOnDraftPr);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Job(String name) {
        this(name, JobArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Job(String name, JobArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Job(String name, JobArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/job:Job", name, args == null ? JobArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Job(String name, Output<String> id, @Nullable JobState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/job:Job", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Job get(String name, Output<String> id, @Nullable JobState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Job(name, id, state, options);
    }
}

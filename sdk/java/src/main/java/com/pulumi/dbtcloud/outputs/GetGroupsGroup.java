// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGroupsGroup {
    /**
     * @return Whether the group will be assigned by default to users
     * 
     */
    private Boolean assignByDefault;
    /**
     * @return The ID of the group
     * 
     */
    private Integer id;
    /**
     * @return Group name
     * 
     */
    private String name;
    /**
     * @return Whether the group is managed by SCIM
     * 
     */
    private Boolean scimManaged;
    /**
     * @return SSO mapping group names for this group
     * 
     */
    private List<String> ssoMappingGroups;
    /**
     * @return The state of the group (1=active, 2=deleted)
     * 
     */
    private Integer state;

    private GetGroupsGroup() {}
    /**
     * @return Whether the group will be assigned by default to users
     * 
     */
    public Boolean assignByDefault() {
        return this.assignByDefault;
    }
    /**
     * @return The ID of the group
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return Group name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Whether the group is managed by SCIM
     * 
     */
    public Boolean scimManaged() {
        return this.scimManaged;
    }
    /**
     * @return SSO mapping group names for this group
     * 
     */
    public List<String> ssoMappingGroups() {
        return this.ssoMappingGroups;
    }
    /**
     * @return The state of the group (1=active, 2=deleted)
     * 
     */
    public Integer state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupsGroup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean assignByDefault;
        private Integer id;
        private String name;
        private Boolean scimManaged;
        private List<String> ssoMappingGroups;
        private Integer state;
        public Builder() {}
        public Builder(GetGroupsGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assignByDefault = defaults.assignByDefault;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.scimManaged = defaults.scimManaged;
    	      this.ssoMappingGroups = defaults.ssoMappingGroups;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder assignByDefault(Boolean assignByDefault) {
            if (assignByDefault == null) {
              throw new MissingRequiredPropertyException("GetGroupsGroup", "assignByDefault");
            }
            this.assignByDefault = assignByDefault;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGroupsGroup", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGroupsGroup", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder scimManaged(Boolean scimManaged) {
            if (scimManaged == null) {
              throw new MissingRequiredPropertyException("GetGroupsGroup", "scimManaged");
            }
            this.scimManaged = scimManaged;
            return this;
        }
        @CustomType.Setter
        public Builder ssoMappingGroups(List<String> ssoMappingGroups) {
            if (ssoMappingGroups == null) {
              throw new MissingRequiredPropertyException("GetGroupsGroup", "ssoMappingGroups");
            }
            this.ssoMappingGroups = ssoMappingGroups;
            return this;
        }
        public Builder ssoMappingGroups(String... ssoMappingGroups) {
            return ssoMappingGroups(List.of(ssoMappingGroups));
        }
        @CustomType.Setter
        public Builder state(Integer state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetGroupsGroup", "state");
            }
            this.state = state;
            return this;
        }
        public GetGroupsGroup build() {
            final var _resultValue = new GetGroupsGroup();
            _resultValue.assignByDefault = assignByDefault;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.scimManaged = scimManaged;
            _resultValue.ssoMappingGroups = ssoMappingGroups;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}

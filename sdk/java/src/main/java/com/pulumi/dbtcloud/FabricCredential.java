// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dbtcloud.FabricCredentialArgs;
import com.pulumi.dbtcloud.Utilities;
import com.pulumi.dbtcloud.inputs.FabricCredentialState;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Import using a project ID and credential ID found in the URL or via the API.
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/fabricCredential:FabricCredential my_fabric_credential &#34;project_id:credential_id&#34;
 * ```
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/fabricCredential:FabricCredential my_fabric_credential 12345:6789
 * ```
 * 
 */
@ResourceType(type="dbtcloud:index/fabricCredential:FabricCredential")
public class FabricCredential extends com.pulumi.resources.CustomResource {
    /**
     * Fabric adapter ID for the credential
     * 
     */
    @Export(name="adapterId", refs={Integer.class}, tree="[0]")
    private Output<Integer> adapterId;

    /**
     * @return Fabric adapter ID for the credential
     * 
     */
    public Output<Integer> adapterId() {
        return this.adapterId;
    }
    /**
     * The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
     * 
     */
    @Export(name="clientId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clientId;

    /**
     * @return The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
     * 
     */
    public Output<Optional<String>> clientId() {
        return Codegen.optional(this.clientId);
    }
    /**
     * The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
     * 
     */
    @Export(name="clientSecret", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clientSecret;

    /**
     * @return The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
     * 
     */
    public Output<Optional<String>> clientSecret() {
        return Codegen.optional(this.clientSecret);
    }
    /**
     * The system Fabric credential ID
     * 
     */
    @Export(name="credentialId", refs={Integer.class}, tree="[0]")
    private Output<Integer> credentialId;

    /**
     * @return The system Fabric credential ID
     * 
     */
    public Output<Integer> credentialId() {
        return this.credentialId;
    }
    /**
     * The password for the account to connect to. Only used when connection with AD user/pass
     * 
     */
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> password;

    /**
     * @return The password for the account to connect to. Only used when connection with AD user/pass
     * 
     */
    public Output<Optional<String>> password() {
        return Codegen.optional(this.password);
    }
    /**
     * Project ID to create the Fabric credential in
     * 
     */
    @Export(name="projectId", refs={Integer.class}, tree="[0]")
    private Output<Integer> projectId;

    /**
     * @return Project ID to create the Fabric credential in
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }
    /**
     * The schema where to create the dbt models
     * 
     */
    @Export(name="schema", refs={String.class}, tree="[0]")
    private Output<String> schema;

    /**
     * @return The schema where to create the dbt models
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }
    /**
     * Optionally set this to the principal who should own the schemas created by dbt
     * 
     */
    @Export(name="schemaAuthorization", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> schemaAuthorization;

    /**
     * @return Optionally set this to the principal who should own the schemas created by dbt
     * 
     */
    public Output<Optional<String>> schemaAuthorization() {
        return Codegen.optional(this.schemaAuthorization);
    }
    /**
     * The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
     * 
     */
    @Export(name="tenantId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tenantId;

    /**
     * @return The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
     * 
     */
    public Output<Optional<String>> tenantId() {
        return Codegen.optional(this.tenantId);
    }
    /**
     * The username of the Fabric account to connect to. Only used when connection with AD user/pass
     * 
     */
    @Export(name="user", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> user;

    /**
     * @return The username of the Fabric account to connect to. Only used when connection with AD user/pass
     * 
     */
    public Output<Optional<String>> user() {
        return Codegen.optional(this.user);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public FabricCredential(String name) {
        this(name, FabricCredentialArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public FabricCredential(String name, FabricCredentialArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public FabricCredential(String name, FabricCredentialArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/fabricCredential:FabricCredential", name, args == null ? FabricCredentialArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private FabricCredential(String name, Output<String> id, @Nullable FabricCredentialState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/fabricCredential:FabricCredential", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "clientSecret",
                "password"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static FabricCredential get(String name, Output<String> id, @Nullable FabricCredentialState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new FabricCredential(name, id, state, options);
    }
}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnvironmentVariableArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentVariableArgs Empty = new EnvironmentVariableArgs();

    /**
     * Map from environment names to respective variable value, a special key `project` should be set for the project default variable value. This field is not set as sensitive so take precautions when using secret environment variables.
     * 
     */
    @Import(name="environmentValues", required=true)
    private Output<Map<String,String>> environmentValues;

    /**
     * @return Map from environment names to respective variable value, a special key `project` should be set for the project default variable value. This field is not set as sensitive so take precautions when using secret environment variables.
     * 
     */
    public Output<Map<String,String>> environmentValues() {
        return this.environmentValues;
    }

    /**
     * Name for the variable, must be unique within a project, must be prefixed with &#39;DBT_&#39;
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name for the variable, must be unique within a project, must be prefixed with &#39;DBT_&#39;
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Project ID to create the environment variable in
     * 
     */
    @Import(name="projectId", required=true)
    private Output<Integer> projectId;

    /**
     * @return Project ID to create the environment variable in
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }

    private EnvironmentVariableArgs() {}

    private EnvironmentVariableArgs(EnvironmentVariableArgs $) {
        this.environmentValues = $.environmentValues;
        this.name = $.name;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentVariableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentVariableArgs $;

        public Builder() {
            $ = new EnvironmentVariableArgs();
        }

        public Builder(EnvironmentVariableArgs defaults) {
            $ = new EnvironmentVariableArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param environmentValues Map from environment names to respective variable value, a special key `project` should be set for the project default variable value. This field is not set as sensitive so take precautions when using secret environment variables.
         * 
         * @return builder
         * 
         */
        public Builder environmentValues(Output<Map<String,String>> environmentValues) {
            $.environmentValues = environmentValues;
            return this;
        }

        /**
         * @param environmentValues Map from environment names to respective variable value, a special key `project` should be set for the project default variable value. This field is not set as sensitive so take precautions when using secret environment variables.
         * 
         * @return builder
         * 
         */
        public Builder environmentValues(Map<String,String> environmentValues) {
            return environmentValues(Output.of(environmentValues));
        }

        /**
         * @param name Name for the variable, must be unique within a project, must be prefixed with &#39;DBT_&#39;
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name for the variable, must be unique within a project, must be prefixed with &#39;DBT_&#39;
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId Project ID to create the environment variable in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID to create the environment variable in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        public EnvironmentVariableArgs build() {
            if ($.environmentValues == null) {
                throw new MissingRequiredPropertyException("EnvironmentVariableArgs", "environmentValues");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("EnvironmentVariableArgs", "projectId");
            }
            return $;
        }
    }

}

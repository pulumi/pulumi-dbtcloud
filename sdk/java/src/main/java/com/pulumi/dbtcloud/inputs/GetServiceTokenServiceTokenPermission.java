// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetServiceTokenServiceTokenPermission extends com.pulumi.resources.InvokeArgs {

    public static final GetServiceTokenServiceTokenPermission Empty = new GetServiceTokenServiceTokenPermission();

    /**
     * Whether or not to apply this permission to all projects for this service token
     * 
     */
    @Import(name="allProjects", required=true)
    private Boolean allProjects;

    /**
     * @return Whether or not to apply this permission to all projects for this service token
     * 
     */
    public Boolean allProjects() {
        return this.allProjects;
    }

    /**
     * Set of permissions to apply
     * 
     */
    @Import(name="permissionSet", required=true)
    private String permissionSet;

    /**
     * @return Set of permissions to apply
     * 
     */
    public String permissionSet() {
        return this.permissionSet;
    }

    /**
     * Project ID to apply this permission to for this service token
     * 
     */
    @Import(name="projectId", required=true)
    private Integer projectId;

    /**
     * @return Project ID to apply this permission to for this service token
     * 
     */
    public Integer projectId() {
        return this.projectId;
    }

    /**
     * What types of environments to apply Write permissions to.
     * Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
     * The values allowed are `all`, `development`, `staging`, `production` and `other`.
     * Not setting a value is the same as selecting `all`.
     * Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
     * 
     */
    @Import(name="writableEnvironmentCategories", required=true)
    private List<String> writableEnvironmentCategories;

    /**
     * @return What types of environments to apply Write permissions to.
     * Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
     * The values allowed are `all`, `development`, `staging`, `production` and `other`.
     * Not setting a value is the same as selecting `all`.
     * Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
     * 
     */
    public List<String> writableEnvironmentCategories() {
        return this.writableEnvironmentCategories;
    }

    private GetServiceTokenServiceTokenPermission() {}

    private GetServiceTokenServiceTokenPermission(GetServiceTokenServiceTokenPermission $) {
        this.allProjects = $.allProjects;
        this.permissionSet = $.permissionSet;
        this.projectId = $.projectId;
        this.writableEnvironmentCategories = $.writableEnvironmentCategories;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetServiceTokenServiceTokenPermission defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetServiceTokenServiceTokenPermission $;

        public Builder() {
            $ = new GetServiceTokenServiceTokenPermission();
        }

        public Builder(GetServiceTokenServiceTokenPermission defaults) {
            $ = new GetServiceTokenServiceTokenPermission(Objects.requireNonNull(defaults));
        }

        /**
         * @param allProjects Whether or not to apply this permission to all projects for this service token
         * 
         * @return builder
         * 
         */
        public Builder allProjects(Boolean allProjects) {
            $.allProjects = allProjects;
            return this;
        }

        /**
         * @param permissionSet Set of permissions to apply
         * 
         * @return builder
         * 
         */
        public Builder permissionSet(String permissionSet) {
            $.permissionSet = permissionSet;
            return this;
        }

        /**
         * @param projectId Project ID to apply this permission to for this service token
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param writableEnvironmentCategories What types of environments to apply Write permissions to.
         * Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
         * The values allowed are `all`, `development`, `staging`, `production` and `other`.
         * Not setting a value is the same as selecting `all`.
         * Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
         * 
         * @return builder
         * 
         */
        public Builder writableEnvironmentCategories(List<String> writableEnvironmentCategories) {
            $.writableEnvironmentCategories = writableEnvironmentCategories;
            return this;
        }

        /**
         * @param writableEnvironmentCategories What types of environments to apply Write permissions to.
         * Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
         * The values allowed are `all`, `development`, `staging`, `production` and `other`.
         * Not setting a value is the same as selecting `all`.
         * Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
         * 
         * @return builder
         * 
         */
        public Builder writableEnvironmentCategories(String... writableEnvironmentCategories) {
            return writableEnvironmentCategories(List.of(writableEnvironmentCategories));
        }

        public GetServiceTokenServiceTokenPermission build() {
            if ($.allProjects == null) {
                throw new MissingRequiredPropertyException("GetServiceTokenServiceTokenPermission", "allProjects");
            }
            if ($.permissionSet == null) {
                throw new MissingRequiredPropertyException("GetServiceTokenServiceTokenPermission", "permissionSet");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("GetServiceTokenServiceTokenPermission", "projectId");
            }
            if ($.writableEnvironmentCategories == null) {
                throw new MissingRequiredPropertyException("GetServiceTokenServiceTokenPermission", "writableEnvironmentCategories");
            }
            return $;
        }
    }

}

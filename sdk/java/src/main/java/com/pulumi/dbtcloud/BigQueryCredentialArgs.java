// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BigQueryCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final BigQueryCredentialArgs Empty = new BigQueryCredentialArgs();

    /**
     * Default dataset name
     * 
     */
    @Import(name="dataset", required=true)
    private Output<String> dataset;

    /**
     * @return Default dataset name
     * 
     */
    public Output<String> dataset() {
        return this.dataset;
    }

    /**
     * Whether the BigQuery credential is active
     * 
     */
    @Import(name="isActive")
    private @Nullable Output<Boolean> isActive;

    /**
     * @return Whether the BigQuery credential is active
     * 
     */
    public Optional<Output<Boolean>> isActive() {
        return Optional.ofNullable(this.isActive);
    }

    /**
     * Number of threads to use
     * 
     */
    @Import(name="numThreads", required=true)
    private Output<Integer> numThreads;

    /**
     * @return Number of threads to use
     * 
     */
    public Output<Integer> numThreads() {
        return this.numThreads;
    }

    /**
     * Project ID to create the BigQuery credential in
     * 
     */
    @Import(name="projectId", required=true)
    private Output<Integer> projectId;

    /**
     * @return Project ID to create the BigQuery credential in
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }

    private BigQueryCredentialArgs() {}

    private BigQueryCredentialArgs(BigQueryCredentialArgs $) {
        this.dataset = $.dataset;
        this.isActive = $.isActive;
        this.numThreads = $.numThreads;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BigQueryCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BigQueryCredentialArgs $;

        public Builder() {
            $ = new BigQueryCredentialArgs();
        }

        public Builder(BigQueryCredentialArgs defaults) {
            $ = new BigQueryCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataset Default dataset name
         * 
         * @return builder
         * 
         */
        public Builder dataset(Output<String> dataset) {
            $.dataset = dataset;
            return this;
        }

        /**
         * @param dataset Default dataset name
         * 
         * @return builder
         * 
         */
        public Builder dataset(String dataset) {
            return dataset(Output.of(dataset));
        }

        /**
         * @param isActive Whether the BigQuery credential is active
         * 
         * @return builder
         * 
         */
        public Builder isActive(@Nullable Output<Boolean> isActive) {
            $.isActive = isActive;
            return this;
        }

        /**
         * @param isActive Whether the BigQuery credential is active
         * 
         * @return builder
         * 
         */
        public Builder isActive(Boolean isActive) {
            return isActive(Output.of(isActive));
        }

        /**
         * @param numThreads Number of threads to use
         * 
         * @return builder
         * 
         */
        public Builder numThreads(Output<Integer> numThreads) {
            $.numThreads = numThreads;
            return this;
        }

        /**
         * @param numThreads Number of threads to use
         * 
         * @return builder
         * 
         */
        public Builder numThreads(Integer numThreads) {
            return numThreads(Output.of(numThreads));
        }

        /**
         * @param projectId Project ID to create the BigQuery credential in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID to create the BigQuery credential in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        public BigQueryCredentialArgs build() {
            if ($.dataset == null) {
                throw new MissingRequiredPropertyException("BigQueryCredentialArgs", "dataset");
            }
            if ($.numThreads == null) {
                throw new MissingRequiredPropertyException("BigQueryCredentialArgs", "numThreads");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("BigQueryCredentialArgs", "projectId");
            }
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEnvironmentResult {
    /**
     * @return Credential ID to create the environment with
     * 
     */
    private Integer credentialId;
    /**
     * @return Which custom branch to use in this environment
     * 
     */
    private String customBranch;
    /**
     * @return Version number of dbt to use in this environment, usually in the format 1.2.0-latest rather than core versions
     * 
     */
    private String dbtVersion;
    /**
     * @return The type of deployment environment (currently &#39;production&#39; or empty)
     * 
     */
    private String deploymentType;
    /**
     * @return ID of the environment
     * 
     */
    private Integer environmentId;
    /**
     * @return The ID of the extended attributes applied
     * 
     */
    private Integer extendedAttributesId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Whether the environment is active
     * 
     */
    private Boolean isActive;
    /**
     * @return Environment name
     * 
     */
    private String name;
    /**
     * @return Project ID to create the environment in
     * 
     */
    private Integer projectId;
    /**
     * @return The type of environment (must be either development or deployment)
     * 
     */
    private String type;
    /**
     * @return Whether to use a custom git branch in this environment
     * 
     */
    private Boolean useCustomBranch;

    private GetEnvironmentResult() {}
    /**
     * @return Credential ID to create the environment with
     * 
     */
    public Integer credentialId() {
        return this.credentialId;
    }
    /**
     * @return Which custom branch to use in this environment
     * 
     */
    public String customBranch() {
        return this.customBranch;
    }
    /**
     * @return Version number of dbt to use in this environment, usually in the format 1.2.0-latest rather than core versions
     * 
     */
    public String dbtVersion() {
        return this.dbtVersion;
    }
    /**
     * @return The type of deployment environment (currently &#39;production&#39; or empty)
     * 
     */
    public String deploymentType() {
        return this.deploymentType;
    }
    /**
     * @return ID of the environment
     * 
     */
    public Integer environmentId() {
        return this.environmentId;
    }
    /**
     * @return The ID of the extended attributes applied
     * 
     */
    public Integer extendedAttributesId() {
        return this.extendedAttributesId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether the environment is active
     * 
     */
    public Boolean isActive() {
        return this.isActive;
    }
    /**
     * @return Environment name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Project ID to create the environment in
     * 
     */
    public Integer projectId() {
        return this.projectId;
    }
    /**
     * @return The type of environment (must be either development or deployment)
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Whether to use a custom git branch in this environment
     * 
     */
    public Boolean useCustomBranch() {
        return this.useCustomBranch;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEnvironmentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer credentialId;
        private String customBranch;
        private String dbtVersion;
        private String deploymentType;
        private Integer environmentId;
        private Integer extendedAttributesId;
        private String id;
        private Boolean isActive;
        private String name;
        private Integer projectId;
        private String type;
        private Boolean useCustomBranch;
        public Builder() {}
        public Builder(GetEnvironmentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credentialId = defaults.credentialId;
    	      this.customBranch = defaults.customBranch;
    	      this.dbtVersion = defaults.dbtVersion;
    	      this.deploymentType = defaults.deploymentType;
    	      this.environmentId = defaults.environmentId;
    	      this.extendedAttributesId = defaults.extendedAttributesId;
    	      this.id = defaults.id;
    	      this.isActive = defaults.isActive;
    	      this.name = defaults.name;
    	      this.projectId = defaults.projectId;
    	      this.type = defaults.type;
    	      this.useCustomBranch = defaults.useCustomBranch;
        }

        @CustomType.Setter
        public Builder credentialId(Integer credentialId) {
            if (credentialId == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "credentialId");
            }
            this.credentialId = credentialId;
            return this;
        }
        @CustomType.Setter
        public Builder customBranch(String customBranch) {
            if (customBranch == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "customBranch");
            }
            this.customBranch = customBranch;
            return this;
        }
        @CustomType.Setter
        public Builder dbtVersion(String dbtVersion) {
            if (dbtVersion == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "dbtVersion");
            }
            this.dbtVersion = dbtVersion;
            return this;
        }
        @CustomType.Setter
        public Builder deploymentType(String deploymentType) {
            if (deploymentType == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "deploymentType");
            }
            this.deploymentType = deploymentType;
            return this;
        }
        @CustomType.Setter
        public Builder environmentId(Integer environmentId) {
            if (environmentId == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "environmentId");
            }
            this.environmentId = environmentId;
            return this;
        }
        @CustomType.Setter
        public Builder extendedAttributesId(Integer extendedAttributesId) {
            if (extendedAttributesId == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "extendedAttributesId");
            }
            this.extendedAttributesId = extendedAttributesId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isActive(Boolean isActive) {
            if (isActive == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "isActive");
            }
            this.isActive = isActive;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(Integer projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder useCustomBranch(Boolean useCustomBranch) {
            if (useCustomBranch == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "useCustomBranch");
            }
            this.useCustomBranch = useCustomBranch;
            return this;
        }
        public GetEnvironmentResult build() {
            final var _resultValue = new GetEnvironmentResult();
            _resultValue.credentialId = credentialId;
            _resultValue.customBranch = customBranch;
            _resultValue.dbtVersion = dbtVersion;
            _resultValue.deploymentType = deploymentType;
            _resultValue.environmentId = environmentId;
            _resultValue.extendedAttributesId = extendedAttributesId;
            _resultValue.id = id;
            _resultValue.isActive = isActive;
            _resultValue.name = name;
            _resultValue.projectId = projectId;
            _resultValue.type = type;
            _resultValue.useCustomBranch = useCustomBranch;
            return _resultValue;
        }
    }
}

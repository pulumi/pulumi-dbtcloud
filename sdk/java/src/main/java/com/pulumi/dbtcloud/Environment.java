// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dbtcloud.EnvironmentArgs;
import com.pulumi.dbtcloud.Utilities;
import com.pulumi.dbtcloud.inputs.EnvironmentState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.dbtcloud.Environment;
 * import com.pulumi.dbtcloud.EnvironmentArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // NOTE for customers using the LEGACY dbt_cloud provider:
 *         var ciEnvironment = new Environment(&#34;ciEnvironment&#34;, EnvironmentArgs.builder()        
 *             .dbtVersion(&#34;1.6.0-latest&#34;)
 *             .name(&#34;CI&#34;)
 *             .projectId(dbtProject.id())
 *             .type(&#34;deployment&#34;)
 *             .credentialId(ciCredential.credentialId())
 *             .build());
 * 
 *         // we can also set a deployment environment as being the production one
 *         var prodEnvironment = new Environment(&#34;prodEnvironment&#34;, EnvironmentArgs.builder()        
 *             .dbtVersion(&#34;1.6.0-latest&#34;)
 *             .name(&#34;Prod&#34;)
 *             .projectId(dbtProject.id())
 *             .type(&#34;deployment&#34;)
 *             .credentialId(prodCredential.credentialId())
 *             .deploymentType(&#34;production&#34;)
 *             .build());
 * 
 *         // Creating a development environment
 *         var devEnvironment = new Environment(&#34;devEnvironment&#34;, EnvironmentArgs.builder()        
 *             .dbtVersion(&#34;1.6.0-latest&#34;)
 *             .name(&#34;Dev&#34;)
 *             .projectId(dbtProject.id())
 *             .type(&#34;development&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Import using a project ID and environment ID found in the URL or via the API.
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/environment:Environment prod_environment &#34;project_id:environment_id&#34;
 * ```
 * 
 * ```sh
 * $ pulumi import dbtcloud:index/environment:Environment prod_environment 12345:6789
 * ```
 * 
 */
@ResourceType(type="dbtcloud:index/environment:Environment")
public class Environment extends com.pulumi.resources.CustomResource {
    /**
     * Credential ID to create the environment with. A credential is not required for development environments but is required for deployment environments
     * 
     */
    @Export(name="credentialId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> credentialId;

    /**
     * @return Credential ID to create the environment with. A credential is not required for development environments but is required for deployment environments
     * 
     */
    public Output<Optional<Integer>> credentialId() {
        return Codegen.optional(this.credentialId);
    }
    /**
     * Which custom branch to use in this environment
     * 
     */
    @Export(name="customBranch", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> customBranch;

    /**
     * @return Which custom branch to use in this environment
     * 
     */
    public Output<Optional<String>> customBranch() {
        return Codegen.optional(this.customBranch);
    }
    /**
     * Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` or `major.minor.0-pre`, e.g. `1.5.0-latest`
     * 
     */
    @Export(name="dbtVersion", refs={String.class}, tree="[0]")
    private Output<String> dbtVersion;

    /**
     * @return Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` or `major.minor.0-pre`, e.g. `1.5.0-latest`
     * 
     */
    public Output<String> dbtVersion() {
        return this.dbtVersion;
    }
    /**
     * The type of environment. Only valid for environments of type &#39;deployment&#39; and for now can only be empty or set to &#39;production&#39;
     * 
     */
    @Export(name="deploymentType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deploymentType;

    /**
     * @return The type of environment. Only valid for environments of type &#39;deployment&#39; and for now can only be empty or set to &#39;production&#39;
     * 
     */
    public Output<Optional<String>> deploymentType() {
        return Codegen.optional(this.deploymentType);
    }
    /**
     * Environment ID within the project
     * 
     */
    @Export(name="environmentId", refs={Integer.class}, tree="[0]")
    private Output<Integer> environmentId;

    /**
     * @return Environment ID within the project
     * 
     */
    public Output<Integer> environmentId() {
        return this.environmentId;
    }
    /**
     * ID of the extended attributes for the environment
     * 
     */
    @Export(name="extendedAttributesId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> extendedAttributesId;

    /**
     * @return ID of the extended attributes for the environment
     * 
     */
    public Output<Optional<Integer>> extendedAttributesId() {
        return Codegen.optional(this.extendedAttributesId);
    }
    /**
     * Whether the environment is active
     * 
     */
    @Export(name="isActive", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isActive;

    /**
     * @return Whether the environment is active
     * 
     */
    public Output<Optional<Boolean>> isActive() {
        return Codegen.optional(this.isActive);
    }
    /**
     * Environment name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Environment name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Project ID to create the environment in
     * 
     */
    @Export(name="projectId", refs={Integer.class}, tree="[0]")
    private Output<Integer> projectId;

    /**
     * @return Project ID to create the environment in
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }
    /**
     * The type of environment (must be either development or deployment)
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of environment (must be either development or deployment)
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Whether to use a custom git branch in this environment
     * 
     */
    @Export(name="useCustomBranch", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> useCustomBranch;

    /**
     * @return Whether to use a custom git branch in this environment
     * 
     */
    public Output<Optional<Boolean>> useCustomBranch() {
        return Codegen.optional(this.useCustomBranch);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Environment(String name) {
        this(name, EnvironmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Environment(String name, EnvironmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Environment(String name, EnvironmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/environment:Environment", name, args == null ? EnvironmentArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Environment(String name, Output<String> id, @Nullable EnvironmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dbtcloud:index/environment:Environment", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Environment get(String name, Output<String> id, @Nullable EnvironmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Environment(name, id, state, options);
    }
}

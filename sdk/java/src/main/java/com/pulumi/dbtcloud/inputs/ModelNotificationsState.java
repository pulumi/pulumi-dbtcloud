// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ModelNotificationsState extends com.pulumi.resources.ResourceArgs {

    public static final ModelNotificationsState Empty = new ModelNotificationsState();

    /**
     * Whether model notifications are enabled for this environment
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether model notifications are enabled for this environment
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The ID of the dbt Cloud environment
     * 
     */
    @Import(name="environmentId")
    private @Nullable Output<String> environmentId;

    /**
     * @return The ID of the dbt Cloud environment
     * 
     */
    public Optional<Output<String>> environmentId() {
        return Optional.ofNullable(this.environmentId);
    }

    /**
     * Whether to send notifications for failed model runs
     * 
     */
    @Import(name="onFailure")
    private @Nullable Output<Boolean> onFailure;

    /**
     * @return Whether to send notifications for failed model runs
     * 
     */
    public Optional<Output<Boolean>> onFailure() {
        return Optional.ofNullable(this.onFailure);
    }

    /**
     * Whether to send notifications for skipped model runs
     * 
     */
    @Import(name="onSkipped")
    private @Nullable Output<Boolean> onSkipped;

    /**
     * @return Whether to send notifications for skipped model runs
     * 
     */
    public Optional<Output<Boolean>> onSkipped() {
        return Optional.ofNullable(this.onSkipped);
    }

    /**
     * Whether to send notifications for successful model runs
     * 
     */
    @Import(name="onSuccess")
    private @Nullable Output<Boolean> onSuccess;

    /**
     * @return Whether to send notifications for successful model runs
     * 
     */
    public Optional<Output<Boolean>> onSuccess() {
        return Optional.ofNullable(this.onSuccess);
    }

    /**
     * Whether to send notifications for model runs with warnings
     * 
     */
    @Import(name="onWarning")
    private @Nullable Output<Boolean> onWarning;

    /**
     * @return Whether to send notifications for model runs with warnings
     * 
     */
    public Optional<Output<Boolean>> onWarning() {
        return Optional.ofNullable(this.onWarning);
    }

    private ModelNotificationsState() {}

    private ModelNotificationsState(ModelNotificationsState $) {
        this.enabled = $.enabled;
        this.environmentId = $.environmentId;
        this.onFailure = $.onFailure;
        this.onSkipped = $.onSkipped;
        this.onSuccess = $.onSuccess;
        this.onWarning = $.onWarning;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelNotificationsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelNotificationsState $;

        public Builder() {
            $ = new ModelNotificationsState();
        }

        public Builder(ModelNotificationsState defaults) {
            $ = new ModelNotificationsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Whether model notifications are enabled for this environment
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether model notifications are enabled for this environment
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param environmentId The ID of the dbt Cloud environment
         * 
         * @return builder
         * 
         */
        public Builder environmentId(@Nullable Output<String> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param environmentId The ID of the dbt Cloud environment
         * 
         * @return builder
         * 
         */
        public Builder environmentId(String environmentId) {
            return environmentId(Output.of(environmentId));
        }

        /**
         * @param onFailure Whether to send notifications for failed model runs
         * 
         * @return builder
         * 
         */
        public Builder onFailure(@Nullable Output<Boolean> onFailure) {
            $.onFailure = onFailure;
            return this;
        }

        /**
         * @param onFailure Whether to send notifications for failed model runs
         * 
         * @return builder
         * 
         */
        public Builder onFailure(Boolean onFailure) {
            return onFailure(Output.of(onFailure));
        }

        /**
         * @param onSkipped Whether to send notifications for skipped model runs
         * 
         * @return builder
         * 
         */
        public Builder onSkipped(@Nullable Output<Boolean> onSkipped) {
            $.onSkipped = onSkipped;
            return this;
        }

        /**
         * @param onSkipped Whether to send notifications for skipped model runs
         * 
         * @return builder
         * 
         */
        public Builder onSkipped(Boolean onSkipped) {
            return onSkipped(Output.of(onSkipped));
        }

        /**
         * @param onSuccess Whether to send notifications for successful model runs
         * 
         * @return builder
         * 
         */
        public Builder onSuccess(@Nullable Output<Boolean> onSuccess) {
            $.onSuccess = onSuccess;
            return this;
        }

        /**
         * @param onSuccess Whether to send notifications for successful model runs
         * 
         * @return builder
         * 
         */
        public Builder onSuccess(Boolean onSuccess) {
            return onSuccess(Output.of(onSuccess));
        }

        /**
         * @param onWarning Whether to send notifications for model runs with warnings
         * 
         * @return builder
         * 
         */
        public Builder onWarning(@Nullable Output<Boolean> onWarning) {
            $.onWarning = onWarning;
            return this;
        }

        /**
         * @param onWarning Whether to send notifications for model runs with warnings
         * 
         * @return builder
         * 
         */
        public Builder onWarning(Boolean onWarning) {
            return onWarning(Output.of(onWarning));
        }

        public ModelNotificationsState build() {
            return $;
        }
    }

}

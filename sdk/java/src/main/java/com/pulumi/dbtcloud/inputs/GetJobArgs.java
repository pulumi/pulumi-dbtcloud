// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dbtcloud.inputs.GetJobJobCompletionTriggerConditionArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetJobArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetJobArgs Empty = new GetJobArgs();

    /**
     * Which other job should trigger this job when it finishes, and on which conditions. Format for the property will change in the next release to match the one from the one from dbtcloud*jobs.
     * 
     */
    @Import(name="jobCompletionTriggerConditions")
    private @Nullable Output<List<GetJobJobCompletionTriggerConditionArgs>> jobCompletionTriggerConditions;

    /**
     * @return Which other job should trigger this job when it finishes, and on which conditions. Format for the property will change in the next release to match the one from the one from dbtcloud*jobs.
     * 
     */
    public Optional<Output<List<GetJobJobCompletionTriggerConditionArgs>>> jobCompletionTriggerConditions() {
        return Optional.ofNullable(this.jobCompletionTriggerConditions);
    }

    /**
     * The ID of the job
     * 
     */
    @Import(name="jobId", required=true)
    private Output<Integer> jobId;

    /**
     * @return The ID of the job
     * 
     */
    public Output<Integer> jobId() {
        return this.jobId;
    }

    private GetJobArgs() {}

    private GetJobArgs(GetJobArgs $) {
        this.jobCompletionTriggerConditions = $.jobCompletionTriggerConditions;
        this.jobId = $.jobId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetJobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetJobArgs $;

        public Builder() {
            $ = new GetJobArgs();
        }

        public Builder(GetJobArgs defaults) {
            $ = new GetJobArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param jobCompletionTriggerConditions Which other job should trigger this job when it finishes, and on which conditions. Format for the property will change in the next release to match the one from the one from dbtcloud*jobs.
         * 
         * @return builder
         * 
         */
        public Builder jobCompletionTriggerConditions(@Nullable Output<List<GetJobJobCompletionTriggerConditionArgs>> jobCompletionTriggerConditions) {
            $.jobCompletionTriggerConditions = jobCompletionTriggerConditions;
            return this;
        }

        /**
         * @param jobCompletionTriggerConditions Which other job should trigger this job when it finishes, and on which conditions. Format for the property will change in the next release to match the one from the one from dbtcloud*jobs.
         * 
         * @return builder
         * 
         */
        public Builder jobCompletionTriggerConditions(List<GetJobJobCompletionTriggerConditionArgs> jobCompletionTriggerConditions) {
            return jobCompletionTriggerConditions(Output.of(jobCompletionTriggerConditions));
        }

        /**
         * @param jobCompletionTriggerConditions Which other job should trigger this job when it finishes, and on which conditions. Format for the property will change in the next release to match the one from the one from dbtcloud*jobs.
         * 
         * @return builder
         * 
         */
        public Builder jobCompletionTriggerConditions(GetJobJobCompletionTriggerConditionArgs... jobCompletionTriggerConditions) {
            return jobCompletionTriggerConditions(List.of(jobCompletionTriggerConditions));
        }

        /**
         * @param jobId The ID of the job
         * 
         * @return builder
         * 
         */
        public Builder jobId(Output<Integer> jobId) {
            $.jobId = jobId;
            return this;
        }

        /**
         * @param jobId The ID of the job
         * 
         * @return builder
         * 
         */
        public Builder jobId(Integer jobId) {
            return jobId(Output.of(jobId));
        }

        public GetJobArgs build() {
            if ($.jobId == null) {
                throw new MissingRequiredPropertyException("GetJobArgs", "jobId");
            }
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryState extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryState Empty = new RepositoryState();

    /**
     * The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsProject` and the project name - (required for ADO native integration only)
     * 
     */
    @Import(name="azureActiveDirectoryProjectId")
    private @Nullable Output<String> azureActiveDirectoryProjectId;

    /**
     * @return The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsProject` and the project name - (required for ADO native integration only)
     * 
     */
    public Optional<Output<String>> azureActiveDirectoryProjectId() {
        return Optional.ofNullable(this.azureActiveDirectoryProjectId);
    }

    /**
     * The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsRepository` along with the ADO Project ID and the repository name - (required for ADO native integration only)
     * 
     */
    @Import(name="azureActiveDirectoryRepositoryId")
    private @Nullable Output<String> azureActiveDirectoryRepositoryId;

    /**
     * @return The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsRepository` along with the ADO Project ID and the repository name - (required for ADO native integration only)
     * 
     */
    public Optional<Output<String>> azureActiveDirectoryRepositoryId() {
        return Optional.ofNullable(this.azureActiveDirectoryRepositoryId);
    }

    /**
     * If set to False (the default), the connection will fail if the service user doesn&#39;t have access to set webhooks (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will be triggered - (for ADO native integration only)
     * 
     */
    @Import(name="azureBypassWebhookRegistrationFailure")
    private @Nullable Output<Boolean> azureBypassWebhookRegistrationFailure;

    /**
     * @return If set to False (the default), the connection will fail if the service user doesn&#39;t have access to set webhooks (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will be triggered - (for ADO native integration only)
     * 
     */
    public Optional<Output<Boolean>> azureBypassWebhookRegistrationFailure() {
        return Optional.ofNullable(this.azureBypassWebhookRegistrationFailure);
    }

    /**
     * Public key generated by dbt when using `deployKey` clone strategy
     * 
     */
    @Import(name="deployKey")
    private @Nullable Output<String> deployKey;

    /**
     * @return Public key generated by dbt when using `deployKey` clone strategy
     * 
     */
    public Optional<Output<String>> deployKey() {
        return Optional.ofNullable(this.deployKey);
    }

    /**
     * Whether we should return the public deploy key - (for the `deployKey` strategy)
     * 
     * @deprecated
     * This field is deprecated and will be removed in a future version of the provider, please remove it from your configuration. The key is always fetched when the clone strategy is `deployKey`
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in a future version of the provider, please remove it from your configuration. The key is always fetched when the clone strategy is `deployKey` */
    @Import(name="fetchDeployKey")
    private @Nullable Output<Boolean> fetchDeployKey;

    /**
     * @return Whether we should return the public deploy key - (for the `deployKey` strategy)
     * 
     * @deprecated
     * This field is deprecated and will be removed in a future version of the provider, please remove it from your configuration. The key is always fetched when the clone strategy is `deployKey`
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in a future version of the provider, please remove it from your configuration. The key is always fetched when the clone strategy is `deployKey` */
    public Optional<Output<Boolean>> fetchDeployKey() {
        return Optional.ofNullable(this.fetchDeployKey);
    }

    /**
     * Git clone strategy for the repository. Can be `deployKey` (default) for cloning via SSH Deploy Key, `githubApp` for GitHub native integration, `deployToken` for the GitLab native integration and `azureActiveDirectoryApp` for ADO native integration
     * 
     */
    @Import(name="gitCloneStrategy")
    private @Nullable Output<String> gitCloneStrategy;

    /**
     * @return Git clone strategy for the repository. Can be `deployKey` (default) for cloning via SSH Deploy Key, `githubApp` for GitHub native integration, `deployToken` for the GitLab native integration and `azureActiveDirectoryApp` for ADO native integration
     * 
     */
    public Optional<Output<String>> gitCloneStrategy() {
        return Optional.ofNullable(this.gitCloneStrategy);
    }

    /**
     * Identifier for the GitHub App - (for GitHub native integration only)
     * 
     */
    @Import(name="githubInstallationId")
    private @Nullable Output<Integer> githubInstallationId;

    /**
     * @return Identifier for the GitHub App - (for GitHub native integration only)
     * 
     */
    public Optional<Output<Integer>> githubInstallationId() {
        return Optional.ofNullable(this.githubInstallationId);
    }

    /**
     * Identifier for the Gitlab project -  (for GitLab native integration only)
     * 
     */
    @Import(name="gitlabProjectId")
    private @Nullable Output<Integer> gitlabProjectId;

    /**
     * @return Identifier for the Gitlab project -  (for GitLab native integration only)
     * 
     */
    public Optional<Output<Integer>> gitlabProjectId() {
        return Optional.ofNullable(this.gitlabProjectId);
    }

    /**
     * Whether the repository is active
     * 
     */
    @Import(name="isActive")
    private @Nullable Output<Boolean> isActive;

    /**
     * @return Whether the repository is active
     * 
     */
    public Optional<Output<Boolean>> isActive() {
        return Optional.ofNullable(this.isActive);
    }

    /**
     * Identifier for the PrivateLink endpoint.
     * 
     */
    @Import(name="privateLinkEndpointId")
    private @Nullable Output<String> privateLinkEndpointId;

    /**
     * @return Identifier for the PrivateLink endpoint.
     * 
     */
    public Optional<Output<String>> privateLinkEndpointId() {
        return Optional.ofNullable(this.privateLinkEndpointId);
    }

    /**
     * Project ID to create the repository in
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<Integer> projectId;

    /**
     * @return Project ID to create the repository in
     * 
     */
    public Optional<Output<Integer>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * URL template for creating a pull request. If it is not set, the default template will create a PR from the current branch to the branch configured in the Development environment.
     * 
     */
    @Import(name="pullRequestUrlTemplate")
    private @Nullable Output<String> pullRequestUrlTemplate;

    /**
     * @return URL template for creating a pull request. If it is not set, the default template will create a PR from the current branch to the branch configured in the Development environment.
     * 
     */
    public Optional<Output<String>> pullRequestUrlTemplate() {
        return Optional.ofNullable(this.pullRequestUrlTemplate);
    }

    /**
     * Git URL for the repository or &lt;Group&gt;/&lt;Project&gt; for Gitlab
     * 
     */
    @Import(name="remoteUrl")
    private @Nullable Output<String> remoteUrl;

    /**
     * @return Git URL for the repository or &lt;Group&gt;/&lt;Project&gt; for Gitlab
     * 
     */
    public Optional<Output<String>> remoteUrl() {
        return Optional.ofNullable(this.remoteUrl);
    }

    /**
     * Credentials ID for the repository (From the repository side not the dbt Cloud ID)
     * 
     */
    @Import(name="repositoryCredentialsId")
    private @Nullable Output<Integer> repositoryCredentialsId;

    /**
     * @return Credentials ID for the repository (From the repository side not the dbt Cloud ID)
     * 
     */
    public Optional<Output<Integer>> repositoryCredentialsId() {
        return Optional.ofNullable(this.repositoryCredentialsId);
    }

    /**
     * Repository Identifier
     * 
     */
    @Import(name="repositoryId")
    private @Nullable Output<Integer> repositoryId;

    /**
     * @return Repository Identifier
     * 
     */
    public Optional<Output<Integer>> repositoryId() {
        return Optional.ofNullable(this.repositoryId);
    }

    private RepositoryState() {}

    private RepositoryState(RepositoryState $) {
        this.azureActiveDirectoryProjectId = $.azureActiveDirectoryProjectId;
        this.azureActiveDirectoryRepositoryId = $.azureActiveDirectoryRepositoryId;
        this.azureBypassWebhookRegistrationFailure = $.azureBypassWebhookRegistrationFailure;
        this.deployKey = $.deployKey;
        this.fetchDeployKey = $.fetchDeployKey;
        this.gitCloneStrategy = $.gitCloneStrategy;
        this.githubInstallationId = $.githubInstallationId;
        this.gitlabProjectId = $.gitlabProjectId;
        this.isActive = $.isActive;
        this.privateLinkEndpointId = $.privateLinkEndpointId;
        this.projectId = $.projectId;
        this.pullRequestUrlTemplate = $.pullRequestUrlTemplate;
        this.remoteUrl = $.remoteUrl;
        this.repositoryCredentialsId = $.repositoryCredentialsId;
        this.repositoryId = $.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryState $;

        public Builder() {
            $ = new RepositoryState();
        }

        public Builder(RepositoryState defaults) {
            $ = new RepositoryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param azureActiveDirectoryProjectId The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsProject` and the project name - (required for ADO native integration only)
         * 
         * @return builder
         * 
         */
        public Builder azureActiveDirectoryProjectId(@Nullable Output<String> azureActiveDirectoryProjectId) {
            $.azureActiveDirectoryProjectId = azureActiveDirectoryProjectId;
            return this;
        }

        /**
         * @param azureActiveDirectoryProjectId The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsProject` and the project name - (required for ADO native integration only)
         * 
         * @return builder
         * 
         */
        public Builder azureActiveDirectoryProjectId(String azureActiveDirectoryProjectId) {
            return azureActiveDirectoryProjectId(Output.of(azureActiveDirectoryProjectId));
        }

        /**
         * @param azureActiveDirectoryRepositoryId The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsRepository` along with the ADO Project ID and the repository name - (required for ADO native integration only)
         * 
         * @return builder
         * 
         */
        public Builder azureActiveDirectoryRepositoryId(@Nullable Output<String> azureActiveDirectoryRepositoryId) {
            $.azureActiveDirectoryRepositoryId = azureActiveDirectoryRepositoryId;
            return this;
        }

        /**
         * @param azureActiveDirectoryRepositoryId The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsRepository` along with the ADO Project ID and the repository name - (required for ADO native integration only)
         * 
         * @return builder
         * 
         */
        public Builder azureActiveDirectoryRepositoryId(String azureActiveDirectoryRepositoryId) {
            return azureActiveDirectoryRepositoryId(Output.of(azureActiveDirectoryRepositoryId));
        }

        /**
         * @param azureBypassWebhookRegistrationFailure If set to False (the default), the connection will fail if the service user doesn&#39;t have access to set webhooks (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will be triggered - (for ADO native integration only)
         * 
         * @return builder
         * 
         */
        public Builder azureBypassWebhookRegistrationFailure(@Nullable Output<Boolean> azureBypassWebhookRegistrationFailure) {
            $.azureBypassWebhookRegistrationFailure = azureBypassWebhookRegistrationFailure;
            return this;
        }

        /**
         * @param azureBypassWebhookRegistrationFailure If set to False (the default), the connection will fail if the service user doesn&#39;t have access to set webhooks (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will be triggered - (for ADO native integration only)
         * 
         * @return builder
         * 
         */
        public Builder azureBypassWebhookRegistrationFailure(Boolean azureBypassWebhookRegistrationFailure) {
            return azureBypassWebhookRegistrationFailure(Output.of(azureBypassWebhookRegistrationFailure));
        }

        /**
         * @param deployKey Public key generated by dbt when using `deployKey` clone strategy
         * 
         * @return builder
         * 
         */
        public Builder deployKey(@Nullable Output<String> deployKey) {
            $.deployKey = deployKey;
            return this;
        }

        /**
         * @param deployKey Public key generated by dbt when using `deployKey` clone strategy
         * 
         * @return builder
         * 
         */
        public Builder deployKey(String deployKey) {
            return deployKey(Output.of(deployKey));
        }

        /**
         * @param fetchDeployKey Whether we should return the public deploy key - (for the `deployKey` strategy)
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in a future version of the provider, please remove it from your configuration. The key is always fetched when the clone strategy is `deployKey`
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in a future version of the provider, please remove it from your configuration. The key is always fetched when the clone strategy is `deployKey` */
        public Builder fetchDeployKey(@Nullable Output<Boolean> fetchDeployKey) {
            $.fetchDeployKey = fetchDeployKey;
            return this;
        }

        /**
         * @param fetchDeployKey Whether we should return the public deploy key - (for the `deployKey` strategy)
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in a future version of the provider, please remove it from your configuration. The key is always fetched when the clone strategy is `deployKey`
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in a future version of the provider, please remove it from your configuration. The key is always fetched when the clone strategy is `deployKey` */
        public Builder fetchDeployKey(Boolean fetchDeployKey) {
            return fetchDeployKey(Output.of(fetchDeployKey));
        }

        /**
         * @param gitCloneStrategy Git clone strategy for the repository. Can be `deployKey` (default) for cloning via SSH Deploy Key, `githubApp` for GitHub native integration, `deployToken` for the GitLab native integration and `azureActiveDirectoryApp` for ADO native integration
         * 
         * @return builder
         * 
         */
        public Builder gitCloneStrategy(@Nullable Output<String> gitCloneStrategy) {
            $.gitCloneStrategy = gitCloneStrategy;
            return this;
        }

        /**
         * @param gitCloneStrategy Git clone strategy for the repository. Can be `deployKey` (default) for cloning via SSH Deploy Key, `githubApp` for GitHub native integration, `deployToken` for the GitLab native integration and `azureActiveDirectoryApp` for ADO native integration
         * 
         * @return builder
         * 
         */
        public Builder gitCloneStrategy(String gitCloneStrategy) {
            return gitCloneStrategy(Output.of(gitCloneStrategy));
        }

        /**
         * @param githubInstallationId Identifier for the GitHub App - (for GitHub native integration only)
         * 
         * @return builder
         * 
         */
        public Builder githubInstallationId(@Nullable Output<Integer> githubInstallationId) {
            $.githubInstallationId = githubInstallationId;
            return this;
        }

        /**
         * @param githubInstallationId Identifier for the GitHub App - (for GitHub native integration only)
         * 
         * @return builder
         * 
         */
        public Builder githubInstallationId(Integer githubInstallationId) {
            return githubInstallationId(Output.of(githubInstallationId));
        }

        /**
         * @param gitlabProjectId Identifier for the Gitlab project -  (for GitLab native integration only)
         * 
         * @return builder
         * 
         */
        public Builder gitlabProjectId(@Nullable Output<Integer> gitlabProjectId) {
            $.gitlabProjectId = gitlabProjectId;
            return this;
        }

        /**
         * @param gitlabProjectId Identifier for the Gitlab project -  (for GitLab native integration only)
         * 
         * @return builder
         * 
         */
        public Builder gitlabProjectId(Integer gitlabProjectId) {
            return gitlabProjectId(Output.of(gitlabProjectId));
        }

        /**
         * @param isActive Whether the repository is active
         * 
         * @return builder
         * 
         */
        public Builder isActive(@Nullable Output<Boolean> isActive) {
            $.isActive = isActive;
            return this;
        }

        /**
         * @param isActive Whether the repository is active
         * 
         * @return builder
         * 
         */
        public Builder isActive(Boolean isActive) {
            return isActive(Output.of(isActive));
        }

        /**
         * @param privateLinkEndpointId Identifier for the PrivateLink endpoint.
         * 
         * @return builder
         * 
         */
        public Builder privateLinkEndpointId(@Nullable Output<String> privateLinkEndpointId) {
            $.privateLinkEndpointId = privateLinkEndpointId;
            return this;
        }

        /**
         * @param privateLinkEndpointId Identifier for the PrivateLink endpoint.
         * 
         * @return builder
         * 
         */
        public Builder privateLinkEndpointId(String privateLinkEndpointId) {
            return privateLinkEndpointId(Output.of(privateLinkEndpointId));
        }

        /**
         * @param projectId Project ID to create the repository in
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID to create the repository in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param pullRequestUrlTemplate URL template for creating a pull request. If it is not set, the default template will create a PR from the current branch to the branch configured in the Development environment.
         * 
         * @return builder
         * 
         */
        public Builder pullRequestUrlTemplate(@Nullable Output<String> pullRequestUrlTemplate) {
            $.pullRequestUrlTemplate = pullRequestUrlTemplate;
            return this;
        }

        /**
         * @param pullRequestUrlTemplate URL template for creating a pull request. If it is not set, the default template will create a PR from the current branch to the branch configured in the Development environment.
         * 
         * @return builder
         * 
         */
        public Builder pullRequestUrlTemplate(String pullRequestUrlTemplate) {
            return pullRequestUrlTemplate(Output.of(pullRequestUrlTemplate));
        }

        /**
         * @param remoteUrl Git URL for the repository or &lt;Group&gt;/&lt;Project&gt; for Gitlab
         * 
         * @return builder
         * 
         */
        public Builder remoteUrl(@Nullable Output<String> remoteUrl) {
            $.remoteUrl = remoteUrl;
            return this;
        }

        /**
         * @param remoteUrl Git URL for the repository or &lt;Group&gt;/&lt;Project&gt; for Gitlab
         * 
         * @return builder
         * 
         */
        public Builder remoteUrl(String remoteUrl) {
            return remoteUrl(Output.of(remoteUrl));
        }

        /**
         * @param repositoryCredentialsId Credentials ID for the repository (From the repository side not the dbt Cloud ID)
         * 
         * @return builder
         * 
         */
        public Builder repositoryCredentialsId(@Nullable Output<Integer> repositoryCredentialsId) {
            $.repositoryCredentialsId = repositoryCredentialsId;
            return this;
        }

        /**
         * @param repositoryCredentialsId Credentials ID for the repository (From the repository side not the dbt Cloud ID)
         * 
         * @return builder
         * 
         */
        public Builder repositoryCredentialsId(Integer repositoryCredentialsId) {
            return repositoryCredentialsId(Output.of(repositoryCredentialsId));
        }

        /**
         * @param repositoryId Repository Identifier
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(@Nullable Output<Integer> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId Repository Identifier
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(Integer repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        public RepositoryState build() {
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dbtcloud.inputs.GlobalConnectionPostgresSshTunnelArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GlobalConnectionPostgresArgs extends com.pulumi.resources.ResourceArgs {

    public static final GlobalConnectionPostgresArgs Empty = new GlobalConnectionPostgresArgs();

    /**
     * The database name for this connection.
     * 
     */
    @Import(name="dbname", required=true)
    private Output<String> dbname;

    /**
     * @return The database name for this connection.
     * 
     */
    public Output<String> dbname() {
        return this.dbname;
    }

    /**
     * The hostname of the database.
     * 
     */
    @Import(name="hostname", required=true)
    private Output<String> hostname;

    /**
     * @return The hostname of the database.
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }

    /**
     * The port to connect to for this connection. Default=5432
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port to connect to for this connection. Default=5432
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * PostgreSQL SSH Tunnel configuration
     * 
     */
    @Import(name="sshTunnel")
    private @Nullable Output<GlobalConnectionPostgresSshTunnelArgs> sshTunnel;

    /**
     * @return PostgreSQL SSH Tunnel configuration
     * 
     */
    public Optional<Output<GlobalConnectionPostgresSshTunnelArgs>> sshTunnel() {
        return Optional.ofNullable(this.sshTunnel);
    }

    private GlobalConnectionPostgresArgs() {}

    private GlobalConnectionPostgresArgs(GlobalConnectionPostgresArgs $) {
        this.dbname = $.dbname;
        this.hostname = $.hostname;
        this.port = $.port;
        this.sshTunnel = $.sshTunnel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GlobalConnectionPostgresArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GlobalConnectionPostgresArgs $;

        public Builder() {
            $ = new GlobalConnectionPostgresArgs();
        }

        public Builder(GlobalConnectionPostgresArgs defaults) {
            $ = new GlobalConnectionPostgresArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dbname The database name for this connection.
         * 
         * @return builder
         * 
         */
        public Builder dbname(Output<String> dbname) {
            $.dbname = dbname;
            return this;
        }

        /**
         * @param dbname The database name for this connection.
         * 
         * @return builder
         * 
         */
        public Builder dbname(String dbname) {
            return dbname(Output.of(dbname));
        }

        /**
         * @param hostname The hostname of the database.
         * 
         * @return builder
         * 
         */
        public Builder hostname(Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The hostname of the database.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param port The port to connect to for this connection. Default=5432
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port to connect to for this connection. Default=5432
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param sshTunnel PostgreSQL SSH Tunnel configuration
         * 
         * @return builder
         * 
         */
        public Builder sshTunnel(@Nullable Output<GlobalConnectionPostgresSshTunnelArgs> sshTunnel) {
            $.sshTunnel = sshTunnel;
            return this;
        }

        /**
         * @param sshTunnel PostgreSQL SSH Tunnel configuration
         * 
         * @return builder
         * 
         */
        public Builder sshTunnel(GlobalConnectionPostgresSshTunnelArgs sshTunnel) {
            return sshTunnel(Output.of(sshTunnel));
        }

        public GlobalConnectionPostgresArgs build() {
            if ($.dbname == null) {
                throw new MissingRequiredPropertyException("GlobalConnectionPostgresArgs", "dbname");
            }
            if ($.hostname == null) {
                throw new MissingRequiredPropertyException("GlobalConnectionPostgresArgs", "hostname");
            }
            return $;
        }
    }

}

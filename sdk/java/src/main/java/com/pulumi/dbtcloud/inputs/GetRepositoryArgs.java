// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRepositoryArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepositoryArgs Empty = new GetRepositoryArgs();

    /**
     * Whether we should return the public deploy key
     * 
     * @deprecated
     * This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deploy_key`
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deploy_key` */
    @Import(name="fetchDeployKey")
    private @Nullable Output<Boolean> fetchDeployKey;

    /**
     * @return Whether we should return the public deploy key
     * 
     * @deprecated
     * This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deploy_key`
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deploy_key` */
    public Optional<Output<Boolean>> fetchDeployKey() {
        return Optional.ofNullable(this.fetchDeployKey);
    }

    /**
     * Project ID to create the repository in
     * 
     */
    @Import(name="projectId", required=true)
    private Output<Integer> projectId;

    /**
     * @return Project ID to create the repository in
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }

    /**
     * ID for the repository
     * 
     */
    @Import(name="repositoryId", required=true)
    private Output<Integer> repositoryId;

    /**
     * @return ID for the repository
     * 
     */
    public Output<Integer> repositoryId() {
        return this.repositoryId;
    }

    private GetRepositoryArgs() {}

    private GetRepositoryArgs(GetRepositoryArgs $) {
        this.fetchDeployKey = $.fetchDeployKey;
        this.projectId = $.projectId;
        this.repositoryId = $.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepositoryArgs $;

        public Builder() {
            $ = new GetRepositoryArgs();
        }

        public Builder(GetRepositoryArgs defaults) {
            $ = new GetRepositoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fetchDeployKey Whether we should return the public deploy key
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deploy_key`
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deploy_key` */
        public Builder fetchDeployKey(@Nullable Output<Boolean> fetchDeployKey) {
            $.fetchDeployKey = fetchDeployKey;
            return this;
        }

        /**
         * @param fetchDeployKey Whether we should return the public deploy key
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deploy_key`
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deploy_key` */
        public Builder fetchDeployKey(Boolean fetchDeployKey) {
            return fetchDeployKey(Output.of(fetchDeployKey));
        }

        /**
         * @param projectId Project ID to create the repository in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID to create the repository in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param repositoryId ID for the repository
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(Output<Integer> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId ID for the repository
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(Integer repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        public GetRepositoryArgs build() {
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("GetRepositoryArgs", "projectId");
            }
            if ($.repositoryId == null) {
                throw new MissingRequiredPropertyException("GetRepositoryArgs", "repositoryId");
            }
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SynapseCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final SynapseCredentialArgs Empty = new SynapseCredentialArgs();

    /**
     * The type of the adapter (synapse)
     * 
     */
    @Import(name="adapterType", required=true)
    private Output<String> adapterType;

    /**
     * @return The type of the adapter (synapse)
     * 
     */
    public Output<String> adapterType() {
        return this.adapterType;
    }

    /**
     * Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)
     * 
     */
    @Import(name="authentication", required=true)
    private Output<String> authentication;

    /**
     * @return Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)
     * 
     */
    public Output<String> authentication() {
        return this.authentication;
    }

    /**
     * The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    /**
     * @return The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
     * 
     */
    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * The password for the account to connect to. Only used when connection with AD user/pass
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password for the account to connect to. Only used when connection with AD user/pass
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Project ID to create the Synapse credential in
     * 
     */
    @Import(name="projectId", required=true)
    private Output<Integer> projectId;

    /**
     * @return Project ID to create the Synapse credential in
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }

    /**
     * The schema where to create the dbt models
     * 
     */
    @Import(name="schema", required=true)
    private Output<String> schema;

    /**
     * @return The schema where to create the dbt models
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }

    /**
     * Optionally set this to the principal who should own the schemas created by dbt
     * 
     */
    @Import(name="schemaAuthorization")
    private @Nullable Output<String> schemaAuthorization;

    /**
     * @return Optionally set this to the principal who should own the schemas created by dbt
     * 
     */
    public Optional<Output<String>> schemaAuthorization() {
        return Optional.ofNullable(this.schemaAuthorization);
    }

    /**
     * The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    /**
     * The username of the Synapse account to connect to. Only used when connection with AD user/pass
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return The username of the Synapse account to connect to. Only used when connection with AD user/pass
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private SynapseCredentialArgs() {}

    private SynapseCredentialArgs(SynapseCredentialArgs $) {
        this.adapterType = $.adapterType;
        this.authentication = $.authentication;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.password = $.password;
        this.projectId = $.projectId;
        this.schema = $.schema;
        this.schemaAuthorization = $.schemaAuthorization;
        this.tenantId = $.tenantId;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SynapseCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SynapseCredentialArgs $;

        public Builder() {
            $ = new SynapseCredentialArgs();
        }

        public Builder(SynapseCredentialArgs defaults) {
            $ = new SynapseCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adapterType The type of the adapter (synapse)
         * 
         * @return builder
         * 
         */
        public Builder adapterType(Output<String> adapterType) {
            $.adapterType = adapterType;
            return this;
        }

        /**
         * @param adapterType The type of the adapter (synapse)
         * 
         * @return builder
         * 
         */
        public Builder adapterType(String adapterType) {
            return adapterType(Output.of(adapterType));
        }

        /**
         * @param authentication Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)
         * 
         * @return builder
         * 
         */
        public Builder authentication(Output<String> authentication) {
            $.authentication = authentication;
            return this;
        }

        /**
         * @param authentication Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)
         * 
         * @return builder
         * 
         */
        public Builder authentication(String authentication) {
            return authentication(Output.of(authentication));
        }

        /**
         * @param clientId The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param password The password for the account to connect to. Only used when connection with AD user/pass
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password for the account to connect to. Only used when connection with AD user/pass
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param projectId Project ID to create the Synapse credential in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID to create the Synapse credential in
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param schema The schema where to create the dbt models
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema where to create the dbt models
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param schemaAuthorization Optionally set this to the principal who should own the schemas created by dbt
         * 
         * @return builder
         * 
         */
        public Builder schemaAuthorization(@Nullable Output<String> schemaAuthorization) {
            $.schemaAuthorization = schemaAuthorization;
            return this;
        }

        /**
         * @param schemaAuthorization Optionally set this to the principal who should own the schemas created by dbt
         * 
         * @return builder
         * 
         */
        public Builder schemaAuthorization(String schemaAuthorization) {
            return schemaAuthorization(Output.of(schemaAuthorization));
        }

        /**
         * @param tenantId The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        /**
         * @param user The username of the Synapse account to connect to. Only used when connection with AD user/pass
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user The username of the Synapse account to connect to. Only used when connection with AD user/pass
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public SynapseCredentialArgs build() {
            if ($.adapterType == null) {
                throw new MissingRequiredPropertyException("SynapseCredentialArgs", "adapterType");
            }
            if ($.authentication == null) {
                throw new MissingRequiredPropertyException("SynapseCredentialArgs", "authentication");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("SynapseCredentialArgs", "projectId");
            }
            if ($.schema == null) {
                throw new MissingRequiredPropertyException("SynapseCredentialArgs", "schema");
            }
            return $;
        }
    }

}

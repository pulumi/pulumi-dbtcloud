// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dbtcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SnowflakeSemanticLayerCredentialCredential {
    /**
     * @return The type of Snowflake credential (&#39;password&#39; or &#39;keypair&#39;)
     * 
     */
    private String authType;
    /**
     * @return The internal credential ID
     * 
     */
    private @Nullable Integer credentialId;
    /**
     * @return The catalog to connect use
     * 
     */
    private @Nullable String database;
    /**
     * @return The ID of this resource. Contains the project ID and the credential ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return Whether the Snowflake credential is active
     * 
     */
    private @Nullable Boolean isActive;
    /**
     * @return Number of threads to use
     * 
     */
    private Integer numThreads;
    /**
     * @return The password for the Snowflake account
     * 
     */
    private @Nullable String password;
    /**
     * @return The private key for the Snowflake account
     * 
     */
    private @Nullable String privateKey;
    /**
     * @return The passphrase for the private key
     * 
     */
    private @Nullable String privateKeyPassphrase;
    /**
     * @return Project ID to create the Snowflake credential in
     * 
     */
    private Integer projectId;
    /**
     * @return The role to assume
     * 
     */
    private @Nullable String role;
    /**
     * @return The schema where to create models. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.
     * 
     */
    private @Nullable String schema;
    /**
     * @return This field indicates that the credential is used as part of the Semantic Layer configuration. It is used to create a Snowflake credential for the Semantic Layer.
     * 
     */
    private @Nullable Boolean semanticLayerCredential;
    /**
     * @return The username for the Snowflake account. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.
     * 
     */
    private @Nullable String user;
    /**
     * @return The warehouse to use
     * 
     */
    private @Nullable String warehouse;

    private SnowflakeSemanticLayerCredentialCredential() {}
    /**
     * @return The type of Snowflake credential (&#39;password&#39; or &#39;keypair&#39;)
     * 
     */
    public String authType() {
        return this.authType;
    }
    /**
     * @return The internal credential ID
     * 
     */
    public Optional<Integer> credentialId() {
        return Optional.ofNullable(this.credentialId);
    }
    /**
     * @return The catalog to connect use
     * 
     */
    public Optional<String> database() {
        return Optional.ofNullable(this.database);
    }
    /**
     * @return The ID of this resource. Contains the project ID and the credential ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Whether the Snowflake credential is active
     * 
     */
    public Optional<Boolean> isActive() {
        return Optional.ofNullable(this.isActive);
    }
    /**
     * @return Number of threads to use
     * 
     */
    public Integer numThreads() {
        return this.numThreads;
    }
    /**
     * @return The password for the Snowflake account
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return The private key for the Snowflake account
     * 
     */
    public Optional<String> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }
    /**
     * @return The passphrase for the private key
     * 
     */
    public Optional<String> privateKeyPassphrase() {
        return Optional.ofNullable(this.privateKeyPassphrase);
    }
    /**
     * @return Project ID to create the Snowflake credential in
     * 
     */
    public Integer projectId() {
        return this.projectId;
    }
    /**
     * @return The role to assume
     * 
     */
    public Optional<String> role() {
        return Optional.ofNullable(this.role);
    }
    /**
     * @return The schema where to create models. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.
     * 
     */
    public Optional<String> schema() {
        return Optional.ofNullable(this.schema);
    }
    /**
     * @return This field indicates that the credential is used as part of the Semantic Layer configuration. It is used to create a Snowflake credential for the Semantic Layer.
     * 
     */
    public Optional<Boolean> semanticLayerCredential() {
        return Optional.ofNullable(this.semanticLayerCredential);
    }
    /**
     * @return The username for the Snowflake account. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.
     * 
     */
    public Optional<String> user() {
        return Optional.ofNullable(this.user);
    }
    /**
     * @return The warehouse to use
     * 
     */
    public Optional<String> warehouse() {
        return Optional.ofNullable(this.warehouse);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SnowflakeSemanticLayerCredentialCredential defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authType;
        private @Nullable Integer credentialId;
        private @Nullable String database;
        private @Nullable String id;
        private @Nullable Boolean isActive;
        private Integer numThreads;
        private @Nullable String password;
        private @Nullable String privateKey;
        private @Nullable String privateKeyPassphrase;
        private Integer projectId;
        private @Nullable String role;
        private @Nullable String schema;
        private @Nullable Boolean semanticLayerCredential;
        private @Nullable String user;
        private @Nullable String warehouse;
        public Builder() {}
        public Builder(SnowflakeSemanticLayerCredentialCredential defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authType = defaults.authType;
    	      this.credentialId = defaults.credentialId;
    	      this.database = defaults.database;
    	      this.id = defaults.id;
    	      this.isActive = defaults.isActive;
    	      this.numThreads = defaults.numThreads;
    	      this.password = defaults.password;
    	      this.privateKey = defaults.privateKey;
    	      this.privateKeyPassphrase = defaults.privateKeyPassphrase;
    	      this.projectId = defaults.projectId;
    	      this.role = defaults.role;
    	      this.schema = defaults.schema;
    	      this.semanticLayerCredential = defaults.semanticLayerCredential;
    	      this.user = defaults.user;
    	      this.warehouse = defaults.warehouse;
        }

        @CustomType.Setter
        public Builder authType(String authType) {
            if (authType == null) {
              throw new MissingRequiredPropertyException("SnowflakeSemanticLayerCredentialCredential", "authType");
            }
            this.authType = authType;
            return this;
        }
        @CustomType.Setter
        public Builder credentialId(@Nullable Integer credentialId) {

            this.credentialId = credentialId;
            return this;
        }
        @CustomType.Setter
        public Builder database(@Nullable String database) {

            this.database = database;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isActive(@Nullable Boolean isActive) {

            this.isActive = isActive;
            return this;
        }
        @CustomType.Setter
        public Builder numThreads(Integer numThreads) {
            if (numThreads == null) {
              throw new MissingRequiredPropertyException("SnowflakeSemanticLayerCredentialCredential", "numThreads");
            }
            this.numThreads = numThreads;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder privateKey(@Nullable String privateKey) {

            this.privateKey = privateKey;
            return this;
        }
        @CustomType.Setter
        public Builder privateKeyPassphrase(@Nullable String privateKeyPassphrase) {

            this.privateKeyPassphrase = privateKeyPassphrase;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(Integer projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("SnowflakeSemanticLayerCredentialCredential", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder role(@Nullable String role) {

            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder schema(@Nullable String schema) {

            this.schema = schema;
            return this;
        }
        @CustomType.Setter
        public Builder semanticLayerCredential(@Nullable Boolean semanticLayerCredential) {

            this.semanticLayerCredential = semanticLayerCredential;
            return this;
        }
        @CustomType.Setter
        public Builder user(@Nullable String user) {

            this.user = user;
            return this;
        }
        @CustomType.Setter
        public Builder warehouse(@Nullable String warehouse) {

            this.warehouse = warehouse;
            return this;
        }
        public SnowflakeSemanticLayerCredentialCredential build() {
            final var _resultValue = new SnowflakeSemanticLayerCredentialCredential();
            _resultValue.authType = authType;
            _resultValue.credentialId = credentialId;
            _resultValue.database = database;
            _resultValue.id = id;
            _resultValue.isActive = isActive;
            _resultValue.numThreads = numThreads;
            _resultValue.password = password;
            _resultValue.privateKey = privateKey;
            _resultValue.privateKeyPassphrase = privateKeyPassphrase;
            _resultValue.projectId = projectId;
            _resultValue.role = role;
            _resultValue.schema = schema;
            _resultValue.semanticLayerCredential = semanticLayerCredential;
            _resultValue.user = user;
            _resultValue.warehouse = warehouse;
            return _resultValue;
        }
    }
}

# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GroupGroupPermissionArgs',
    'GroupPartialPermissionsGroupPermissionArgs',
    'JobJobCompletionTriggerConditionArgs',
    'ServiceTokenServiceTokenPermissionArgs',
]

@pulumi.input_type
class GroupGroupPermissionArgs:
    def __init__(__self__, *,
                 all_projects: pulumi.Input[bool],
                 permission_set: pulumi.Input[str],
                 project_id: Optional[pulumi.Input[int]] = None,
                 writable_environment_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] all_projects: Whether access should be provided for all projects or not.
        :param pulumi.Input[str] permission_set: Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
        :param pulumi.Input[int] project_id: Project ID to apply this permission to for this group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] writable_environment_categories: What types of environments to apply Write permissions to.
               Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
               The values allowed are `all`, `development`, `staging`, `production` and `other`.
               Not setting a value is the same as selecting `all`.
               Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
        """
        pulumi.set(__self__, "all_projects", all_projects)
        pulumi.set(__self__, "permission_set", permission_set)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if writable_environment_categories is not None:
            pulumi.set(__self__, "writable_environment_categories", writable_environment_categories)

    @property
    @pulumi.getter(name="allProjects")
    def all_projects(self) -> pulumi.Input[bool]:
        """
        Whether access should be provided for all projects or not.
        """
        return pulumi.get(self, "all_projects")

    @all_projects.setter
    def all_projects(self, value: pulumi.Input[bool]):
        pulumi.set(self, "all_projects", value)

    @property
    @pulumi.getter(name="permissionSet")
    def permission_set(self) -> pulumi.Input[str]:
        """
        Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
        """
        return pulumi.get(self, "permission_set")

    @permission_set.setter
    def permission_set(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission_set", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID to apply this permission to for this group.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="writableEnvironmentCategories")
    def writable_environment_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        What types of environments to apply Write permissions to.
        Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
        The values allowed are `all`, `development`, `staging`, `production` and `other`.
        Not setting a value is the same as selecting `all`.
        Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
        """
        return pulumi.get(self, "writable_environment_categories")

    @writable_environment_categories.setter
    def writable_environment_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writable_environment_categories", value)


@pulumi.input_type
class GroupPartialPermissionsGroupPermissionArgs:
    def __init__(__self__, *,
                 all_projects: pulumi.Input[bool],
                 permission_set: pulumi.Input[str],
                 project_id: Optional[pulumi.Input[int]] = None,
                 writable_environment_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] all_projects: Whether access should be provided for all projects or not.
        :param pulumi.Input[str] permission_set: Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
        :param pulumi.Input[int] project_id: Project ID to apply this permission to for this group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] writable_environment_categories: What types of environments to apply Write permissions to.
               Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
               The values allowed are `all`, `development`, `staging`, `production` and `other`.
               Not setting a value is the same as selecting `all`.
               Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
        """
        pulumi.set(__self__, "all_projects", all_projects)
        pulumi.set(__self__, "permission_set", permission_set)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if writable_environment_categories is not None:
            pulumi.set(__self__, "writable_environment_categories", writable_environment_categories)

    @property
    @pulumi.getter(name="allProjects")
    def all_projects(self) -> pulumi.Input[bool]:
        """
        Whether access should be provided for all projects or not.
        """
        return pulumi.get(self, "all_projects")

    @all_projects.setter
    def all_projects(self, value: pulumi.Input[bool]):
        pulumi.set(self, "all_projects", value)

    @property
    @pulumi.getter(name="permissionSet")
    def permission_set(self) -> pulumi.Input[str]:
        """
        Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
        """
        return pulumi.get(self, "permission_set")

    @permission_set.setter
    def permission_set(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission_set", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID to apply this permission to for this group.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="writableEnvironmentCategories")
    def writable_environment_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        What types of environments to apply Write permissions to.
        Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
        The values allowed are `all`, `development`, `staging`, `production` and `other`.
        Not setting a value is the same as selecting `all`.
        Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
        """
        return pulumi.get(self, "writable_environment_categories")

    @writable_environment_categories.setter
    def writable_environment_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writable_environment_categories", value)


@pulumi.input_type
class JobJobCompletionTriggerConditionArgs:
    def __init__(__self__, *,
                 job_id: pulumi.Input[int],
                 project_id: pulumi.Input[int],
                 statuses: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[int] job_id: The ID of the job that would trigger this job after completion.
        :param pulumi.Input[int] project_id: The ID of the project where the trigger job is running in.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] statuses: List of statuses to trigger the job on. Possible values are `success`, `error` and `canceled`.
        """
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> pulumi.Input[int]:
        """
        The ID of the job that would trigger this job after completion.
        """
        return pulumi.get(self, "job_id")

    @job_id.setter
    def job_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "job_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[int]:
        """
        The ID of the project where the trigger job is running in.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def statuses(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of statuses to trigger the job on. Possible values are `success`, `error` and `canceled`.
        """
        return pulumi.get(self, "statuses")

    @statuses.setter
    def statuses(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "statuses", value)


@pulumi.input_type
class ServiceTokenServiceTokenPermissionArgs:
    def __init__(__self__, *,
                 all_projects: pulumi.Input[bool],
                 permission_set: pulumi.Input[str],
                 project_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] all_projects: Whether or not to apply this permission to all projects for this service token
        :param pulumi.Input[str] permission_set: Set of permissions to apply
        :param pulumi.Input[int] project_id: Project ID to apply this permission to for this service token
        """
        pulumi.set(__self__, "all_projects", all_projects)
        pulumi.set(__self__, "permission_set", permission_set)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="allProjects")
    def all_projects(self) -> pulumi.Input[bool]:
        """
        Whether or not to apply this permission to all projects for this service token
        """
        return pulumi.get(self, "all_projects")

    @all_projects.setter
    def all_projects(self, value: pulumi.Input[bool]):
        pulumi.set(self, "all_projects", value)

    @property
    @pulumi.getter(name="permissionSet")
    def permission_set(self) -> pulumi.Input[str]:
        """
        Set of permissions to apply
        """
        return pulumi.get(self, "permission_set")

    @permission_set.setter
    def permission_set(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission_set", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID to apply this permission to for this service token
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)



# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GlobalConnectionBigqueryArgs',
    'GlobalConnectionSnowflakeArgs',
    'GroupGroupPermissionArgs',
    'GroupPartialPermissionsGroupPermissionArgs',
    'JobJobCompletionTriggerConditionArgs',
    'ServiceTokenServiceTokenPermissionArgs',
    'GetServiceTokenServiceTokenPermissionArgs',
]

@pulumi.input_type
class GlobalConnectionBigqueryArgs:
    def __init__(__self__, *,
                 auth_provider_x509_cert_url: pulumi.Input[str],
                 auth_uri: pulumi.Input[str],
                 client_email: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_x509_cert_url: pulumi.Input[str],
                 gcp_project_id: pulumi.Input[str],
                 private_key: pulumi.Input[str],
                 private_key_id: pulumi.Input[str],
                 token_uri: pulumi.Input[str],
                 application_id: Optional[pulumi.Input[str]] = None,
                 application_secret: Optional[pulumi.Input[str]] = None,
                 dataproc_cluster_name: Optional[pulumi.Input[str]] = None,
                 dataproc_region: Optional[pulumi.Input[str]] = None,
                 execution_project: Optional[pulumi.Input[str]] = None,
                 gcs_bucket: Optional[pulumi.Input[str]] = None,
                 impersonate_service_account: Optional[pulumi.Input[str]] = None,
                 job_creation_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 job_retry_deadline_seconds: Optional[pulumi.Input[int]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maximum_bytes_billed: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] auth_provider_x509_cert_url: Auth Provider X509 Cert URL for the Service Account
        :param pulumi.Input[str] auth_uri: Auth URI for the Service Account
        :param pulumi.Input[str] client_email: Service Account email
        :param pulumi.Input[str] client_id: Client ID of the Service Account
        :param pulumi.Input[str] client_x509_cert_url: Client X509 Cert URL for the Service Account
        :param pulumi.Input[str] gcp_project_id: The GCP project ID to use for the connection
        :param pulumi.Input[str] private_key: Private Key for the Service Account
        :param pulumi.Input[str] private_key_id: Private Key ID for the Service Account
        :param pulumi.Input[str] token_uri: Token URI for the Service Account
        :param pulumi.Input[str] application_id: OAuth Client ID
        :param pulumi.Input[str] application_secret: OAuth Client Secret
        :param pulumi.Input[str] dataproc_cluster_name: Dataproc cluster name for PySpark workloads
        :param pulumi.Input[str] dataproc_region: Google Cloud region for PySpark workloads on Dataproc
        :param pulumi.Input[str] execution_project: Project to bill for query execution
        :param pulumi.Input[str] gcs_bucket: URI for a Google Cloud Storage bucket to host Python code executed via Datapro
        :param pulumi.Input[str] impersonate_service_account: Service Account to impersonate when running queries
        :param pulumi.Input[int] job_creation_timeout_seconds: Maximum timeout for the job creation step
        :param pulumi.Input[int] job_retry_deadline_seconds: Total number of seconds to wait while retrying the same query
        :param pulumi.Input[str] location: Location to create new Datasets in
        :param pulumi.Input[int] maximum_bytes_billed: Max number of bytes that can be billed for a given BigQuery query
        :param pulumi.Input[str] priority: The priority with which to execute BigQuery queries (batch or interactive)
        :param pulumi.Input[int] retries: Number of retries for queries
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: OAuth scopes for the BigQuery connection
        :param pulumi.Input[int] timeout_seconds: Timeout in seconds for queries
        """
        pulumi.set(__self__, "auth_provider_x509_cert_url", auth_provider_x509_cert_url)
        pulumi.set(__self__, "auth_uri", auth_uri)
        pulumi.set(__self__, "client_email", client_email)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_x509_cert_url", client_x509_cert_url)
        pulumi.set(__self__, "gcp_project_id", gcp_project_id)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "private_key_id", private_key_id)
        pulumi.set(__self__, "token_uri", token_uri)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if application_secret is not None:
            pulumi.set(__self__, "application_secret", application_secret)
        if dataproc_cluster_name is not None:
            pulumi.set(__self__, "dataproc_cluster_name", dataproc_cluster_name)
        if dataproc_region is not None:
            pulumi.set(__self__, "dataproc_region", dataproc_region)
        if execution_project is not None:
            pulumi.set(__self__, "execution_project", execution_project)
        if gcs_bucket is not None:
            pulumi.set(__self__, "gcs_bucket", gcs_bucket)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if job_creation_timeout_seconds is not None:
            pulumi.set(__self__, "job_creation_timeout_seconds", job_creation_timeout_seconds)
        if job_retry_deadline_seconds is not None:
            pulumi.set(__self__, "job_retry_deadline_seconds", job_retry_deadline_seconds)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maximum_bytes_billed is not None:
            pulumi.set(__self__, "maximum_bytes_billed", maximum_bytes_billed)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="authProviderX509CertUrl")
    def auth_provider_x509_cert_url(self) -> pulumi.Input[str]:
        """
        Auth Provider X509 Cert URL for the Service Account
        """
        return pulumi.get(self, "auth_provider_x509_cert_url")

    @auth_provider_x509_cert_url.setter
    def auth_provider_x509_cert_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_provider_x509_cert_url", value)

    @property
    @pulumi.getter(name="authUri")
    def auth_uri(self) -> pulumi.Input[str]:
        """
        Auth URI for the Service Account
        """
        return pulumi.get(self, "auth_uri")

    @auth_uri.setter
    def auth_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_uri", value)

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> pulumi.Input[str]:
        """
        Service Account email
        """
        return pulumi.get(self, "client_email")

    @client_email.setter
    def client_email(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_email", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        Client ID of the Service Account
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientX509CertUrl")
    def client_x509_cert_url(self) -> pulumi.Input[str]:
        """
        Client X509 Cert URL for the Service Account
        """
        return pulumi.get(self, "client_x509_cert_url")

    @client_x509_cert_url.setter
    def client_x509_cert_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_x509_cert_url", value)

    @property
    @pulumi.getter(name="gcpProjectId")
    def gcp_project_id(self) -> pulumi.Input[str]:
        """
        The GCP project ID to use for the connection
        """
        return pulumi.get(self, "gcp_project_id")

    @gcp_project_id.setter
    def gcp_project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "gcp_project_id", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        """
        Private Key for the Service Account
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="privateKeyId")
    def private_key_id(self) -> pulumi.Input[str]:
        """
        Private Key ID for the Service Account
        """
        return pulumi.get(self, "private_key_id")

    @private_key_id.setter
    def private_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key_id", value)

    @property
    @pulumi.getter(name="tokenUri")
    def token_uri(self) -> pulumi.Input[str]:
        """
        Token URI for the Service Account
        """
        return pulumi.get(self, "token_uri")

    @token_uri.setter
    def token_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_uri", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        OAuth Client ID
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="applicationSecret")
    def application_secret(self) -> Optional[pulumi.Input[str]]:
        """
        OAuth Client Secret
        """
        return pulumi.get(self, "application_secret")

    @application_secret.setter
    def application_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_secret", value)

    @property
    @pulumi.getter(name="dataprocClusterName")
    def dataproc_cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        Dataproc cluster name for PySpark workloads
        """
        return pulumi.get(self, "dataproc_cluster_name")

    @dataproc_cluster_name.setter
    def dataproc_cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataproc_cluster_name", value)

    @property
    @pulumi.getter(name="dataprocRegion")
    def dataproc_region(self) -> Optional[pulumi.Input[str]]:
        """
        Google Cloud region for PySpark workloads on Dataproc
        """
        return pulumi.get(self, "dataproc_region")

    @dataproc_region.setter
    def dataproc_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataproc_region", value)

    @property
    @pulumi.getter(name="executionProject")
    def execution_project(self) -> Optional[pulumi.Input[str]]:
        """
        Project to bill for query execution
        """
        return pulumi.get(self, "execution_project")

    @execution_project.setter
    def execution_project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "execution_project", value)

    @property
    @pulumi.getter(name="gcsBucket")
    def gcs_bucket(self) -> Optional[pulumi.Input[str]]:
        """
        URI for a Google Cloud Storage bucket to host Python code executed via Datapro
        """
        return pulumi.get(self, "gcs_bucket")

    @gcs_bucket.setter
    def gcs_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcs_bucket", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[str]]:
        """
        Service Account to impersonate when running queries
        """
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter(name="jobCreationTimeoutSeconds")
    def job_creation_timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum timeout for the job creation step
        """
        return pulumi.get(self, "job_creation_timeout_seconds")

    @job_creation_timeout_seconds.setter
    def job_creation_timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "job_creation_timeout_seconds", value)

    @property
    @pulumi.getter(name="jobRetryDeadlineSeconds")
    def job_retry_deadline_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of seconds to wait while retrying the same query
        """
        return pulumi.get(self, "job_retry_deadline_seconds")

    @job_retry_deadline_seconds.setter
    def job_retry_deadline_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "job_retry_deadline_seconds", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Location to create new Datasets in
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maximumBytesBilled")
    def maximum_bytes_billed(self) -> Optional[pulumi.Input[int]]:
        """
        Max number of bytes that can be billed for a given BigQuery query
        """
        return pulumi.get(self, "maximum_bytes_billed")

    @maximum_bytes_billed.setter
    def maximum_bytes_billed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_bytes_billed", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        The priority with which to execute BigQuery queries (batch or interactive)
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[int]]:
        """
        Number of retries for queries
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        OAuth scopes for the BigQuery connection
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout in seconds for queries
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class GlobalConnectionSnowflakeArgs:
    def __init__(__self__, *,
                 account: pulumi.Input[str],
                 database: pulumi.Input[str],
                 warehouse: pulumi.Input[str],
                 allow_sso: Optional[pulumi.Input[bool]] = None,
                 client_session_keep_alive: Optional[pulumi.Input[bool]] = None,
                 oauth_client_id: Optional[pulumi.Input[str]] = None,
                 oauth_client_secret: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] account: The Snowflake account name
        :param pulumi.Input[str] database: The default database for the connection
        :param pulumi.Input[str] warehouse: The default Snowflake Warehouse to use for the connection
        :param pulumi.Input[bool] allow_sso: Whether to allow Snowflake OAuth for the connection. If true, the `oauth_client_id` and `oauth_client_secret` fields must be set
        :param pulumi.Input[bool] client_session_keep_alive: If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (> 4 hours)
        :param pulumi.Input[str] oauth_client_id: OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake
        :param pulumi.Input[str] oauth_client_secret: OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake
        :param pulumi.Input[str] role: The Snowflake role to use when running queries on the connection
        """
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "warehouse", warehouse)
        if allow_sso is not None:
            pulumi.set(__self__, "allow_sso", allow_sso)
        if client_session_keep_alive is not None:
            pulumi.set(__self__, "client_session_keep_alive", client_session_keep_alive)
        if oauth_client_id is not None:
            pulumi.set(__self__, "oauth_client_id", oauth_client_id)
        if oauth_client_secret is not None:
            pulumi.set(__self__, "oauth_client_secret", oauth_client_secret)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def account(self) -> pulumi.Input[str]:
        """
        The Snowflake account name
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: pulumi.Input[str]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        The default database for the connection
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def warehouse(self) -> pulumi.Input[str]:
        """
        The default Snowflake Warehouse to use for the connection
        """
        return pulumi.get(self, "warehouse")

    @warehouse.setter
    def warehouse(self, value: pulumi.Input[str]):
        pulumi.set(self, "warehouse", value)

    @property
    @pulumi.getter(name="allowSso")
    def allow_sso(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to allow Snowflake OAuth for the connection. If true, the `oauth_client_id` and `oauth_client_secret` fields must be set
        """
        return pulumi.get(self, "allow_sso")

    @allow_sso.setter
    def allow_sso(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_sso", value)

    @property
    @pulumi.getter(name="clientSessionKeepAlive")
    def client_session_keep_alive(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (> 4 hours)
        """
        return pulumi.get(self, "client_session_keep_alive")

    @client_session_keep_alive.setter
    def client_session_keep_alive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "client_session_keep_alive", value)

    @property
    @pulumi.getter(name="oauthClientId")
    def oauth_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake
        """
        return pulumi.get(self, "oauth_client_id")

    @oauth_client_id.setter
    def oauth_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_client_id", value)

    @property
    @pulumi.getter(name="oauthClientSecret")
    def oauth_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake
        """
        return pulumi.get(self, "oauth_client_secret")

    @oauth_client_secret.setter
    def oauth_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_client_secret", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        The Snowflake role to use when running queries on the connection
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class GroupGroupPermissionArgs:
    def __init__(__self__, *,
                 all_projects: pulumi.Input[bool],
                 permission_set: pulumi.Input[str],
                 project_id: Optional[pulumi.Input[int]] = None,
                 writable_environment_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] all_projects: Whether access should be provided for all projects or not.
        :param pulumi.Input[str] permission_set: Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
        :param pulumi.Input[int] project_id: Project ID to apply this permission to for this group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] writable_environment_categories: What types of environments to apply Write permissions to.
               Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
               The values allowed are `all`, `development`, `staging`, `production` and `other`.
               Not setting a value is the same as selecting `all`.
               Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
        """
        pulumi.set(__self__, "all_projects", all_projects)
        pulumi.set(__self__, "permission_set", permission_set)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if writable_environment_categories is not None:
            pulumi.set(__self__, "writable_environment_categories", writable_environment_categories)

    @property
    @pulumi.getter(name="allProjects")
    def all_projects(self) -> pulumi.Input[bool]:
        """
        Whether access should be provided for all projects or not.
        """
        return pulumi.get(self, "all_projects")

    @all_projects.setter
    def all_projects(self, value: pulumi.Input[bool]):
        pulumi.set(self, "all_projects", value)

    @property
    @pulumi.getter(name="permissionSet")
    def permission_set(self) -> pulumi.Input[str]:
        """
        Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
        """
        return pulumi.get(self, "permission_set")

    @permission_set.setter
    def permission_set(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission_set", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID to apply this permission to for this group.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="writableEnvironmentCategories")
    def writable_environment_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        What types of environments to apply Write permissions to.
        Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
        The values allowed are `all`, `development`, `staging`, `production` and `other`.
        Not setting a value is the same as selecting `all`.
        Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
        """
        return pulumi.get(self, "writable_environment_categories")

    @writable_environment_categories.setter
    def writable_environment_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writable_environment_categories", value)


@pulumi.input_type
class GroupPartialPermissionsGroupPermissionArgs:
    def __init__(__self__, *,
                 all_projects: pulumi.Input[bool],
                 permission_set: pulumi.Input[str],
                 project_id: Optional[pulumi.Input[int]] = None,
                 writable_environment_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] all_projects: Whether access should be provided for all projects or not.
        :param pulumi.Input[str] permission_set: Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
        :param pulumi.Input[int] project_id: Project ID to apply this permission to for this group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] writable_environment_categories: What types of environments to apply Write permissions to.
               Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
               The values allowed are `all`, `development`, `staging`, `production` and `other`.
               Not setting a value is the same as selecting `all`.
               Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
        """
        pulumi.set(__self__, "all_projects", all_projects)
        pulumi.set(__self__, "permission_set", permission_set)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if writable_environment_categories is not None:
            pulumi.set(__self__, "writable_environment_categories", writable_environment_categories)

    @property
    @pulumi.getter(name="allProjects")
    def all_projects(self) -> pulumi.Input[bool]:
        """
        Whether access should be provided for all projects or not.
        """
        return pulumi.get(self, "all_projects")

    @all_projects.setter
    def all_projects(self, value: pulumi.Input[bool]):
        pulumi.set(self, "all_projects", value)

    @property
    @pulumi.getter(name="permissionSet")
    def permission_set(self) -> pulumi.Input[str]:
        """
        Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
        """
        return pulumi.get(self, "permission_set")

    @permission_set.setter
    def permission_set(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission_set", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID to apply this permission to for this group.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="writableEnvironmentCategories")
    def writable_environment_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        What types of environments to apply Write permissions to.
        Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
        The values allowed are `all`, `development`, `staging`, `production` and `other`.
        Not setting a value is the same as selecting `all`.
        Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
        """
        return pulumi.get(self, "writable_environment_categories")

    @writable_environment_categories.setter
    def writable_environment_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writable_environment_categories", value)


@pulumi.input_type
class JobJobCompletionTriggerConditionArgs:
    def __init__(__self__, *,
                 job_id: pulumi.Input[int],
                 project_id: pulumi.Input[int],
                 statuses: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[int] job_id: The ID of the job that would trigger this job after completion.
        :param pulumi.Input[int] project_id: The ID of the project where the trigger job is running in.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] statuses: List of statuses to trigger the job on. Possible values are `success`, `error` and `canceled`.
        """
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> pulumi.Input[int]:
        """
        The ID of the job that would trigger this job after completion.
        """
        return pulumi.get(self, "job_id")

    @job_id.setter
    def job_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "job_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[int]:
        """
        The ID of the project where the trigger job is running in.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def statuses(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of statuses to trigger the job on. Possible values are `success`, `error` and `canceled`.
        """
        return pulumi.get(self, "statuses")

    @statuses.setter
    def statuses(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "statuses", value)


@pulumi.input_type
class ServiceTokenServiceTokenPermissionArgs:
    def __init__(__self__, *,
                 all_projects: pulumi.Input[bool],
                 permission_set: pulumi.Input[str],
                 project_id: Optional[pulumi.Input[int]] = None,
                 writable_environment_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] all_projects: Whether or not to apply this permission to all projects for this service token
        :param pulumi.Input[str] permission_set: Set of permissions to apply
        :param pulumi.Input[int] project_id: Project ID to apply this permission to for this service token
        :param pulumi.Input[Sequence[pulumi.Input[str]]] writable_environment_categories: What types of environments to apply Write permissions to.
               Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
               The values allowed are `all`, `development`, `staging`, `production` and `other`.
               Not setting a value is the same as selecting `all`.
               Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
        """
        pulumi.set(__self__, "all_projects", all_projects)
        pulumi.set(__self__, "permission_set", permission_set)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if writable_environment_categories is not None:
            pulumi.set(__self__, "writable_environment_categories", writable_environment_categories)

    @property
    @pulumi.getter(name="allProjects")
    def all_projects(self) -> pulumi.Input[bool]:
        """
        Whether or not to apply this permission to all projects for this service token
        """
        return pulumi.get(self, "all_projects")

    @all_projects.setter
    def all_projects(self, value: pulumi.Input[bool]):
        pulumi.set(self, "all_projects", value)

    @property
    @pulumi.getter(name="permissionSet")
    def permission_set(self) -> pulumi.Input[str]:
        """
        Set of permissions to apply
        """
        return pulumi.get(self, "permission_set")

    @permission_set.setter
    def permission_set(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission_set", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID to apply this permission to for this service token
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="writableEnvironmentCategories")
    def writable_environment_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        What types of environments to apply Write permissions to.
        Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
        The values allowed are `all`, `development`, `staging`, `production` and `other`.
        Not setting a value is the same as selecting `all`.
        Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
        """
        return pulumi.get(self, "writable_environment_categories")

    @writable_environment_categories.setter
    def writable_environment_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writable_environment_categories", value)


@pulumi.input_type
class GetServiceTokenServiceTokenPermissionArgs:
    def __init__(__self__, *,
                 all_projects: bool,
                 permission_set: str,
                 project_id: int,
                 writable_environment_categories: Sequence[str]):
        """
        :param bool all_projects: Whether or not to apply this permission to all projects for this service token
        :param str permission_set: Set of permissions to apply
        :param int project_id: Project ID to apply this permission to for this service token
        :param Sequence[str] writable_environment_categories: What types of environments to apply Write permissions to.
               Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
               The values allowed are `all`, `development`, `staging`, `production` and `other`.
               Not setting a value is the same as selecting `all`.
               Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
        """
        pulumi.set(__self__, "all_projects", all_projects)
        pulumi.set(__self__, "permission_set", permission_set)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "writable_environment_categories", writable_environment_categories)

    @property
    @pulumi.getter(name="allProjects")
    def all_projects(self) -> bool:
        """
        Whether or not to apply this permission to all projects for this service token
        """
        return pulumi.get(self, "all_projects")

    @all_projects.setter
    def all_projects(self, value: bool):
        pulumi.set(self, "all_projects", value)

    @property
    @pulumi.getter(name="permissionSet")
    def permission_set(self) -> str:
        """
        Set of permissions to apply
        """
        return pulumi.get(self, "permission_set")

    @permission_set.setter
    def permission_set(self, value: str):
        pulumi.set(self, "permission_set", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project ID to apply this permission to for this service token
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: int):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="writableEnvironmentCategories")
    def writable_environment_categories(self) -> Sequence[str]:
        """
        What types of environments to apply Write permissions to.
        Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
        The values allowed are `all`, `development`, `staging`, `production` and `other`.
        Not setting a value is the same as selecting `all`.
        Not all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.
        """
        return pulumi.get(self, "writable_environment_categories")

    @writable_environment_categories.setter
    def writable_environment_categories(self, value: Sequence[str]):
        pulumi.set(self, "writable_environment_categories", value)



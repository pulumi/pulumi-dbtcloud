# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDatabricksCredentialResult',
    'AwaitableGetDatabricksCredentialResult',
    'get_databricks_credential',
    'get_databricks_credential_output',
]

@pulumi.output_type
class GetDatabricksCredentialResult:
    """
    A collection of values returned by getDatabricksCredential.
    """
    def __init__(__self__, adapter_type=None, catalog=None, credential_id=None, id=None, num_threads=None, project_id=None, schema=None, target_name=None):
        if adapter_type and not isinstance(adapter_type, str):
            raise TypeError("Expected argument 'adapter_type' to be a str")
        pulumi.set(__self__, "adapter_type", adapter_type)
        if catalog and not isinstance(catalog, str):
            raise TypeError("Expected argument 'catalog' to be a str")
        pulumi.set(__self__, "catalog", catalog)
        if credential_id and not isinstance(credential_id, int):
            raise TypeError("Expected argument 'credential_id' to be a int")
        pulumi.set(__self__, "credential_id", credential_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if num_threads and not isinstance(num_threads, int):
            raise TypeError("Expected argument 'num_threads' to be a int")
        pulumi.set(__self__, "num_threads", num_threads)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if schema and not isinstance(schema, str):
            raise TypeError("Expected argument 'schema' to be a str")
        pulumi.set(__self__, "schema", schema)
        if target_name and not isinstance(target_name, str):
            raise TypeError("Expected argument 'target_name' to be a str")
        pulumi.set(__self__, "target_name", target_name)

    @_builtins.property
    @pulumi.getter(name="adapterType")
    def adapter_type(self) -> _builtins.str:
        """
        The type of the adapter (databricks or spark)
        """
        return pulumi.get(self, "adapter_type")

    @_builtins.property
    @pulumi.getter
    def catalog(self) -> _builtins.str:
        """
        The catalog where to create models
        """
        return pulumi.get(self, "catalog")

    @_builtins.property
    @pulumi.getter(name="credentialId")
    def credential_id(self) -> _builtins.int:
        """
        Credential ID
        """
        return pulumi.get(self, "credential_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of this resource. Contains the project ID and the credential ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="numThreads")
    def num_threads(self) -> _builtins.int:
        """
        The number of threads to use
        """
        return pulumi.get(self, "num_threads")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.int:
        """
        Project ID
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def schema(self) -> _builtins.str:
        """
        The schema where to create models
        """
        return pulumi.get(self, "schema")

    @_builtins.property
    @pulumi.getter(name="targetName")
    def target_name(self) -> _builtins.str:
        """
        Target name
        """
        return pulumi.get(self, "target_name")


class AwaitableGetDatabricksCredentialResult(GetDatabricksCredentialResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabricksCredentialResult(
            adapter_type=self.adapter_type,
            catalog=self.catalog,
            credential_id=self.credential_id,
            id=self.id,
            num_threads=self.num_threads,
            project_id=self.project_id,
            schema=self.schema,
            target_name=self.target_name)


def get_databricks_credential(credential_id: Optional[_builtins.int] = None,
                              project_id: Optional[_builtins.int] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabricksCredentialResult:
    """
    Databricks credential data source


    :param _builtins.int credential_id: Credential ID
    :param _builtins.int project_id: Project ID
    """
    __args__ = dict()
    __args__['credentialId'] = credential_id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('dbtcloud:index/getDatabricksCredential:getDatabricksCredential', __args__, opts=opts, typ=GetDatabricksCredentialResult).value

    return AwaitableGetDatabricksCredentialResult(
        adapter_type=pulumi.get(__ret__, 'adapter_type'),
        catalog=pulumi.get(__ret__, 'catalog'),
        credential_id=pulumi.get(__ret__, 'credential_id'),
        id=pulumi.get(__ret__, 'id'),
        num_threads=pulumi.get(__ret__, 'num_threads'),
        project_id=pulumi.get(__ret__, 'project_id'),
        schema=pulumi.get(__ret__, 'schema'),
        target_name=pulumi.get(__ret__, 'target_name'))
def get_databricks_credential_output(credential_id: Optional[pulumi.Input[_builtins.int]] = None,
                                     project_id: Optional[pulumi.Input[_builtins.int]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDatabricksCredentialResult]:
    """
    Databricks credential data source


    :param _builtins.int credential_id: Credential ID
    :param _builtins.int project_id: Project ID
    """
    __args__ = dict()
    __args__['credentialId'] = credential_id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('dbtcloud:index/getDatabricksCredential:getDatabricksCredential', __args__, opts=opts, typ=GetDatabricksCredentialResult)
    return __ret__.apply(lambda __response__: GetDatabricksCredentialResult(
        adapter_type=pulumi.get(__response__, 'adapter_type'),
        catalog=pulumi.get(__response__, 'catalog'),
        credential_id=pulumi.get(__response__, 'credential_id'),
        id=pulumi.get(__response__, 'id'),
        num_threads=pulumi.get(__response__, 'num_threads'),
        project_id=pulumi.get(__response__, 'project_id'),
        schema=pulumi.get(__response__, 'schema'),
        target_name=pulumi.get(__response__, 'target_name')))

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetRunsResult',
    'AwaitableGetRunsResult',
    'get_runs',
    'get_runs_output',
]

@pulumi.output_type
class GetRunsResult:
    """
    A collection of values returned by getRuns.
    """
    def __init__(__self__, filter=None, id=None, runs=None):
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if runs and not isinstance(runs, list):
            raise TypeError("Expected argument 'runs' to be a list")
        pulumi.set(__self__, "runs", runs)

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetRunsFilterResult']:
        """
        Filter to apply to the runs
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def runs(self) -> Sequence['outputs.GetRunsRunResult']:
        """
        Set of users with their internal ID end email
        """
        return pulumi.get(self, "runs")


class AwaitableGetRunsResult(GetRunsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRunsResult(
            filter=self.filter,
            id=self.id,
            runs=self.runs)


def get_runs(filter: Optional[Union['GetRunsFilterArgs', 'GetRunsFilterArgsDict']] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRunsResult:
    """
    Retrieve all runs


    :param Union['GetRunsFilterArgs', 'GetRunsFilterArgsDict'] filter: Filter to apply to the runs
    """
    __args__ = dict()
    __args__['filter'] = filter
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('dbtcloud:index/getRuns:getRuns', __args__, opts=opts, typ=GetRunsResult).value

    return AwaitableGetRunsResult(
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        runs=pulumi.get(__ret__, 'runs'))
def get_runs_output(filter: Optional[pulumi.Input[Optional[Union['GetRunsFilterArgs', 'GetRunsFilterArgsDict']]]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRunsResult]:
    """
    Retrieve all runs


    :param Union['GetRunsFilterArgs', 'GetRunsFilterArgsDict'] filter: Filter to apply to the runs
    """
    __args__ = dict()
    __args__['filter'] = filter
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('dbtcloud:index/getRuns:getRuns', __args__, opts=opts, typ=GetRunsResult)
    return __ret__.apply(lambda __response__: GetRunsResult(
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id'),
        runs=pulumi.get(__response__, 'runs')))

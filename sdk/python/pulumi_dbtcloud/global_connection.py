# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GlobalConnectionArgs', 'GlobalConnection']

@pulumi.input_type
class GlobalConnectionArgs:
    def __init__(__self__, *,
                 bigquery: Optional[pulumi.Input['GlobalConnectionBigqueryArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_link_endpoint_id: Optional[pulumi.Input[str]] = None,
                 snowflake: Optional[pulumi.Input['GlobalConnectionSnowflakeArgs']] = None):
        """
        The set of arguments for constructing a GlobalConnection resource.
        :param pulumi.Input[str] name: Connection name
        :param pulumi.Input[str] private_link_endpoint_id: Private Link Endpoint ID. This ID can be found using the `privatelink_endpoint` data source
        :param pulumi.Input['GlobalConnectionSnowflakeArgs'] snowflake: Snowflake connection configuration
        """
        if bigquery is not None:
            pulumi.set(__self__, "bigquery", bigquery)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_link_endpoint_id is not None:
            pulumi.set(__self__, "private_link_endpoint_id", private_link_endpoint_id)
        if snowflake is not None:
            pulumi.set(__self__, "snowflake", snowflake)

    @property
    @pulumi.getter
    def bigquery(self) -> Optional[pulumi.Input['GlobalConnectionBigqueryArgs']]:
        return pulumi.get(self, "bigquery")

    @bigquery.setter
    def bigquery(self, value: Optional[pulumi.Input['GlobalConnectionBigqueryArgs']]):
        pulumi.set(self, "bigquery", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Connection name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateLinkEndpointId")
    def private_link_endpoint_id(self) -> Optional[pulumi.Input[str]]:
        """
        Private Link Endpoint ID. This ID can be found using the `privatelink_endpoint` data source
        """
        return pulumi.get(self, "private_link_endpoint_id")

    @private_link_endpoint_id.setter
    def private_link_endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_link_endpoint_id", value)

    @property
    @pulumi.getter
    def snowflake(self) -> Optional[pulumi.Input['GlobalConnectionSnowflakeArgs']]:
        """
        Snowflake connection configuration
        """
        return pulumi.get(self, "snowflake")

    @snowflake.setter
    def snowflake(self, value: Optional[pulumi.Input['GlobalConnectionSnowflakeArgs']]):
        pulumi.set(self, "snowflake", value)


@pulumi.input_type
class _GlobalConnectionState:
    def __init__(__self__, *,
                 adapter_version: Optional[pulumi.Input[str]] = None,
                 bigquery: Optional[pulumi.Input['GlobalConnectionBigqueryArgs']] = None,
                 is_ssh_tunnel_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth_configuration_id: Optional[pulumi.Input[int]] = None,
                 private_link_endpoint_id: Optional[pulumi.Input[str]] = None,
                 snowflake: Optional[pulumi.Input['GlobalConnectionSnowflakeArgs']] = None):
        """
        Input properties used for looking up and filtering GlobalConnection resources.
        :param pulumi.Input[str] adapter_version: Version of the adapter
        :param pulumi.Input[bool] is_ssh_tunnel_enabled: Whether the connection can use an SSH tunnel
        :param pulumi.Input[str] name: Connection name
        :param pulumi.Input[str] private_link_endpoint_id: Private Link Endpoint ID. This ID can be found using the `privatelink_endpoint` data source
        :param pulumi.Input['GlobalConnectionSnowflakeArgs'] snowflake: Snowflake connection configuration
        """
        if adapter_version is not None:
            pulumi.set(__self__, "adapter_version", adapter_version)
        if bigquery is not None:
            pulumi.set(__self__, "bigquery", bigquery)
        if is_ssh_tunnel_enabled is not None:
            pulumi.set(__self__, "is_ssh_tunnel_enabled", is_ssh_tunnel_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_configuration_id is not None:
            pulumi.set(__self__, "oauth_configuration_id", oauth_configuration_id)
        if private_link_endpoint_id is not None:
            pulumi.set(__self__, "private_link_endpoint_id", private_link_endpoint_id)
        if snowflake is not None:
            pulumi.set(__self__, "snowflake", snowflake)

    @property
    @pulumi.getter(name="adapterVersion")
    def adapter_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the adapter
        """
        return pulumi.get(self, "adapter_version")

    @adapter_version.setter
    def adapter_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adapter_version", value)

    @property
    @pulumi.getter
    def bigquery(self) -> Optional[pulumi.Input['GlobalConnectionBigqueryArgs']]:
        return pulumi.get(self, "bigquery")

    @bigquery.setter
    def bigquery(self, value: Optional[pulumi.Input['GlobalConnectionBigqueryArgs']]):
        pulumi.set(self, "bigquery", value)

    @property
    @pulumi.getter(name="isSshTunnelEnabled")
    def is_ssh_tunnel_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the connection can use an SSH tunnel
        """
        return pulumi.get(self, "is_ssh_tunnel_enabled")

    @is_ssh_tunnel_enabled.setter
    def is_ssh_tunnel_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ssh_tunnel_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Connection name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oauthConfigurationId")
    def oauth_configuration_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "oauth_configuration_id")

    @oauth_configuration_id.setter
    def oauth_configuration_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oauth_configuration_id", value)

    @property
    @pulumi.getter(name="privateLinkEndpointId")
    def private_link_endpoint_id(self) -> Optional[pulumi.Input[str]]:
        """
        Private Link Endpoint ID. This ID can be found using the `privatelink_endpoint` data source
        """
        return pulumi.get(self, "private_link_endpoint_id")

    @private_link_endpoint_id.setter
    def private_link_endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_link_endpoint_id", value)

    @property
    @pulumi.getter
    def snowflake(self) -> Optional[pulumi.Input['GlobalConnectionSnowflakeArgs']]:
        """
        Snowflake connection configuration
        """
        return pulumi.get(self, "snowflake")

    @snowflake.setter
    def snowflake(self, value: Optional[pulumi.Input['GlobalConnectionSnowflakeArgs']]):
        pulumi.set(self, "snowflake", value)


class GlobalConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bigquery: Optional[pulumi.Input[Union['GlobalConnectionBigqueryArgs', 'GlobalConnectionBigqueryArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_link_endpoint_id: Optional[pulumi.Input[str]] = None,
                 snowflake: Optional[pulumi.Input[Union['GlobalConnectionSnowflakeArgs', 'GlobalConnectionSnowflakeArgsDict']]] = None,
                 __props__=None):
        """
        This resource can be used to create global connections as introduced in dbt Cloud in August 2024.

        Those connections are not linked to a project and can be linked to environments from different projects by using the `connection_id` field in the `Environment` resource.

        For now, only BigQuery and Snowflake connections are supported and the other Data Warehouses can continue using the existing resources `Connection` and `FabricConnection` ,
        but all Data Warehouses will soon be supported under this resource and the other ones will be deprecated in the future.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Connection name
        :param pulumi.Input[str] private_link_endpoint_id: Private Link Endpoint ID. This ID can be found using the `privatelink_endpoint` data source
        :param pulumi.Input[Union['GlobalConnectionSnowflakeArgs', 'GlobalConnectionSnowflakeArgsDict']] snowflake: Snowflake connection configuration
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[GlobalConnectionArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can be used to create global connections as introduced in dbt Cloud in August 2024.

        Those connections are not linked to a project and can be linked to environments from different projects by using the `connection_id` field in the `Environment` resource.

        For now, only BigQuery and Snowflake connections are supported and the other Data Warehouses can continue using the existing resources `Connection` and `FabricConnection` ,
        but all Data Warehouses will soon be supported under this resource and the other ones will be deprecated in the future.

        :param str resource_name: The name of the resource.
        :param GlobalConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GlobalConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bigquery: Optional[pulumi.Input[Union['GlobalConnectionBigqueryArgs', 'GlobalConnectionBigqueryArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_link_endpoint_id: Optional[pulumi.Input[str]] = None,
                 snowflake: Optional[pulumi.Input[Union['GlobalConnectionSnowflakeArgs', 'GlobalConnectionSnowflakeArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GlobalConnectionArgs.__new__(GlobalConnectionArgs)

            __props__.__dict__["bigquery"] = bigquery
            __props__.__dict__["name"] = name
            __props__.__dict__["private_link_endpoint_id"] = private_link_endpoint_id
            __props__.__dict__["snowflake"] = snowflake
            __props__.__dict__["adapter_version"] = None
            __props__.__dict__["is_ssh_tunnel_enabled"] = None
            __props__.__dict__["oauth_configuration_id"] = None
        super(GlobalConnection, __self__).__init__(
            'dbtcloud:index/globalConnection:GlobalConnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            adapter_version: Optional[pulumi.Input[str]] = None,
            bigquery: Optional[pulumi.Input[Union['GlobalConnectionBigqueryArgs', 'GlobalConnectionBigqueryArgsDict']]] = None,
            is_ssh_tunnel_enabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            oauth_configuration_id: Optional[pulumi.Input[int]] = None,
            private_link_endpoint_id: Optional[pulumi.Input[str]] = None,
            snowflake: Optional[pulumi.Input[Union['GlobalConnectionSnowflakeArgs', 'GlobalConnectionSnowflakeArgsDict']]] = None) -> 'GlobalConnection':
        """
        Get an existing GlobalConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] adapter_version: Version of the adapter
        :param pulumi.Input[bool] is_ssh_tunnel_enabled: Whether the connection can use an SSH tunnel
        :param pulumi.Input[str] name: Connection name
        :param pulumi.Input[str] private_link_endpoint_id: Private Link Endpoint ID. This ID can be found using the `privatelink_endpoint` data source
        :param pulumi.Input[Union['GlobalConnectionSnowflakeArgs', 'GlobalConnectionSnowflakeArgsDict']] snowflake: Snowflake connection configuration
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GlobalConnectionState.__new__(_GlobalConnectionState)

        __props__.__dict__["adapter_version"] = adapter_version
        __props__.__dict__["bigquery"] = bigquery
        __props__.__dict__["is_ssh_tunnel_enabled"] = is_ssh_tunnel_enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["oauth_configuration_id"] = oauth_configuration_id
        __props__.__dict__["private_link_endpoint_id"] = private_link_endpoint_id
        __props__.__dict__["snowflake"] = snowflake
        return GlobalConnection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adapterVersion")
    def adapter_version(self) -> pulumi.Output[str]:
        """
        Version of the adapter
        """
        return pulumi.get(self, "adapter_version")

    @property
    @pulumi.getter
    def bigquery(self) -> pulumi.Output[Optional['outputs.GlobalConnectionBigquery']]:
        return pulumi.get(self, "bigquery")

    @property
    @pulumi.getter(name="isSshTunnelEnabled")
    def is_ssh_tunnel_enabled(self) -> pulumi.Output[bool]:
        """
        Whether the connection can use an SSH tunnel
        """
        return pulumi.get(self, "is_ssh_tunnel_enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Connection name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oauthConfigurationId")
    def oauth_configuration_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "oauth_configuration_id")

    @property
    @pulumi.getter(name="privateLinkEndpointId")
    def private_link_endpoint_id(self) -> pulumi.Output[Optional[str]]:
        """
        Private Link Endpoint ID. This ID can be found using the `privatelink_endpoint` data source
        """
        return pulumi.get(self, "private_link_endpoint_id")

    @property
    @pulumi.getter
    def snowflake(self) -> pulumi.Output[Optional['outputs.GlobalConnectionSnowflake']]:
        """
        Snowflake connection configuration
        """
        return pulumi.get(self, "snowflake")


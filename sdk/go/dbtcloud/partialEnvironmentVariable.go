// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ###
type PartialEnvironmentVariable struct {
	pulumi.CustomResourceState

	// Map from environment names to respective variable value. This field is not set as sensitive so take precautions when using secret environment variables. Only the specified environment values will be managed by this resource.
	EnvironmentValues pulumi.StringMapOutput `pulumi:"environmentValues"`
	// Name for the variable, must be unique within a project, must be prefixed with 'DBT_'
	Name pulumi.StringOutput `pulumi:"name"`
	// Project ID to create or update the environment variable in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
}

// NewPartialEnvironmentVariable registers a new resource with the given unique name, arguments, and options.
func NewPartialEnvironmentVariable(ctx *pulumi.Context,
	name string, args *PartialEnvironmentVariableArgs, opts ...pulumi.ResourceOption) (*PartialEnvironmentVariable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentValues == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentValues'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PartialEnvironmentVariable
	err := ctx.RegisterResource("dbtcloud:index/partialEnvironmentVariable:PartialEnvironmentVariable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPartialEnvironmentVariable gets an existing PartialEnvironmentVariable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPartialEnvironmentVariable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PartialEnvironmentVariableState, opts ...pulumi.ResourceOption) (*PartialEnvironmentVariable, error) {
	var resource PartialEnvironmentVariable
	err := ctx.ReadResource("dbtcloud:index/partialEnvironmentVariable:PartialEnvironmentVariable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PartialEnvironmentVariable resources.
type partialEnvironmentVariableState struct {
	// Map from environment names to respective variable value. This field is not set as sensitive so take precautions when using secret environment variables. Only the specified environment values will be managed by this resource.
	EnvironmentValues map[string]string `pulumi:"environmentValues"`
	// Name for the variable, must be unique within a project, must be prefixed with 'DBT_'
	Name *string `pulumi:"name"`
	// Project ID to create or update the environment variable in
	ProjectId *int `pulumi:"projectId"`
}

type PartialEnvironmentVariableState struct {
	// Map from environment names to respective variable value. This field is not set as sensitive so take precautions when using secret environment variables. Only the specified environment values will be managed by this resource.
	EnvironmentValues pulumi.StringMapInput
	// Name for the variable, must be unique within a project, must be prefixed with 'DBT_'
	Name pulumi.StringPtrInput
	// Project ID to create or update the environment variable in
	ProjectId pulumi.IntPtrInput
}

func (PartialEnvironmentVariableState) ElementType() reflect.Type {
	return reflect.TypeOf((*partialEnvironmentVariableState)(nil)).Elem()
}

type partialEnvironmentVariableArgs struct {
	// Map from environment names to respective variable value. This field is not set as sensitive so take precautions when using secret environment variables. Only the specified environment values will be managed by this resource.
	EnvironmentValues map[string]string `pulumi:"environmentValues"`
	// Name for the variable, must be unique within a project, must be prefixed with 'DBT_'
	Name *string `pulumi:"name"`
	// Project ID to create or update the environment variable in
	ProjectId int `pulumi:"projectId"`
}

// The set of arguments for constructing a PartialEnvironmentVariable resource.
type PartialEnvironmentVariableArgs struct {
	// Map from environment names to respective variable value. This field is not set as sensitive so take precautions when using secret environment variables. Only the specified environment values will be managed by this resource.
	EnvironmentValues pulumi.StringMapInput
	// Name for the variable, must be unique within a project, must be prefixed with 'DBT_'
	Name pulumi.StringPtrInput
	// Project ID to create or update the environment variable in
	ProjectId pulumi.IntInput
}

func (PartialEnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*partialEnvironmentVariableArgs)(nil)).Elem()
}

type PartialEnvironmentVariableInput interface {
	pulumi.Input

	ToPartialEnvironmentVariableOutput() PartialEnvironmentVariableOutput
	ToPartialEnvironmentVariableOutputWithContext(ctx context.Context) PartialEnvironmentVariableOutput
}

func (*PartialEnvironmentVariable) ElementType() reflect.Type {
	return reflect.TypeOf((**PartialEnvironmentVariable)(nil)).Elem()
}

func (i *PartialEnvironmentVariable) ToPartialEnvironmentVariableOutput() PartialEnvironmentVariableOutput {
	return i.ToPartialEnvironmentVariableOutputWithContext(context.Background())
}

func (i *PartialEnvironmentVariable) ToPartialEnvironmentVariableOutputWithContext(ctx context.Context) PartialEnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartialEnvironmentVariableOutput)
}

// PartialEnvironmentVariableArrayInput is an input type that accepts PartialEnvironmentVariableArray and PartialEnvironmentVariableArrayOutput values.
// You can construct a concrete instance of `PartialEnvironmentVariableArrayInput` via:
//
//	PartialEnvironmentVariableArray{ PartialEnvironmentVariableArgs{...} }
type PartialEnvironmentVariableArrayInput interface {
	pulumi.Input

	ToPartialEnvironmentVariableArrayOutput() PartialEnvironmentVariableArrayOutput
	ToPartialEnvironmentVariableArrayOutputWithContext(context.Context) PartialEnvironmentVariableArrayOutput
}

type PartialEnvironmentVariableArray []PartialEnvironmentVariableInput

func (PartialEnvironmentVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PartialEnvironmentVariable)(nil)).Elem()
}

func (i PartialEnvironmentVariableArray) ToPartialEnvironmentVariableArrayOutput() PartialEnvironmentVariableArrayOutput {
	return i.ToPartialEnvironmentVariableArrayOutputWithContext(context.Background())
}

func (i PartialEnvironmentVariableArray) ToPartialEnvironmentVariableArrayOutputWithContext(ctx context.Context) PartialEnvironmentVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartialEnvironmentVariableArrayOutput)
}

// PartialEnvironmentVariableMapInput is an input type that accepts PartialEnvironmentVariableMap and PartialEnvironmentVariableMapOutput values.
// You can construct a concrete instance of `PartialEnvironmentVariableMapInput` via:
//
//	PartialEnvironmentVariableMap{ "key": PartialEnvironmentVariableArgs{...} }
type PartialEnvironmentVariableMapInput interface {
	pulumi.Input

	ToPartialEnvironmentVariableMapOutput() PartialEnvironmentVariableMapOutput
	ToPartialEnvironmentVariableMapOutputWithContext(context.Context) PartialEnvironmentVariableMapOutput
}

type PartialEnvironmentVariableMap map[string]PartialEnvironmentVariableInput

func (PartialEnvironmentVariableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PartialEnvironmentVariable)(nil)).Elem()
}

func (i PartialEnvironmentVariableMap) ToPartialEnvironmentVariableMapOutput() PartialEnvironmentVariableMapOutput {
	return i.ToPartialEnvironmentVariableMapOutputWithContext(context.Background())
}

func (i PartialEnvironmentVariableMap) ToPartialEnvironmentVariableMapOutputWithContext(ctx context.Context) PartialEnvironmentVariableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartialEnvironmentVariableMapOutput)
}

type PartialEnvironmentVariableOutput struct{ *pulumi.OutputState }

func (PartialEnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartialEnvironmentVariable)(nil)).Elem()
}

func (o PartialEnvironmentVariableOutput) ToPartialEnvironmentVariableOutput() PartialEnvironmentVariableOutput {
	return o
}

func (o PartialEnvironmentVariableOutput) ToPartialEnvironmentVariableOutputWithContext(ctx context.Context) PartialEnvironmentVariableOutput {
	return o
}

// Map from environment names to respective variable value. This field is not set as sensitive so take precautions when using secret environment variables. Only the specified environment values will be managed by this resource.
func (o PartialEnvironmentVariableOutput) EnvironmentValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PartialEnvironmentVariable) pulumi.StringMapOutput { return v.EnvironmentValues }).(pulumi.StringMapOutput)
}

// Name for the variable, must be unique within a project, must be prefixed with 'DBT_'
func (o PartialEnvironmentVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PartialEnvironmentVariable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Project ID to create or update the environment variable in
func (o PartialEnvironmentVariableOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *PartialEnvironmentVariable) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

type PartialEnvironmentVariableArrayOutput struct{ *pulumi.OutputState }

func (PartialEnvironmentVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PartialEnvironmentVariable)(nil)).Elem()
}

func (o PartialEnvironmentVariableArrayOutput) ToPartialEnvironmentVariableArrayOutput() PartialEnvironmentVariableArrayOutput {
	return o
}

func (o PartialEnvironmentVariableArrayOutput) ToPartialEnvironmentVariableArrayOutputWithContext(ctx context.Context) PartialEnvironmentVariableArrayOutput {
	return o
}

func (o PartialEnvironmentVariableArrayOutput) Index(i pulumi.IntInput) PartialEnvironmentVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PartialEnvironmentVariable {
		return vs[0].([]*PartialEnvironmentVariable)[vs[1].(int)]
	}).(PartialEnvironmentVariableOutput)
}

type PartialEnvironmentVariableMapOutput struct{ *pulumi.OutputState }

func (PartialEnvironmentVariableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PartialEnvironmentVariable)(nil)).Elem()
}

func (o PartialEnvironmentVariableMapOutput) ToPartialEnvironmentVariableMapOutput() PartialEnvironmentVariableMapOutput {
	return o
}

func (o PartialEnvironmentVariableMapOutput) ToPartialEnvironmentVariableMapOutputWithContext(ctx context.Context) PartialEnvironmentVariableMapOutput {
	return o
}

func (o PartialEnvironmentVariableMapOutput) MapIndex(k pulumi.StringInput) PartialEnvironmentVariableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PartialEnvironmentVariable {
		return vs[0].(map[string]*PartialEnvironmentVariable)[vs[1].(string)]
	}).(PartialEnvironmentVariableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PartialEnvironmentVariableInput)(nil)).Elem(), &PartialEnvironmentVariable{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartialEnvironmentVariableArrayInput)(nil)).Elem(), PartialEnvironmentVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartialEnvironmentVariableMapInput)(nil)).Elem(), PartialEnvironmentVariableMap{})
	pulumi.RegisterOutputType(PartialEnvironmentVariableOutput{})
	pulumi.RegisterOutputType(PartialEnvironmentVariableArrayOutput{})
	pulumi.RegisterOutputType(PartialEnvironmentVariableMapOutput{})
}

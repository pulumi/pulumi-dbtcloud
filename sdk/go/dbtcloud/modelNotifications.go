// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure model notifications for a dbt Cloud environment. By default all the `on_...` are set to false. When destroyed, the model notifications are disabled.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dbtcloud.NewModelNotifications(ctx, "prod_model_notifications", &dbtcloud.ModelNotificationsArgs{
//				EnvironmentId: pulumi.Any(prodEnvironment.EnvironmentId),
//				Enabled:       pulumi.Bool(true),
//				OnSuccess:     pulumi.Bool(false),
//				OnFailure:     pulumi.Bool(true),
//				OnWarning:     pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Model notifications are imported using the environment ID where the notifications are enabled
//
// Using import blocks (requires Terraform >= 1.5)
//
// import {
//
//	to = dbtcloud_model_notifications.my_model_notifications
//
//	id = "environment_id"
//
// }
//
// import {
//
//	to = dbtcloud_model_notifications.my_model_notifications
//
//	id = "12345"
//
// }
//
// # Using the older import command
//
// ```sh
// $ pulumi import dbtcloud:index/modelNotifications:ModelNotifications my_model_notifications "environment_id"
// ```
//
// ```sh
// $ pulumi import dbtcloud:index/modelNotifications:ModelNotifications my_model_notifications 12345
// ```
type ModelNotifications struct {
	pulumi.CustomResourceState

	// Whether model notifications are enabled for this environment
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The ID of the dbt Cloud environment
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// Whether to send notifications for failed model runs
	OnFailure pulumi.BoolOutput `pulumi:"onFailure"`
	// Whether to send notifications for skipped model runs
	OnSkipped pulumi.BoolOutput `pulumi:"onSkipped"`
	// Whether to send notifications for successful model runs
	OnSuccess pulumi.BoolOutput `pulumi:"onSuccess"`
	// Whether to send notifications for model runs with warnings
	OnWarning pulumi.BoolOutput `pulumi:"onWarning"`
}

// NewModelNotifications registers a new resource with the given unique name, arguments, and options.
func NewModelNotifications(ctx *pulumi.Context,
	name string, args *ModelNotificationsArgs, opts ...pulumi.ResourceOption) (*ModelNotifications, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ModelNotifications
	err := ctx.RegisterResource("dbtcloud:index/modelNotifications:ModelNotifications", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModelNotifications gets an existing ModelNotifications resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModelNotifications(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModelNotificationsState, opts ...pulumi.ResourceOption) (*ModelNotifications, error) {
	var resource ModelNotifications
	err := ctx.ReadResource("dbtcloud:index/modelNotifications:ModelNotifications", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ModelNotifications resources.
type modelNotificationsState struct {
	// Whether model notifications are enabled for this environment
	Enabled *bool `pulumi:"enabled"`
	// The ID of the dbt Cloud environment
	EnvironmentId *string `pulumi:"environmentId"`
	// Whether to send notifications for failed model runs
	OnFailure *bool `pulumi:"onFailure"`
	// Whether to send notifications for skipped model runs
	OnSkipped *bool `pulumi:"onSkipped"`
	// Whether to send notifications for successful model runs
	OnSuccess *bool `pulumi:"onSuccess"`
	// Whether to send notifications for model runs with warnings
	OnWarning *bool `pulumi:"onWarning"`
}

type ModelNotificationsState struct {
	// Whether model notifications are enabled for this environment
	Enabled pulumi.BoolPtrInput
	// The ID of the dbt Cloud environment
	EnvironmentId pulumi.StringPtrInput
	// Whether to send notifications for failed model runs
	OnFailure pulumi.BoolPtrInput
	// Whether to send notifications for skipped model runs
	OnSkipped pulumi.BoolPtrInput
	// Whether to send notifications for successful model runs
	OnSuccess pulumi.BoolPtrInput
	// Whether to send notifications for model runs with warnings
	OnWarning pulumi.BoolPtrInput
}

func (ModelNotificationsState) ElementType() reflect.Type {
	return reflect.TypeOf((*modelNotificationsState)(nil)).Elem()
}

type modelNotificationsArgs struct {
	// Whether model notifications are enabled for this environment
	Enabled *bool `pulumi:"enabled"`
	// The ID of the dbt Cloud environment
	EnvironmentId string `pulumi:"environmentId"`
	// Whether to send notifications for failed model runs
	OnFailure *bool `pulumi:"onFailure"`
	// Whether to send notifications for skipped model runs
	OnSkipped *bool `pulumi:"onSkipped"`
	// Whether to send notifications for successful model runs
	OnSuccess *bool `pulumi:"onSuccess"`
	// Whether to send notifications for model runs with warnings
	OnWarning *bool `pulumi:"onWarning"`
}

// The set of arguments for constructing a ModelNotifications resource.
type ModelNotificationsArgs struct {
	// Whether model notifications are enabled for this environment
	Enabled pulumi.BoolPtrInput
	// The ID of the dbt Cloud environment
	EnvironmentId pulumi.StringInput
	// Whether to send notifications for failed model runs
	OnFailure pulumi.BoolPtrInput
	// Whether to send notifications for skipped model runs
	OnSkipped pulumi.BoolPtrInput
	// Whether to send notifications for successful model runs
	OnSuccess pulumi.BoolPtrInput
	// Whether to send notifications for model runs with warnings
	OnWarning pulumi.BoolPtrInput
}

func (ModelNotificationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*modelNotificationsArgs)(nil)).Elem()
}

type ModelNotificationsInput interface {
	pulumi.Input

	ToModelNotificationsOutput() ModelNotificationsOutput
	ToModelNotificationsOutputWithContext(ctx context.Context) ModelNotificationsOutput
}

func (*ModelNotifications) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelNotifications)(nil)).Elem()
}

func (i *ModelNotifications) ToModelNotificationsOutput() ModelNotificationsOutput {
	return i.ToModelNotificationsOutputWithContext(context.Background())
}

func (i *ModelNotifications) ToModelNotificationsOutputWithContext(ctx context.Context) ModelNotificationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelNotificationsOutput)
}

// ModelNotificationsArrayInput is an input type that accepts ModelNotificationsArray and ModelNotificationsArrayOutput values.
// You can construct a concrete instance of `ModelNotificationsArrayInput` via:
//
//	ModelNotificationsArray{ ModelNotificationsArgs{...} }
type ModelNotificationsArrayInput interface {
	pulumi.Input

	ToModelNotificationsArrayOutput() ModelNotificationsArrayOutput
	ToModelNotificationsArrayOutputWithContext(context.Context) ModelNotificationsArrayOutput
}

type ModelNotificationsArray []ModelNotificationsInput

func (ModelNotificationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ModelNotifications)(nil)).Elem()
}

func (i ModelNotificationsArray) ToModelNotificationsArrayOutput() ModelNotificationsArrayOutput {
	return i.ToModelNotificationsArrayOutputWithContext(context.Background())
}

func (i ModelNotificationsArray) ToModelNotificationsArrayOutputWithContext(ctx context.Context) ModelNotificationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelNotificationsArrayOutput)
}

// ModelNotificationsMapInput is an input type that accepts ModelNotificationsMap and ModelNotificationsMapOutput values.
// You can construct a concrete instance of `ModelNotificationsMapInput` via:
//
//	ModelNotificationsMap{ "key": ModelNotificationsArgs{...} }
type ModelNotificationsMapInput interface {
	pulumi.Input

	ToModelNotificationsMapOutput() ModelNotificationsMapOutput
	ToModelNotificationsMapOutputWithContext(context.Context) ModelNotificationsMapOutput
}

type ModelNotificationsMap map[string]ModelNotificationsInput

func (ModelNotificationsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ModelNotifications)(nil)).Elem()
}

func (i ModelNotificationsMap) ToModelNotificationsMapOutput() ModelNotificationsMapOutput {
	return i.ToModelNotificationsMapOutputWithContext(context.Background())
}

func (i ModelNotificationsMap) ToModelNotificationsMapOutputWithContext(ctx context.Context) ModelNotificationsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelNotificationsMapOutput)
}

type ModelNotificationsOutput struct{ *pulumi.OutputState }

func (ModelNotificationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelNotifications)(nil)).Elem()
}

func (o ModelNotificationsOutput) ToModelNotificationsOutput() ModelNotificationsOutput {
	return o
}

func (o ModelNotificationsOutput) ToModelNotificationsOutputWithContext(ctx context.Context) ModelNotificationsOutput {
	return o
}

// Whether model notifications are enabled for this environment
func (o ModelNotificationsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ModelNotifications) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of the dbt Cloud environment
func (o ModelNotificationsOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelNotifications) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Whether to send notifications for failed model runs
func (o ModelNotificationsOutput) OnFailure() pulumi.BoolOutput {
	return o.ApplyT(func(v *ModelNotifications) pulumi.BoolOutput { return v.OnFailure }).(pulumi.BoolOutput)
}

// Whether to send notifications for skipped model runs
func (o ModelNotificationsOutput) OnSkipped() pulumi.BoolOutput {
	return o.ApplyT(func(v *ModelNotifications) pulumi.BoolOutput { return v.OnSkipped }).(pulumi.BoolOutput)
}

// Whether to send notifications for successful model runs
func (o ModelNotificationsOutput) OnSuccess() pulumi.BoolOutput {
	return o.ApplyT(func(v *ModelNotifications) pulumi.BoolOutput { return v.OnSuccess }).(pulumi.BoolOutput)
}

// Whether to send notifications for model runs with warnings
func (o ModelNotificationsOutput) OnWarning() pulumi.BoolOutput {
	return o.ApplyT(func(v *ModelNotifications) pulumi.BoolOutput { return v.OnWarning }).(pulumi.BoolOutput)
}

type ModelNotificationsArrayOutput struct{ *pulumi.OutputState }

func (ModelNotificationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ModelNotifications)(nil)).Elem()
}

func (o ModelNotificationsArrayOutput) ToModelNotificationsArrayOutput() ModelNotificationsArrayOutput {
	return o
}

func (o ModelNotificationsArrayOutput) ToModelNotificationsArrayOutputWithContext(ctx context.Context) ModelNotificationsArrayOutput {
	return o
}

func (o ModelNotificationsArrayOutput) Index(i pulumi.IntInput) ModelNotificationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ModelNotifications {
		return vs[0].([]*ModelNotifications)[vs[1].(int)]
	}).(ModelNotificationsOutput)
}

type ModelNotificationsMapOutput struct{ *pulumi.OutputState }

func (ModelNotificationsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ModelNotifications)(nil)).Elem()
}

func (o ModelNotificationsMapOutput) ToModelNotificationsMapOutput() ModelNotificationsMapOutput {
	return o
}

func (o ModelNotificationsMapOutput) ToModelNotificationsMapOutputWithContext(ctx context.Context) ModelNotificationsMapOutput {
	return o
}

func (o ModelNotificationsMapOutput) MapIndex(k pulumi.StringInput) ModelNotificationsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ModelNotifications {
		return vs[0].(map[string]*ModelNotifications)[vs[1].(string)]
	}).(ModelNotificationsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ModelNotificationsInput)(nil)).Elem(), &ModelNotifications{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelNotificationsArrayInput)(nil)).Elem(), ModelNotificationsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelNotificationsMapInput)(nil)).Elem(), ModelNotificationsMap{})
	pulumi.RegisterOutputType(ModelNotificationsOutput{})
	pulumi.RegisterOutputType(ModelNotificationsArrayOutput{})
	pulumi.RegisterOutputType(ModelNotificationsMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
)

var _ = internal.GetEnvOrDefault

// Account identifier for your dbt Cloud implementation. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_ACCOUNT_ID`
func GetAccountId(ctx *pulumi.Context) int {
	v, err := config.TryInt(ctx, "dbtcloud:accountId")
	if err == nil {
		return v
	}
	var value int
	if d := internal.GetEnvOrDefault(nil, internal.ParseEnvInt, "DBT_CLOUD_ACCOUNT_ID"); d != nil {
		value = d.(int)
	}
	return value
}

// If set to true, the provider will not retry requests that fail due to rate limiting. Defaults to false.
func GetDisableRetry(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "dbtcloud:disableRetry")
}

// URL for your dbt Cloud deployment. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_HOST_URL` - Defaults to https://cloud.getdbt.com/api
func GetHostUrl(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "dbtcloud:hostUrl")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault("https://cloud.getdbt.com/api", nil, "DBT_CLOUD_HOST_URL"); d != nil {
		value = d.(string)
	}
	return value
}

// The maximum number of retries to attempt for requests that fail due to rate limiting. Defaults to 3 retries.
func GetMaxRetries(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "dbtcloud:maxRetries")
}

// List of HTTP status codes that should be retried when encountered. Defaults to [429, 500, 502, 503, 504].
func GetRetriableStatusCodes(ctx *pulumi.Context) string {
	return config.Get(ctx, "dbtcloud:retriableStatusCodes")
}

// The number of seconds to wait before retrying a request that failed due to rate limiting. Defaults to 10 seconds.
func GetRetryIntervalSeconds(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "dbtcloud:retryIntervalSeconds")
}

// API token for your dbt Cloud. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_TOKEN`
func GetToken(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "dbtcloud:token")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "DBT_CLOUD_TOKEN"); d != nil {
		value = d.(string)
	}
	return value
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Postgres credential resource. This resource is composed of a Postgres credential and a Semantic Layer configuration. It is used to create a Postgres credential for the Semantic Layer.
//
// ## Import
//
// using import blocks (requires Terraform >= 1.5)
//
// import {
//
//	to = dbtcloud_postgres_semantic_layer_credential.example
//
//	id = "credential_id"
//
// }
//
// import {
//
//	to = dbtcloud_postgres_semantic_layer_credential.example
//
//	id = "12345"
//
// }
//
// using the older import command
//
// ```sh
// $ pulumi import dbtcloud:index/postgresSemanticLayerCredential:PostgresSemanticLayerCredential example "credential_id"
// ```
//
// ```sh
// $ pulumi import dbtcloud:index/postgresSemanticLayerCredential:PostgresSemanticLayerCredential example 12345
// ```
type PostgresSemanticLayerCredential struct {
	pulumi.CustomResourceState

	// Semantic Layer credential configuration details.
	Configuration PostgresSemanticLayerCredentialConfigurationOutput `pulumi:"configuration"`
	// Postgres credential details, but used in the context of the Semantic Layer.
	Credential PostgresSemanticLayerCredentialCredentialOutput `pulumi:"credential"`
}

// NewPostgresSemanticLayerCredential registers a new resource with the given unique name, arguments, and options.
func NewPostgresSemanticLayerCredential(ctx *pulumi.Context,
	name string, args *PostgresSemanticLayerCredentialArgs, opts ...pulumi.ResourceOption) (*PostgresSemanticLayerCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Credential == nil {
		return nil, errors.New("invalid value for required argument 'Credential'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PostgresSemanticLayerCredential
	err := ctx.RegisterResource("dbtcloud:index/postgresSemanticLayerCredential:PostgresSemanticLayerCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostgresSemanticLayerCredential gets an existing PostgresSemanticLayerCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostgresSemanticLayerCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostgresSemanticLayerCredentialState, opts ...pulumi.ResourceOption) (*PostgresSemanticLayerCredential, error) {
	var resource PostgresSemanticLayerCredential
	err := ctx.ReadResource("dbtcloud:index/postgresSemanticLayerCredential:PostgresSemanticLayerCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PostgresSemanticLayerCredential resources.
type postgresSemanticLayerCredentialState struct {
	// Semantic Layer credential configuration details.
	Configuration *PostgresSemanticLayerCredentialConfiguration `pulumi:"configuration"`
	// Postgres credential details, but used in the context of the Semantic Layer.
	Credential *PostgresSemanticLayerCredentialCredential `pulumi:"credential"`
}

type PostgresSemanticLayerCredentialState struct {
	// Semantic Layer credential configuration details.
	Configuration PostgresSemanticLayerCredentialConfigurationPtrInput
	// Postgres credential details, but used in the context of the Semantic Layer.
	Credential PostgresSemanticLayerCredentialCredentialPtrInput
}

func (PostgresSemanticLayerCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresSemanticLayerCredentialState)(nil)).Elem()
}

type postgresSemanticLayerCredentialArgs struct {
	// Semantic Layer credential configuration details.
	Configuration PostgresSemanticLayerCredentialConfiguration `pulumi:"configuration"`
	// Postgres credential details, but used in the context of the Semantic Layer.
	Credential PostgresSemanticLayerCredentialCredential `pulumi:"credential"`
}

// The set of arguments for constructing a PostgresSemanticLayerCredential resource.
type PostgresSemanticLayerCredentialArgs struct {
	// Semantic Layer credential configuration details.
	Configuration PostgresSemanticLayerCredentialConfigurationInput
	// Postgres credential details, but used in the context of the Semantic Layer.
	Credential PostgresSemanticLayerCredentialCredentialInput
}

func (PostgresSemanticLayerCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresSemanticLayerCredentialArgs)(nil)).Elem()
}

type PostgresSemanticLayerCredentialInput interface {
	pulumi.Input

	ToPostgresSemanticLayerCredentialOutput() PostgresSemanticLayerCredentialOutput
	ToPostgresSemanticLayerCredentialOutputWithContext(ctx context.Context) PostgresSemanticLayerCredentialOutput
}

func (*PostgresSemanticLayerCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresSemanticLayerCredential)(nil)).Elem()
}

func (i *PostgresSemanticLayerCredential) ToPostgresSemanticLayerCredentialOutput() PostgresSemanticLayerCredentialOutput {
	return i.ToPostgresSemanticLayerCredentialOutputWithContext(context.Background())
}

func (i *PostgresSemanticLayerCredential) ToPostgresSemanticLayerCredentialOutputWithContext(ctx context.Context) PostgresSemanticLayerCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresSemanticLayerCredentialOutput)
}

// PostgresSemanticLayerCredentialArrayInput is an input type that accepts PostgresSemanticLayerCredentialArray and PostgresSemanticLayerCredentialArrayOutput values.
// You can construct a concrete instance of `PostgresSemanticLayerCredentialArrayInput` via:
//
//	PostgresSemanticLayerCredentialArray{ PostgresSemanticLayerCredentialArgs{...} }
type PostgresSemanticLayerCredentialArrayInput interface {
	pulumi.Input

	ToPostgresSemanticLayerCredentialArrayOutput() PostgresSemanticLayerCredentialArrayOutput
	ToPostgresSemanticLayerCredentialArrayOutputWithContext(context.Context) PostgresSemanticLayerCredentialArrayOutput
}

type PostgresSemanticLayerCredentialArray []PostgresSemanticLayerCredentialInput

func (PostgresSemanticLayerCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresSemanticLayerCredential)(nil)).Elem()
}

func (i PostgresSemanticLayerCredentialArray) ToPostgresSemanticLayerCredentialArrayOutput() PostgresSemanticLayerCredentialArrayOutput {
	return i.ToPostgresSemanticLayerCredentialArrayOutputWithContext(context.Background())
}

func (i PostgresSemanticLayerCredentialArray) ToPostgresSemanticLayerCredentialArrayOutputWithContext(ctx context.Context) PostgresSemanticLayerCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresSemanticLayerCredentialArrayOutput)
}

// PostgresSemanticLayerCredentialMapInput is an input type that accepts PostgresSemanticLayerCredentialMap and PostgresSemanticLayerCredentialMapOutput values.
// You can construct a concrete instance of `PostgresSemanticLayerCredentialMapInput` via:
//
//	PostgresSemanticLayerCredentialMap{ "key": PostgresSemanticLayerCredentialArgs{...} }
type PostgresSemanticLayerCredentialMapInput interface {
	pulumi.Input

	ToPostgresSemanticLayerCredentialMapOutput() PostgresSemanticLayerCredentialMapOutput
	ToPostgresSemanticLayerCredentialMapOutputWithContext(context.Context) PostgresSemanticLayerCredentialMapOutput
}

type PostgresSemanticLayerCredentialMap map[string]PostgresSemanticLayerCredentialInput

func (PostgresSemanticLayerCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresSemanticLayerCredential)(nil)).Elem()
}

func (i PostgresSemanticLayerCredentialMap) ToPostgresSemanticLayerCredentialMapOutput() PostgresSemanticLayerCredentialMapOutput {
	return i.ToPostgresSemanticLayerCredentialMapOutputWithContext(context.Background())
}

func (i PostgresSemanticLayerCredentialMap) ToPostgresSemanticLayerCredentialMapOutputWithContext(ctx context.Context) PostgresSemanticLayerCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresSemanticLayerCredentialMapOutput)
}

type PostgresSemanticLayerCredentialOutput struct{ *pulumi.OutputState }

func (PostgresSemanticLayerCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresSemanticLayerCredential)(nil)).Elem()
}

func (o PostgresSemanticLayerCredentialOutput) ToPostgresSemanticLayerCredentialOutput() PostgresSemanticLayerCredentialOutput {
	return o
}

func (o PostgresSemanticLayerCredentialOutput) ToPostgresSemanticLayerCredentialOutputWithContext(ctx context.Context) PostgresSemanticLayerCredentialOutput {
	return o
}

// Semantic Layer credential configuration details.
func (o PostgresSemanticLayerCredentialOutput) Configuration() PostgresSemanticLayerCredentialConfigurationOutput {
	return o.ApplyT(func(v *PostgresSemanticLayerCredential) PostgresSemanticLayerCredentialConfigurationOutput {
		return v.Configuration
	}).(PostgresSemanticLayerCredentialConfigurationOutput)
}

// Postgres credential details, but used in the context of the Semantic Layer.
func (o PostgresSemanticLayerCredentialOutput) Credential() PostgresSemanticLayerCredentialCredentialOutput {
	return o.ApplyT(func(v *PostgresSemanticLayerCredential) PostgresSemanticLayerCredentialCredentialOutput {
		return v.Credential
	}).(PostgresSemanticLayerCredentialCredentialOutput)
}

type PostgresSemanticLayerCredentialArrayOutput struct{ *pulumi.OutputState }

func (PostgresSemanticLayerCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresSemanticLayerCredential)(nil)).Elem()
}

func (o PostgresSemanticLayerCredentialArrayOutput) ToPostgresSemanticLayerCredentialArrayOutput() PostgresSemanticLayerCredentialArrayOutput {
	return o
}

func (o PostgresSemanticLayerCredentialArrayOutput) ToPostgresSemanticLayerCredentialArrayOutputWithContext(ctx context.Context) PostgresSemanticLayerCredentialArrayOutput {
	return o
}

func (o PostgresSemanticLayerCredentialArrayOutput) Index(i pulumi.IntInput) PostgresSemanticLayerCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PostgresSemanticLayerCredential {
		return vs[0].([]*PostgresSemanticLayerCredential)[vs[1].(int)]
	}).(PostgresSemanticLayerCredentialOutput)
}

type PostgresSemanticLayerCredentialMapOutput struct{ *pulumi.OutputState }

func (PostgresSemanticLayerCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresSemanticLayerCredential)(nil)).Elem()
}

func (o PostgresSemanticLayerCredentialMapOutput) ToPostgresSemanticLayerCredentialMapOutput() PostgresSemanticLayerCredentialMapOutput {
	return o
}

func (o PostgresSemanticLayerCredentialMapOutput) ToPostgresSemanticLayerCredentialMapOutputWithContext(ctx context.Context) PostgresSemanticLayerCredentialMapOutput {
	return o
}

func (o PostgresSemanticLayerCredentialMapOutput) MapIndex(k pulumi.StringInput) PostgresSemanticLayerCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PostgresSemanticLayerCredential {
		return vs[0].(map[string]*PostgresSemanticLayerCredential)[vs[1].(string)]
	}).(PostgresSemanticLayerCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresSemanticLayerCredentialInput)(nil)).Elem(), &PostgresSemanticLayerCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresSemanticLayerCredentialArrayInput)(nil)).Elem(), PostgresSemanticLayerCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresSemanticLayerCredentialMapInput)(nil)).Elem(), PostgresSemanticLayerCredentialMap{})
	pulumi.RegisterOutputType(PostgresSemanticLayerCredentialOutput{})
	pulumi.RegisterOutputType(PostgresSemanticLayerCredentialArrayOutput{})
	pulumi.RegisterOutputType(PostgresSemanticLayerCredentialMapOutput{})
}

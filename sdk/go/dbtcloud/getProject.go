// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieve a specific project from dbt Cloud.
func LookupProject(ctx *pulumi.Context, args *LookupProjectArgs, opts ...pulumi.InvokeOption) (*LookupProjectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProjectResult
	err := ctx.Invoke("dbtcloud:index/getProject:getProject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProject.
type LookupProjectArgs struct {
	// Project ID
	Id *int `pulumi:"id"`
	// Project name
	Name *string `pulumi:"name"`
}

// A collection of values returned by getProject.
type LookupProjectResult struct {
	// When the project was created
	CreatedAt string `pulumi:"createdAt"`
	// Subdirectory for the dbt project inside the git repo
	DbtProjectSubdirectory string `pulumi:"dbtProjectSubdirectory"`
	// Project description
	Description string `pulumi:"description"`
	// ID of Job for the documentation
	DocsJobId int `pulumi:"docsJobId"`
	// ID of Job for source freshness
	FreshnessJobId int `pulumi:"freshnessJobId"`
	// Project ID
	Id *int `pulumi:"id"`
	// Project name
	Name string `pulumi:"name"`
	// Details for the connection linked to the project
	ProjectConnection GetProjectProjectConnection `pulumi:"projectConnection"`
	// Details for the repository linked to the project
	Repository GetProjectRepositoryType `pulumi:"repository"`
	// Semantic layer config ID
	SemanticLayerConfigId int `pulumi:"semanticLayerConfigId"`
	// Project state should be 1 = active, as 2 = deleted
	State int `pulumi:"state"`
	// The type of dbt project (default or hybrid)
	Type int `pulumi:"type"`
	// When the project was last updated
	UpdatedAt string `pulumi:"updatedAt"`
}

func LookupProjectOutput(ctx *pulumi.Context, args LookupProjectOutputArgs, opts ...pulumi.InvokeOption) LookupProjectResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupProjectResultOutput, error) {
			args := v.(LookupProjectArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("dbtcloud:index/getProject:getProject", args, LookupProjectResultOutput{}, options).(LookupProjectResultOutput), nil
		}).(LookupProjectResultOutput)
}

// A collection of arguments for invoking getProject.
type LookupProjectOutputArgs struct {
	// Project ID
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Project name
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupProjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectArgs)(nil)).Elem()
}

// A collection of values returned by getProject.
type LookupProjectResultOutput struct{ *pulumi.OutputState }

func (LookupProjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectResult)(nil)).Elem()
}

func (o LookupProjectResultOutput) ToLookupProjectResultOutput() LookupProjectResultOutput {
	return o
}

func (o LookupProjectResultOutput) ToLookupProjectResultOutputWithContext(ctx context.Context) LookupProjectResultOutput {
	return o
}

// When the project was created
func (o LookupProjectResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Subdirectory for the dbt project inside the git repo
func (o LookupProjectResultOutput) DbtProjectSubdirectory() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.DbtProjectSubdirectory }).(pulumi.StringOutput)
}

// Project description
func (o LookupProjectResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Description }).(pulumi.StringOutput)
}

// ID of Job for the documentation
func (o LookupProjectResultOutput) DocsJobId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectResult) int { return v.DocsJobId }).(pulumi.IntOutput)
}

// ID of Job for source freshness
func (o LookupProjectResultOutput) FreshnessJobId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectResult) int { return v.FreshnessJobId }).(pulumi.IntOutput)
}

// Project ID
func (o LookupProjectResultOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupProjectResult) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Project name
func (o LookupProjectResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Name }).(pulumi.StringOutput)
}

// Details for the connection linked to the project
func (o LookupProjectResultOutput) ProjectConnection() GetProjectProjectConnectionOutput {
	return o.ApplyT(func(v LookupProjectResult) GetProjectProjectConnection { return v.ProjectConnection }).(GetProjectProjectConnectionOutput)
}

// Details for the repository linked to the project
func (o LookupProjectResultOutput) Repository() GetProjectRepositoryTypeOutput {
	return o.ApplyT(func(v LookupProjectResult) GetProjectRepositoryType { return v.Repository }).(GetProjectRepositoryTypeOutput)
}

// Semantic layer config ID
func (o LookupProjectResultOutput) SemanticLayerConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectResult) int { return v.SemanticLayerConfigId }).(pulumi.IntOutput)
}

// Project state should be 1 = active, as 2 = deleted
func (o LookupProjectResultOutput) State() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectResult) int { return v.State }).(pulumi.IntOutput)
}

// The type of dbt project (default or hybrid)
func (o LookupProjectResultOutput) Type() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectResult) int { return v.Type }).(pulumi.IntOutput)
}

// When the project was last updated
func (o LookupProjectResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectResultOutput{})
}

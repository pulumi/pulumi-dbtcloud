// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Teradata credential data source
func LookupTeradataCredential(ctx *pulumi.Context, args *LookupTeradataCredentialArgs, opts ...pulumi.InvokeOption) (*LookupTeradataCredentialResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTeradataCredentialResult
	err := ctx.Invoke("dbtcloud:index/getTeradataCredential:getTeradataCredential", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTeradataCredential.
type LookupTeradataCredentialArgs struct {
	// Credential ID
	CredentialId int `pulumi:"credentialId"`
	// Project ID
	ProjectId int `pulumi:"projectId"`
}

// A collection of values returned by getTeradataCredential.
type LookupTeradataCredentialResult struct {
	// Credential ID
	CredentialId int `pulumi:"credentialId"`
	// The ID of this resource. Contains the project ID and the credential ID.
	Id string `pulumi:"id"`
	// The password for the Teradata account
	Password string `pulumi:"password"`
	// Project ID
	ProjectId int `pulumi:"projectId"`
	// The schema where to create models
	Schema string `pulumi:"schema"`
	// The number of threads to use. Default is 1
	Threads int `pulumi:"threads"`
	// The username for the Teradata account
	User string `pulumi:"user"`
}

func LookupTeradataCredentialOutput(ctx *pulumi.Context, args LookupTeradataCredentialOutputArgs, opts ...pulumi.InvokeOption) LookupTeradataCredentialResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTeradataCredentialResultOutput, error) {
			args := v.(LookupTeradataCredentialArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("dbtcloud:index/getTeradataCredential:getTeradataCredential", args, LookupTeradataCredentialResultOutput{}, options).(LookupTeradataCredentialResultOutput), nil
		}).(LookupTeradataCredentialResultOutput)
}

// A collection of arguments for invoking getTeradataCredential.
type LookupTeradataCredentialOutputArgs struct {
	// Credential ID
	CredentialId pulumi.IntInput `pulumi:"credentialId"`
	// Project ID
	ProjectId pulumi.IntInput `pulumi:"projectId"`
}

func (LookupTeradataCredentialOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTeradataCredentialArgs)(nil)).Elem()
}

// A collection of values returned by getTeradataCredential.
type LookupTeradataCredentialResultOutput struct{ *pulumi.OutputState }

func (LookupTeradataCredentialResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTeradataCredentialResult)(nil)).Elem()
}

func (o LookupTeradataCredentialResultOutput) ToLookupTeradataCredentialResultOutput() LookupTeradataCredentialResultOutput {
	return o
}

func (o LookupTeradataCredentialResultOutput) ToLookupTeradataCredentialResultOutputWithContext(ctx context.Context) LookupTeradataCredentialResultOutput {
	return o
}

// Credential ID
func (o LookupTeradataCredentialResultOutput) CredentialId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTeradataCredentialResult) int { return v.CredentialId }).(pulumi.IntOutput)
}

// The ID of this resource. Contains the project ID and the credential ID.
func (o LookupTeradataCredentialResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeradataCredentialResult) string { return v.Id }).(pulumi.StringOutput)
}

// The password for the Teradata account
func (o LookupTeradataCredentialResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeradataCredentialResult) string { return v.Password }).(pulumi.StringOutput)
}

// Project ID
func (o LookupTeradataCredentialResultOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTeradataCredentialResult) int { return v.ProjectId }).(pulumi.IntOutput)
}

// The schema where to create models
func (o LookupTeradataCredentialResultOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeradataCredentialResult) string { return v.Schema }).(pulumi.StringOutput)
}

// The number of threads to use. Default is 1
func (o LookupTeradataCredentialResultOutput) Threads() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTeradataCredentialResult) int { return v.Threads }).(pulumi.IntOutput)
}

// The username for the Teradata account
func (o LookupTeradataCredentialResultOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeradataCredentialResult) string { return v.User }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTeradataCredentialResultOutput{})
}

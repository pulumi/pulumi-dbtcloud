// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// BigQuery credential resource. This resource is composed of a BigQuery credential and a Semantic Layer configuration. It is used to create a BigQuery credential for the Semantic Layer.
type BigquerySemanticLayerCredential struct {
	pulumi.CustomResourceState

	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl pulumi.StringOutput `pulumi:"authProviderX509CertUrl"`
	// Auth URI for the Service Account
	AuthUri pulumi.StringOutput `pulumi:"authUri"`
	// Service Account email
	ClientEmail pulumi.StringOutput `pulumi:"clientEmail"`
	// Client ID of the Service Account
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl pulumi.StringOutput `pulumi:"clientX509CertUrl"`
	// Semantic Layer credential configuration details.
	Configuration BigquerySemanticLayerCredentialConfigurationOutput `pulumi:"configuration"`
	// BigQuery credential details, but used in the context of the Semantic Layer.
	Credential BigquerySemanticLayerCredentialCredentialOutput `pulumi:"credential"`
	// Private Key for the Service Account
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// Private Key ID for the Service Account
	PrivateKeyId pulumi.StringOutput `pulumi:"privateKeyId"`
	// Token URI for the Service Account
	TokenUri pulumi.StringOutput `pulumi:"tokenUri"`
}

// NewBigquerySemanticLayerCredential registers a new resource with the given unique name, arguments, and options.
func NewBigquerySemanticLayerCredential(ctx *pulumi.Context,
	name string, args *BigquerySemanticLayerCredentialArgs, opts ...pulumi.ResourceOption) (*BigquerySemanticLayerCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthProviderX509CertUrl == nil {
		return nil, errors.New("invalid value for required argument 'AuthProviderX509CertUrl'")
	}
	if args.AuthUri == nil {
		return nil, errors.New("invalid value for required argument 'AuthUri'")
	}
	if args.ClientEmail == nil {
		return nil, errors.New("invalid value for required argument 'ClientEmail'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientX509CertUrl == nil {
		return nil, errors.New("invalid value for required argument 'ClientX509CertUrl'")
	}
	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Credential == nil {
		return nil, errors.New("invalid value for required argument 'Credential'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.PrivateKeyId == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKeyId'")
	}
	if args.TokenUri == nil {
		return nil, errors.New("invalid value for required argument 'TokenUri'")
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BigquerySemanticLayerCredential
	err := ctx.RegisterResource("dbtcloud:index/bigquerySemanticLayerCredential:BigquerySemanticLayerCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBigquerySemanticLayerCredential gets an existing BigquerySemanticLayerCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBigquerySemanticLayerCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BigquerySemanticLayerCredentialState, opts ...pulumi.ResourceOption) (*BigquerySemanticLayerCredential, error) {
	var resource BigquerySemanticLayerCredential
	err := ctx.ReadResource("dbtcloud:index/bigquerySemanticLayerCredential:BigquerySemanticLayerCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BigquerySemanticLayerCredential resources.
type bigquerySemanticLayerCredentialState struct {
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl *string `pulumi:"authProviderX509CertUrl"`
	// Auth URI for the Service Account
	AuthUri *string `pulumi:"authUri"`
	// Service Account email
	ClientEmail *string `pulumi:"clientEmail"`
	// Client ID of the Service Account
	ClientId *string `pulumi:"clientId"`
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl *string `pulumi:"clientX509CertUrl"`
	// Semantic Layer credential configuration details.
	Configuration *BigquerySemanticLayerCredentialConfiguration `pulumi:"configuration"`
	// BigQuery credential details, but used in the context of the Semantic Layer.
	Credential *BigquerySemanticLayerCredentialCredential `pulumi:"credential"`
	// Private Key for the Service Account
	PrivateKey *string `pulumi:"privateKey"`
	// Private Key ID for the Service Account
	PrivateKeyId *string `pulumi:"privateKeyId"`
	// Token URI for the Service Account
	TokenUri *string `pulumi:"tokenUri"`
}

type BigquerySemanticLayerCredentialState struct {
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl pulumi.StringPtrInput
	// Auth URI for the Service Account
	AuthUri pulumi.StringPtrInput
	// Service Account email
	ClientEmail pulumi.StringPtrInput
	// Client ID of the Service Account
	ClientId pulumi.StringPtrInput
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl pulumi.StringPtrInput
	// Semantic Layer credential configuration details.
	Configuration BigquerySemanticLayerCredentialConfigurationPtrInput
	// BigQuery credential details, but used in the context of the Semantic Layer.
	Credential BigquerySemanticLayerCredentialCredentialPtrInput
	// Private Key for the Service Account
	PrivateKey pulumi.StringPtrInput
	// Private Key ID for the Service Account
	PrivateKeyId pulumi.StringPtrInput
	// Token URI for the Service Account
	TokenUri pulumi.StringPtrInput
}

func (BigquerySemanticLayerCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*bigquerySemanticLayerCredentialState)(nil)).Elem()
}

type bigquerySemanticLayerCredentialArgs struct {
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl string `pulumi:"authProviderX509CertUrl"`
	// Auth URI for the Service Account
	AuthUri string `pulumi:"authUri"`
	// Service Account email
	ClientEmail string `pulumi:"clientEmail"`
	// Client ID of the Service Account
	ClientId string `pulumi:"clientId"`
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl string `pulumi:"clientX509CertUrl"`
	// Semantic Layer credential configuration details.
	Configuration BigquerySemanticLayerCredentialConfiguration `pulumi:"configuration"`
	// BigQuery credential details, but used in the context of the Semantic Layer.
	Credential BigquerySemanticLayerCredentialCredential `pulumi:"credential"`
	// Private Key for the Service Account
	PrivateKey string `pulumi:"privateKey"`
	// Private Key ID for the Service Account
	PrivateKeyId string `pulumi:"privateKeyId"`
	// Token URI for the Service Account
	TokenUri string `pulumi:"tokenUri"`
}

// The set of arguments for constructing a BigquerySemanticLayerCredential resource.
type BigquerySemanticLayerCredentialArgs struct {
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl pulumi.StringInput
	// Auth URI for the Service Account
	AuthUri pulumi.StringInput
	// Service Account email
	ClientEmail pulumi.StringInput
	// Client ID of the Service Account
	ClientId pulumi.StringInput
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl pulumi.StringInput
	// Semantic Layer credential configuration details.
	Configuration BigquerySemanticLayerCredentialConfigurationInput
	// BigQuery credential details, but used in the context of the Semantic Layer.
	Credential BigquerySemanticLayerCredentialCredentialInput
	// Private Key for the Service Account
	PrivateKey pulumi.StringInput
	// Private Key ID for the Service Account
	PrivateKeyId pulumi.StringInput
	// Token URI for the Service Account
	TokenUri pulumi.StringInput
}

func (BigquerySemanticLayerCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bigquerySemanticLayerCredentialArgs)(nil)).Elem()
}

type BigquerySemanticLayerCredentialInput interface {
	pulumi.Input

	ToBigquerySemanticLayerCredentialOutput() BigquerySemanticLayerCredentialOutput
	ToBigquerySemanticLayerCredentialOutputWithContext(ctx context.Context) BigquerySemanticLayerCredentialOutput
}

func (*BigquerySemanticLayerCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**BigquerySemanticLayerCredential)(nil)).Elem()
}

func (i *BigquerySemanticLayerCredential) ToBigquerySemanticLayerCredentialOutput() BigquerySemanticLayerCredentialOutput {
	return i.ToBigquerySemanticLayerCredentialOutputWithContext(context.Background())
}

func (i *BigquerySemanticLayerCredential) ToBigquerySemanticLayerCredentialOutputWithContext(ctx context.Context) BigquerySemanticLayerCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigquerySemanticLayerCredentialOutput)
}

// BigquerySemanticLayerCredentialArrayInput is an input type that accepts BigquerySemanticLayerCredentialArray and BigquerySemanticLayerCredentialArrayOutput values.
// You can construct a concrete instance of `BigquerySemanticLayerCredentialArrayInput` via:
//
//	BigquerySemanticLayerCredentialArray{ BigquerySemanticLayerCredentialArgs{...} }
type BigquerySemanticLayerCredentialArrayInput interface {
	pulumi.Input

	ToBigquerySemanticLayerCredentialArrayOutput() BigquerySemanticLayerCredentialArrayOutput
	ToBigquerySemanticLayerCredentialArrayOutputWithContext(context.Context) BigquerySemanticLayerCredentialArrayOutput
}

type BigquerySemanticLayerCredentialArray []BigquerySemanticLayerCredentialInput

func (BigquerySemanticLayerCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BigquerySemanticLayerCredential)(nil)).Elem()
}

func (i BigquerySemanticLayerCredentialArray) ToBigquerySemanticLayerCredentialArrayOutput() BigquerySemanticLayerCredentialArrayOutput {
	return i.ToBigquerySemanticLayerCredentialArrayOutputWithContext(context.Background())
}

func (i BigquerySemanticLayerCredentialArray) ToBigquerySemanticLayerCredentialArrayOutputWithContext(ctx context.Context) BigquerySemanticLayerCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigquerySemanticLayerCredentialArrayOutput)
}

// BigquerySemanticLayerCredentialMapInput is an input type that accepts BigquerySemanticLayerCredentialMap and BigquerySemanticLayerCredentialMapOutput values.
// You can construct a concrete instance of `BigquerySemanticLayerCredentialMapInput` via:
//
//	BigquerySemanticLayerCredentialMap{ "key": BigquerySemanticLayerCredentialArgs{...} }
type BigquerySemanticLayerCredentialMapInput interface {
	pulumi.Input

	ToBigquerySemanticLayerCredentialMapOutput() BigquerySemanticLayerCredentialMapOutput
	ToBigquerySemanticLayerCredentialMapOutputWithContext(context.Context) BigquerySemanticLayerCredentialMapOutput
}

type BigquerySemanticLayerCredentialMap map[string]BigquerySemanticLayerCredentialInput

func (BigquerySemanticLayerCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BigquerySemanticLayerCredential)(nil)).Elem()
}

func (i BigquerySemanticLayerCredentialMap) ToBigquerySemanticLayerCredentialMapOutput() BigquerySemanticLayerCredentialMapOutput {
	return i.ToBigquerySemanticLayerCredentialMapOutputWithContext(context.Background())
}

func (i BigquerySemanticLayerCredentialMap) ToBigquerySemanticLayerCredentialMapOutputWithContext(ctx context.Context) BigquerySemanticLayerCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigquerySemanticLayerCredentialMapOutput)
}

type BigquerySemanticLayerCredentialOutput struct{ *pulumi.OutputState }

func (BigquerySemanticLayerCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigquerySemanticLayerCredential)(nil)).Elem()
}

func (o BigquerySemanticLayerCredentialOutput) ToBigquerySemanticLayerCredentialOutput() BigquerySemanticLayerCredentialOutput {
	return o
}

func (o BigquerySemanticLayerCredentialOutput) ToBigquerySemanticLayerCredentialOutputWithContext(ctx context.Context) BigquerySemanticLayerCredentialOutput {
	return o
}

// Auth Provider X509 Cert URL for the Service Account
func (o BigquerySemanticLayerCredentialOutput) AuthProviderX509CertUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *BigquerySemanticLayerCredential) pulumi.StringOutput { return v.AuthProviderX509CertUrl }).(pulumi.StringOutput)
}

// Auth URI for the Service Account
func (o BigquerySemanticLayerCredentialOutput) AuthUri() pulumi.StringOutput {
	return o.ApplyT(func(v *BigquerySemanticLayerCredential) pulumi.StringOutput { return v.AuthUri }).(pulumi.StringOutput)
}

// Service Account email
func (o BigquerySemanticLayerCredentialOutput) ClientEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *BigquerySemanticLayerCredential) pulumi.StringOutput { return v.ClientEmail }).(pulumi.StringOutput)
}

// Client ID of the Service Account
func (o BigquerySemanticLayerCredentialOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigquerySemanticLayerCredential) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// Client X509 Cert URL for the Service Account
func (o BigquerySemanticLayerCredentialOutput) ClientX509CertUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *BigquerySemanticLayerCredential) pulumi.StringOutput { return v.ClientX509CertUrl }).(pulumi.StringOutput)
}

// Semantic Layer credential configuration details.
func (o BigquerySemanticLayerCredentialOutput) Configuration() BigquerySemanticLayerCredentialConfigurationOutput {
	return o.ApplyT(func(v *BigquerySemanticLayerCredential) BigquerySemanticLayerCredentialConfigurationOutput {
		return v.Configuration
	}).(BigquerySemanticLayerCredentialConfigurationOutput)
}

// BigQuery credential details, but used in the context of the Semantic Layer.
func (o BigquerySemanticLayerCredentialOutput) Credential() BigquerySemanticLayerCredentialCredentialOutput {
	return o.ApplyT(func(v *BigquerySemanticLayerCredential) BigquerySemanticLayerCredentialCredentialOutput {
		return v.Credential
	}).(BigquerySemanticLayerCredentialCredentialOutput)
}

// Private Key for the Service Account
func (o BigquerySemanticLayerCredentialOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *BigquerySemanticLayerCredential) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// Private Key ID for the Service Account
func (o BigquerySemanticLayerCredentialOutput) PrivateKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigquerySemanticLayerCredential) pulumi.StringOutput { return v.PrivateKeyId }).(pulumi.StringOutput)
}

// Token URI for the Service Account
func (o BigquerySemanticLayerCredentialOutput) TokenUri() pulumi.StringOutput {
	return o.ApplyT(func(v *BigquerySemanticLayerCredential) pulumi.StringOutput { return v.TokenUri }).(pulumi.StringOutput)
}

type BigquerySemanticLayerCredentialArrayOutput struct{ *pulumi.OutputState }

func (BigquerySemanticLayerCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BigquerySemanticLayerCredential)(nil)).Elem()
}

func (o BigquerySemanticLayerCredentialArrayOutput) ToBigquerySemanticLayerCredentialArrayOutput() BigquerySemanticLayerCredentialArrayOutput {
	return o
}

func (o BigquerySemanticLayerCredentialArrayOutput) ToBigquerySemanticLayerCredentialArrayOutputWithContext(ctx context.Context) BigquerySemanticLayerCredentialArrayOutput {
	return o
}

func (o BigquerySemanticLayerCredentialArrayOutput) Index(i pulumi.IntInput) BigquerySemanticLayerCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BigquerySemanticLayerCredential {
		return vs[0].([]*BigquerySemanticLayerCredential)[vs[1].(int)]
	}).(BigquerySemanticLayerCredentialOutput)
}

type BigquerySemanticLayerCredentialMapOutput struct{ *pulumi.OutputState }

func (BigquerySemanticLayerCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BigquerySemanticLayerCredential)(nil)).Elem()
}

func (o BigquerySemanticLayerCredentialMapOutput) ToBigquerySemanticLayerCredentialMapOutput() BigquerySemanticLayerCredentialMapOutput {
	return o
}

func (o BigquerySemanticLayerCredentialMapOutput) ToBigquerySemanticLayerCredentialMapOutputWithContext(ctx context.Context) BigquerySemanticLayerCredentialMapOutput {
	return o
}

func (o BigquerySemanticLayerCredentialMapOutput) MapIndex(k pulumi.StringInput) BigquerySemanticLayerCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BigquerySemanticLayerCredential {
		return vs[0].(map[string]*BigquerySemanticLayerCredential)[vs[1].(string)]
	}).(BigquerySemanticLayerCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BigquerySemanticLayerCredentialInput)(nil)).Elem(), &BigquerySemanticLayerCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigquerySemanticLayerCredentialArrayInput)(nil)).Elem(), BigquerySemanticLayerCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigquerySemanticLayerCredentialMapInput)(nil)).Elem(), BigquerySemanticLayerCredentialMap{})
	pulumi.RegisterOutputType(BigquerySemanticLayerCredentialOutput{})
	pulumi.RegisterOutputType(BigquerySemanticLayerCredentialArrayOutput{})
	pulumi.RegisterOutputType(BigquerySemanticLayerCredentialMapOutput{})
}

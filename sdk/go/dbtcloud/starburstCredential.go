// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Starburst/Trino credential resource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dbtcloud.NewStarburstCredential(ctx, "example", &dbtcloud.StarburstCredentialArgs{
//				ProjectId: pulumi.Any(exampleDbtcloudProject.Id),
//				Database:  pulumi.String("your_catalog"),
//				Schema:    pulumi.String("your_schema"),
//				User:      pulumi.String("your_user"),
//				Password:  pulumi.String("your_password"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// using  import blocks (requires Terraform >= 1.5)
//
// import {
//
//	to = dbtcloud_starburst_credential.my_starburst_credential
//
//	id = "project_id:credential_id"
//
// }
//
// import {
//
//	to = dbtcloud_starburst_credential.my_starburst_credential
//
//	id = "12345:6789"
//
// }
//
// using the older import command
//
// ```sh
// $ pulumi import dbtcloud:index/starburstCredential:StarburstCredential my_starburst_credential "project_id:credential_id"
// ```
//
// ```sh
// $ pulumi import dbtcloud:index/starburstCredential:StarburstCredential my_starburst_credential 12345:6789
// ```
type StarburstCredential struct {
	pulumi.CustomResourceState

	// The internal credential ID
	CredentialId pulumi.IntOutput `pulumi:"credentialId"`
	// The catalog to connect use
	Database pulumi.StringOutput `pulumi:"database"`
	// The password for the Starburst/Trino account
	Password pulumi.StringOutput `pulumi:"password"`
	// Project ID to create the Starburst/Trino credential in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// The schema where to create models
	Schema pulumi.StringOutput `pulumi:"schema"`
	// The username for the Starburst/Trino account
	User pulumi.StringOutput `pulumi:"user"`
}

// NewStarburstCredential registers a new resource with the given unique name, arguments, and options.
func NewStarburstCredential(ctx *pulumi.Context,
	name string, args *StarburstCredentialArgs, opts ...pulumi.ResourceOption) (*StarburstCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StarburstCredential
	err := ctx.RegisterResource("dbtcloud:index/starburstCredential:StarburstCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStarburstCredential gets an existing StarburstCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStarburstCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StarburstCredentialState, opts ...pulumi.ResourceOption) (*StarburstCredential, error) {
	var resource StarburstCredential
	err := ctx.ReadResource("dbtcloud:index/starburstCredential:StarburstCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StarburstCredential resources.
type starburstCredentialState struct {
	// The internal credential ID
	CredentialId *int `pulumi:"credentialId"`
	// The catalog to connect use
	Database *string `pulumi:"database"`
	// The password for the Starburst/Trino account
	Password *string `pulumi:"password"`
	// Project ID to create the Starburst/Trino credential in
	ProjectId *int `pulumi:"projectId"`
	// The schema where to create models
	Schema *string `pulumi:"schema"`
	// The username for the Starburst/Trino account
	User *string `pulumi:"user"`
}

type StarburstCredentialState struct {
	// The internal credential ID
	CredentialId pulumi.IntPtrInput
	// The catalog to connect use
	Database pulumi.StringPtrInput
	// The password for the Starburst/Trino account
	Password pulumi.StringPtrInput
	// Project ID to create the Starburst/Trino credential in
	ProjectId pulumi.IntPtrInput
	// The schema where to create models
	Schema pulumi.StringPtrInput
	// The username for the Starburst/Trino account
	User pulumi.StringPtrInput
}

func (StarburstCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*starburstCredentialState)(nil)).Elem()
}

type starburstCredentialArgs struct {
	// The catalog to connect use
	Database string `pulumi:"database"`
	// The password for the Starburst/Trino account
	Password string `pulumi:"password"`
	// Project ID to create the Starburst/Trino credential in
	ProjectId int `pulumi:"projectId"`
	// The schema where to create models
	Schema string `pulumi:"schema"`
	// The username for the Starburst/Trino account
	User string `pulumi:"user"`
}

// The set of arguments for constructing a StarburstCredential resource.
type StarburstCredentialArgs struct {
	// The catalog to connect use
	Database pulumi.StringInput
	// The password for the Starburst/Trino account
	Password pulumi.StringInput
	// Project ID to create the Starburst/Trino credential in
	ProjectId pulumi.IntInput
	// The schema where to create models
	Schema pulumi.StringInput
	// The username for the Starburst/Trino account
	User pulumi.StringInput
}

func (StarburstCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*starburstCredentialArgs)(nil)).Elem()
}

type StarburstCredentialInput interface {
	pulumi.Input

	ToStarburstCredentialOutput() StarburstCredentialOutput
	ToStarburstCredentialOutputWithContext(ctx context.Context) StarburstCredentialOutput
}

func (*StarburstCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**StarburstCredential)(nil)).Elem()
}

func (i *StarburstCredential) ToStarburstCredentialOutput() StarburstCredentialOutput {
	return i.ToStarburstCredentialOutputWithContext(context.Background())
}

func (i *StarburstCredential) ToStarburstCredentialOutputWithContext(ctx context.Context) StarburstCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StarburstCredentialOutput)
}

// StarburstCredentialArrayInput is an input type that accepts StarburstCredentialArray and StarburstCredentialArrayOutput values.
// You can construct a concrete instance of `StarburstCredentialArrayInput` via:
//
//	StarburstCredentialArray{ StarburstCredentialArgs{...} }
type StarburstCredentialArrayInput interface {
	pulumi.Input

	ToStarburstCredentialArrayOutput() StarburstCredentialArrayOutput
	ToStarburstCredentialArrayOutputWithContext(context.Context) StarburstCredentialArrayOutput
}

type StarburstCredentialArray []StarburstCredentialInput

func (StarburstCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StarburstCredential)(nil)).Elem()
}

func (i StarburstCredentialArray) ToStarburstCredentialArrayOutput() StarburstCredentialArrayOutput {
	return i.ToStarburstCredentialArrayOutputWithContext(context.Background())
}

func (i StarburstCredentialArray) ToStarburstCredentialArrayOutputWithContext(ctx context.Context) StarburstCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StarburstCredentialArrayOutput)
}

// StarburstCredentialMapInput is an input type that accepts StarburstCredentialMap and StarburstCredentialMapOutput values.
// You can construct a concrete instance of `StarburstCredentialMapInput` via:
//
//	StarburstCredentialMap{ "key": StarburstCredentialArgs{...} }
type StarburstCredentialMapInput interface {
	pulumi.Input

	ToStarburstCredentialMapOutput() StarburstCredentialMapOutput
	ToStarburstCredentialMapOutputWithContext(context.Context) StarburstCredentialMapOutput
}

type StarburstCredentialMap map[string]StarburstCredentialInput

func (StarburstCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StarburstCredential)(nil)).Elem()
}

func (i StarburstCredentialMap) ToStarburstCredentialMapOutput() StarburstCredentialMapOutput {
	return i.ToStarburstCredentialMapOutputWithContext(context.Background())
}

func (i StarburstCredentialMap) ToStarburstCredentialMapOutputWithContext(ctx context.Context) StarburstCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StarburstCredentialMapOutput)
}

type StarburstCredentialOutput struct{ *pulumi.OutputState }

func (StarburstCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StarburstCredential)(nil)).Elem()
}

func (o StarburstCredentialOutput) ToStarburstCredentialOutput() StarburstCredentialOutput {
	return o
}

func (o StarburstCredentialOutput) ToStarburstCredentialOutputWithContext(ctx context.Context) StarburstCredentialOutput {
	return o
}

// The internal credential ID
func (o StarburstCredentialOutput) CredentialId() pulumi.IntOutput {
	return o.ApplyT(func(v *StarburstCredential) pulumi.IntOutput { return v.CredentialId }).(pulumi.IntOutput)
}

// The catalog to connect use
func (o StarburstCredentialOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *StarburstCredential) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// The password for the Starburst/Trino account
func (o StarburstCredentialOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *StarburstCredential) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Project ID to create the Starburst/Trino credential in
func (o StarburstCredentialOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *StarburstCredential) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// The schema where to create models
func (o StarburstCredentialOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *StarburstCredential) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// The username for the Starburst/Trino account
func (o StarburstCredentialOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *StarburstCredential) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

type StarburstCredentialArrayOutput struct{ *pulumi.OutputState }

func (StarburstCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StarburstCredential)(nil)).Elem()
}

func (o StarburstCredentialArrayOutput) ToStarburstCredentialArrayOutput() StarburstCredentialArrayOutput {
	return o
}

func (o StarburstCredentialArrayOutput) ToStarburstCredentialArrayOutputWithContext(ctx context.Context) StarburstCredentialArrayOutput {
	return o
}

func (o StarburstCredentialArrayOutput) Index(i pulumi.IntInput) StarburstCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StarburstCredential {
		return vs[0].([]*StarburstCredential)[vs[1].(int)]
	}).(StarburstCredentialOutput)
}

type StarburstCredentialMapOutput struct{ *pulumi.OutputState }

func (StarburstCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StarburstCredential)(nil)).Elem()
}

func (o StarburstCredentialMapOutput) ToStarburstCredentialMapOutput() StarburstCredentialMapOutput {
	return o
}

func (o StarburstCredentialMapOutput) ToStarburstCredentialMapOutputWithContext(ctx context.Context) StarburstCredentialMapOutput {
	return o
}

func (o StarburstCredentialMapOutput) MapIndex(k pulumi.StringInput) StarburstCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StarburstCredential {
		return vs[0].(map[string]*StarburstCredential)[vs[1].(string)]
	}).(StarburstCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StarburstCredentialInput)(nil)).Elem(), &StarburstCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*StarburstCredentialArrayInput)(nil)).Elem(), StarburstCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StarburstCredentialMapInput)(nil)).Elem(), StarburstCredentialMap{})
	pulumi.RegisterOutputType(StarburstCredentialOutput{})
	pulumi.RegisterOutputType(StarburstCredentialArrayOutput{})
	pulumi.RegisterOutputType(StarburstCredentialMapOutput{})
}

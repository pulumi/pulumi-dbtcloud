// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieve data for a single repository
func LookupRepository(ctx *pulumi.Context, args *LookupRepositoryArgs, opts ...pulumi.InvokeOption) (*LookupRepositoryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRepositoryResult
	err := ctx.Invoke("dbtcloud:index/getRepository:getRepository", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepository.
type LookupRepositoryArgs struct {
	// Whether we should return the public deploy key
	//
	// Deprecated: This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deployKey`
	FetchDeployKey *bool `pulumi:"fetchDeployKey"`
	// Project ID to create the repository in
	ProjectId int `pulumi:"projectId"`
	// ID for the repository
	RepositoryId int `pulumi:"repositoryId"`
}

// A collection of values returned by getRepository.
type LookupRepositoryResult struct {
	// The Azure Dev Ops project ID
	AzureActiveDirectoryProjectId string `pulumi:"azureActiveDirectoryProjectId"`
	// The Azure Dev Ops repository ID
	AzureActiveDirectoryRepositoryId string `pulumi:"azureActiveDirectoryRepositoryId"`
	// If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks
	AzureBypassWebhookRegistrationFailure bool `pulumi:"azureBypassWebhookRegistrationFailure"`
	// Public key generated by dbt when using `deployKey` clone strategy
	DeployKey string `pulumi:"deployKey"`
	// Whether we should return the public deploy key
	//
	// Deprecated: This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deployKey`
	FetchDeployKey bool `pulumi:"fetchDeployKey"`
	// Git clone strategy for the repository
	GitCloneStrategy string `pulumi:"gitCloneStrategy"`
	// Identifier for the GitHub installation
	GithubInstallationId int `pulumi:"githubInstallationId"`
	// Identifier for the Gitlab project
	GitlabProjectId int `pulumi:"gitlabProjectId"`
	// The ID of this resource
	Id string `pulumi:"id"`
	// Whether the repository is active
	IsActive bool `pulumi:"isActive"`
	// Project ID to create the repository in
	ProjectId int `pulumi:"projectId"`
	// The pull request URL template to be used when opening a pull request from within dbt Cloud's IDE
	PullRequestUrlTemplate string `pulumi:"pullRequestUrlTemplate"`
	// Git URL for the repository or <Group>/<Project> for Gitlab
	RemoteUrl string `pulumi:"remoteUrl"`
	// Credentials ID for the repository (From the repository side not the dbt Cloud ID)
	RepositoryCredentialsId int `pulumi:"repositoryCredentialsId"`
	// ID for the repository
	RepositoryId int `pulumi:"repositoryId"`
}

func LookupRepositoryOutput(ctx *pulumi.Context, args LookupRepositoryOutputArgs, opts ...pulumi.InvokeOption) LookupRepositoryResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRepositoryResultOutput, error) {
			args := v.(LookupRepositoryArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("dbtcloud:index/getRepository:getRepository", args, LookupRepositoryResultOutput{}, options).(LookupRepositoryResultOutput), nil
		}).(LookupRepositoryResultOutput)
}

// A collection of arguments for invoking getRepository.
type LookupRepositoryOutputArgs struct {
	// Whether we should return the public deploy key
	//
	// Deprecated: This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deployKey`
	FetchDeployKey pulumi.BoolPtrInput `pulumi:"fetchDeployKey"`
	// Project ID to create the repository in
	ProjectId pulumi.IntInput `pulumi:"projectId"`
	// ID for the repository
	RepositoryId pulumi.IntInput `pulumi:"repositoryId"`
}

func (LookupRepositoryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryArgs)(nil)).Elem()
}

// A collection of values returned by getRepository.
type LookupRepositoryResultOutput struct{ *pulumi.OutputState }

func (LookupRepositoryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryResult)(nil)).Elem()
}

func (o LookupRepositoryResultOutput) ToLookupRepositoryResultOutput() LookupRepositoryResultOutput {
	return o
}

func (o LookupRepositoryResultOutput) ToLookupRepositoryResultOutputWithContext(ctx context.Context) LookupRepositoryResultOutput {
	return o
}

// The Azure Dev Ops project ID
func (o LookupRepositoryResultOutput) AzureActiveDirectoryProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.AzureActiveDirectoryProjectId }).(pulumi.StringOutput)
}

// The Azure Dev Ops repository ID
func (o LookupRepositoryResultOutput) AzureActiveDirectoryRepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.AzureActiveDirectoryRepositoryId }).(pulumi.StringOutput)
}

// If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks
func (o LookupRepositoryResultOutput) AzureBypassWebhookRegistrationFailure() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRepositoryResult) bool { return v.AzureBypassWebhookRegistrationFailure }).(pulumi.BoolOutput)
}

// Public key generated by dbt when using `deployKey` clone strategy
func (o LookupRepositoryResultOutput) DeployKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.DeployKey }).(pulumi.StringOutput)
}

// Whether we should return the public deploy key
//
// Deprecated: This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deployKey`
func (o LookupRepositoryResultOutput) FetchDeployKey() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRepositoryResult) bool { return v.FetchDeployKey }).(pulumi.BoolOutput)
}

// Git clone strategy for the repository
func (o LookupRepositoryResultOutput) GitCloneStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.GitCloneStrategy }).(pulumi.StringOutput)
}

// Identifier for the GitHub installation
func (o LookupRepositoryResultOutput) GithubInstallationId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRepositoryResult) int { return v.GithubInstallationId }).(pulumi.IntOutput)
}

// Identifier for the Gitlab project
func (o LookupRepositoryResultOutput) GitlabProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRepositoryResult) int { return v.GitlabProjectId }).(pulumi.IntOutput)
}

// The ID of this resource
func (o LookupRepositoryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether the repository is active
func (o LookupRepositoryResultOutput) IsActive() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRepositoryResult) bool { return v.IsActive }).(pulumi.BoolOutput)
}

// Project ID to create the repository in
func (o LookupRepositoryResultOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRepositoryResult) int { return v.ProjectId }).(pulumi.IntOutput)
}

// The pull request URL template to be used when opening a pull request from within dbt Cloud's IDE
func (o LookupRepositoryResultOutput) PullRequestUrlTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.PullRequestUrlTemplate }).(pulumi.StringOutput)
}

// Git URL for the repository or <Group>/<Project> for Gitlab
func (o LookupRepositoryResultOutput) RemoteUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.RemoteUrl }).(pulumi.StringOutput)
}

// Credentials ID for the repository (From the repository side not the dbt Cloud ID)
func (o LookupRepositoryResultOutput) RepositoryCredentialsId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRepositoryResult) int { return v.RepositoryCredentialsId }).(pulumi.IntOutput)
}

// ID for the repository
func (o LookupRepositoryResultOutput) RepositoryId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRepositoryResult) int { return v.RepositoryId }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRepositoryResultOutput{})
}

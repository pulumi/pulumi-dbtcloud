// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieve data for a single environment
func LookupEnvironment(ctx *pulumi.Context, args *LookupEnvironmentArgs, opts ...pulumi.InvokeOption) (*LookupEnvironmentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEnvironmentResult
	err := ctx.Invoke("dbtcloud:index/getEnvironment:getEnvironment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEnvironment.
type LookupEnvironmentArgs struct {
	// The ID of the environment
	EnvironmentId int `pulumi:"environmentId"`
	// The project ID to which the environment belong
	ProjectId int `pulumi:"projectId"`
}

// A collection of values returned by getEnvironment.
type LookupEnvironmentResult struct {
	// The project ID to which the environment belong
	CredentialsId int `pulumi:"credentialsId"`
	// The type of deployment environment (currently 'production', 'staging' or empty)
	CustomBranch string `pulumi:"customBranch"`
	// Version number of dbt to use in this environment, usually in the format 1.2.0-latest rather than core versions
	DbtVersion string `pulumi:"dbtVersion"`
	// The name of the environment
	DeploymentType string `pulumi:"deploymentType"`
	// The ID of the environment
	EnvironmentId int `pulumi:"environmentId"`
	// The ID of the extended attributes applied
	ExtendedAttributesId int `pulumi:"extendedAttributesId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the environment
	Name string `pulumi:"name"`
	// The project ID to which the environment belong
	ProjectId int `pulumi:"projectId"`
	// The name of the environment
	Type string `pulumi:"type"`
	// Whether to use a custom git branch in this environment
	UseCustomBranch bool `pulumi:"useCustomBranch"`
}

func LookupEnvironmentOutput(ctx *pulumi.Context, args LookupEnvironmentOutputArgs, opts ...pulumi.InvokeOption) LookupEnvironmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEnvironmentResult, error) {
			args := v.(LookupEnvironmentArgs)
			r, err := LookupEnvironment(ctx, &args, opts...)
			var s LookupEnvironmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupEnvironmentResultOutput)
}

// A collection of arguments for invoking getEnvironment.
type LookupEnvironmentOutputArgs struct {
	// The ID of the environment
	EnvironmentId pulumi.IntInput `pulumi:"environmentId"`
	// The project ID to which the environment belong
	ProjectId pulumi.IntInput `pulumi:"projectId"`
}

func (LookupEnvironmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnvironmentArgs)(nil)).Elem()
}

// A collection of values returned by getEnvironment.
type LookupEnvironmentResultOutput struct{ *pulumi.OutputState }

func (LookupEnvironmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnvironmentResult)(nil)).Elem()
}

func (o LookupEnvironmentResultOutput) ToLookupEnvironmentResultOutput() LookupEnvironmentResultOutput {
	return o
}

func (o LookupEnvironmentResultOutput) ToLookupEnvironmentResultOutputWithContext(ctx context.Context) LookupEnvironmentResultOutput {
	return o
}

// The project ID to which the environment belong
func (o LookupEnvironmentResultOutput) CredentialsId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) int { return v.CredentialsId }).(pulumi.IntOutput)
}

// The type of deployment environment (currently 'production', 'staging' or empty)
func (o LookupEnvironmentResultOutput) CustomBranch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) string { return v.CustomBranch }).(pulumi.StringOutput)
}

// Version number of dbt to use in this environment, usually in the format 1.2.0-latest rather than core versions
func (o LookupEnvironmentResultOutput) DbtVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) string { return v.DbtVersion }).(pulumi.StringOutput)
}

// The name of the environment
func (o LookupEnvironmentResultOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// The ID of the environment
func (o LookupEnvironmentResultOutput) EnvironmentId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) int { return v.EnvironmentId }).(pulumi.IntOutput)
}

// The ID of the extended attributes applied
func (o LookupEnvironmentResultOutput) ExtendedAttributesId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) int { return v.ExtendedAttributesId }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupEnvironmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the environment
func (o LookupEnvironmentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) string { return v.Name }).(pulumi.StringOutput)
}

// The project ID to which the environment belong
func (o LookupEnvironmentResultOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) int { return v.ProjectId }).(pulumi.IntOutput)
}

// The name of the environment
func (o LookupEnvironmentResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) string { return v.Type }).(pulumi.StringOutput)
}

// Whether to use a custom git branch in this environment
func (o LookupEnvironmentResultOutput) UseCustomBranch() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) bool { return v.UseCustomBranch }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEnvironmentResultOutput{})
}

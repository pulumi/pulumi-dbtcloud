// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get model notifications configuration for a dbt Cloud environment
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dbtcloud.LookupModelNotifications(ctx, &dbtcloud.LookupModelNotificationsArgs{
//				EnvironmentId: prodEnvironment.EnvironmentId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dbtcloud.LookupModelNotifications(ctx, &dbtcloud.LookupModelNotificationsArgs{
//				EnvironmentId: "12345",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupModelNotifications(ctx *pulumi.Context, args *LookupModelNotificationsArgs, opts ...pulumi.InvokeOption) (*LookupModelNotificationsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupModelNotificationsResult
	err := ctx.Invoke("dbtcloud:index/getModelNotifications:getModelNotifications", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getModelNotifications.
type LookupModelNotificationsArgs struct {
	// The ID of the dbt Cloud environment
	EnvironmentId string `pulumi:"environmentId"`
}

// A collection of values returned by getModelNotifications.
type LookupModelNotificationsResult struct {
	// Whether model notifications are enabled for this environment
	Enabled bool `pulumi:"enabled"`
	// The ID of the dbt Cloud environment
	EnvironmentId string `pulumi:"environmentId"`
	// The internal ID of the model notifications configuration
	Id int `pulumi:"id"`
	// Whether to send notifications for failed model runs
	OnFailure bool `pulumi:"onFailure"`
	// Whether to send notifications for skipped model runs
	OnSkipped bool `pulumi:"onSkipped"`
	// Whether to send notifications for successful model runs
	OnSuccess bool `pulumi:"onSuccess"`
	// Whether to send notifications for model runs with warnings
	OnWarning bool `pulumi:"onWarning"`
}

func LookupModelNotificationsOutput(ctx *pulumi.Context, args LookupModelNotificationsOutputArgs, opts ...pulumi.InvokeOption) LookupModelNotificationsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupModelNotificationsResultOutput, error) {
			args := v.(LookupModelNotificationsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("dbtcloud:index/getModelNotifications:getModelNotifications", args, LookupModelNotificationsResultOutput{}, options).(LookupModelNotificationsResultOutput), nil
		}).(LookupModelNotificationsResultOutput)
}

// A collection of arguments for invoking getModelNotifications.
type LookupModelNotificationsOutputArgs struct {
	// The ID of the dbt Cloud environment
	EnvironmentId pulumi.StringInput `pulumi:"environmentId"`
}

func (LookupModelNotificationsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupModelNotificationsArgs)(nil)).Elem()
}

// A collection of values returned by getModelNotifications.
type LookupModelNotificationsResultOutput struct{ *pulumi.OutputState }

func (LookupModelNotificationsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupModelNotificationsResult)(nil)).Elem()
}

func (o LookupModelNotificationsResultOutput) ToLookupModelNotificationsResultOutput() LookupModelNotificationsResultOutput {
	return o
}

func (o LookupModelNotificationsResultOutput) ToLookupModelNotificationsResultOutputWithContext(ctx context.Context) LookupModelNotificationsResultOutput {
	return o
}

// Whether model notifications are enabled for this environment
func (o LookupModelNotificationsResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupModelNotificationsResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of the dbt Cloud environment
func (o LookupModelNotificationsResultOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelNotificationsResult) string { return v.EnvironmentId }).(pulumi.StringOutput)
}

// The internal ID of the model notifications configuration
func (o LookupModelNotificationsResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupModelNotificationsResult) int { return v.Id }).(pulumi.IntOutput)
}

// Whether to send notifications for failed model runs
func (o LookupModelNotificationsResultOutput) OnFailure() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupModelNotificationsResult) bool { return v.OnFailure }).(pulumi.BoolOutput)
}

// Whether to send notifications for skipped model runs
func (o LookupModelNotificationsResultOutput) OnSkipped() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupModelNotificationsResult) bool { return v.OnSkipped }).(pulumi.BoolOutput)
}

// Whether to send notifications for successful model runs
func (o LookupModelNotificationsResultOutput) OnSuccess() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupModelNotificationsResult) bool { return v.OnSuccess }).(pulumi.BoolOutput)
}

// Whether to send notifications for model runs with warnings
func (o LookupModelNotificationsResultOutput) OnWarning() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupModelNotificationsResult) bool { return v.OnWarning }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupModelNotificationsResultOutput{})
}

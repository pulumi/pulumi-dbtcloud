// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Developer license group mapping
//			_, err := dbtcloud.NewPartialLicenseMap(ctx, "dev_license_map", &dbtcloud.PartialLicenseMapArgs{
//				LicenseType: pulumi.String("developer"),
//				SsoLicenseMappingGroups: pulumi.StringArray{
//					pulumi.String("DEV-SSO-GROUP"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Read-only license mapping
//			_, err = dbtcloud.NewPartialLicenseMap(ctx, "read_only_license_map", &dbtcloud.PartialLicenseMapArgs{
//				LicenseType: pulumi.String("read_only"),
//				SsoLicenseMappingGroups: pulumi.StringArray{
//					pulumi.String("READ-ONLY-SSO-GROUP"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// IT license mapping
//			_, err = dbtcloud.NewPartialLicenseMap(ctx, "it_license_map", &dbtcloud.PartialLicenseMapArgs{
//				LicenseType: pulumi.String("it"),
//				SsoLicenseMappingGroups: pulumi.StringArray{
//					pulumi.String("IT-SSO-GROUP"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PartialLicenseMap struct {
	pulumi.CustomResourceState

	// The license type to update
	LicenseType pulumi.StringOutput `pulumi:"licenseType"`
	// List of SSO groups to map to the license type.
	SsoLicenseMappingGroups pulumi.StringArrayOutput `pulumi:"ssoLicenseMappingGroups"`
}

// NewPartialLicenseMap registers a new resource with the given unique name, arguments, and options.
func NewPartialLicenseMap(ctx *pulumi.Context,
	name string, args *PartialLicenseMapArgs, opts ...pulumi.ResourceOption) (*PartialLicenseMap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LicenseType == nil {
		return nil, errors.New("invalid value for required argument 'LicenseType'")
	}
	if args.SsoLicenseMappingGroups == nil {
		return nil, errors.New("invalid value for required argument 'SsoLicenseMappingGroups'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PartialLicenseMap
	err := ctx.RegisterResource("dbtcloud:index/partialLicenseMap:PartialLicenseMap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPartialLicenseMap gets an existing PartialLicenseMap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPartialLicenseMap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PartialLicenseMapState, opts ...pulumi.ResourceOption) (*PartialLicenseMap, error) {
	var resource PartialLicenseMap
	err := ctx.ReadResource("dbtcloud:index/partialLicenseMap:PartialLicenseMap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PartialLicenseMap resources.
type partialLicenseMapState struct {
	// The license type to update
	LicenseType *string `pulumi:"licenseType"`
	// List of SSO groups to map to the license type.
	SsoLicenseMappingGroups []string `pulumi:"ssoLicenseMappingGroups"`
}

type PartialLicenseMapState struct {
	// The license type to update
	LicenseType pulumi.StringPtrInput
	// List of SSO groups to map to the license type.
	SsoLicenseMappingGroups pulumi.StringArrayInput
}

func (PartialLicenseMapState) ElementType() reflect.Type {
	return reflect.TypeOf((*partialLicenseMapState)(nil)).Elem()
}

type partialLicenseMapArgs struct {
	// The license type to update
	LicenseType string `pulumi:"licenseType"`
	// List of SSO groups to map to the license type.
	SsoLicenseMappingGroups []string `pulumi:"ssoLicenseMappingGroups"`
}

// The set of arguments for constructing a PartialLicenseMap resource.
type PartialLicenseMapArgs struct {
	// The license type to update
	LicenseType pulumi.StringInput
	// List of SSO groups to map to the license type.
	SsoLicenseMappingGroups pulumi.StringArrayInput
}

func (PartialLicenseMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*partialLicenseMapArgs)(nil)).Elem()
}

type PartialLicenseMapInput interface {
	pulumi.Input

	ToPartialLicenseMapOutput() PartialLicenseMapOutput
	ToPartialLicenseMapOutputWithContext(ctx context.Context) PartialLicenseMapOutput
}

func (*PartialLicenseMap) ElementType() reflect.Type {
	return reflect.TypeOf((**PartialLicenseMap)(nil)).Elem()
}

func (i *PartialLicenseMap) ToPartialLicenseMapOutput() PartialLicenseMapOutput {
	return i.ToPartialLicenseMapOutputWithContext(context.Background())
}

func (i *PartialLicenseMap) ToPartialLicenseMapOutputWithContext(ctx context.Context) PartialLicenseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartialLicenseMapOutput)
}

// PartialLicenseMapArrayInput is an input type that accepts PartialLicenseMapArray and PartialLicenseMapArrayOutput values.
// You can construct a concrete instance of `PartialLicenseMapArrayInput` via:
//
//	PartialLicenseMapArray{ PartialLicenseMapArgs{...} }
type PartialLicenseMapArrayInput interface {
	pulumi.Input

	ToPartialLicenseMapArrayOutput() PartialLicenseMapArrayOutput
	ToPartialLicenseMapArrayOutputWithContext(context.Context) PartialLicenseMapArrayOutput
}

type PartialLicenseMapArray []PartialLicenseMapInput

func (PartialLicenseMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PartialLicenseMap)(nil)).Elem()
}

func (i PartialLicenseMapArray) ToPartialLicenseMapArrayOutput() PartialLicenseMapArrayOutput {
	return i.ToPartialLicenseMapArrayOutputWithContext(context.Background())
}

func (i PartialLicenseMapArray) ToPartialLicenseMapArrayOutputWithContext(ctx context.Context) PartialLicenseMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartialLicenseMapArrayOutput)
}

// PartialLicenseMapMapInput is an input type that accepts PartialLicenseMapMap and PartialLicenseMapMapOutput values.
// You can construct a concrete instance of `PartialLicenseMapMapInput` via:
//
//	PartialLicenseMapMap{ "key": PartialLicenseMapArgs{...} }
type PartialLicenseMapMapInput interface {
	pulumi.Input

	ToPartialLicenseMapMapOutput() PartialLicenseMapMapOutput
	ToPartialLicenseMapMapOutputWithContext(context.Context) PartialLicenseMapMapOutput
}

type PartialLicenseMapMap map[string]PartialLicenseMapInput

func (PartialLicenseMapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PartialLicenseMap)(nil)).Elem()
}

func (i PartialLicenseMapMap) ToPartialLicenseMapMapOutput() PartialLicenseMapMapOutput {
	return i.ToPartialLicenseMapMapOutputWithContext(context.Background())
}

func (i PartialLicenseMapMap) ToPartialLicenseMapMapOutputWithContext(ctx context.Context) PartialLicenseMapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartialLicenseMapMapOutput)
}

type PartialLicenseMapOutput struct{ *pulumi.OutputState }

func (PartialLicenseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartialLicenseMap)(nil)).Elem()
}

func (o PartialLicenseMapOutput) ToPartialLicenseMapOutput() PartialLicenseMapOutput {
	return o
}

func (o PartialLicenseMapOutput) ToPartialLicenseMapOutputWithContext(ctx context.Context) PartialLicenseMapOutput {
	return o
}

// The license type to update
func (o PartialLicenseMapOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v *PartialLicenseMap) pulumi.StringOutput { return v.LicenseType }).(pulumi.StringOutput)
}

// List of SSO groups to map to the license type.
func (o PartialLicenseMapOutput) SsoLicenseMappingGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PartialLicenseMap) pulumi.StringArrayOutput { return v.SsoLicenseMappingGroups }).(pulumi.StringArrayOutput)
}

type PartialLicenseMapArrayOutput struct{ *pulumi.OutputState }

func (PartialLicenseMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PartialLicenseMap)(nil)).Elem()
}

func (o PartialLicenseMapArrayOutput) ToPartialLicenseMapArrayOutput() PartialLicenseMapArrayOutput {
	return o
}

func (o PartialLicenseMapArrayOutput) ToPartialLicenseMapArrayOutputWithContext(ctx context.Context) PartialLicenseMapArrayOutput {
	return o
}

func (o PartialLicenseMapArrayOutput) Index(i pulumi.IntInput) PartialLicenseMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PartialLicenseMap {
		return vs[0].([]*PartialLicenseMap)[vs[1].(int)]
	}).(PartialLicenseMapOutput)
}

type PartialLicenseMapMapOutput struct{ *pulumi.OutputState }

func (PartialLicenseMapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PartialLicenseMap)(nil)).Elem()
}

func (o PartialLicenseMapMapOutput) ToPartialLicenseMapMapOutput() PartialLicenseMapMapOutput {
	return o
}

func (o PartialLicenseMapMapOutput) ToPartialLicenseMapMapOutputWithContext(ctx context.Context) PartialLicenseMapMapOutput {
	return o
}

func (o PartialLicenseMapMapOutput) MapIndex(k pulumi.StringInput) PartialLicenseMapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PartialLicenseMap {
		return vs[0].(map[string]*PartialLicenseMap)[vs[1].(string)]
	}).(PartialLicenseMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PartialLicenseMapInput)(nil)).Elem(), &PartialLicenseMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartialLicenseMapArrayInput)(nil)).Elem(), PartialLicenseMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartialLicenseMapMapInput)(nil)).Elem(), PartialLicenseMapMap{})
	pulumi.RegisterOutputType(PartialLicenseMapOutput{})
	pulumi.RegisterOutputType(PartialLicenseMapArrayOutput{})
	pulumi.RegisterOutputType(PartialLicenseMapMapOutput{})
}

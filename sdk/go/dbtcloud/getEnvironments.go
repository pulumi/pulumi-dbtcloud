// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieve data for multiple environments
func GetEnvironments(ctx *pulumi.Context, args *GetEnvironmentsArgs, opts ...pulumi.InvokeOption) (*GetEnvironmentsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetEnvironmentsResult
	err := ctx.Invoke("dbtcloud:index/getEnvironments:getEnvironments", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEnvironments.
type GetEnvironmentsArgs struct {
	// The project ID to filter the environments for [Optional]
	ProjectId *int `pulumi:"projectId"`
}

// A collection of values returned by getEnvironments.
type GetEnvironmentsResult struct {
	// The list of environments
	Environments []GetEnvironmentsEnvironment `pulumi:"environments"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The project ID to filter the environments for [Optional]
	ProjectId *int `pulumi:"projectId"`
}

func GetEnvironmentsOutput(ctx *pulumi.Context, args GetEnvironmentsOutputArgs, opts ...pulumi.InvokeOption) GetEnvironmentsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetEnvironmentsResultOutput, error) {
			args := v.(GetEnvironmentsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("dbtcloud:index/getEnvironments:getEnvironments", args, GetEnvironmentsResultOutput{}, options).(GetEnvironmentsResultOutput), nil
		}).(GetEnvironmentsResultOutput)
}

// A collection of arguments for invoking getEnvironments.
type GetEnvironmentsOutputArgs struct {
	// The project ID to filter the environments for [Optional]
	ProjectId pulumi.IntPtrInput `pulumi:"projectId"`
}

func (GetEnvironmentsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEnvironmentsArgs)(nil)).Elem()
}

// A collection of values returned by getEnvironments.
type GetEnvironmentsResultOutput struct{ *pulumi.OutputState }

func (GetEnvironmentsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEnvironmentsResult)(nil)).Elem()
}

func (o GetEnvironmentsResultOutput) ToGetEnvironmentsResultOutput() GetEnvironmentsResultOutput {
	return o
}

func (o GetEnvironmentsResultOutput) ToGetEnvironmentsResultOutputWithContext(ctx context.Context) GetEnvironmentsResultOutput {
	return o
}

// The list of environments
func (o GetEnvironmentsResultOutput) Environments() GetEnvironmentsEnvironmentArrayOutput {
	return o.ApplyT(func(v GetEnvironmentsResult) []GetEnvironmentsEnvironment { return v.Environments }).(GetEnvironmentsEnvironmentArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetEnvironmentsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEnvironmentsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The project ID to filter the environments for [Optional]
func (o GetEnvironmentsResultOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetEnvironmentsResult) *int { return v.ProjectId }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetEnvironmentsResultOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Databricks credential data source
func LookupDatabricksCredential(ctx *pulumi.Context, args *LookupDatabricksCredentialArgs, opts ...pulumi.InvokeOption) (*LookupDatabricksCredentialResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDatabricksCredentialResult
	err := ctx.Invoke("dbtcloud:index/getDatabricksCredential:getDatabricksCredential", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatabricksCredential.
type LookupDatabricksCredentialArgs struct {
	// Credential ID
	CredentialId int `pulumi:"credentialId"`
	// Project ID
	ProjectId int `pulumi:"projectId"`
}

// A collection of values returned by getDatabricksCredential.
type LookupDatabricksCredentialResult struct {
	// The type of the adapter (databricks or spark)
	AdapterType string `pulumi:"adapterType"`
	// The catalog where to create models
	Catalog string `pulumi:"catalog"`
	// Credential ID
	CredentialId int `pulumi:"credentialId"`
	// The ID of this resource. Contains the project ID and the credential ID.
	Id string `pulumi:"id"`
	// The number of threads to use
	NumThreads int `pulumi:"numThreads"`
	// Project ID
	ProjectId int `pulumi:"projectId"`
	// The schema where to create models
	Schema string `pulumi:"schema"`
	// Target name
	TargetName string `pulumi:"targetName"`
}

func LookupDatabricksCredentialOutput(ctx *pulumi.Context, args LookupDatabricksCredentialOutputArgs, opts ...pulumi.InvokeOption) LookupDatabricksCredentialResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDatabricksCredentialResultOutput, error) {
			args := v.(LookupDatabricksCredentialArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("dbtcloud:index/getDatabricksCredential:getDatabricksCredential", args, LookupDatabricksCredentialResultOutput{}, options).(LookupDatabricksCredentialResultOutput), nil
		}).(LookupDatabricksCredentialResultOutput)
}

// A collection of arguments for invoking getDatabricksCredential.
type LookupDatabricksCredentialOutputArgs struct {
	// Credential ID
	CredentialId pulumi.IntInput `pulumi:"credentialId"`
	// Project ID
	ProjectId pulumi.IntInput `pulumi:"projectId"`
}

func (LookupDatabricksCredentialOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabricksCredentialArgs)(nil)).Elem()
}

// A collection of values returned by getDatabricksCredential.
type LookupDatabricksCredentialResultOutput struct{ *pulumi.OutputState }

func (LookupDatabricksCredentialResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabricksCredentialResult)(nil)).Elem()
}

func (o LookupDatabricksCredentialResultOutput) ToLookupDatabricksCredentialResultOutput() LookupDatabricksCredentialResultOutput {
	return o
}

func (o LookupDatabricksCredentialResultOutput) ToLookupDatabricksCredentialResultOutputWithContext(ctx context.Context) LookupDatabricksCredentialResultOutput {
	return o
}

// The type of the adapter (databricks or spark)
func (o LookupDatabricksCredentialResultOutput) AdapterType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabricksCredentialResult) string { return v.AdapterType }).(pulumi.StringOutput)
}

// The catalog where to create models
func (o LookupDatabricksCredentialResultOutput) Catalog() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabricksCredentialResult) string { return v.Catalog }).(pulumi.StringOutput)
}

// Credential ID
func (o LookupDatabricksCredentialResultOutput) CredentialId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDatabricksCredentialResult) int { return v.CredentialId }).(pulumi.IntOutput)
}

// The ID of this resource. Contains the project ID and the credential ID.
func (o LookupDatabricksCredentialResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabricksCredentialResult) string { return v.Id }).(pulumi.StringOutput)
}

// The number of threads to use
func (o LookupDatabricksCredentialResultOutput) NumThreads() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDatabricksCredentialResult) int { return v.NumThreads }).(pulumi.IntOutput)
}

// Project ID
func (o LookupDatabricksCredentialResultOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDatabricksCredentialResult) int { return v.ProjectId }).(pulumi.IntOutput)
}

// The schema where to create models
func (o LookupDatabricksCredentialResultOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabricksCredentialResult) string { return v.Schema }).(pulumi.StringOutput)
}

// Target name
func (o LookupDatabricksCredentialResultOutput) TargetName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabricksCredentialResult) string { return v.TargetName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatabricksCredentialResultOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Synapse credential resource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// when using sql authentication
//			_, err := dbtcloud.NewSynapseCredential(ctx, "my_synapse_cred_sql", &dbtcloud.SynapseCredentialArgs{
//				ProjectId:           pulumi.Any(dbtProject.Id),
//				Authentication:      pulumi.String("sql"),
//				Schema:              pulumi.String("my_schema"),
//				User:                pulumi.String("my_user"),
//				Password:            pulumi.String("my_password"),
//				SchemaAuthorization: pulumi.String("abcd"),
//			})
//			if err != nil {
//				return err
//			}
//			// when using AD authentication
//			_, err = dbtcloud.NewSynapseCredential(ctx, "my_synapse_cred_ad", &dbtcloud.SynapseCredentialArgs{
//				ProjectId:           pulumi.Any(dbtProject.Id),
//				Authentication:      pulumi.String("ActiveDirectoryPassword"),
//				Schema:              pulumi.String("my_schema"),
//				User:                pulumi.String("my_user"),
//				Password:            pulumi.String("my_password"),
//				SchemaAuthorization: pulumi.String("abcd"),
//			})
//			if err != nil {
//				return err
//			}
//			// when using service principal authentication
//			_, err = dbtcloud.NewSynapseCredential(ctx, "my_synapse_cred_serv_princ", &dbtcloud.SynapseCredentialArgs{
//				ProjectId:           pulumi.Any(dbtProject.Id),
//				Authentication:      pulumi.String("ServicePrincipal"),
//				Schema:              pulumi.String("my_schema"),
//				ClientId:            pulumi.String("my_client_id"),
//				TenantId:            pulumi.String("my_tenant_id"),
//				ClientSecret:        pulumi.String("my_secret"),
//				SchemaAuthorization: pulumi.String("abcd"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// using  import blocks (requires Terraform >= 1.5)
//
// import {
//
//	to = dbtcloud_synapse_credential.my_synapse_credential
//
//	id = "project_id:credential_id"
//
// }
//
// import {
//
//	to = dbtcloud_synapse_credential.my_synapse_credential
//
//	id = "12345:6789"
//
// }
//
// using the older import command
//
// ```sh
// $ pulumi import dbtcloud:index/synapseCredential:SynapseCredential my_synapse_credential "project_id:credential_id"
// ```
//
// ```sh
// $ pulumi import dbtcloud:index/synapseCredential:SynapseCredential my_synapse_credential 12345:6789
// ```
type SynapseCredential struct {
	pulumi.CustomResourceState

	// The type of the adapter (synapse)
	AdapterType pulumi.StringOutput `pulumi:"adapterType"`
	// Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)
	Authentication pulumi.StringOutput `pulumi:"authentication"`
	// The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// The internal credential ID
	CredentialId pulumi.IntOutput `pulumi:"credentialId"`
	// The password for the account to connect to. Only used when connection with AD user/pass
	Password pulumi.StringOutput `pulumi:"password"`
	// Project ID to create the Synapse credential in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// The schema where to create the dbt models
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Optionally set this to the principal who should own the schemas created by dbt
	SchemaAuthorization pulumi.StringOutput `pulumi:"schemaAuthorization"`
	// The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The username of the Synapse account to connect to. Only used when connection with AD user/pass
	User pulumi.StringOutput `pulumi:"user"`
}

// NewSynapseCredential registers a new resource with the given unique name, arguments, and options.
func NewSynapseCredential(ctx *pulumi.Context,
	name string, args *SynapseCredentialArgs, opts ...pulumi.ResourceOption) (*SynapseCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdapterType == nil {
		return nil, errors.New("invalid value for required argument 'AdapterType'")
	}
	if args.Authentication == nil {
		return nil, errors.New("invalid value for required argument 'Authentication'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringPtrInput)
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientSecret",
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SynapseCredential
	err := ctx.RegisterResource("dbtcloud:index/synapseCredential:SynapseCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSynapseCredential gets an existing SynapseCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSynapseCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SynapseCredentialState, opts ...pulumi.ResourceOption) (*SynapseCredential, error) {
	var resource SynapseCredential
	err := ctx.ReadResource("dbtcloud:index/synapseCredential:SynapseCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SynapseCredential resources.
type synapseCredentialState struct {
	// The type of the adapter (synapse)
	AdapterType *string `pulumi:"adapterType"`
	// Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)
	Authentication *string `pulumi:"authentication"`
	// The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientId *string `pulumi:"clientId"`
	// The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientSecret *string `pulumi:"clientSecret"`
	// The internal credential ID
	CredentialId *int `pulumi:"credentialId"`
	// The password for the account to connect to. Only used when connection with AD user/pass
	Password *string `pulumi:"password"`
	// Project ID to create the Synapse credential in
	ProjectId *int `pulumi:"projectId"`
	// The schema where to create the dbt models
	Schema *string `pulumi:"schema"`
	// Optionally set this to the principal who should own the schemas created by dbt
	SchemaAuthorization *string `pulumi:"schemaAuthorization"`
	// The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
	TenantId *string `pulumi:"tenantId"`
	// The username of the Synapse account to connect to. Only used when connection with AD user/pass
	User *string `pulumi:"user"`
}

type SynapseCredentialState struct {
	// The type of the adapter (synapse)
	AdapterType pulumi.StringPtrInput
	// Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)
	Authentication pulumi.StringPtrInput
	// The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientId pulumi.StringPtrInput
	// The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientSecret pulumi.StringPtrInput
	// The internal credential ID
	CredentialId pulumi.IntPtrInput
	// The password for the account to connect to. Only used when connection with AD user/pass
	Password pulumi.StringPtrInput
	// Project ID to create the Synapse credential in
	ProjectId pulumi.IntPtrInput
	// The schema where to create the dbt models
	Schema pulumi.StringPtrInput
	// Optionally set this to the principal who should own the schemas created by dbt
	SchemaAuthorization pulumi.StringPtrInput
	// The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
	TenantId pulumi.StringPtrInput
	// The username of the Synapse account to connect to. Only used when connection with AD user/pass
	User pulumi.StringPtrInput
}

func (SynapseCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*synapseCredentialState)(nil)).Elem()
}

type synapseCredentialArgs struct {
	// The type of the adapter (synapse)
	AdapterType string `pulumi:"adapterType"`
	// Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)
	Authentication string `pulumi:"authentication"`
	// The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientId *string `pulumi:"clientId"`
	// The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientSecret *string `pulumi:"clientSecret"`
	// The password for the account to connect to. Only used when connection with AD user/pass
	Password *string `pulumi:"password"`
	// Project ID to create the Synapse credential in
	ProjectId int `pulumi:"projectId"`
	// The schema where to create the dbt models
	Schema string `pulumi:"schema"`
	// Optionally set this to the principal who should own the schemas created by dbt
	SchemaAuthorization *string `pulumi:"schemaAuthorization"`
	// The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
	TenantId *string `pulumi:"tenantId"`
	// The username of the Synapse account to connect to. Only used when connection with AD user/pass
	User *string `pulumi:"user"`
}

// The set of arguments for constructing a SynapseCredential resource.
type SynapseCredentialArgs struct {
	// The type of the adapter (synapse)
	AdapterType pulumi.StringInput
	// Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)
	Authentication pulumi.StringInput
	// The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientId pulumi.StringPtrInput
	// The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientSecret pulumi.StringPtrInput
	// The password for the account to connect to. Only used when connection with AD user/pass
	Password pulumi.StringPtrInput
	// Project ID to create the Synapse credential in
	ProjectId pulumi.IntInput
	// The schema where to create the dbt models
	Schema pulumi.StringInput
	// Optionally set this to the principal who should own the schemas created by dbt
	SchemaAuthorization pulumi.StringPtrInput
	// The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
	TenantId pulumi.StringPtrInput
	// The username of the Synapse account to connect to. Only used when connection with AD user/pass
	User pulumi.StringPtrInput
}

func (SynapseCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*synapseCredentialArgs)(nil)).Elem()
}

type SynapseCredentialInput interface {
	pulumi.Input

	ToSynapseCredentialOutput() SynapseCredentialOutput
	ToSynapseCredentialOutputWithContext(ctx context.Context) SynapseCredentialOutput
}

func (*SynapseCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**SynapseCredential)(nil)).Elem()
}

func (i *SynapseCredential) ToSynapseCredentialOutput() SynapseCredentialOutput {
	return i.ToSynapseCredentialOutputWithContext(context.Background())
}

func (i *SynapseCredential) ToSynapseCredentialOutputWithContext(ctx context.Context) SynapseCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseCredentialOutput)
}

// SynapseCredentialArrayInput is an input type that accepts SynapseCredentialArray and SynapseCredentialArrayOutput values.
// You can construct a concrete instance of `SynapseCredentialArrayInput` via:
//
//	SynapseCredentialArray{ SynapseCredentialArgs{...} }
type SynapseCredentialArrayInput interface {
	pulumi.Input

	ToSynapseCredentialArrayOutput() SynapseCredentialArrayOutput
	ToSynapseCredentialArrayOutputWithContext(context.Context) SynapseCredentialArrayOutput
}

type SynapseCredentialArray []SynapseCredentialInput

func (SynapseCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SynapseCredential)(nil)).Elem()
}

func (i SynapseCredentialArray) ToSynapseCredentialArrayOutput() SynapseCredentialArrayOutput {
	return i.ToSynapseCredentialArrayOutputWithContext(context.Background())
}

func (i SynapseCredentialArray) ToSynapseCredentialArrayOutputWithContext(ctx context.Context) SynapseCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseCredentialArrayOutput)
}

// SynapseCredentialMapInput is an input type that accepts SynapseCredentialMap and SynapseCredentialMapOutput values.
// You can construct a concrete instance of `SynapseCredentialMapInput` via:
//
//	SynapseCredentialMap{ "key": SynapseCredentialArgs{...} }
type SynapseCredentialMapInput interface {
	pulumi.Input

	ToSynapseCredentialMapOutput() SynapseCredentialMapOutput
	ToSynapseCredentialMapOutputWithContext(context.Context) SynapseCredentialMapOutput
}

type SynapseCredentialMap map[string]SynapseCredentialInput

func (SynapseCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SynapseCredential)(nil)).Elem()
}

func (i SynapseCredentialMap) ToSynapseCredentialMapOutput() SynapseCredentialMapOutput {
	return i.ToSynapseCredentialMapOutputWithContext(context.Background())
}

func (i SynapseCredentialMap) ToSynapseCredentialMapOutputWithContext(ctx context.Context) SynapseCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseCredentialMapOutput)
}

type SynapseCredentialOutput struct{ *pulumi.OutputState }

func (SynapseCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SynapseCredential)(nil)).Elem()
}

func (o SynapseCredentialOutput) ToSynapseCredentialOutput() SynapseCredentialOutput {
	return o
}

func (o SynapseCredentialOutput) ToSynapseCredentialOutputWithContext(ctx context.Context) SynapseCredentialOutput {
	return o
}

// The type of the adapter (synapse)
func (o SynapseCredentialOutput) AdapterType() pulumi.StringOutput {
	return o.ApplyT(func(v *SynapseCredential) pulumi.StringOutput { return v.AdapterType }).(pulumi.StringOutput)
}

// Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)
func (o SynapseCredentialOutput) Authentication() pulumi.StringOutput {
	return o.ApplyT(func(v *SynapseCredential) pulumi.StringOutput { return v.Authentication }).(pulumi.StringOutput)
}

// The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
func (o SynapseCredentialOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *SynapseCredential) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
func (o SynapseCredentialOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *SynapseCredential) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

// The internal credential ID
func (o SynapseCredentialOutput) CredentialId() pulumi.IntOutput {
	return o.ApplyT(func(v *SynapseCredential) pulumi.IntOutput { return v.CredentialId }).(pulumi.IntOutput)
}

// The password for the account to connect to. Only used when connection with AD user/pass
func (o SynapseCredentialOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *SynapseCredential) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Project ID to create the Synapse credential in
func (o SynapseCredentialOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *SynapseCredential) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// The schema where to create the dbt models
func (o SynapseCredentialOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *SynapseCredential) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Optionally set this to the principal who should own the schemas created by dbt
func (o SynapseCredentialOutput) SchemaAuthorization() pulumi.StringOutput {
	return o.ApplyT(func(v *SynapseCredential) pulumi.StringOutput { return v.SchemaAuthorization }).(pulumi.StringOutput)
}

// The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
func (o SynapseCredentialOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *SynapseCredential) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// The username of the Synapse account to connect to. Only used when connection with AD user/pass
func (o SynapseCredentialOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *SynapseCredential) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

type SynapseCredentialArrayOutput struct{ *pulumi.OutputState }

func (SynapseCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SynapseCredential)(nil)).Elem()
}

func (o SynapseCredentialArrayOutput) ToSynapseCredentialArrayOutput() SynapseCredentialArrayOutput {
	return o
}

func (o SynapseCredentialArrayOutput) ToSynapseCredentialArrayOutputWithContext(ctx context.Context) SynapseCredentialArrayOutput {
	return o
}

func (o SynapseCredentialArrayOutput) Index(i pulumi.IntInput) SynapseCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SynapseCredential {
		return vs[0].([]*SynapseCredential)[vs[1].(int)]
	}).(SynapseCredentialOutput)
}

type SynapseCredentialMapOutput struct{ *pulumi.OutputState }

func (SynapseCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SynapseCredential)(nil)).Elem()
}

func (o SynapseCredentialMapOutput) ToSynapseCredentialMapOutput() SynapseCredentialMapOutput {
	return o
}

func (o SynapseCredentialMapOutput) ToSynapseCredentialMapOutputWithContext(ctx context.Context) SynapseCredentialMapOutput {
	return o
}

func (o SynapseCredentialMapOutput) MapIndex(k pulumi.StringInput) SynapseCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SynapseCredential {
		return vs[0].(map[string]*SynapseCredential)[vs[1].(string)]
	}).(SynapseCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SynapseCredentialInput)(nil)).Elem(), &SynapseCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*SynapseCredentialArrayInput)(nil)).Elem(), SynapseCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SynapseCredentialMapInput)(nil)).Elem(), SynapseCredentialMap{})
	pulumi.RegisterOutputType(SynapseCredentialOutput{})
	pulumi.RegisterOutputType(SynapseCredentialArrayOutput{})
	pulumi.RegisterOutputType(SynapseCredentialMapOutput{})
}

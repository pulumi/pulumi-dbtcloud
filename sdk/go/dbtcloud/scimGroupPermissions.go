// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ScimGroupPermissions struct {
	pulumi.CustomResourceState

	// The ID of the existing group to manage permissions for. This group must already exist.
	GroupId pulumi.IntOutput `pulumi:"groupId"`
	// Set of permissions to apply to the group. This will replace all existing permissions for the group.
	Permissions ScimGroupPermissionsPermissionArrayOutput `pulumi:"permissions"`
}

// NewScimGroupPermissions registers a new resource with the given unique name, arguments, and options.
func NewScimGroupPermissions(ctx *pulumi.Context,
	name string, args *ScimGroupPermissionsArgs, opts ...pulumi.ResourceOption) (*ScimGroupPermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScimGroupPermissions
	err := ctx.RegisterResource("dbtcloud:index/scimGroupPermissions:ScimGroupPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScimGroupPermissions gets an existing ScimGroupPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScimGroupPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScimGroupPermissionsState, opts ...pulumi.ResourceOption) (*ScimGroupPermissions, error) {
	var resource ScimGroupPermissions
	err := ctx.ReadResource("dbtcloud:index/scimGroupPermissions:ScimGroupPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScimGroupPermissions resources.
type scimGroupPermissionsState struct {
	// The ID of the existing group to manage permissions for. This group must already exist.
	GroupId *int `pulumi:"groupId"`
	// Set of permissions to apply to the group. This will replace all existing permissions for the group.
	Permissions []ScimGroupPermissionsPermission `pulumi:"permissions"`
}

type ScimGroupPermissionsState struct {
	// The ID of the existing group to manage permissions for. This group must already exist.
	GroupId pulumi.IntPtrInput
	// Set of permissions to apply to the group. This will replace all existing permissions for the group.
	Permissions ScimGroupPermissionsPermissionArrayInput
}

func (ScimGroupPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*scimGroupPermissionsState)(nil)).Elem()
}

type scimGroupPermissionsArgs struct {
	// The ID of the existing group to manage permissions for. This group must already exist.
	GroupId int `pulumi:"groupId"`
	// Set of permissions to apply to the group. This will replace all existing permissions for the group.
	Permissions []ScimGroupPermissionsPermission `pulumi:"permissions"`
}

// The set of arguments for constructing a ScimGroupPermissions resource.
type ScimGroupPermissionsArgs struct {
	// The ID of the existing group to manage permissions for. This group must already exist.
	GroupId pulumi.IntInput
	// Set of permissions to apply to the group. This will replace all existing permissions for the group.
	Permissions ScimGroupPermissionsPermissionArrayInput
}

func (ScimGroupPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scimGroupPermissionsArgs)(nil)).Elem()
}

type ScimGroupPermissionsInput interface {
	pulumi.Input

	ToScimGroupPermissionsOutput() ScimGroupPermissionsOutput
	ToScimGroupPermissionsOutputWithContext(ctx context.Context) ScimGroupPermissionsOutput
}

func (*ScimGroupPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((**ScimGroupPermissions)(nil)).Elem()
}

func (i *ScimGroupPermissions) ToScimGroupPermissionsOutput() ScimGroupPermissionsOutput {
	return i.ToScimGroupPermissionsOutputWithContext(context.Background())
}

func (i *ScimGroupPermissions) ToScimGroupPermissionsOutputWithContext(ctx context.Context) ScimGroupPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScimGroupPermissionsOutput)
}

// ScimGroupPermissionsArrayInput is an input type that accepts ScimGroupPermissionsArray and ScimGroupPermissionsArrayOutput values.
// You can construct a concrete instance of `ScimGroupPermissionsArrayInput` via:
//
//	ScimGroupPermissionsArray{ ScimGroupPermissionsArgs{...} }
type ScimGroupPermissionsArrayInput interface {
	pulumi.Input

	ToScimGroupPermissionsArrayOutput() ScimGroupPermissionsArrayOutput
	ToScimGroupPermissionsArrayOutputWithContext(context.Context) ScimGroupPermissionsArrayOutput
}

type ScimGroupPermissionsArray []ScimGroupPermissionsInput

func (ScimGroupPermissionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScimGroupPermissions)(nil)).Elem()
}

func (i ScimGroupPermissionsArray) ToScimGroupPermissionsArrayOutput() ScimGroupPermissionsArrayOutput {
	return i.ToScimGroupPermissionsArrayOutputWithContext(context.Background())
}

func (i ScimGroupPermissionsArray) ToScimGroupPermissionsArrayOutputWithContext(ctx context.Context) ScimGroupPermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScimGroupPermissionsArrayOutput)
}

// ScimGroupPermissionsMapInput is an input type that accepts ScimGroupPermissionsMap and ScimGroupPermissionsMapOutput values.
// You can construct a concrete instance of `ScimGroupPermissionsMapInput` via:
//
//	ScimGroupPermissionsMap{ "key": ScimGroupPermissionsArgs{...} }
type ScimGroupPermissionsMapInput interface {
	pulumi.Input

	ToScimGroupPermissionsMapOutput() ScimGroupPermissionsMapOutput
	ToScimGroupPermissionsMapOutputWithContext(context.Context) ScimGroupPermissionsMapOutput
}

type ScimGroupPermissionsMap map[string]ScimGroupPermissionsInput

func (ScimGroupPermissionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScimGroupPermissions)(nil)).Elem()
}

func (i ScimGroupPermissionsMap) ToScimGroupPermissionsMapOutput() ScimGroupPermissionsMapOutput {
	return i.ToScimGroupPermissionsMapOutputWithContext(context.Background())
}

func (i ScimGroupPermissionsMap) ToScimGroupPermissionsMapOutputWithContext(ctx context.Context) ScimGroupPermissionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScimGroupPermissionsMapOutput)
}

type ScimGroupPermissionsOutput struct{ *pulumi.OutputState }

func (ScimGroupPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScimGroupPermissions)(nil)).Elem()
}

func (o ScimGroupPermissionsOutput) ToScimGroupPermissionsOutput() ScimGroupPermissionsOutput {
	return o
}

func (o ScimGroupPermissionsOutput) ToScimGroupPermissionsOutputWithContext(ctx context.Context) ScimGroupPermissionsOutput {
	return o
}

// The ID of the existing group to manage permissions for. This group must already exist.
func (o ScimGroupPermissionsOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v *ScimGroupPermissions) pulumi.IntOutput { return v.GroupId }).(pulumi.IntOutput)
}

// Set of permissions to apply to the group. This will replace all existing permissions for the group.
func (o ScimGroupPermissionsOutput) Permissions() ScimGroupPermissionsPermissionArrayOutput {
	return o.ApplyT(func(v *ScimGroupPermissions) ScimGroupPermissionsPermissionArrayOutput { return v.Permissions }).(ScimGroupPermissionsPermissionArrayOutput)
}

type ScimGroupPermissionsArrayOutput struct{ *pulumi.OutputState }

func (ScimGroupPermissionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScimGroupPermissions)(nil)).Elem()
}

func (o ScimGroupPermissionsArrayOutput) ToScimGroupPermissionsArrayOutput() ScimGroupPermissionsArrayOutput {
	return o
}

func (o ScimGroupPermissionsArrayOutput) ToScimGroupPermissionsArrayOutputWithContext(ctx context.Context) ScimGroupPermissionsArrayOutput {
	return o
}

func (o ScimGroupPermissionsArrayOutput) Index(i pulumi.IntInput) ScimGroupPermissionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScimGroupPermissions {
		return vs[0].([]*ScimGroupPermissions)[vs[1].(int)]
	}).(ScimGroupPermissionsOutput)
}

type ScimGroupPermissionsMapOutput struct{ *pulumi.OutputState }

func (ScimGroupPermissionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScimGroupPermissions)(nil)).Elem()
}

func (o ScimGroupPermissionsMapOutput) ToScimGroupPermissionsMapOutput() ScimGroupPermissionsMapOutput {
	return o
}

func (o ScimGroupPermissionsMapOutput) ToScimGroupPermissionsMapOutputWithContext(ctx context.Context) ScimGroupPermissionsMapOutput {
	return o
}

func (o ScimGroupPermissionsMapOutput) MapIndex(k pulumi.StringInput) ScimGroupPermissionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScimGroupPermissions {
		return vs[0].(map[string]*ScimGroupPermissions)[vs[1].(string)]
	}).(ScimGroupPermissionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScimGroupPermissionsInput)(nil)).Elem(), &ScimGroupPermissions{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScimGroupPermissionsArrayInput)(nil)).Elem(), ScimGroupPermissionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScimGroupPermissionsMapInput)(nil)).Elem(), ScimGroupPermissionsMap{})
	pulumi.RegisterOutputType(ScimGroupPermissionsOutput{})
	pulumi.RegisterOutputType(ScimGroupPermissionsArrayOutput{})
	pulumi.RegisterOutputType(ScimGroupPermissionsMapOutput{})
}

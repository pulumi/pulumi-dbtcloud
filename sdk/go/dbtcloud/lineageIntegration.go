// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Setup lineage integration for dbt Cloud to automatically fetch lineage from external BI tools in dbt Explorer. Currently supports Tableau.
//
// This resource requires having an environment tagged as production already created for you project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// the resource can only be configured when a Prod environment has been set
//			// so, you might want to explicitly set the dependency on your Prod environment resource
//			_, err := dbtcloud.NewLineageIntegration(ctx, "my_lineage", &dbtcloud.LineageIntegrationArgs{
//				ProjectId: pulumi.Any(myProject.Id),
//				Host:      pulumi.String("my.host.com"),
//				SiteId:    pulumi.String("mysiteid"),
//				TokenName: pulumi.String("my-token-name"),
//				Token:     pulumi.String("my-sensitive-token"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				myProdEnv,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// using  import blocks (requires Terraform >= 1.5)
//
// import {
//
//	to = dbtcloud_lineage_integration.my_lineage_integration
//
//	id = "projet_id:lineage_integration_id"
//
// }
//
// import {
//
//	to = dbtcloud_lineage_integration.my_lineage_integration
//
//	id = "123:4567"
//
// }
//
// using the older import command
//
// ```sh
// $ pulumi import dbtcloud:index/lineageIntegration:LineageIntegration my_lineage_integration "projet_id:lineage_integration_id"
// ```
//
// ```sh
// $ pulumi import dbtcloud:index/lineageIntegration:LineageIntegration my_lineage_integration 123:4567
// ```
type LineageIntegration struct {
	pulumi.CustomResourceState

	// The URL of the BI server (see docs for more details)
	Host pulumi.StringOutput `pulumi:"host"`
	// The ID of the lineage integration
	LineageIntegrationId pulumi.IntOutput `pulumi:"lineageIntegrationId"`
	// The integration type. Today only 'tableau' is supported
	Name pulumi.StringOutput `pulumi:"name"`
	// The dbt Cloud project ID for the integration
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// The sitename for the collections of dashboards (see docs for more details)
	SiteId pulumi.StringOutput `pulumi:"siteId"`
	// The secret token value to use to authenticate to the BI server
	Token pulumi.StringOutput `pulumi:"token"`
	// The token to use to authenticate to the BI server
	TokenName pulumi.StringOutput `pulumi:"tokenName"`
}

// NewLineageIntegration registers a new resource with the given unique name, arguments, and options.
func NewLineageIntegration(ctx *pulumi.Context,
	name string, args *LineageIntegrationArgs, opts ...pulumi.ResourceOption) (*LineageIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	if args.Token == nil {
		return nil, errors.New("invalid value for required argument 'Token'")
	}
	if args.TokenName == nil {
		return nil, errors.New("invalid value for required argument 'TokenName'")
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LineageIntegration
	err := ctx.RegisterResource("dbtcloud:index/lineageIntegration:LineageIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLineageIntegration gets an existing LineageIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLineageIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LineageIntegrationState, opts ...pulumi.ResourceOption) (*LineageIntegration, error) {
	var resource LineageIntegration
	err := ctx.ReadResource("dbtcloud:index/lineageIntegration:LineageIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LineageIntegration resources.
type lineageIntegrationState struct {
	// The URL of the BI server (see docs for more details)
	Host *string `pulumi:"host"`
	// The ID of the lineage integration
	LineageIntegrationId *int `pulumi:"lineageIntegrationId"`
	// The integration type. Today only 'tableau' is supported
	Name *string `pulumi:"name"`
	// The dbt Cloud project ID for the integration
	ProjectId *int `pulumi:"projectId"`
	// The sitename for the collections of dashboards (see docs for more details)
	SiteId *string `pulumi:"siteId"`
	// The secret token value to use to authenticate to the BI server
	Token *string `pulumi:"token"`
	// The token to use to authenticate to the BI server
	TokenName *string `pulumi:"tokenName"`
}

type LineageIntegrationState struct {
	// The URL of the BI server (see docs for more details)
	Host pulumi.StringPtrInput
	// The ID of the lineage integration
	LineageIntegrationId pulumi.IntPtrInput
	// The integration type. Today only 'tableau' is supported
	Name pulumi.StringPtrInput
	// The dbt Cloud project ID for the integration
	ProjectId pulumi.IntPtrInput
	// The sitename for the collections of dashboards (see docs for more details)
	SiteId pulumi.StringPtrInput
	// The secret token value to use to authenticate to the BI server
	Token pulumi.StringPtrInput
	// The token to use to authenticate to the BI server
	TokenName pulumi.StringPtrInput
}

func (LineageIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*lineageIntegrationState)(nil)).Elem()
}

type lineageIntegrationArgs struct {
	// The URL of the BI server (see docs for more details)
	Host string `pulumi:"host"`
	// The dbt Cloud project ID for the integration
	ProjectId int `pulumi:"projectId"`
	// The sitename for the collections of dashboards (see docs for more details)
	SiteId string `pulumi:"siteId"`
	// The secret token value to use to authenticate to the BI server
	Token string `pulumi:"token"`
	// The token to use to authenticate to the BI server
	TokenName string `pulumi:"tokenName"`
}

// The set of arguments for constructing a LineageIntegration resource.
type LineageIntegrationArgs struct {
	// The URL of the BI server (see docs for more details)
	Host pulumi.StringInput
	// The dbt Cloud project ID for the integration
	ProjectId pulumi.IntInput
	// The sitename for the collections of dashboards (see docs for more details)
	SiteId pulumi.StringInput
	// The secret token value to use to authenticate to the BI server
	Token pulumi.StringInput
	// The token to use to authenticate to the BI server
	TokenName pulumi.StringInput
}

func (LineageIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lineageIntegrationArgs)(nil)).Elem()
}

type LineageIntegrationInput interface {
	pulumi.Input

	ToLineageIntegrationOutput() LineageIntegrationOutput
	ToLineageIntegrationOutputWithContext(ctx context.Context) LineageIntegrationOutput
}

func (*LineageIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**LineageIntegration)(nil)).Elem()
}

func (i *LineageIntegration) ToLineageIntegrationOutput() LineageIntegrationOutput {
	return i.ToLineageIntegrationOutputWithContext(context.Background())
}

func (i *LineageIntegration) ToLineageIntegrationOutputWithContext(ctx context.Context) LineageIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineageIntegrationOutput)
}

// LineageIntegrationArrayInput is an input type that accepts LineageIntegrationArray and LineageIntegrationArrayOutput values.
// You can construct a concrete instance of `LineageIntegrationArrayInput` via:
//
//	LineageIntegrationArray{ LineageIntegrationArgs{...} }
type LineageIntegrationArrayInput interface {
	pulumi.Input

	ToLineageIntegrationArrayOutput() LineageIntegrationArrayOutput
	ToLineageIntegrationArrayOutputWithContext(context.Context) LineageIntegrationArrayOutput
}

type LineageIntegrationArray []LineageIntegrationInput

func (LineageIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LineageIntegration)(nil)).Elem()
}

func (i LineageIntegrationArray) ToLineageIntegrationArrayOutput() LineageIntegrationArrayOutput {
	return i.ToLineageIntegrationArrayOutputWithContext(context.Background())
}

func (i LineageIntegrationArray) ToLineageIntegrationArrayOutputWithContext(ctx context.Context) LineageIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineageIntegrationArrayOutput)
}

// LineageIntegrationMapInput is an input type that accepts LineageIntegrationMap and LineageIntegrationMapOutput values.
// You can construct a concrete instance of `LineageIntegrationMapInput` via:
//
//	LineageIntegrationMap{ "key": LineageIntegrationArgs{...} }
type LineageIntegrationMapInput interface {
	pulumi.Input

	ToLineageIntegrationMapOutput() LineageIntegrationMapOutput
	ToLineageIntegrationMapOutputWithContext(context.Context) LineageIntegrationMapOutput
}

type LineageIntegrationMap map[string]LineageIntegrationInput

func (LineageIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LineageIntegration)(nil)).Elem()
}

func (i LineageIntegrationMap) ToLineageIntegrationMapOutput() LineageIntegrationMapOutput {
	return i.ToLineageIntegrationMapOutputWithContext(context.Background())
}

func (i LineageIntegrationMap) ToLineageIntegrationMapOutputWithContext(ctx context.Context) LineageIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineageIntegrationMapOutput)
}

type LineageIntegrationOutput struct{ *pulumi.OutputState }

func (LineageIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LineageIntegration)(nil)).Elem()
}

func (o LineageIntegrationOutput) ToLineageIntegrationOutput() LineageIntegrationOutput {
	return o
}

func (o LineageIntegrationOutput) ToLineageIntegrationOutputWithContext(ctx context.Context) LineageIntegrationOutput {
	return o
}

// The URL of the BI server (see docs for more details)
func (o LineageIntegrationOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *LineageIntegration) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// The ID of the lineage integration
func (o LineageIntegrationOutput) LineageIntegrationId() pulumi.IntOutput {
	return o.ApplyT(func(v *LineageIntegration) pulumi.IntOutput { return v.LineageIntegrationId }).(pulumi.IntOutput)
}

// The integration type. Today only 'tableau' is supported
func (o LineageIntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LineageIntegration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The dbt Cloud project ID for the integration
func (o LineageIntegrationOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *LineageIntegration) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// The sitename for the collections of dashboards (see docs for more details)
func (o LineageIntegrationOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v *LineageIntegration) pulumi.StringOutput { return v.SiteId }).(pulumi.StringOutput)
}

// The secret token value to use to authenticate to the BI server
func (o LineageIntegrationOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *LineageIntegration) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// The token to use to authenticate to the BI server
func (o LineageIntegrationOutput) TokenName() pulumi.StringOutput {
	return o.ApplyT(func(v *LineageIntegration) pulumi.StringOutput { return v.TokenName }).(pulumi.StringOutput)
}

type LineageIntegrationArrayOutput struct{ *pulumi.OutputState }

func (LineageIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LineageIntegration)(nil)).Elem()
}

func (o LineageIntegrationArrayOutput) ToLineageIntegrationArrayOutput() LineageIntegrationArrayOutput {
	return o
}

func (o LineageIntegrationArrayOutput) ToLineageIntegrationArrayOutputWithContext(ctx context.Context) LineageIntegrationArrayOutput {
	return o
}

func (o LineageIntegrationArrayOutput) Index(i pulumi.IntInput) LineageIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LineageIntegration {
		return vs[0].([]*LineageIntegration)[vs[1].(int)]
	}).(LineageIntegrationOutput)
}

type LineageIntegrationMapOutput struct{ *pulumi.OutputState }

func (LineageIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LineageIntegration)(nil)).Elem()
}

func (o LineageIntegrationMapOutput) ToLineageIntegrationMapOutput() LineageIntegrationMapOutput {
	return o
}

func (o LineageIntegrationMapOutput) ToLineageIntegrationMapOutputWithContext(ctx context.Context) LineageIntegrationMapOutput {
	return o
}

func (o LineageIntegrationMapOutput) MapIndex(k pulumi.StringInput) LineageIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LineageIntegration {
		return vs[0].(map[string]*LineageIntegration)[vs[1].(string)]
	}).(LineageIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LineageIntegrationInput)(nil)).Elem(), &LineageIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineageIntegrationArrayInput)(nil)).Elem(), LineageIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineageIntegrationMapInput)(nil)).Elem(), LineageIntegrationMap{})
	pulumi.RegisterOutputType(LineageIntegrationOutput{})
	pulumi.RegisterOutputType(LineageIntegrationArrayOutput{})
	pulumi.RegisterOutputType(LineageIntegrationMapOutput{})
}

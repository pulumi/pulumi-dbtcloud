// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dbtcloud.NewSemanticLayerCredentialServiceTokenMapping(ctx, "test_mapping", &dbtcloud.SemanticLayerCredentialServiceTokenMappingArgs{
//				SemanticLayerCredentialId: pulumi.Any(test.Id),
//				ServiceTokenId:            pulumi.Any(testServiceToken.Id),
//				ProjectId:                 pulumi.Any(testProject.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// using import blocks (requires Terraform >= 1.5)
//
// import {
//
//	to = dbtcloud_semantic_layer_credential_service_token_mapping.example
//
//	id = "id"
//
// }
//
// import {
//
//	to = dbtcloud_semantic_layer_credential_service_token_mapping.example
//
//	id = "12345"
//
// }
//
// using the older import command
//
// ```sh
// $ pulumi import dbtcloud:index/semanticLayerCredentialServiceTokenMapping:SemanticLayerCredentialServiceTokenMapping example "id"
// ```
//
// ```sh
// $ pulumi import dbtcloud:index/semanticLayerCredentialServiceTokenMapping:SemanticLayerCredentialServiceTokenMapping example 12345
// ```
type SemanticLayerCredentialServiceTokenMapping struct {
	pulumi.CustomResourceState

	// The ID of the project to which the semantic layer credential is associated.
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// The ID of the semantic layer credential to map.
	SemanticLayerCredentialId pulumi.IntOutput `pulumi:"semanticLayerCredentialId"`
	// The ID of the service token to map to the semantic layer credential.
	ServiceTokenId pulumi.IntOutput `pulumi:"serviceTokenId"`
}

// NewSemanticLayerCredentialServiceTokenMapping registers a new resource with the given unique name, arguments, and options.
func NewSemanticLayerCredentialServiceTokenMapping(ctx *pulumi.Context,
	name string, args *SemanticLayerCredentialServiceTokenMappingArgs, opts ...pulumi.ResourceOption) (*SemanticLayerCredentialServiceTokenMapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SemanticLayerCredentialId == nil {
		return nil, errors.New("invalid value for required argument 'SemanticLayerCredentialId'")
	}
	if args.ServiceTokenId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceTokenId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SemanticLayerCredentialServiceTokenMapping
	err := ctx.RegisterResource("dbtcloud:index/semanticLayerCredentialServiceTokenMapping:SemanticLayerCredentialServiceTokenMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSemanticLayerCredentialServiceTokenMapping gets an existing SemanticLayerCredentialServiceTokenMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSemanticLayerCredentialServiceTokenMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SemanticLayerCredentialServiceTokenMappingState, opts ...pulumi.ResourceOption) (*SemanticLayerCredentialServiceTokenMapping, error) {
	var resource SemanticLayerCredentialServiceTokenMapping
	err := ctx.ReadResource("dbtcloud:index/semanticLayerCredentialServiceTokenMapping:SemanticLayerCredentialServiceTokenMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SemanticLayerCredentialServiceTokenMapping resources.
type semanticLayerCredentialServiceTokenMappingState struct {
	// The ID of the project to which the semantic layer credential is associated.
	ProjectId *int `pulumi:"projectId"`
	// The ID of the semantic layer credential to map.
	SemanticLayerCredentialId *int `pulumi:"semanticLayerCredentialId"`
	// The ID of the service token to map to the semantic layer credential.
	ServiceTokenId *int `pulumi:"serviceTokenId"`
}

type SemanticLayerCredentialServiceTokenMappingState struct {
	// The ID of the project to which the semantic layer credential is associated.
	ProjectId pulumi.IntPtrInput
	// The ID of the semantic layer credential to map.
	SemanticLayerCredentialId pulumi.IntPtrInput
	// The ID of the service token to map to the semantic layer credential.
	ServiceTokenId pulumi.IntPtrInput
}

func (SemanticLayerCredentialServiceTokenMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*semanticLayerCredentialServiceTokenMappingState)(nil)).Elem()
}

type semanticLayerCredentialServiceTokenMappingArgs struct {
	// The ID of the project to which the semantic layer credential is associated.
	ProjectId int `pulumi:"projectId"`
	// The ID of the semantic layer credential to map.
	SemanticLayerCredentialId int `pulumi:"semanticLayerCredentialId"`
	// The ID of the service token to map to the semantic layer credential.
	ServiceTokenId int `pulumi:"serviceTokenId"`
}

// The set of arguments for constructing a SemanticLayerCredentialServiceTokenMapping resource.
type SemanticLayerCredentialServiceTokenMappingArgs struct {
	// The ID of the project to which the semantic layer credential is associated.
	ProjectId pulumi.IntInput
	// The ID of the semantic layer credential to map.
	SemanticLayerCredentialId pulumi.IntInput
	// The ID of the service token to map to the semantic layer credential.
	ServiceTokenId pulumi.IntInput
}

func (SemanticLayerCredentialServiceTokenMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*semanticLayerCredentialServiceTokenMappingArgs)(nil)).Elem()
}

type SemanticLayerCredentialServiceTokenMappingInput interface {
	pulumi.Input

	ToSemanticLayerCredentialServiceTokenMappingOutput() SemanticLayerCredentialServiceTokenMappingOutput
	ToSemanticLayerCredentialServiceTokenMappingOutputWithContext(ctx context.Context) SemanticLayerCredentialServiceTokenMappingOutput
}

func (*SemanticLayerCredentialServiceTokenMapping) ElementType() reflect.Type {
	return reflect.TypeOf((**SemanticLayerCredentialServiceTokenMapping)(nil)).Elem()
}

func (i *SemanticLayerCredentialServiceTokenMapping) ToSemanticLayerCredentialServiceTokenMappingOutput() SemanticLayerCredentialServiceTokenMappingOutput {
	return i.ToSemanticLayerCredentialServiceTokenMappingOutputWithContext(context.Background())
}

func (i *SemanticLayerCredentialServiceTokenMapping) ToSemanticLayerCredentialServiceTokenMappingOutputWithContext(ctx context.Context) SemanticLayerCredentialServiceTokenMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SemanticLayerCredentialServiceTokenMappingOutput)
}

// SemanticLayerCredentialServiceTokenMappingArrayInput is an input type that accepts SemanticLayerCredentialServiceTokenMappingArray and SemanticLayerCredentialServiceTokenMappingArrayOutput values.
// You can construct a concrete instance of `SemanticLayerCredentialServiceTokenMappingArrayInput` via:
//
//	SemanticLayerCredentialServiceTokenMappingArray{ SemanticLayerCredentialServiceTokenMappingArgs{...} }
type SemanticLayerCredentialServiceTokenMappingArrayInput interface {
	pulumi.Input

	ToSemanticLayerCredentialServiceTokenMappingArrayOutput() SemanticLayerCredentialServiceTokenMappingArrayOutput
	ToSemanticLayerCredentialServiceTokenMappingArrayOutputWithContext(context.Context) SemanticLayerCredentialServiceTokenMappingArrayOutput
}

type SemanticLayerCredentialServiceTokenMappingArray []SemanticLayerCredentialServiceTokenMappingInput

func (SemanticLayerCredentialServiceTokenMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SemanticLayerCredentialServiceTokenMapping)(nil)).Elem()
}

func (i SemanticLayerCredentialServiceTokenMappingArray) ToSemanticLayerCredentialServiceTokenMappingArrayOutput() SemanticLayerCredentialServiceTokenMappingArrayOutput {
	return i.ToSemanticLayerCredentialServiceTokenMappingArrayOutputWithContext(context.Background())
}

func (i SemanticLayerCredentialServiceTokenMappingArray) ToSemanticLayerCredentialServiceTokenMappingArrayOutputWithContext(ctx context.Context) SemanticLayerCredentialServiceTokenMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SemanticLayerCredentialServiceTokenMappingArrayOutput)
}

// SemanticLayerCredentialServiceTokenMappingMapInput is an input type that accepts SemanticLayerCredentialServiceTokenMappingMap and SemanticLayerCredentialServiceTokenMappingMapOutput values.
// You can construct a concrete instance of `SemanticLayerCredentialServiceTokenMappingMapInput` via:
//
//	SemanticLayerCredentialServiceTokenMappingMap{ "key": SemanticLayerCredentialServiceTokenMappingArgs{...} }
type SemanticLayerCredentialServiceTokenMappingMapInput interface {
	pulumi.Input

	ToSemanticLayerCredentialServiceTokenMappingMapOutput() SemanticLayerCredentialServiceTokenMappingMapOutput
	ToSemanticLayerCredentialServiceTokenMappingMapOutputWithContext(context.Context) SemanticLayerCredentialServiceTokenMappingMapOutput
}

type SemanticLayerCredentialServiceTokenMappingMap map[string]SemanticLayerCredentialServiceTokenMappingInput

func (SemanticLayerCredentialServiceTokenMappingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SemanticLayerCredentialServiceTokenMapping)(nil)).Elem()
}

func (i SemanticLayerCredentialServiceTokenMappingMap) ToSemanticLayerCredentialServiceTokenMappingMapOutput() SemanticLayerCredentialServiceTokenMappingMapOutput {
	return i.ToSemanticLayerCredentialServiceTokenMappingMapOutputWithContext(context.Background())
}

func (i SemanticLayerCredentialServiceTokenMappingMap) ToSemanticLayerCredentialServiceTokenMappingMapOutputWithContext(ctx context.Context) SemanticLayerCredentialServiceTokenMappingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SemanticLayerCredentialServiceTokenMappingMapOutput)
}

type SemanticLayerCredentialServiceTokenMappingOutput struct{ *pulumi.OutputState }

func (SemanticLayerCredentialServiceTokenMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SemanticLayerCredentialServiceTokenMapping)(nil)).Elem()
}

func (o SemanticLayerCredentialServiceTokenMappingOutput) ToSemanticLayerCredentialServiceTokenMappingOutput() SemanticLayerCredentialServiceTokenMappingOutput {
	return o
}

func (o SemanticLayerCredentialServiceTokenMappingOutput) ToSemanticLayerCredentialServiceTokenMappingOutputWithContext(ctx context.Context) SemanticLayerCredentialServiceTokenMappingOutput {
	return o
}

// The ID of the project to which the semantic layer credential is associated.
func (o SemanticLayerCredentialServiceTokenMappingOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *SemanticLayerCredentialServiceTokenMapping) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// The ID of the semantic layer credential to map.
func (o SemanticLayerCredentialServiceTokenMappingOutput) SemanticLayerCredentialId() pulumi.IntOutput {
	return o.ApplyT(func(v *SemanticLayerCredentialServiceTokenMapping) pulumi.IntOutput {
		return v.SemanticLayerCredentialId
	}).(pulumi.IntOutput)
}

// The ID of the service token to map to the semantic layer credential.
func (o SemanticLayerCredentialServiceTokenMappingOutput) ServiceTokenId() pulumi.IntOutput {
	return o.ApplyT(func(v *SemanticLayerCredentialServiceTokenMapping) pulumi.IntOutput { return v.ServiceTokenId }).(pulumi.IntOutput)
}

type SemanticLayerCredentialServiceTokenMappingArrayOutput struct{ *pulumi.OutputState }

func (SemanticLayerCredentialServiceTokenMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SemanticLayerCredentialServiceTokenMapping)(nil)).Elem()
}

func (o SemanticLayerCredentialServiceTokenMappingArrayOutput) ToSemanticLayerCredentialServiceTokenMappingArrayOutput() SemanticLayerCredentialServiceTokenMappingArrayOutput {
	return o
}

func (o SemanticLayerCredentialServiceTokenMappingArrayOutput) ToSemanticLayerCredentialServiceTokenMappingArrayOutputWithContext(ctx context.Context) SemanticLayerCredentialServiceTokenMappingArrayOutput {
	return o
}

func (o SemanticLayerCredentialServiceTokenMappingArrayOutput) Index(i pulumi.IntInput) SemanticLayerCredentialServiceTokenMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SemanticLayerCredentialServiceTokenMapping {
		return vs[0].([]*SemanticLayerCredentialServiceTokenMapping)[vs[1].(int)]
	}).(SemanticLayerCredentialServiceTokenMappingOutput)
}

type SemanticLayerCredentialServiceTokenMappingMapOutput struct{ *pulumi.OutputState }

func (SemanticLayerCredentialServiceTokenMappingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SemanticLayerCredentialServiceTokenMapping)(nil)).Elem()
}

func (o SemanticLayerCredentialServiceTokenMappingMapOutput) ToSemanticLayerCredentialServiceTokenMappingMapOutput() SemanticLayerCredentialServiceTokenMappingMapOutput {
	return o
}

func (o SemanticLayerCredentialServiceTokenMappingMapOutput) ToSemanticLayerCredentialServiceTokenMappingMapOutputWithContext(ctx context.Context) SemanticLayerCredentialServiceTokenMappingMapOutput {
	return o
}

func (o SemanticLayerCredentialServiceTokenMappingMapOutput) MapIndex(k pulumi.StringInput) SemanticLayerCredentialServiceTokenMappingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SemanticLayerCredentialServiceTokenMapping {
		return vs[0].(map[string]*SemanticLayerCredentialServiceTokenMapping)[vs[1].(string)]
	}).(SemanticLayerCredentialServiceTokenMappingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SemanticLayerCredentialServiceTokenMappingInput)(nil)).Elem(), &SemanticLayerCredentialServiceTokenMapping{})
	pulumi.RegisterInputType(reflect.TypeOf((*SemanticLayerCredentialServiceTokenMappingArrayInput)(nil)).Elem(), SemanticLayerCredentialServiceTokenMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SemanticLayerCredentialServiceTokenMappingMapInput)(nil)).Elem(), SemanticLayerCredentialServiceTokenMappingMap{})
	pulumi.RegisterOutputType(SemanticLayerCredentialServiceTokenMappingOutput{})
	pulumi.RegisterOutputType(SemanticLayerCredentialServiceTokenMappingArrayOutput{})
	pulumi.RegisterOutputType(SemanticLayerCredentialServiceTokenMappingMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get detailed information for a specific dbt Cloud job.
func LookupJob(ctx *pulumi.Context, args *LookupJobArgs, opts ...pulumi.InvokeOption) (*LookupJobResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupJobResult
	err := ctx.Invoke("dbtcloud:index/getJob:getJob", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getJob.
type LookupJobArgs struct {
	// Which other job should trigger this job when it finishes, and on which conditions. Format for the property will change in the next release to match the one from the one from dbtcloud*jobs.
	JobCompletionTriggerConditions []GetJobJobCompletionTriggerCondition `pulumi:"jobCompletionTriggerConditions"`
	// The ID of the job
	JobId int `pulumi:"jobId"`
}

// A collection of values returned by getJob.
type LookupJobResult struct {
	// The version of dbt used for the job. If not set, the environment version will be used.
	DbtVersion string `pulumi:"dbtVersion"`
	// The ID of the environment this job defers to
	DeferringEnvironmentId int `pulumi:"deferringEnvironmentId"`
	// [Deprectated - Deferral is now set at the environment level] The ID of the job definition this job defers to
	//
	// Deprecated: Deferral is now set at the environment level
	DeferringJobId int `pulumi:"deferringJobId"`
	// The description of the job
	Description string `pulumi:"description"`
	// Details of the environment the job is running in
	Environment GetJobEnvironment `pulumi:"environment"`
	// The ID of environment
	EnvironmentId int `pulumi:"environmentId"`
	// The list of steps to run in the job
	ExecuteSteps []string        `pulumi:"executeSteps"`
	Execution    GetJobExecution `pulumi:"execution"`
	// Whether the job generate docs
	GenerateDocs bool `pulumi:"generateDocs"`
	// The ID of the job
	Id int `pulumi:"id"`
	// Which other job should trigger this job when it finishes, and on which conditions. Format for the property will change in the next release to match the one from the one from dbtcloud*jobs.
	JobCompletionTriggerConditions []GetJobJobCompletionTriggerCondition `pulumi:"jobCompletionTriggerConditions"`
	// The ID of the job
	JobId int `pulumi:"jobId"`
	// The type of job (e.g. CI, scheduled)
	JobType string `pulumi:"jobType"`
	// The name of the job
	Name string `pulumi:"name"`
	// The ID of the project
	ProjectId int `pulumi:"projectId"`
	// Whether the job should compare data changes introduced by the code change in the PR
	RunCompareChanges bool `pulumi:"runCompareChanges"`
	// Whether the job test source freshness
	RunGenerateSources bool           `pulumi:"runGenerateSources"`
	Schedule           GetJobSchedule `pulumi:"schedule"`
	// Whether this job defers on a previous run of itself (overrides value in deferring*job*id)
	SelfDeferring bool           `pulumi:"selfDeferring"`
	Settings      GetJobSettings `pulumi:"settings"`
	// [Deprectated - Moved to execution.timeout_seconds] Number of seconds before the job times out
	//
	// Deprecated: Moved to execution.timeout_seconds
	TimeoutSeconds int            `pulumi:"timeoutSeconds"`
	Triggers       GetJobTriggers `pulumi:"triggers"`
	// Whether the CI job should be automatically triggered on draft PRs
	TriggersOnDraftPr bool `pulumi:"triggersOnDraftPr"`
}

func LookupJobOutput(ctx *pulumi.Context, args LookupJobOutputArgs, opts ...pulumi.InvokeOption) LookupJobResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupJobResultOutput, error) {
			args := v.(LookupJobArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("dbtcloud:index/getJob:getJob", args, LookupJobResultOutput{}, options).(LookupJobResultOutput), nil
		}).(LookupJobResultOutput)
}

// A collection of arguments for invoking getJob.
type LookupJobOutputArgs struct {
	// Which other job should trigger this job when it finishes, and on which conditions. Format for the property will change in the next release to match the one from the one from dbtcloud*jobs.
	JobCompletionTriggerConditions GetJobJobCompletionTriggerConditionArrayInput `pulumi:"jobCompletionTriggerConditions"`
	// The ID of the job
	JobId pulumi.IntInput `pulumi:"jobId"`
}

func (LookupJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupJobArgs)(nil)).Elem()
}

// A collection of values returned by getJob.
type LookupJobResultOutput struct{ *pulumi.OutputState }

func (LookupJobResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupJobResult)(nil)).Elem()
}

func (o LookupJobResultOutput) ToLookupJobResultOutput() LookupJobResultOutput {
	return o
}

func (o LookupJobResultOutput) ToLookupJobResultOutputWithContext(ctx context.Context) LookupJobResultOutput {
	return o
}

// The version of dbt used for the job. If not set, the environment version will be used.
func (o LookupJobResultOutput) DbtVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJobResult) string { return v.DbtVersion }).(pulumi.StringOutput)
}

// The ID of the environment this job defers to
func (o LookupJobResultOutput) DeferringEnvironmentId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupJobResult) int { return v.DeferringEnvironmentId }).(pulumi.IntOutput)
}

// [Deprectated - Deferral is now set at the environment level] The ID of the job definition this job defers to
//
// Deprecated: Deferral is now set at the environment level
func (o LookupJobResultOutput) DeferringJobId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupJobResult) int { return v.DeferringJobId }).(pulumi.IntOutput)
}

// The description of the job
func (o LookupJobResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJobResult) string { return v.Description }).(pulumi.StringOutput)
}

// Details of the environment the job is running in
func (o LookupJobResultOutput) Environment() GetJobEnvironmentOutput {
	return o.ApplyT(func(v LookupJobResult) GetJobEnvironment { return v.Environment }).(GetJobEnvironmentOutput)
}

// The ID of environment
func (o LookupJobResultOutput) EnvironmentId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupJobResult) int { return v.EnvironmentId }).(pulumi.IntOutput)
}

// The list of steps to run in the job
func (o LookupJobResultOutput) ExecuteSteps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupJobResult) []string { return v.ExecuteSteps }).(pulumi.StringArrayOutput)
}

func (o LookupJobResultOutput) Execution() GetJobExecutionOutput {
	return o.ApplyT(func(v LookupJobResult) GetJobExecution { return v.Execution }).(GetJobExecutionOutput)
}

// Whether the job generate docs
func (o LookupJobResultOutput) GenerateDocs() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupJobResult) bool { return v.GenerateDocs }).(pulumi.BoolOutput)
}

// The ID of the job
func (o LookupJobResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupJobResult) int { return v.Id }).(pulumi.IntOutput)
}

// Which other job should trigger this job when it finishes, and on which conditions. Format for the property will change in the next release to match the one from the one from dbtcloud*jobs.
func (o LookupJobResultOutput) JobCompletionTriggerConditions() GetJobJobCompletionTriggerConditionArrayOutput {
	return o.ApplyT(func(v LookupJobResult) []GetJobJobCompletionTriggerCondition { return v.JobCompletionTriggerConditions }).(GetJobJobCompletionTriggerConditionArrayOutput)
}

// The ID of the job
func (o LookupJobResultOutput) JobId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupJobResult) int { return v.JobId }).(pulumi.IntOutput)
}

// The type of job (e.g. CI, scheduled)
func (o LookupJobResultOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJobResult) string { return v.JobType }).(pulumi.StringOutput)
}

// The name of the job
func (o LookupJobResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJobResult) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project
func (o LookupJobResultOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupJobResult) int { return v.ProjectId }).(pulumi.IntOutput)
}

// Whether the job should compare data changes introduced by the code change in the PR
func (o LookupJobResultOutput) RunCompareChanges() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupJobResult) bool { return v.RunCompareChanges }).(pulumi.BoolOutput)
}

// Whether the job test source freshness
func (o LookupJobResultOutput) RunGenerateSources() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupJobResult) bool { return v.RunGenerateSources }).(pulumi.BoolOutput)
}

func (o LookupJobResultOutput) Schedule() GetJobScheduleOutput {
	return o.ApplyT(func(v LookupJobResult) GetJobSchedule { return v.Schedule }).(GetJobScheduleOutput)
}

// Whether this job defers on a previous run of itself (overrides value in deferring*job*id)
func (o LookupJobResultOutput) SelfDeferring() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupJobResult) bool { return v.SelfDeferring }).(pulumi.BoolOutput)
}

func (o LookupJobResultOutput) Settings() GetJobSettingsOutput {
	return o.ApplyT(func(v LookupJobResult) GetJobSettings { return v.Settings }).(GetJobSettingsOutput)
}

// [Deprectated - Moved to execution.timeout_seconds] Number of seconds before the job times out
//
// Deprecated: Moved to execution.timeout_seconds
func (o LookupJobResultOutput) TimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupJobResult) int { return v.TimeoutSeconds }).(pulumi.IntOutput)
}

func (o LookupJobResultOutput) Triggers() GetJobTriggersOutput {
	return o.ApplyT(func(v LookupJobResult) GetJobTriggers { return v.Triggers }).(GetJobTriggersOutput)
}

// Whether the CI job should be automatically triggered on draft PRs
func (o LookupJobResultOutput) TriggersOnDraftPr() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupJobResult) bool { return v.TriggersOnDraftPr }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupJobResultOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// the config is the same as for `dbtcloud_notification`
//			_, err := dbtcloud.NewPartialNotification(ctx, "prod_job_internal_notification", &dbtcloud.PartialNotificationArgs{
//				UserId: pulumi.Int(100),
//				OnSuccesses: pulumi.IntArray{
//					prodJob.Id,
//				},
//				OnFailures: pulumi.IntArray{
//					pulumi.Int(12345),
//				},
//				NotificationType: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			// we can also send "external" email notifications to emails to related to dbt Cloud users
//			_, err = dbtcloud.NewPartialNotification(ctx, "prod_job_external_notification", &dbtcloud.PartialNotificationArgs{
//				UserId: pulumi.Int(100),
//				OnFailures: pulumi.IntArray{
//					pulumi.Int(23456),
//					pulumi.Int(56788),
//				},
//				OnCancels: pulumi.IntArray{
//					prodJob.Id,
//				},
//				NotificationType: pulumi.Int(4),
//				ExternalEmail:    pulumi.String("my_email@mail.com"),
//			})
//			if err != nil {
//				return err
//			}
//			// and finally, we can set up Slack notifications
//			_, err = dbtcloud.NewPartialNotification(ctx, "prod_job_slack_notifications", &dbtcloud.PartialNotificationArgs{
//				UserId: pulumi.Int(100),
//				OnFailures: pulumi.IntArray{
//					pulumi.Int(23456),
//					pulumi.Int(56788),
//				},
//				OnCancels: pulumi.IntArray{
//					prodJob.Id,
//				},
//				NotificationType: pulumi.Int(2),
//				SlackChannelId:   pulumi.String("C12345ABCDE"),
//				SlackChannelName: pulumi.String("#my-awesome-channel"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PartialNotification struct {
	pulumi.CustomResourceState

	// The external email to receive the notification [global, used as identifier]
	ExternalEmail pulumi.StringPtrOutput `pulumi:"externalEmail"`
	// Type of notification (1 = dbt Cloud user email (default): does not require an externalEmail ; 2 = Slack channel: requires `slackChannelId` and `slackChannelName` ; 4 = external email: requires setting an `externalEmail`) [global, used as identifier]
	NotificationType pulumi.IntOutput `pulumi:"notificationType"`
	// List of job IDs to trigger the webhook on cancel. Those will be added/removed when config is added/removed.
	OnCancels pulumi.IntArrayOutput `pulumi:"onCancels"`
	// List of job IDs to trigger the webhook on failure Those will be added/removed when config is added/removed.
	OnFailures pulumi.IntArrayOutput `pulumi:"onFailures"`
	// List of job IDs to trigger the webhook on success Those will be added/removed when config is added/removed.
	OnSuccesses pulumi.IntArrayOutput `pulumi:"onSuccesses"`
	// List of job IDs to trigger the webhook on warning Those will be added/removed when config is added/removed.
	OnWarnings pulumi.IntArrayOutput `pulumi:"onWarnings"`
	// The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings [global, used as identifier]
	SlackChannelId pulumi.StringPtrOutput `pulumi:"slackChannelId"`
	// The name of the slack channel [global, used as identifier]
	SlackChannelName pulumi.StringPtrOutput `pulumi:"slackChannelName"`
	// State of the notification (1 = active (default), 2 = inactive) [global]
	State pulumi.IntOutput `pulumi:"state"`
	// Internal dbt Cloud User ID. Must be the userId for an existing user even if the notification is an external one [global]
	UserId pulumi.IntOutput `pulumi:"userId"`
}

// NewPartialNotification registers a new resource with the given unique name, arguments, and options.
func NewPartialNotification(ctx *pulumi.Context,
	name string, args *PartialNotificationArgs, opts ...pulumi.ResourceOption) (*PartialNotification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PartialNotification
	err := ctx.RegisterResource("dbtcloud:index/partialNotification:PartialNotification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPartialNotification gets an existing PartialNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPartialNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PartialNotificationState, opts ...pulumi.ResourceOption) (*PartialNotification, error) {
	var resource PartialNotification
	err := ctx.ReadResource("dbtcloud:index/partialNotification:PartialNotification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PartialNotification resources.
type partialNotificationState struct {
	// The external email to receive the notification [global, used as identifier]
	ExternalEmail *string `pulumi:"externalEmail"`
	// Type of notification (1 = dbt Cloud user email (default): does not require an externalEmail ; 2 = Slack channel: requires `slackChannelId` and `slackChannelName` ; 4 = external email: requires setting an `externalEmail`) [global, used as identifier]
	NotificationType *int `pulumi:"notificationType"`
	// List of job IDs to trigger the webhook on cancel. Those will be added/removed when config is added/removed.
	OnCancels []int `pulumi:"onCancels"`
	// List of job IDs to trigger the webhook on failure Those will be added/removed when config is added/removed.
	OnFailures []int `pulumi:"onFailures"`
	// List of job IDs to trigger the webhook on success Those will be added/removed when config is added/removed.
	OnSuccesses []int `pulumi:"onSuccesses"`
	// List of job IDs to trigger the webhook on warning Those will be added/removed when config is added/removed.
	OnWarnings []int `pulumi:"onWarnings"`
	// The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings [global, used as identifier]
	SlackChannelId *string `pulumi:"slackChannelId"`
	// The name of the slack channel [global, used as identifier]
	SlackChannelName *string `pulumi:"slackChannelName"`
	// State of the notification (1 = active (default), 2 = inactive) [global]
	State *int `pulumi:"state"`
	// Internal dbt Cloud User ID. Must be the userId for an existing user even if the notification is an external one [global]
	UserId *int `pulumi:"userId"`
}

type PartialNotificationState struct {
	// The external email to receive the notification [global, used as identifier]
	ExternalEmail pulumi.StringPtrInput
	// Type of notification (1 = dbt Cloud user email (default): does not require an externalEmail ; 2 = Slack channel: requires `slackChannelId` and `slackChannelName` ; 4 = external email: requires setting an `externalEmail`) [global, used as identifier]
	NotificationType pulumi.IntPtrInput
	// List of job IDs to trigger the webhook on cancel. Those will be added/removed when config is added/removed.
	OnCancels pulumi.IntArrayInput
	// List of job IDs to trigger the webhook on failure Those will be added/removed when config is added/removed.
	OnFailures pulumi.IntArrayInput
	// List of job IDs to trigger the webhook on success Those will be added/removed when config is added/removed.
	OnSuccesses pulumi.IntArrayInput
	// List of job IDs to trigger the webhook on warning Those will be added/removed when config is added/removed.
	OnWarnings pulumi.IntArrayInput
	// The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings [global, used as identifier]
	SlackChannelId pulumi.StringPtrInput
	// The name of the slack channel [global, used as identifier]
	SlackChannelName pulumi.StringPtrInput
	// State of the notification (1 = active (default), 2 = inactive) [global]
	State pulumi.IntPtrInput
	// Internal dbt Cloud User ID. Must be the userId for an existing user even if the notification is an external one [global]
	UserId pulumi.IntPtrInput
}

func (PartialNotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*partialNotificationState)(nil)).Elem()
}

type partialNotificationArgs struct {
	// The external email to receive the notification [global, used as identifier]
	ExternalEmail *string `pulumi:"externalEmail"`
	// Type of notification (1 = dbt Cloud user email (default): does not require an externalEmail ; 2 = Slack channel: requires `slackChannelId` and `slackChannelName` ; 4 = external email: requires setting an `externalEmail`) [global, used as identifier]
	NotificationType *int `pulumi:"notificationType"`
	// List of job IDs to trigger the webhook on cancel. Those will be added/removed when config is added/removed.
	OnCancels []int `pulumi:"onCancels"`
	// List of job IDs to trigger the webhook on failure Those will be added/removed when config is added/removed.
	OnFailures []int `pulumi:"onFailures"`
	// List of job IDs to trigger the webhook on success Those will be added/removed when config is added/removed.
	OnSuccesses []int `pulumi:"onSuccesses"`
	// List of job IDs to trigger the webhook on warning Those will be added/removed when config is added/removed.
	OnWarnings []int `pulumi:"onWarnings"`
	// The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings [global, used as identifier]
	SlackChannelId *string `pulumi:"slackChannelId"`
	// The name of the slack channel [global, used as identifier]
	SlackChannelName *string `pulumi:"slackChannelName"`
	// State of the notification (1 = active (default), 2 = inactive) [global]
	State *int `pulumi:"state"`
	// Internal dbt Cloud User ID. Must be the userId for an existing user even if the notification is an external one [global]
	UserId int `pulumi:"userId"`
}

// The set of arguments for constructing a PartialNotification resource.
type PartialNotificationArgs struct {
	// The external email to receive the notification [global, used as identifier]
	ExternalEmail pulumi.StringPtrInput
	// Type of notification (1 = dbt Cloud user email (default): does not require an externalEmail ; 2 = Slack channel: requires `slackChannelId` and `slackChannelName` ; 4 = external email: requires setting an `externalEmail`) [global, used as identifier]
	NotificationType pulumi.IntPtrInput
	// List of job IDs to trigger the webhook on cancel. Those will be added/removed when config is added/removed.
	OnCancels pulumi.IntArrayInput
	// List of job IDs to trigger the webhook on failure Those will be added/removed when config is added/removed.
	OnFailures pulumi.IntArrayInput
	// List of job IDs to trigger the webhook on success Those will be added/removed when config is added/removed.
	OnSuccesses pulumi.IntArrayInput
	// List of job IDs to trigger the webhook on warning Those will be added/removed when config is added/removed.
	OnWarnings pulumi.IntArrayInput
	// The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings [global, used as identifier]
	SlackChannelId pulumi.StringPtrInput
	// The name of the slack channel [global, used as identifier]
	SlackChannelName pulumi.StringPtrInput
	// State of the notification (1 = active (default), 2 = inactive) [global]
	State pulumi.IntPtrInput
	// Internal dbt Cloud User ID. Must be the userId for an existing user even if the notification is an external one [global]
	UserId pulumi.IntInput
}

func (PartialNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*partialNotificationArgs)(nil)).Elem()
}

type PartialNotificationInput interface {
	pulumi.Input

	ToPartialNotificationOutput() PartialNotificationOutput
	ToPartialNotificationOutputWithContext(ctx context.Context) PartialNotificationOutput
}

func (*PartialNotification) ElementType() reflect.Type {
	return reflect.TypeOf((**PartialNotification)(nil)).Elem()
}

func (i *PartialNotification) ToPartialNotificationOutput() PartialNotificationOutput {
	return i.ToPartialNotificationOutputWithContext(context.Background())
}

func (i *PartialNotification) ToPartialNotificationOutputWithContext(ctx context.Context) PartialNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartialNotificationOutput)
}

// PartialNotificationArrayInput is an input type that accepts PartialNotificationArray and PartialNotificationArrayOutput values.
// You can construct a concrete instance of `PartialNotificationArrayInput` via:
//
//	PartialNotificationArray{ PartialNotificationArgs{...} }
type PartialNotificationArrayInput interface {
	pulumi.Input

	ToPartialNotificationArrayOutput() PartialNotificationArrayOutput
	ToPartialNotificationArrayOutputWithContext(context.Context) PartialNotificationArrayOutput
}

type PartialNotificationArray []PartialNotificationInput

func (PartialNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PartialNotification)(nil)).Elem()
}

func (i PartialNotificationArray) ToPartialNotificationArrayOutput() PartialNotificationArrayOutput {
	return i.ToPartialNotificationArrayOutputWithContext(context.Background())
}

func (i PartialNotificationArray) ToPartialNotificationArrayOutputWithContext(ctx context.Context) PartialNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartialNotificationArrayOutput)
}

// PartialNotificationMapInput is an input type that accepts PartialNotificationMap and PartialNotificationMapOutput values.
// You can construct a concrete instance of `PartialNotificationMapInput` via:
//
//	PartialNotificationMap{ "key": PartialNotificationArgs{...} }
type PartialNotificationMapInput interface {
	pulumi.Input

	ToPartialNotificationMapOutput() PartialNotificationMapOutput
	ToPartialNotificationMapOutputWithContext(context.Context) PartialNotificationMapOutput
}

type PartialNotificationMap map[string]PartialNotificationInput

func (PartialNotificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PartialNotification)(nil)).Elem()
}

func (i PartialNotificationMap) ToPartialNotificationMapOutput() PartialNotificationMapOutput {
	return i.ToPartialNotificationMapOutputWithContext(context.Background())
}

func (i PartialNotificationMap) ToPartialNotificationMapOutputWithContext(ctx context.Context) PartialNotificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartialNotificationMapOutput)
}

type PartialNotificationOutput struct{ *pulumi.OutputState }

func (PartialNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartialNotification)(nil)).Elem()
}

func (o PartialNotificationOutput) ToPartialNotificationOutput() PartialNotificationOutput {
	return o
}

func (o PartialNotificationOutput) ToPartialNotificationOutputWithContext(ctx context.Context) PartialNotificationOutput {
	return o
}

// The external email to receive the notification [global, used as identifier]
func (o PartialNotificationOutput) ExternalEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartialNotification) pulumi.StringPtrOutput { return v.ExternalEmail }).(pulumi.StringPtrOutput)
}

// Type of notification (1 = dbt Cloud user email (default): does not require an externalEmail ; 2 = Slack channel: requires `slackChannelId` and `slackChannelName` ; 4 = external email: requires setting an `externalEmail`) [global, used as identifier]
func (o PartialNotificationOutput) NotificationType() pulumi.IntOutput {
	return o.ApplyT(func(v *PartialNotification) pulumi.IntOutput { return v.NotificationType }).(pulumi.IntOutput)
}

// List of job IDs to trigger the webhook on cancel. Those will be added/removed when config is added/removed.
func (o PartialNotificationOutput) OnCancels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *PartialNotification) pulumi.IntArrayOutput { return v.OnCancels }).(pulumi.IntArrayOutput)
}

// List of job IDs to trigger the webhook on failure Those will be added/removed when config is added/removed.
func (o PartialNotificationOutput) OnFailures() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *PartialNotification) pulumi.IntArrayOutput { return v.OnFailures }).(pulumi.IntArrayOutput)
}

// List of job IDs to trigger the webhook on success Those will be added/removed when config is added/removed.
func (o PartialNotificationOutput) OnSuccesses() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *PartialNotification) pulumi.IntArrayOutput { return v.OnSuccesses }).(pulumi.IntArrayOutput)
}

// List of job IDs to trigger the webhook on warning Those will be added/removed when config is added/removed.
func (o PartialNotificationOutput) OnWarnings() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *PartialNotification) pulumi.IntArrayOutput { return v.OnWarnings }).(pulumi.IntArrayOutput)
}

// The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings [global, used as identifier]
func (o PartialNotificationOutput) SlackChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartialNotification) pulumi.StringPtrOutput { return v.SlackChannelId }).(pulumi.StringPtrOutput)
}

// The name of the slack channel [global, used as identifier]
func (o PartialNotificationOutput) SlackChannelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartialNotification) pulumi.StringPtrOutput { return v.SlackChannelName }).(pulumi.StringPtrOutput)
}

// State of the notification (1 = active (default), 2 = inactive) [global]
func (o PartialNotificationOutput) State() pulumi.IntOutput {
	return o.ApplyT(func(v *PartialNotification) pulumi.IntOutput { return v.State }).(pulumi.IntOutput)
}

// Internal dbt Cloud User ID. Must be the userId for an existing user even if the notification is an external one [global]
func (o PartialNotificationOutput) UserId() pulumi.IntOutput {
	return o.ApplyT(func(v *PartialNotification) pulumi.IntOutput { return v.UserId }).(pulumi.IntOutput)
}

type PartialNotificationArrayOutput struct{ *pulumi.OutputState }

func (PartialNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PartialNotification)(nil)).Elem()
}

func (o PartialNotificationArrayOutput) ToPartialNotificationArrayOutput() PartialNotificationArrayOutput {
	return o
}

func (o PartialNotificationArrayOutput) ToPartialNotificationArrayOutputWithContext(ctx context.Context) PartialNotificationArrayOutput {
	return o
}

func (o PartialNotificationArrayOutput) Index(i pulumi.IntInput) PartialNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PartialNotification {
		return vs[0].([]*PartialNotification)[vs[1].(int)]
	}).(PartialNotificationOutput)
}

type PartialNotificationMapOutput struct{ *pulumi.OutputState }

func (PartialNotificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PartialNotification)(nil)).Elem()
}

func (o PartialNotificationMapOutput) ToPartialNotificationMapOutput() PartialNotificationMapOutput {
	return o
}

func (o PartialNotificationMapOutput) ToPartialNotificationMapOutputWithContext(ctx context.Context) PartialNotificationMapOutput {
	return o
}

func (o PartialNotificationMapOutput) MapIndex(k pulumi.StringInput) PartialNotificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PartialNotification {
		return vs[0].(map[string]*PartialNotification)[vs[1].(string)]
	}).(PartialNotificationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PartialNotificationInput)(nil)).Elem(), &PartialNotification{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartialNotificationArrayInput)(nil)).Elem(), PartialNotificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartialNotificationMapInput)(nil)).Elem(), PartialNotificationMap{})
	pulumi.RegisterOutputType(PartialNotificationOutput{})
	pulumi.RegisterOutputType(PartialNotificationArrayOutput{})
	pulumi.RegisterOutputType(PartialNotificationMapOutput{})
}

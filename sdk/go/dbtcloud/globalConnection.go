// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can be used to create global connections as introduced in dbt Cloud in August 2024.
//
// Those connections are not linked to a specific project and can be linked to environments from different projects by using the `connectionId` field in the `Environment` resource.
//
// ## Import
//
// # A project-scoped connection can be imported as a global connection by specifying the connection ID
//
// Migrating from project-scoped connections to global connections could be done by:
//
// 1. Adding the config for the global connection and importing it (see below)
//
// 2. Removing the project-scoped connection from the config AND from the state
//
//   - CAREFUL: If the connection is removed from the config but not the state, it will be destroyed on the next apply
//
// using  import blocks (requires Terraform >= 1.5)
//
// import {
//
//	to = dbtcloud_global_connection.my_connection
//
//	id = "connection_id"
//
// }
//
// import {
//
//	to = dbtcloud_global_connection.my_connection
//
//	id = "1234"
//
// }
//
// using the older import command
//
// ```sh
// $ pulumi import dbtcloud:index/globalConnection:GlobalConnection my_connection "connection_id"
// ```
//
// ```sh
// $ pulumi import dbtcloud:index/globalConnection:GlobalConnection my_connection 1234
// ```
type GlobalConnection struct {
	pulumi.CustomResourceState

	// Version of the adapter
	AdapterVersion pulumi.StringOutput `pulumi:"adapterVersion"`
	// Apache Spark connection configuration.
	ApacheSpark GlobalConnectionApacheSparkPtrOutput `pulumi:"apacheSpark"`
	// Athena connection configuration.
	Athena   GlobalConnectionAthenaPtrOutput   `pulumi:"athena"`
	Bigquery GlobalConnectionBigqueryPtrOutput `pulumi:"bigquery"`
	// Databricks connection configuration
	Databricks GlobalConnectionDatabricksPtrOutput `pulumi:"databricks"`
	// Microsoft Fabric connection configuration.
	Fabric GlobalConnectionFabricPtrOutput `pulumi:"fabric"`
	// Whether the connection can use an SSH tunnel
	IsSshTunnelEnabled pulumi.BoolOutput `pulumi:"isSshTunnelEnabled"`
	// Connection name
	Name pulumi.StringOutput `pulumi:"name"`
	// External OAuth configuration ID (only Snowflake for now)
	OauthConfigurationId pulumi.IntPtrOutput `pulumi:"oauthConfigurationId"`
	// PostgreSQL connection configuration.
	Postgres GlobalConnectionPostgresPtrOutput `pulumi:"postgres"`
	// Private Link Endpoint ID. This ID can be found using the `privatelinkEndpoint` data source
	PrivateLinkEndpointId pulumi.StringPtrOutput `pulumi:"privateLinkEndpointId"`
	// Redshift connection configuration
	Redshift GlobalConnectionRedshiftPtrOutput `pulumi:"redshift"`
	// Snowflake connection configuration
	Snowflake GlobalConnectionSnowflakePtrOutput `pulumi:"snowflake"`
	// Starburst/Trino connection configuration.
	Starburst GlobalConnectionStarburstPtrOutput `pulumi:"starburst"`
	// Azure Synapse Analytics connection configuration.
	Synapse GlobalConnectionSynapsePtrOutput `pulumi:"synapse"`
	// Teradata connection configuration.
	Teradata GlobalConnectionTeradataPtrOutput `pulumi:"teradata"`
}

// NewGlobalConnection registers a new resource with the given unique name, arguments, and options.
func NewGlobalConnection(ctx *pulumi.Context,
	name string, args *GlobalConnectionArgs, opts ...pulumi.ResourceOption) (*GlobalConnection, error) {
	if args == nil {
		args = &GlobalConnectionArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GlobalConnection
	err := ctx.RegisterResource("dbtcloud:index/globalConnection:GlobalConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlobalConnection gets an existing GlobalConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlobalConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlobalConnectionState, opts ...pulumi.ResourceOption) (*GlobalConnection, error) {
	var resource GlobalConnection
	err := ctx.ReadResource("dbtcloud:index/globalConnection:GlobalConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlobalConnection resources.
type globalConnectionState struct {
	// Version of the adapter
	AdapterVersion *string `pulumi:"adapterVersion"`
	// Apache Spark connection configuration.
	ApacheSpark *GlobalConnectionApacheSpark `pulumi:"apacheSpark"`
	// Athena connection configuration.
	Athena   *GlobalConnectionAthena   `pulumi:"athena"`
	Bigquery *GlobalConnectionBigquery `pulumi:"bigquery"`
	// Databricks connection configuration
	Databricks *GlobalConnectionDatabricks `pulumi:"databricks"`
	// Microsoft Fabric connection configuration.
	Fabric *GlobalConnectionFabric `pulumi:"fabric"`
	// Whether the connection can use an SSH tunnel
	IsSshTunnelEnabled *bool `pulumi:"isSshTunnelEnabled"`
	// Connection name
	Name *string `pulumi:"name"`
	// External OAuth configuration ID (only Snowflake for now)
	OauthConfigurationId *int `pulumi:"oauthConfigurationId"`
	// PostgreSQL connection configuration.
	Postgres *GlobalConnectionPostgres `pulumi:"postgres"`
	// Private Link Endpoint ID. This ID can be found using the `privatelinkEndpoint` data source
	PrivateLinkEndpointId *string `pulumi:"privateLinkEndpointId"`
	// Redshift connection configuration
	Redshift *GlobalConnectionRedshift `pulumi:"redshift"`
	// Snowflake connection configuration
	Snowflake *GlobalConnectionSnowflake `pulumi:"snowflake"`
	// Starburst/Trino connection configuration.
	Starburst *GlobalConnectionStarburst `pulumi:"starburst"`
	// Azure Synapse Analytics connection configuration.
	Synapse *GlobalConnectionSynapse `pulumi:"synapse"`
	// Teradata connection configuration.
	Teradata *GlobalConnectionTeradata `pulumi:"teradata"`
}

type GlobalConnectionState struct {
	// Version of the adapter
	AdapterVersion pulumi.StringPtrInput
	// Apache Spark connection configuration.
	ApacheSpark GlobalConnectionApacheSparkPtrInput
	// Athena connection configuration.
	Athena   GlobalConnectionAthenaPtrInput
	Bigquery GlobalConnectionBigqueryPtrInput
	// Databricks connection configuration
	Databricks GlobalConnectionDatabricksPtrInput
	// Microsoft Fabric connection configuration.
	Fabric GlobalConnectionFabricPtrInput
	// Whether the connection can use an SSH tunnel
	IsSshTunnelEnabled pulumi.BoolPtrInput
	// Connection name
	Name pulumi.StringPtrInput
	// External OAuth configuration ID (only Snowflake for now)
	OauthConfigurationId pulumi.IntPtrInput
	// PostgreSQL connection configuration.
	Postgres GlobalConnectionPostgresPtrInput
	// Private Link Endpoint ID. This ID can be found using the `privatelinkEndpoint` data source
	PrivateLinkEndpointId pulumi.StringPtrInput
	// Redshift connection configuration
	Redshift GlobalConnectionRedshiftPtrInput
	// Snowflake connection configuration
	Snowflake GlobalConnectionSnowflakePtrInput
	// Starburst/Trino connection configuration.
	Starburst GlobalConnectionStarburstPtrInput
	// Azure Synapse Analytics connection configuration.
	Synapse GlobalConnectionSynapsePtrInput
	// Teradata connection configuration.
	Teradata GlobalConnectionTeradataPtrInput
}

func (GlobalConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*globalConnectionState)(nil)).Elem()
}

type globalConnectionArgs struct {
	// Apache Spark connection configuration.
	ApacheSpark *GlobalConnectionApacheSpark `pulumi:"apacheSpark"`
	// Athena connection configuration.
	Athena   *GlobalConnectionAthena   `pulumi:"athena"`
	Bigquery *GlobalConnectionBigquery `pulumi:"bigquery"`
	// Databricks connection configuration
	Databricks *GlobalConnectionDatabricks `pulumi:"databricks"`
	// Microsoft Fabric connection configuration.
	Fabric *GlobalConnectionFabric `pulumi:"fabric"`
	// Connection name
	Name *string `pulumi:"name"`
	// External OAuth configuration ID (only Snowflake for now)
	OauthConfigurationId *int `pulumi:"oauthConfigurationId"`
	// PostgreSQL connection configuration.
	Postgres *GlobalConnectionPostgres `pulumi:"postgres"`
	// Private Link Endpoint ID. This ID can be found using the `privatelinkEndpoint` data source
	PrivateLinkEndpointId *string `pulumi:"privateLinkEndpointId"`
	// Redshift connection configuration
	Redshift *GlobalConnectionRedshift `pulumi:"redshift"`
	// Snowflake connection configuration
	Snowflake *GlobalConnectionSnowflake `pulumi:"snowflake"`
	// Starburst/Trino connection configuration.
	Starburst *GlobalConnectionStarburst `pulumi:"starburst"`
	// Azure Synapse Analytics connection configuration.
	Synapse *GlobalConnectionSynapse `pulumi:"synapse"`
	// Teradata connection configuration.
	Teradata *GlobalConnectionTeradata `pulumi:"teradata"`
}

// The set of arguments for constructing a GlobalConnection resource.
type GlobalConnectionArgs struct {
	// Apache Spark connection configuration.
	ApacheSpark GlobalConnectionApacheSparkPtrInput
	// Athena connection configuration.
	Athena   GlobalConnectionAthenaPtrInput
	Bigquery GlobalConnectionBigqueryPtrInput
	// Databricks connection configuration
	Databricks GlobalConnectionDatabricksPtrInput
	// Microsoft Fabric connection configuration.
	Fabric GlobalConnectionFabricPtrInput
	// Connection name
	Name pulumi.StringPtrInput
	// External OAuth configuration ID (only Snowflake for now)
	OauthConfigurationId pulumi.IntPtrInput
	// PostgreSQL connection configuration.
	Postgres GlobalConnectionPostgresPtrInput
	// Private Link Endpoint ID. This ID can be found using the `privatelinkEndpoint` data source
	PrivateLinkEndpointId pulumi.StringPtrInput
	// Redshift connection configuration
	Redshift GlobalConnectionRedshiftPtrInput
	// Snowflake connection configuration
	Snowflake GlobalConnectionSnowflakePtrInput
	// Starburst/Trino connection configuration.
	Starburst GlobalConnectionStarburstPtrInput
	// Azure Synapse Analytics connection configuration.
	Synapse GlobalConnectionSynapsePtrInput
	// Teradata connection configuration.
	Teradata GlobalConnectionTeradataPtrInput
}

func (GlobalConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*globalConnectionArgs)(nil)).Elem()
}

type GlobalConnectionInput interface {
	pulumi.Input

	ToGlobalConnectionOutput() GlobalConnectionOutput
	ToGlobalConnectionOutputWithContext(ctx context.Context) GlobalConnectionOutput
}

func (*GlobalConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnection)(nil)).Elem()
}

func (i *GlobalConnection) ToGlobalConnectionOutput() GlobalConnectionOutput {
	return i.ToGlobalConnectionOutputWithContext(context.Background())
}

func (i *GlobalConnection) ToGlobalConnectionOutputWithContext(ctx context.Context) GlobalConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionOutput)
}

// GlobalConnectionArrayInput is an input type that accepts GlobalConnectionArray and GlobalConnectionArrayOutput values.
// You can construct a concrete instance of `GlobalConnectionArrayInput` via:
//
//	GlobalConnectionArray{ GlobalConnectionArgs{...} }
type GlobalConnectionArrayInput interface {
	pulumi.Input

	ToGlobalConnectionArrayOutput() GlobalConnectionArrayOutput
	ToGlobalConnectionArrayOutputWithContext(context.Context) GlobalConnectionArrayOutput
}

type GlobalConnectionArray []GlobalConnectionInput

func (GlobalConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlobalConnection)(nil)).Elem()
}

func (i GlobalConnectionArray) ToGlobalConnectionArrayOutput() GlobalConnectionArrayOutput {
	return i.ToGlobalConnectionArrayOutputWithContext(context.Background())
}

func (i GlobalConnectionArray) ToGlobalConnectionArrayOutputWithContext(ctx context.Context) GlobalConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionArrayOutput)
}

// GlobalConnectionMapInput is an input type that accepts GlobalConnectionMap and GlobalConnectionMapOutput values.
// You can construct a concrete instance of `GlobalConnectionMapInput` via:
//
//	GlobalConnectionMap{ "key": GlobalConnectionArgs{...} }
type GlobalConnectionMapInput interface {
	pulumi.Input

	ToGlobalConnectionMapOutput() GlobalConnectionMapOutput
	ToGlobalConnectionMapOutputWithContext(context.Context) GlobalConnectionMapOutput
}

type GlobalConnectionMap map[string]GlobalConnectionInput

func (GlobalConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlobalConnection)(nil)).Elem()
}

func (i GlobalConnectionMap) ToGlobalConnectionMapOutput() GlobalConnectionMapOutput {
	return i.ToGlobalConnectionMapOutputWithContext(context.Background())
}

func (i GlobalConnectionMap) ToGlobalConnectionMapOutputWithContext(ctx context.Context) GlobalConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionMapOutput)
}

type GlobalConnectionOutput struct{ *pulumi.OutputState }

func (GlobalConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnection)(nil)).Elem()
}

func (o GlobalConnectionOutput) ToGlobalConnectionOutput() GlobalConnectionOutput {
	return o
}

func (o GlobalConnectionOutput) ToGlobalConnectionOutputWithContext(ctx context.Context) GlobalConnectionOutput {
	return o
}

// Version of the adapter
func (o GlobalConnectionOutput) AdapterVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalConnection) pulumi.StringOutput { return v.AdapterVersion }).(pulumi.StringOutput)
}

// Apache Spark connection configuration.
func (o GlobalConnectionOutput) ApacheSpark() GlobalConnectionApacheSparkPtrOutput {
	return o.ApplyT(func(v *GlobalConnection) GlobalConnectionApacheSparkPtrOutput { return v.ApacheSpark }).(GlobalConnectionApacheSparkPtrOutput)
}

// Athena connection configuration.
func (o GlobalConnectionOutput) Athena() GlobalConnectionAthenaPtrOutput {
	return o.ApplyT(func(v *GlobalConnection) GlobalConnectionAthenaPtrOutput { return v.Athena }).(GlobalConnectionAthenaPtrOutput)
}

func (o GlobalConnectionOutput) Bigquery() GlobalConnectionBigqueryPtrOutput {
	return o.ApplyT(func(v *GlobalConnection) GlobalConnectionBigqueryPtrOutput { return v.Bigquery }).(GlobalConnectionBigqueryPtrOutput)
}

// Databricks connection configuration
func (o GlobalConnectionOutput) Databricks() GlobalConnectionDatabricksPtrOutput {
	return o.ApplyT(func(v *GlobalConnection) GlobalConnectionDatabricksPtrOutput { return v.Databricks }).(GlobalConnectionDatabricksPtrOutput)
}

// Microsoft Fabric connection configuration.
func (o GlobalConnectionOutput) Fabric() GlobalConnectionFabricPtrOutput {
	return o.ApplyT(func(v *GlobalConnection) GlobalConnectionFabricPtrOutput { return v.Fabric }).(GlobalConnectionFabricPtrOutput)
}

// Whether the connection can use an SSH tunnel
func (o GlobalConnectionOutput) IsSshTunnelEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GlobalConnection) pulumi.BoolOutput { return v.IsSshTunnelEnabled }).(pulumi.BoolOutput)
}

// Connection name
func (o GlobalConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// External OAuth configuration ID (only Snowflake for now)
func (o GlobalConnectionOutput) OauthConfigurationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnection) pulumi.IntPtrOutput { return v.OauthConfigurationId }).(pulumi.IntPtrOutput)
}

// PostgreSQL connection configuration.
func (o GlobalConnectionOutput) Postgres() GlobalConnectionPostgresPtrOutput {
	return o.ApplyT(func(v *GlobalConnection) GlobalConnectionPostgresPtrOutput { return v.Postgres }).(GlobalConnectionPostgresPtrOutput)
}

// Private Link Endpoint ID. This ID can be found using the `privatelinkEndpoint` data source
func (o GlobalConnectionOutput) PrivateLinkEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnection) pulumi.StringPtrOutput { return v.PrivateLinkEndpointId }).(pulumi.StringPtrOutput)
}

// Redshift connection configuration
func (o GlobalConnectionOutput) Redshift() GlobalConnectionRedshiftPtrOutput {
	return o.ApplyT(func(v *GlobalConnection) GlobalConnectionRedshiftPtrOutput { return v.Redshift }).(GlobalConnectionRedshiftPtrOutput)
}

// Snowflake connection configuration
func (o GlobalConnectionOutput) Snowflake() GlobalConnectionSnowflakePtrOutput {
	return o.ApplyT(func(v *GlobalConnection) GlobalConnectionSnowflakePtrOutput { return v.Snowflake }).(GlobalConnectionSnowflakePtrOutput)
}

// Starburst/Trino connection configuration.
func (o GlobalConnectionOutput) Starburst() GlobalConnectionStarburstPtrOutput {
	return o.ApplyT(func(v *GlobalConnection) GlobalConnectionStarburstPtrOutput { return v.Starburst }).(GlobalConnectionStarburstPtrOutput)
}

// Azure Synapse Analytics connection configuration.
func (o GlobalConnectionOutput) Synapse() GlobalConnectionSynapsePtrOutput {
	return o.ApplyT(func(v *GlobalConnection) GlobalConnectionSynapsePtrOutput { return v.Synapse }).(GlobalConnectionSynapsePtrOutput)
}

// Teradata connection configuration.
func (o GlobalConnectionOutput) Teradata() GlobalConnectionTeradataPtrOutput {
	return o.ApplyT(func(v *GlobalConnection) GlobalConnectionTeradataPtrOutput { return v.Teradata }).(GlobalConnectionTeradataPtrOutput)
}

type GlobalConnectionArrayOutput struct{ *pulumi.OutputState }

func (GlobalConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlobalConnection)(nil)).Elem()
}

func (o GlobalConnectionArrayOutput) ToGlobalConnectionArrayOutput() GlobalConnectionArrayOutput {
	return o
}

func (o GlobalConnectionArrayOutput) ToGlobalConnectionArrayOutputWithContext(ctx context.Context) GlobalConnectionArrayOutput {
	return o
}

func (o GlobalConnectionArrayOutput) Index(i pulumi.IntInput) GlobalConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GlobalConnection {
		return vs[0].([]*GlobalConnection)[vs[1].(int)]
	}).(GlobalConnectionOutput)
}

type GlobalConnectionMapOutput struct{ *pulumi.OutputState }

func (GlobalConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlobalConnection)(nil)).Elem()
}

func (o GlobalConnectionMapOutput) ToGlobalConnectionMapOutput() GlobalConnectionMapOutput {
	return o
}

func (o GlobalConnectionMapOutput) ToGlobalConnectionMapOutputWithContext(ctx context.Context) GlobalConnectionMapOutput {
	return o
}

func (o GlobalConnectionMapOutput) MapIndex(k pulumi.StringInput) GlobalConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GlobalConnection {
		return vs[0].(map[string]*GlobalConnection)[vs[1].(string)]
	}).(GlobalConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionInput)(nil)).Elem(), &GlobalConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionArrayInput)(nil)).Elem(), GlobalConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionMapInput)(nil)).Elem(), GlobalConnectionMap{})
	pulumi.RegisterOutputType(GlobalConnectionOutput{})
	pulumi.RegisterOutputType(GlobalConnectionArrayOutput{})
	pulumi.RegisterOutputType(GlobalConnectionMapOutput{})
}

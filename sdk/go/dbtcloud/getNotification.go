// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieve notification details
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dbtcloud.LookupNotification(ctx, &dbtcloud.LookupNotificationArgs{
//				NotificationId: 12345,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNotification(ctx *pulumi.Context, args *LookupNotificationArgs, opts ...pulumi.InvokeOption) (*LookupNotificationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNotificationResult
	err := ctx.Invoke("dbtcloud:index/getNotification:getNotification", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNotification.
type LookupNotificationArgs struct {
	// The ID of the notification
	NotificationId int `pulumi:"notificationId"`
}

// A collection of values returned by getNotification.
type LookupNotificationResult struct {
	// The external email to receive the notification
	ExternalEmail string `pulumi:"externalEmail"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the notification
	NotificationId int `pulumi:"notificationId"`
	// Type of notification (1 = dbt Cloud user email (default): does not require an externalEmail ; 2 = Slack channel: requires `slackChannelId` and `slackChannelName` ; 4 = external email: requires setting an `externalEmail`)
	NotificationType int `pulumi:"notificationType"`
	// List of job IDs to trigger the webhook on cancel
	OnCancels []int `pulumi:"onCancels"`
	// List of job IDs to trigger the webhook on failure
	OnFailures []int `pulumi:"onFailures"`
	// List of job IDs to trigger the webhook on success
	OnSuccesses []int `pulumi:"onSuccesses"`
	// List of job IDs to trigger the webhook on warning
	OnWarnings []int `pulumi:"onWarnings"`
	// The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
	SlackChannelId string `pulumi:"slackChannelId"`
	// The name of the slack channel
	SlackChannelName string `pulumi:"slackChannelName"`
	// State of the notification (1 = active (default), 2 = inactive)
	State int `pulumi:"state"`
	// Internal dbt Cloud User ID. Must be the userId for an existing user even if the notification is an external one
	UserId int `pulumi:"userId"`
}

func LookupNotificationOutput(ctx *pulumi.Context, args LookupNotificationOutputArgs, opts ...pulumi.InvokeOption) LookupNotificationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNotificationResult, error) {
			args := v.(LookupNotificationArgs)
			r, err := LookupNotification(ctx, &args, opts...)
			var s LookupNotificationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNotificationResultOutput)
}

// A collection of arguments for invoking getNotification.
type LookupNotificationOutputArgs struct {
	// The ID of the notification
	NotificationId pulumi.IntInput `pulumi:"notificationId"`
}

func (LookupNotificationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNotificationArgs)(nil)).Elem()
}

// A collection of values returned by getNotification.
type LookupNotificationResultOutput struct{ *pulumi.OutputState }

func (LookupNotificationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNotificationResult)(nil)).Elem()
}

func (o LookupNotificationResultOutput) ToLookupNotificationResultOutput() LookupNotificationResultOutput {
	return o
}

func (o LookupNotificationResultOutput) ToLookupNotificationResultOutputWithContext(ctx context.Context) LookupNotificationResultOutput {
	return o
}

// The external email to receive the notification
func (o LookupNotificationResultOutput) ExternalEmail() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNotificationResult) string { return v.ExternalEmail }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNotificationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNotificationResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the notification
func (o LookupNotificationResultOutput) NotificationId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNotificationResult) int { return v.NotificationId }).(pulumi.IntOutput)
}

// Type of notification (1 = dbt Cloud user email (default): does not require an externalEmail ; 2 = Slack channel: requires `slackChannelId` and `slackChannelName` ; 4 = external email: requires setting an `externalEmail`)
func (o LookupNotificationResultOutput) NotificationType() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNotificationResult) int { return v.NotificationType }).(pulumi.IntOutput)
}

// List of job IDs to trigger the webhook on cancel
func (o LookupNotificationResultOutput) OnCancels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v LookupNotificationResult) []int { return v.OnCancels }).(pulumi.IntArrayOutput)
}

// List of job IDs to trigger the webhook on failure
func (o LookupNotificationResultOutput) OnFailures() pulumi.IntArrayOutput {
	return o.ApplyT(func(v LookupNotificationResult) []int { return v.OnFailures }).(pulumi.IntArrayOutput)
}

// List of job IDs to trigger the webhook on success
func (o LookupNotificationResultOutput) OnSuccesses() pulumi.IntArrayOutput {
	return o.ApplyT(func(v LookupNotificationResult) []int { return v.OnSuccesses }).(pulumi.IntArrayOutput)
}

// List of job IDs to trigger the webhook on warning
func (o LookupNotificationResultOutput) OnWarnings() pulumi.IntArrayOutput {
	return o.ApplyT(func(v LookupNotificationResult) []int { return v.OnWarnings }).(pulumi.IntArrayOutput)
}

// The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
func (o LookupNotificationResultOutput) SlackChannelId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNotificationResult) string { return v.SlackChannelId }).(pulumi.StringOutput)
}

// The name of the slack channel
func (o LookupNotificationResultOutput) SlackChannelName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNotificationResult) string { return v.SlackChannelName }).(pulumi.StringOutput)
}

// State of the notification (1 = active (default), 2 = inactive)
func (o LookupNotificationResultOutput) State() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNotificationResult) int { return v.State }).(pulumi.IntOutput)
}

// Internal dbt Cloud User ID. Must be the userId for an existing user even if the notification is an external one
func (o LookupNotificationResultOutput) UserId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNotificationResult) int { return v.UserId }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNotificationResultOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Environment variable credential data source
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dbtcloud.LookupEnvironmentVariable(ctx, &dbtcloud.LookupEnvironmentVariableArgs{
//				ProjectId: 70403103985068,
//				Name:      "DBT_MY_PARTIAL_VAR",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupEnvironmentVariable(ctx *pulumi.Context, args *LookupEnvironmentVariableArgs, opts ...pulumi.InvokeOption) (*LookupEnvironmentVariableResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEnvironmentVariableResult
	err := ctx.Invoke("dbtcloud:index/getEnvironmentVariable:getEnvironmentVariable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEnvironmentVariable.
type LookupEnvironmentVariableArgs struct {
	// Name for the variable, must be unique within a project, must be prefixed with 'DBT_'
	Name string `pulumi:"name"`
	// Project ID to create the environment variable in
	ProjectId int `pulumi:"projectId"`
}

// A collection of values returned by getEnvironmentVariable.
type LookupEnvironmentVariableResult struct {
	// Map from environment names to respective variable value, a special key `project` should be set for the project default variable value. This field is not set as sensitive so take precautions when using secret environment variables.
	EnvironmentValues map[string]string `pulumi:"environmentValues"`
	// The ID of this resource. Contains the project ID and the environment variable ID.
	Id string `pulumi:"id"`
	// Name for the variable, must be unique within a project, must be prefixed with 'DBT_'
	Name string `pulumi:"name"`
	// Project ID to create the environment variable in
	ProjectId int `pulumi:"projectId"`
}

func LookupEnvironmentVariableOutput(ctx *pulumi.Context, args LookupEnvironmentVariableOutputArgs, opts ...pulumi.InvokeOption) LookupEnvironmentVariableResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupEnvironmentVariableResultOutput, error) {
			args := v.(LookupEnvironmentVariableArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("dbtcloud:index/getEnvironmentVariable:getEnvironmentVariable", args, LookupEnvironmentVariableResultOutput{}, options).(LookupEnvironmentVariableResultOutput), nil
		}).(LookupEnvironmentVariableResultOutput)
}

// A collection of arguments for invoking getEnvironmentVariable.
type LookupEnvironmentVariableOutputArgs struct {
	// Name for the variable, must be unique within a project, must be prefixed with 'DBT_'
	Name pulumi.StringInput `pulumi:"name"`
	// Project ID to create the environment variable in
	ProjectId pulumi.IntInput `pulumi:"projectId"`
}

func (LookupEnvironmentVariableOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnvironmentVariableArgs)(nil)).Elem()
}

// A collection of values returned by getEnvironmentVariable.
type LookupEnvironmentVariableResultOutput struct{ *pulumi.OutputState }

func (LookupEnvironmentVariableResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnvironmentVariableResult)(nil)).Elem()
}

func (o LookupEnvironmentVariableResultOutput) ToLookupEnvironmentVariableResultOutput() LookupEnvironmentVariableResultOutput {
	return o
}

func (o LookupEnvironmentVariableResultOutput) ToLookupEnvironmentVariableResultOutputWithContext(ctx context.Context) LookupEnvironmentVariableResultOutput {
	return o
}

// Map from environment names to respective variable value, a special key `project` should be set for the project default variable value. This field is not set as sensitive so take precautions when using secret environment variables.
func (o LookupEnvironmentVariableResultOutput) EnvironmentValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupEnvironmentVariableResult) map[string]string { return v.EnvironmentValues }).(pulumi.StringMapOutput)
}

// The ID of this resource. Contains the project ID and the environment variable ID.
func (o LookupEnvironmentVariableResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnvironmentVariableResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name for the variable, must be unique within a project, must be prefixed with 'DBT_'
func (o LookupEnvironmentVariableResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnvironmentVariableResult) string { return v.Name }).(pulumi.StringOutput)
}

// Project ID to create the environment variable in
func (o LookupEnvironmentVariableResultOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEnvironmentVariableResult) int { return v.ProjectId }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEnvironmentVariableResultOutput{})
}

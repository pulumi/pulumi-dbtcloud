// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Databricks credential resource. This resource is composed of a Databricks credential and a Semantic Layer configuration. It is used to create a Databricks credential for the Semantic Layer.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dbtcloud.NewDatabricksSemanticLayerCredential(ctx, "sl_cred_databricks_example", &dbtcloud.DatabricksSemanticLayerCredentialArgs{
//				Configuration: &dbtcloud.DatabricksSemanticLayerCredentialConfigurationArgs{
//					Project_id:      projectId,
//					Name:            pulumi.String("Databricks SL Credential"),
//					Adapter_version: "databricks_v0",
//				},
//				Credential: &dbtcloud.DatabricksSemanticLayerCredentialCredentialArgs{
//					Project_id:                projectId,
//					Catalog:                   pulumi.Any(catalog),
//					Token:                     pulumi.Any(token),
//					Semantic_layer_credential: true,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// using import blocks (requires Terraform >= 1.5)
//
// import {
//
//	to = dbtcloud_databricks_semantic_layer_credential.example
//
//	id = "credential_id"
//
// }
//
// import {
//
//	to = dbtcloud_databricks_semantic_layer_credential.example
//
//	id = "12345"
//
// }
//
// using the older import command
//
// ```sh
// $ pulumi import dbtcloud:index/databricksSemanticLayerCredential:DatabricksSemanticLayerCredential example "credential_id"
// ```
//
// ```sh
// $ pulumi import dbtcloud:index/databricksSemanticLayerCredential:DatabricksSemanticLayerCredential example 12345
// ```
type DatabricksSemanticLayerCredential struct {
	pulumi.CustomResourceState

	// Semantic Layer credential configuration details.
	Configuration DatabricksSemanticLayerCredentialConfigurationOutput `pulumi:"configuration"`
	// Databricks credential details, but used in the context of the Semantic Layer.
	Credential DatabricksSemanticLayerCredentialCredentialOutput `pulumi:"credential"`
}

// NewDatabricksSemanticLayerCredential registers a new resource with the given unique name, arguments, and options.
func NewDatabricksSemanticLayerCredential(ctx *pulumi.Context,
	name string, args *DatabricksSemanticLayerCredentialArgs, opts ...pulumi.ResourceOption) (*DatabricksSemanticLayerCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Credential == nil {
		return nil, errors.New("invalid value for required argument 'Credential'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabricksSemanticLayerCredential
	err := ctx.RegisterResource("dbtcloud:index/databricksSemanticLayerCredential:DatabricksSemanticLayerCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabricksSemanticLayerCredential gets an existing DatabricksSemanticLayerCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabricksSemanticLayerCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabricksSemanticLayerCredentialState, opts ...pulumi.ResourceOption) (*DatabricksSemanticLayerCredential, error) {
	var resource DatabricksSemanticLayerCredential
	err := ctx.ReadResource("dbtcloud:index/databricksSemanticLayerCredential:DatabricksSemanticLayerCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabricksSemanticLayerCredential resources.
type databricksSemanticLayerCredentialState struct {
	// Semantic Layer credential configuration details.
	Configuration *DatabricksSemanticLayerCredentialConfiguration `pulumi:"configuration"`
	// Databricks credential details, but used in the context of the Semantic Layer.
	Credential *DatabricksSemanticLayerCredentialCredential `pulumi:"credential"`
}

type DatabricksSemanticLayerCredentialState struct {
	// Semantic Layer credential configuration details.
	Configuration DatabricksSemanticLayerCredentialConfigurationPtrInput
	// Databricks credential details, but used in the context of the Semantic Layer.
	Credential DatabricksSemanticLayerCredentialCredentialPtrInput
}

func (DatabricksSemanticLayerCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*databricksSemanticLayerCredentialState)(nil)).Elem()
}

type databricksSemanticLayerCredentialArgs struct {
	// Semantic Layer credential configuration details.
	Configuration DatabricksSemanticLayerCredentialConfiguration `pulumi:"configuration"`
	// Databricks credential details, but used in the context of the Semantic Layer.
	Credential DatabricksSemanticLayerCredentialCredential `pulumi:"credential"`
}

// The set of arguments for constructing a DatabricksSemanticLayerCredential resource.
type DatabricksSemanticLayerCredentialArgs struct {
	// Semantic Layer credential configuration details.
	Configuration DatabricksSemanticLayerCredentialConfigurationInput
	// Databricks credential details, but used in the context of the Semantic Layer.
	Credential DatabricksSemanticLayerCredentialCredentialInput
}

func (DatabricksSemanticLayerCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databricksSemanticLayerCredentialArgs)(nil)).Elem()
}

type DatabricksSemanticLayerCredentialInput interface {
	pulumi.Input

	ToDatabricksSemanticLayerCredentialOutput() DatabricksSemanticLayerCredentialOutput
	ToDatabricksSemanticLayerCredentialOutputWithContext(ctx context.Context) DatabricksSemanticLayerCredentialOutput
}

func (*DatabricksSemanticLayerCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabricksSemanticLayerCredential)(nil)).Elem()
}

func (i *DatabricksSemanticLayerCredential) ToDatabricksSemanticLayerCredentialOutput() DatabricksSemanticLayerCredentialOutput {
	return i.ToDatabricksSemanticLayerCredentialOutputWithContext(context.Background())
}

func (i *DatabricksSemanticLayerCredential) ToDatabricksSemanticLayerCredentialOutputWithContext(ctx context.Context) DatabricksSemanticLayerCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabricksSemanticLayerCredentialOutput)
}

// DatabricksSemanticLayerCredentialArrayInput is an input type that accepts DatabricksSemanticLayerCredentialArray and DatabricksSemanticLayerCredentialArrayOutput values.
// You can construct a concrete instance of `DatabricksSemanticLayerCredentialArrayInput` via:
//
//	DatabricksSemanticLayerCredentialArray{ DatabricksSemanticLayerCredentialArgs{...} }
type DatabricksSemanticLayerCredentialArrayInput interface {
	pulumi.Input

	ToDatabricksSemanticLayerCredentialArrayOutput() DatabricksSemanticLayerCredentialArrayOutput
	ToDatabricksSemanticLayerCredentialArrayOutputWithContext(context.Context) DatabricksSemanticLayerCredentialArrayOutput
}

type DatabricksSemanticLayerCredentialArray []DatabricksSemanticLayerCredentialInput

func (DatabricksSemanticLayerCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabricksSemanticLayerCredential)(nil)).Elem()
}

func (i DatabricksSemanticLayerCredentialArray) ToDatabricksSemanticLayerCredentialArrayOutput() DatabricksSemanticLayerCredentialArrayOutput {
	return i.ToDatabricksSemanticLayerCredentialArrayOutputWithContext(context.Background())
}

func (i DatabricksSemanticLayerCredentialArray) ToDatabricksSemanticLayerCredentialArrayOutputWithContext(ctx context.Context) DatabricksSemanticLayerCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabricksSemanticLayerCredentialArrayOutput)
}

// DatabricksSemanticLayerCredentialMapInput is an input type that accepts DatabricksSemanticLayerCredentialMap and DatabricksSemanticLayerCredentialMapOutput values.
// You can construct a concrete instance of `DatabricksSemanticLayerCredentialMapInput` via:
//
//	DatabricksSemanticLayerCredentialMap{ "key": DatabricksSemanticLayerCredentialArgs{...} }
type DatabricksSemanticLayerCredentialMapInput interface {
	pulumi.Input

	ToDatabricksSemanticLayerCredentialMapOutput() DatabricksSemanticLayerCredentialMapOutput
	ToDatabricksSemanticLayerCredentialMapOutputWithContext(context.Context) DatabricksSemanticLayerCredentialMapOutput
}

type DatabricksSemanticLayerCredentialMap map[string]DatabricksSemanticLayerCredentialInput

func (DatabricksSemanticLayerCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabricksSemanticLayerCredential)(nil)).Elem()
}

func (i DatabricksSemanticLayerCredentialMap) ToDatabricksSemanticLayerCredentialMapOutput() DatabricksSemanticLayerCredentialMapOutput {
	return i.ToDatabricksSemanticLayerCredentialMapOutputWithContext(context.Background())
}

func (i DatabricksSemanticLayerCredentialMap) ToDatabricksSemanticLayerCredentialMapOutputWithContext(ctx context.Context) DatabricksSemanticLayerCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabricksSemanticLayerCredentialMapOutput)
}

type DatabricksSemanticLayerCredentialOutput struct{ *pulumi.OutputState }

func (DatabricksSemanticLayerCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabricksSemanticLayerCredential)(nil)).Elem()
}

func (o DatabricksSemanticLayerCredentialOutput) ToDatabricksSemanticLayerCredentialOutput() DatabricksSemanticLayerCredentialOutput {
	return o
}

func (o DatabricksSemanticLayerCredentialOutput) ToDatabricksSemanticLayerCredentialOutputWithContext(ctx context.Context) DatabricksSemanticLayerCredentialOutput {
	return o
}

// Semantic Layer credential configuration details.
func (o DatabricksSemanticLayerCredentialOutput) Configuration() DatabricksSemanticLayerCredentialConfigurationOutput {
	return o.ApplyT(func(v *DatabricksSemanticLayerCredential) DatabricksSemanticLayerCredentialConfigurationOutput {
		return v.Configuration
	}).(DatabricksSemanticLayerCredentialConfigurationOutput)
}

// Databricks credential details, but used in the context of the Semantic Layer.
func (o DatabricksSemanticLayerCredentialOutput) Credential() DatabricksSemanticLayerCredentialCredentialOutput {
	return o.ApplyT(func(v *DatabricksSemanticLayerCredential) DatabricksSemanticLayerCredentialCredentialOutput {
		return v.Credential
	}).(DatabricksSemanticLayerCredentialCredentialOutput)
}

type DatabricksSemanticLayerCredentialArrayOutput struct{ *pulumi.OutputState }

func (DatabricksSemanticLayerCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabricksSemanticLayerCredential)(nil)).Elem()
}

func (o DatabricksSemanticLayerCredentialArrayOutput) ToDatabricksSemanticLayerCredentialArrayOutput() DatabricksSemanticLayerCredentialArrayOutput {
	return o
}

func (o DatabricksSemanticLayerCredentialArrayOutput) ToDatabricksSemanticLayerCredentialArrayOutputWithContext(ctx context.Context) DatabricksSemanticLayerCredentialArrayOutput {
	return o
}

func (o DatabricksSemanticLayerCredentialArrayOutput) Index(i pulumi.IntInput) DatabricksSemanticLayerCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabricksSemanticLayerCredential {
		return vs[0].([]*DatabricksSemanticLayerCredential)[vs[1].(int)]
	}).(DatabricksSemanticLayerCredentialOutput)
}

type DatabricksSemanticLayerCredentialMapOutput struct{ *pulumi.OutputState }

func (DatabricksSemanticLayerCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabricksSemanticLayerCredential)(nil)).Elem()
}

func (o DatabricksSemanticLayerCredentialMapOutput) ToDatabricksSemanticLayerCredentialMapOutput() DatabricksSemanticLayerCredentialMapOutput {
	return o
}

func (o DatabricksSemanticLayerCredentialMapOutput) ToDatabricksSemanticLayerCredentialMapOutputWithContext(ctx context.Context) DatabricksSemanticLayerCredentialMapOutput {
	return o
}

func (o DatabricksSemanticLayerCredentialMapOutput) MapIndex(k pulumi.StringInput) DatabricksSemanticLayerCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabricksSemanticLayerCredential {
		return vs[0].(map[string]*DatabricksSemanticLayerCredential)[vs[1].(string)]
	}).(DatabricksSemanticLayerCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabricksSemanticLayerCredentialInput)(nil)).Elem(), &DatabricksSemanticLayerCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabricksSemanticLayerCredentialArrayInput)(nil)).Elem(), DatabricksSemanticLayerCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabricksSemanticLayerCredentialMapInput)(nil)).Elem(), DatabricksSemanticLayerCredentialMap{})
	pulumi.RegisterOutputType(DatabricksSemanticLayerCredentialOutput{})
	pulumi.RegisterOutputType(DatabricksSemanticLayerCredentialArrayOutput{})
	pulumi.RegisterOutputType(DatabricksSemanticLayerCredentialMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Snowflake credential resource. This resource is composed of a Snowflake credential and a Semantic Layer configuration. It is used to create a Snowflake credential for the Semantic Layer.
//
// ## Example Usage
//
// ## Import
//
// using import blocks (requires Terraform >= 1.5)
//
// import {
//
//	to = dbtcloud_snowflake_semantic_layer_credential.example
//
//	id = "credential_id"
//
// }
//
// import {
//
//	to = dbtcloud_snowflake_semantic_layer_credential.example
//
//	id = "12345"
//
// }
//
// using the older import command
//
// ```sh
// $ pulumi import dbtcloud:index/snowflakeSemanticLayerCredential:SnowflakeSemanticLayerCredential example "credential_id"
// ```
//
// ```sh
// $ pulumi import dbtcloud:index/snowflakeSemanticLayerCredential:SnowflakeSemanticLayerCredential example 12345
// ```
type SnowflakeSemanticLayerCredential struct {
	pulumi.CustomResourceState

	// Semantic Layer credenttial configuration details.
	Configuration SnowflakeSemanticLayerCredentialConfigurationOutput `pulumi:"configuration"`
	// Snowflake credential details, but used in the context of the Semantic Layer.
	Credential SnowflakeSemanticLayerCredentialCredentialOutput `pulumi:"credential"`
}

// NewSnowflakeSemanticLayerCredential registers a new resource with the given unique name, arguments, and options.
func NewSnowflakeSemanticLayerCredential(ctx *pulumi.Context,
	name string, args *SnowflakeSemanticLayerCredentialArgs, opts ...pulumi.ResourceOption) (*SnowflakeSemanticLayerCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Credential == nil {
		return nil, errors.New("invalid value for required argument 'Credential'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SnowflakeSemanticLayerCredential
	err := ctx.RegisterResource("dbtcloud:index/snowflakeSemanticLayerCredential:SnowflakeSemanticLayerCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnowflakeSemanticLayerCredential gets an existing SnowflakeSemanticLayerCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnowflakeSemanticLayerCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnowflakeSemanticLayerCredentialState, opts ...pulumi.ResourceOption) (*SnowflakeSemanticLayerCredential, error) {
	var resource SnowflakeSemanticLayerCredential
	err := ctx.ReadResource("dbtcloud:index/snowflakeSemanticLayerCredential:SnowflakeSemanticLayerCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnowflakeSemanticLayerCredential resources.
type snowflakeSemanticLayerCredentialState struct {
	// Semantic Layer credenttial configuration details.
	Configuration *SnowflakeSemanticLayerCredentialConfiguration `pulumi:"configuration"`
	// Snowflake credential details, but used in the context of the Semantic Layer.
	Credential *SnowflakeSemanticLayerCredentialCredential `pulumi:"credential"`
}

type SnowflakeSemanticLayerCredentialState struct {
	// Semantic Layer credenttial configuration details.
	Configuration SnowflakeSemanticLayerCredentialConfigurationPtrInput
	// Snowflake credential details, but used in the context of the Semantic Layer.
	Credential SnowflakeSemanticLayerCredentialCredentialPtrInput
}

func (SnowflakeSemanticLayerCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*snowflakeSemanticLayerCredentialState)(nil)).Elem()
}

type snowflakeSemanticLayerCredentialArgs struct {
	// Semantic Layer credenttial configuration details.
	Configuration SnowflakeSemanticLayerCredentialConfiguration `pulumi:"configuration"`
	// Snowflake credential details, but used in the context of the Semantic Layer.
	Credential SnowflakeSemanticLayerCredentialCredential `pulumi:"credential"`
}

// The set of arguments for constructing a SnowflakeSemanticLayerCredential resource.
type SnowflakeSemanticLayerCredentialArgs struct {
	// Semantic Layer credenttial configuration details.
	Configuration SnowflakeSemanticLayerCredentialConfigurationInput
	// Snowflake credential details, but used in the context of the Semantic Layer.
	Credential SnowflakeSemanticLayerCredentialCredentialInput
}

func (SnowflakeSemanticLayerCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snowflakeSemanticLayerCredentialArgs)(nil)).Elem()
}

type SnowflakeSemanticLayerCredentialInput interface {
	pulumi.Input

	ToSnowflakeSemanticLayerCredentialOutput() SnowflakeSemanticLayerCredentialOutput
	ToSnowflakeSemanticLayerCredentialOutputWithContext(ctx context.Context) SnowflakeSemanticLayerCredentialOutput
}

func (*SnowflakeSemanticLayerCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**SnowflakeSemanticLayerCredential)(nil)).Elem()
}

func (i *SnowflakeSemanticLayerCredential) ToSnowflakeSemanticLayerCredentialOutput() SnowflakeSemanticLayerCredentialOutput {
	return i.ToSnowflakeSemanticLayerCredentialOutputWithContext(context.Background())
}

func (i *SnowflakeSemanticLayerCredential) ToSnowflakeSemanticLayerCredentialOutputWithContext(ctx context.Context) SnowflakeSemanticLayerCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeSemanticLayerCredentialOutput)
}

// SnowflakeSemanticLayerCredentialArrayInput is an input type that accepts SnowflakeSemanticLayerCredentialArray and SnowflakeSemanticLayerCredentialArrayOutput values.
// You can construct a concrete instance of `SnowflakeSemanticLayerCredentialArrayInput` via:
//
//	SnowflakeSemanticLayerCredentialArray{ SnowflakeSemanticLayerCredentialArgs{...} }
type SnowflakeSemanticLayerCredentialArrayInput interface {
	pulumi.Input

	ToSnowflakeSemanticLayerCredentialArrayOutput() SnowflakeSemanticLayerCredentialArrayOutput
	ToSnowflakeSemanticLayerCredentialArrayOutputWithContext(context.Context) SnowflakeSemanticLayerCredentialArrayOutput
}

type SnowflakeSemanticLayerCredentialArray []SnowflakeSemanticLayerCredentialInput

func (SnowflakeSemanticLayerCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnowflakeSemanticLayerCredential)(nil)).Elem()
}

func (i SnowflakeSemanticLayerCredentialArray) ToSnowflakeSemanticLayerCredentialArrayOutput() SnowflakeSemanticLayerCredentialArrayOutput {
	return i.ToSnowflakeSemanticLayerCredentialArrayOutputWithContext(context.Background())
}

func (i SnowflakeSemanticLayerCredentialArray) ToSnowflakeSemanticLayerCredentialArrayOutputWithContext(ctx context.Context) SnowflakeSemanticLayerCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeSemanticLayerCredentialArrayOutput)
}

// SnowflakeSemanticLayerCredentialMapInput is an input type that accepts SnowflakeSemanticLayerCredentialMap and SnowflakeSemanticLayerCredentialMapOutput values.
// You can construct a concrete instance of `SnowflakeSemanticLayerCredentialMapInput` via:
//
//	SnowflakeSemanticLayerCredentialMap{ "key": SnowflakeSemanticLayerCredentialArgs{...} }
type SnowflakeSemanticLayerCredentialMapInput interface {
	pulumi.Input

	ToSnowflakeSemanticLayerCredentialMapOutput() SnowflakeSemanticLayerCredentialMapOutput
	ToSnowflakeSemanticLayerCredentialMapOutputWithContext(context.Context) SnowflakeSemanticLayerCredentialMapOutput
}

type SnowflakeSemanticLayerCredentialMap map[string]SnowflakeSemanticLayerCredentialInput

func (SnowflakeSemanticLayerCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnowflakeSemanticLayerCredential)(nil)).Elem()
}

func (i SnowflakeSemanticLayerCredentialMap) ToSnowflakeSemanticLayerCredentialMapOutput() SnowflakeSemanticLayerCredentialMapOutput {
	return i.ToSnowflakeSemanticLayerCredentialMapOutputWithContext(context.Background())
}

func (i SnowflakeSemanticLayerCredentialMap) ToSnowflakeSemanticLayerCredentialMapOutputWithContext(ctx context.Context) SnowflakeSemanticLayerCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeSemanticLayerCredentialMapOutput)
}

type SnowflakeSemanticLayerCredentialOutput struct{ *pulumi.OutputState }

func (SnowflakeSemanticLayerCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnowflakeSemanticLayerCredential)(nil)).Elem()
}

func (o SnowflakeSemanticLayerCredentialOutput) ToSnowflakeSemanticLayerCredentialOutput() SnowflakeSemanticLayerCredentialOutput {
	return o
}

func (o SnowflakeSemanticLayerCredentialOutput) ToSnowflakeSemanticLayerCredentialOutputWithContext(ctx context.Context) SnowflakeSemanticLayerCredentialOutput {
	return o
}

// Semantic Layer credenttial configuration details.
func (o SnowflakeSemanticLayerCredentialOutput) Configuration() SnowflakeSemanticLayerCredentialConfigurationOutput {
	return o.ApplyT(func(v *SnowflakeSemanticLayerCredential) SnowflakeSemanticLayerCredentialConfigurationOutput {
		return v.Configuration
	}).(SnowflakeSemanticLayerCredentialConfigurationOutput)
}

// Snowflake credential details, but used in the context of the Semantic Layer.
func (o SnowflakeSemanticLayerCredentialOutput) Credential() SnowflakeSemanticLayerCredentialCredentialOutput {
	return o.ApplyT(func(v *SnowflakeSemanticLayerCredential) SnowflakeSemanticLayerCredentialCredentialOutput {
		return v.Credential
	}).(SnowflakeSemanticLayerCredentialCredentialOutput)
}

type SnowflakeSemanticLayerCredentialArrayOutput struct{ *pulumi.OutputState }

func (SnowflakeSemanticLayerCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnowflakeSemanticLayerCredential)(nil)).Elem()
}

func (o SnowflakeSemanticLayerCredentialArrayOutput) ToSnowflakeSemanticLayerCredentialArrayOutput() SnowflakeSemanticLayerCredentialArrayOutput {
	return o
}

func (o SnowflakeSemanticLayerCredentialArrayOutput) ToSnowflakeSemanticLayerCredentialArrayOutputWithContext(ctx context.Context) SnowflakeSemanticLayerCredentialArrayOutput {
	return o
}

func (o SnowflakeSemanticLayerCredentialArrayOutput) Index(i pulumi.IntInput) SnowflakeSemanticLayerCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnowflakeSemanticLayerCredential {
		return vs[0].([]*SnowflakeSemanticLayerCredential)[vs[1].(int)]
	}).(SnowflakeSemanticLayerCredentialOutput)
}

type SnowflakeSemanticLayerCredentialMapOutput struct{ *pulumi.OutputState }

func (SnowflakeSemanticLayerCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnowflakeSemanticLayerCredential)(nil)).Elem()
}

func (o SnowflakeSemanticLayerCredentialMapOutput) ToSnowflakeSemanticLayerCredentialMapOutput() SnowflakeSemanticLayerCredentialMapOutput {
	return o
}

func (o SnowflakeSemanticLayerCredentialMapOutput) ToSnowflakeSemanticLayerCredentialMapOutputWithContext(ctx context.Context) SnowflakeSemanticLayerCredentialMapOutput {
	return o
}

func (o SnowflakeSemanticLayerCredentialMapOutput) MapIndex(k pulumi.StringInput) SnowflakeSemanticLayerCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnowflakeSemanticLayerCredential {
		return vs[0].(map[string]*SnowflakeSemanticLayerCredential)[vs[1].(string)]
	}).(SnowflakeSemanticLayerCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnowflakeSemanticLayerCredentialInput)(nil)).Elem(), &SnowflakeSemanticLayerCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnowflakeSemanticLayerCredentialArrayInput)(nil)).Elem(), SnowflakeSemanticLayerCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnowflakeSemanticLayerCredentialMapInput)(nil)).Elem(), SnowflakeSemanticLayerCredentialMap{})
	pulumi.RegisterOutputType(SnowflakeSemanticLayerCredentialOutput{})
	pulumi.RegisterOutputType(SnowflakeSemanticLayerCredentialArrayOutput{})
	pulumi.RegisterOutputType(SnowflakeSemanticLayerCredentialMapOutput{})
}

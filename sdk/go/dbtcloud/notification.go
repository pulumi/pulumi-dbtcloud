// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Setup notifications on jobs success/failure to internal users, external email addresses or Slack channels
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// dbt Cloud allows us to create internal and external notifications
//			//
//			// an internal notification will send emails to the user mentioned in `user_id`
//			//
//			// NOTE: If internal notification settings already exist for a user, currently you MUST import
//			// those first into the state file before you can create a new internal notification for that user.
//			// Failure to do so, will result in the user losing access to existing notifications and dbt
//			// support will need to be contacted to restore access.
//			// cmd: terraform import dbtcloud_notification.prod_job_internal_notification <user_id>
//			_, err := dbtcloud.NewNotification(ctx, "prod_job_internal_notification", &dbtcloud.NotificationArgs{
//				UserId: pulumi.Int(100),
//				OnSuccesses: pulumi.IntArray{
//					prodJob.Id,
//				},
//				OnFailures: pulumi.IntArray{
//					pulumi.Int(12345),
//				},
//				NotificationType: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			// we can also send "external" email notifications to emails to related to dbt Cloud users
//			_, err = dbtcloud.NewNotification(ctx, "prod_job_external_notification", &dbtcloud.NotificationArgs{
//				UserId: pulumi.Int(100),
//				OnFailures: pulumi.IntArray{
//					pulumi.Int(23456),
//					pulumi.Int(56788),
//				},
//				OnCancels: pulumi.IntArray{
//					prodJob.Id,
//				},
//				NotificationType: pulumi.Int(4),
//				ExternalEmail:    pulumi.String("my_email@mail.com"),
//			})
//			if err != nil {
//				return err
//			}
//			// and finally, we can set up Slack notifications
//			_, err = dbtcloud.NewNotification(ctx, "prod_job_slack_notifications", &dbtcloud.NotificationArgs{
//				UserId: pulumi.Int(200),
//				OnFailures: pulumi.IntArray{
//					pulumi.Int(23456),
//					pulumi.Int(56788),
//				},
//				OnCancels: pulumi.IntArray{
//					prodJob.Id,
//				},
//				NotificationType: pulumi.Int(2),
//				SlackChannelId:   pulumi.String("C12345ABCDE"),
//				SlackChannelName: pulumi.String("#my-awesome-channel"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// using  import blocks (requires Terraform >= 1.5)
//
// import {
//
//	to = dbtcloud_notification.my_notification
//
//	id = "notification_id"
//
// }
//
// import {
//
//	to = dbtcloud_notification.my_notification
//
//	id = "12345"
//
// }
//
// using the older import command
//
// ```sh
// $ pulumi import dbtcloud:index/notification:Notification my_notification "notification_id"
// ```
//
// ```sh
// $ pulumi import dbtcloud:index/notification:Notification my_notification 12345
// ```
type Notification struct {
	pulumi.CustomResourceState

	// The external email to receive the notification
	ExternalEmail pulumi.StringPtrOutput `pulumi:"externalEmail"`
	// Type of notification (1 = dbt Cloud user email (default): does not require an externalEmail ; 2 = Slack channel: requires `slackChannelId` and `slackChannelName` ; 4 = external email: requires setting an `externalEmail`)
	NotificationType pulumi.IntOutput `pulumi:"notificationType"`
	// List of job IDs to trigger the webhook on cancel
	OnCancels pulumi.IntArrayOutput `pulumi:"onCancels"`
	// List of job IDs to trigger the webhook on failure
	OnFailures pulumi.IntArrayOutput `pulumi:"onFailures"`
	// List of job IDs to trigger the webhook on success
	OnSuccesses pulumi.IntArrayOutput `pulumi:"onSuccesses"`
	// List of job IDs to trigger the webhook on warning
	OnWarnings pulumi.IntArrayOutput `pulumi:"onWarnings"`
	// The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
	SlackChannelId pulumi.StringPtrOutput `pulumi:"slackChannelId"`
	// The name of the slack channel
	SlackChannelName pulumi.StringPtrOutput `pulumi:"slackChannelName"`
	// State of the notification (1 = active (default), 2 = inactive)
	State pulumi.IntOutput `pulumi:"state"`
	// Internal dbt Cloud User ID. Must be the user*id for an existing user even if the notification is an external one. In the case of a Slack notification, it must be the user*id of the user that set up the Slack Integration.
	UserId pulumi.IntOutput `pulumi:"userId"`
}

// NewNotification registers a new resource with the given unique name, arguments, and options.
func NewNotification(ctx *pulumi.Context,
	name string, args *NotificationArgs, opts ...pulumi.ResourceOption) (*Notification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Notification
	err := ctx.RegisterResource("dbtcloud:index/notification:Notification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotification gets an existing Notification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationState, opts ...pulumi.ResourceOption) (*Notification, error) {
	var resource Notification
	err := ctx.ReadResource("dbtcloud:index/notification:Notification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Notification resources.
type notificationState struct {
	// The external email to receive the notification
	ExternalEmail *string `pulumi:"externalEmail"`
	// Type of notification (1 = dbt Cloud user email (default): does not require an externalEmail ; 2 = Slack channel: requires `slackChannelId` and `slackChannelName` ; 4 = external email: requires setting an `externalEmail`)
	NotificationType *int `pulumi:"notificationType"`
	// List of job IDs to trigger the webhook on cancel
	OnCancels []int `pulumi:"onCancels"`
	// List of job IDs to trigger the webhook on failure
	OnFailures []int `pulumi:"onFailures"`
	// List of job IDs to trigger the webhook on success
	OnSuccesses []int `pulumi:"onSuccesses"`
	// List of job IDs to trigger the webhook on warning
	OnWarnings []int `pulumi:"onWarnings"`
	// The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
	SlackChannelId *string `pulumi:"slackChannelId"`
	// The name of the slack channel
	SlackChannelName *string `pulumi:"slackChannelName"`
	// State of the notification (1 = active (default), 2 = inactive)
	State *int `pulumi:"state"`
	// Internal dbt Cloud User ID. Must be the user*id for an existing user even if the notification is an external one. In the case of a Slack notification, it must be the user*id of the user that set up the Slack Integration.
	UserId *int `pulumi:"userId"`
}

type NotificationState struct {
	// The external email to receive the notification
	ExternalEmail pulumi.StringPtrInput
	// Type of notification (1 = dbt Cloud user email (default): does not require an externalEmail ; 2 = Slack channel: requires `slackChannelId` and `slackChannelName` ; 4 = external email: requires setting an `externalEmail`)
	NotificationType pulumi.IntPtrInput
	// List of job IDs to trigger the webhook on cancel
	OnCancels pulumi.IntArrayInput
	// List of job IDs to trigger the webhook on failure
	OnFailures pulumi.IntArrayInput
	// List of job IDs to trigger the webhook on success
	OnSuccesses pulumi.IntArrayInput
	// List of job IDs to trigger the webhook on warning
	OnWarnings pulumi.IntArrayInput
	// The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
	SlackChannelId pulumi.StringPtrInput
	// The name of the slack channel
	SlackChannelName pulumi.StringPtrInput
	// State of the notification (1 = active (default), 2 = inactive)
	State pulumi.IntPtrInput
	// Internal dbt Cloud User ID. Must be the user*id for an existing user even if the notification is an external one. In the case of a Slack notification, it must be the user*id of the user that set up the Slack Integration.
	UserId pulumi.IntPtrInput
}

func (NotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationState)(nil)).Elem()
}

type notificationArgs struct {
	// The external email to receive the notification
	ExternalEmail *string `pulumi:"externalEmail"`
	// Type of notification (1 = dbt Cloud user email (default): does not require an externalEmail ; 2 = Slack channel: requires `slackChannelId` and `slackChannelName` ; 4 = external email: requires setting an `externalEmail`)
	NotificationType *int `pulumi:"notificationType"`
	// List of job IDs to trigger the webhook on cancel
	OnCancels []int `pulumi:"onCancels"`
	// List of job IDs to trigger the webhook on failure
	OnFailures []int `pulumi:"onFailures"`
	// List of job IDs to trigger the webhook on success
	OnSuccesses []int `pulumi:"onSuccesses"`
	// List of job IDs to trigger the webhook on warning
	OnWarnings []int `pulumi:"onWarnings"`
	// The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
	SlackChannelId *string `pulumi:"slackChannelId"`
	// The name of the slack channel
	SlackChannelName *string `pulumi:"slackChannelName"`
	// State of the notification (1 = active (default), 2 = inactive)
	State *int `pulumi:"state"`
	// Internal dbt Cloud User ID. Must be the user*id for an existing user even if the notification is an external one. In the case of a Slack notification, it must be the user*id of the user that set up the Slack Integration.
	UserId int `pulumi:"userId"`
}

// The set of arguments for constructing a Notification resource.
type NotificationArgs struct {
	// The external email to receive the notification
	ExternalEmail pulumi.StringPtrInput
	// Type of notification (1 = dbt Cloud user email (default): does not require an externalEmail ; 2 = Slack channel: requires `slackChannelId` and `slackChannelName` ; 4 = external email: requires setting an `externalEmail`)
	NotificationType pulumi.IntPtrInput
	// List of job IDs to trigger the webhook on cancel
	OnCancels pulumi.IntArrayInput
	// List of job IDs to trigger the webhook on failure
	OnFailures pulumi.IntArrayInput
	// List of job IDs to trigger the webhook on success
	OnSuccesses pulumi.IntArrayInput
	// List of job IDs to trigger the webhook on warning
	OnWarnings pulumi.IntArrayInput
	// The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
	SlackChannelId pulumi.StringPtrInput
	// The name of the slack channel
	SlackChannelName pulumi.StringPtrInput
	// State of the notification (1 = active (default), 2 = inactive)
	State pulumi.IntPtrInput
	// Internal dbt Cloud User ID. Must be the user*id for an existing user even if the notification is an external one. In the case of a Slack notification, it must be the user*id of the user that set up the Slack Integration.
	UserId pulumi.IntInput
}

func (NotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationArgs)(nil)).Elem()
}

type NotificationInput interface {
	pulumi.Input

	ToNotificationOutput() NotificationOutput
	ToNotificationOutputWithContext(ctx context.Context) NotificationOutput
}

func (*Notification) ElementType() reflect.Type {
	return reflect.TypeOf((**Notification)(nil)).Elem()
}

func (i *Notification) ToNotificationOutput() NotificationOutput {
	return i.ToNotificationOutputWithContext(context.Background())
}

func (i *Notification) ToNotificationOutputWithContext(ctx context.Context) NotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationOutput)
}

// NotificationArrayInput is an input type that accepts NotificationArray and NotificationArrayOutput values.
// You can construct a concrete instance of `NotificationArrayInput` via:
//
//	NotificationArray{ NotificationArgs{...} }
type NotificationArrayInput interface {
	pulumi.Input

	ToNotificationArrayOutput() NotificationArrayOutput
	ToNotificationArrayOutputWithContext(context.Context) NotificationArrayOutput
}

type NotificationArray []NotificationInput

func (NotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Notification)(nil)).Elem()
}

func (i NotificationArray) ToNotificationArrayOutput() NotificationArrayOutput {
	return i.ToNotificationArrayOutputWithContext(context.Background())
}

func (i NotificationArray) ToNotificationArrayOutputWithContext(ctx context.Context) NotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationArrayOutput)
}

// NotificationMapInput is an input type that accepts NotificationMap and NotificationMapOutput values.
// You can construct a concrete instance of `NotificationMapInput` via:
//
//	NotificationMap{ "key": NotificationArgs{...} }
type NotificationMapInput interface {
	pulumi.Input

	ToNotificationMapOutput() NotificationMapOutput
	ToNotificationMapOutputWithContext(context.Context) NotificationMapOutput
}

type NotificationMap map[string]NotificationInput

func (NotificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Notification)(nil)).Elem()
}

func (i NotificationMap) ToNotificationMapOutput() NotificationMapOutput {
	return i.ToNotificationMapOutputWithContext(context.Background())
}

func (i NotificationMap) ToNotificationMapOutputWithContext(ctx context.Context) NotificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationMapOutput)
}

type NotificationOutput struct{ *pulumi.OutputState }

func (NotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Notification)(nil)).Elem()
}

func (o NotificationOutput) ToNotificationOutput() NotificationOutput {
	return o
}

func (o NotificationOutput) ToNotificationOutputWithContext(ctx context.Context) NotificationOutput {
	return o
}

// The external email to receive the notification
func (o NotificationOutput) ExternalEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringPtrOutput { return v.ExternalEmail }).(pulumi.StringPtrOutput)
}

// Type of notification (1 = dbt Cloud user email (default): does not require an externalEmail ; 2 = Slack channel: requires `slackChannelId` and `slackChannelName` ; 4 = external email: requires setting an `externalEmail`)
func (o NotificationOutput) NotificationType() pulumi.IntOutput {
	return o.ApplyT(func(v *Notification) pulumi.IntOutput { return v.NotificationType }).(pulumi.IntOutput)
}

// List of job IDs to trigger the webhook on cancel
func (o NotificationOutput) OnCancels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Notification) pulumi.IntArrayOutput { return v.OnCancels }).(pulumi.IntArrayOutput)
}

// List of job IDs to trigger the webhook on failure
func (o NotificationOutput) OnFailures() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Notification) pulumi.IntArrayOutput { return v.OnFailures }).(pulumi.IntArrayOutput)
}

// List of job IDs to trigger the webhook on success
func (o NotificationOutput) OnSuccesses() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Notification) pulumi.IntArrayOutput { return v.OnSuccesses }).(pulumi.IntArrayOutput)
}

// List of job IDs to trigger the webhook on warning
func (o NotificationOutput) OnWarnings() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Notification) pulumi.IntArrayOutput { return v.OnWarnings }).(pulumi.IntArrayOutput)
}

// The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
func (o NotificationOutput) SlackChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringPtrOutput { return v.SlackChannelId }).(pulumi.StringPtrOutput)
}

// The name of the slack channel
func (o NotificationOutput) SlackChannelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringPtrOutput { return v.SlackChannelName }).(pulumi.StringPtrOutput)
}

// State of the notification (1 = active (default), 2 = inactive)
func (o NotificationOutput) State() pulumi.IntOutput {
	return o.ApplyT(func(v *Notification) pulumi.IntOutput { return v.State }).(pulumi.IntOutput)
}

// Internal dbt Cloud User ID. Must be the user*id for an existing user even if the notification is an external one. In the case of a Slack notification, it must be the user*id of the user that set up the Slack Integration.
func (o NotificationOutput) UserId() pulumi.IntOutput {
	return o.ApplyT(func(v *Notification) pulumi.IntOutput { return v.UserId }).(pulumi.IntOutput)
}

type NotificationArrayOutput struct{ *pulumi.OutputState }

func (NotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Notification)(nil)).Elem()
}

func (o NotificationArrayOutput) ToNotificationArrayOutput() NotificationArrayOutput {
	return o
}

func (o NotificationArrayOutput) ToNotificationArrayOutputWithContext(ctx context.Context) NotificationArrayOutput {
	return o
}

func (o NotificationArrayOutput) Index(i pulumi.IntInput) NotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Notification {
		return vs[0].([]*Notification)[vs[1].(int)]
	}).(NotificationOutput)
}

type NotificationMapOutput struct{ *pulumi.OutputState }

func (NotificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Notification)(nil)).Elem()
}

func (o NotificationMapOutput) ToNotificationMapOutput() NotificationMapOutput {
	return o
}

func (o NotificationMapOutput) ToNotificationMapOutputWithContext(ctx context.Context) NotificationMapOutput {
	return o
}

func (o NotificationMapOutput) MapIndex(k pulumi.StringInput) NotificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Notification {
		return vs[0].(map[string]*Notification)[vs[1].(string)]
	}).(NotificationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationInput)(nil)).Elem(), &Notification{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationArrayInput)(nil)).Elem(), NotificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationMapInput)(nil)).Elem(), NotificationMap{})
	pulumi.RegisterOutputType(NotificationOutput{})
	pulumi.RegisterOutputType(NotificationArrayOutput{})
	pulumi.RegisterOutputType(NotificationMapOutput{})
}

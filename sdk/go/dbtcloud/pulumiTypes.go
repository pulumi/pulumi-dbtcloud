// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type GlobalConnectionApacheSpark struct {
	// Auth
	Auth *string `pulumi:"auth"`
	// Spark cluster for the connection
	Cluster string `pulumi:"cluster"`
	// Connection retries. Default=0
	ConnectRetries *int `pulumi:"connectRetries"`
	// Connection time out in seconds. Default=10
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// Hostname of the connection
	Host string `pulumi:"host"`
	// Authentication method for the connection (http or thrift).
	Method string `pulumi:"method"`
	// Organization ID
	Organization *string `pulumi:"organization"`
	// Port for the connection. Default=443
	Port *int `pulumi:"port"`
	// User
	User *string `pulumi:"user"`
}

// GlobalConnectionApacheSparkInput is an input type that accepts GlobalConnectionApacheSparkArgs and GlobalConnectionApacheSparkOutput values.
// You can construct a concrete instance of `GlobalConnectionApacheSparkInput` via:
//
//	GlobalConnectionApacheSparkArgs{...}
type GlobalConnectionApacheSparkInput interface {
	pulumi.Input

	ToGlobalConnectionApacheSparkOutput() GlobalConnectionApacheSparkOutput
	ToGlobalConnectionApacheSparkOutputWithContext(context.Context) GlobalConnectionApacheSparkOutput
}

type GlobalConnectionApacheSparkArgs struct {
	// Auth
	Auth pulumi.StringPtrInput `pulumi:"auth"`
	// Spark cluster for the connection
	Cluster pulumi.StringInput `pulumi:"cluster"`
	// Connection retries. Default=0
	ConnectRetries pulumi.IntPtrInput `pulumi:"connectRetries"`
	// Connection time out in seconds. Default=10
	ConnectTimeout pulumi.IntPtrInput `pulumi:"connectTimeout"`
	// Hostname of the connection
	Host pulumi.StringInput `pulumi:"host"`
	// Authentication method for the connection (http or thrift).
	Method pulumi.StringInput `pulumi:"method"`
	// Organization ID
	Organization pulumi.StringPtrInput `pulumi:"organization"`
	// Port for the connection. Default=443
	Port pulumi.IntPtrInput `pulumi:"port"`
	// User
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (GlobalConnectionApacheSparkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionApacheSpark)(nil)).Elem()
}

func (i GlobalConnectionApacheSparkArgs) ToGlobalConnectionApacheSparkOutput() GlobalConnectionApacheSparkOutput {
	return i.ToGlobalConnectionApacheSparkOutputWithContext(context.Background())
}

func (i GlobalConnectionApacheSparkArgs) ToGlobalConnectionApacheSparkOutputWithContext(ctx context.Context) GlobalConnectionApacheSparkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionApacheSparkOutput)
}

func (i GlobalConnectionApacheSparkArgs) ToGlobalConnectionApacheSparkPtrOutput() GlobalConnectionApacheSparkPtrOutput {
	return i.ToGlobalConnectionApacheSparkPtrOutputWithContext(context.Background())
}

func (i GlobalConnectionApacheSparkArgs) ToGlobalConnectionApacheSparkPtrOutputWithContext(ctx context.Context) GlobalConnectionApacheSparkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionApacheSparkOutput).ToGlobalConnectionApacheSparkPtrOutputWithContext(ctx)
}

// GlobalConnectionApacheSparkPtrInput is an input type that accepts GlobalConnectionApacheSparkArgs, GlobalConnectionApacheSparkPtr and GlobalConnectionApacheSparkPtrOutput values.
// You can construct a concrete instance of `GlobalConnectionApacheSparkPtrInput` via:
//
//	        GlobalConnectionApacheSparkArgs{...}
//
//	or:
//
//	        nil
type GlobalConnectionApacheSparkPtrInput interface {
	pulumi.Input

	ToGlobalConnectionApacheSparkPtrOutput() GlobalConnectionApacheSparkPtrOutput
	ToGlobalConnectionApacheSparkPtrOutputWithContext(context.Context) GlobalConnectionApacheSparkPtrOutput
}

type globalConnectionApacheSparkPtrType GlobalConnectionApacheSparkArgs

func GlobalConnectionApacheSparkPtr(v *GlobalConnectionApacheSparkArgs) GlobalConnectionApacheSparkPtrInput {
	return (*globalConnectionApacheSparkPtrType)(v)
}

func (*globalConnectionApacheSparkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionApacheSpark)(nil)).Elem()
}

func (i *globalConnectionApacheSparkPtrType) ToGlobalConnectionApacheSparkPtrOutput() GlobalConnectionApacheSparkPtrOutput {
	return i.ToGlobalConnectionApacheSparkPtrOutputWithContext(context.Background())
}

func (i *globalConnectionApacheSparkPtrType) ToGlobalConnectionApacheSparkPtrOutputWithContext(ctx context.Context) GlobalConnectionApacheSparkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionApacheSparkPtrOutput)
}

type GlobalConnectionApacheSparkOutput struct{ *pulumi.OutputState }

func (GlobalConnectionApacheSparkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionApacheSpark)(nil)).Elem()
}

func (o GlobalConnectionApacheSparkOutput) ToGlobalConnectionApacheSparkOutput() GlobalConnectionApacheSparkOutput {
	return o
}

func (o GlobalConnectionApacheSparkOutput) ToGlobalConnectionApacheSparkOutputWithContext(ctx context.Context) GlobalConnectionApacheSparkOutput {
	return o
}

func (o GlobalConnectionApacheSparkOutput) ToGlobalConnectionApacheSparkPtrOutput() GlobalConnectionApacheSparkPtrOutput {
	return o.ToGlobalConnectionApacheSparkPtrOutputWithContext(context.Background())
}

func (o GlobalConnectionApacheSparkOutput) ToGlobalConnectionApacheSparkPtrOutputWithContext(ctx context.Context) GlobalConnectionApacheSparkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlobalConnectionApacheSpark) *GlobalConnectionApacheSpark {
		return &v
	}).(GlobalConnectionApacheSparkPtrOutput)
}

// Auth
func (o GlobalConnectionApacheSparkOutput) Auth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionApacheSpark) *string { return v.Auth }).(pulumi.StringPtrOutput)
}

// Spark cluster for the connection
func (o GlobalConnectionApacheSparkOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionApacheSpark) string { return v.Cluster }).(pulumi.StringOutput)
}

// Connection retries. Default=0
func (o GlobalConnectionApacheSparkOutput) ConnectRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionApacheSpark) *int { return v.ConnectRetries }).(pulumi.IntPtrOutput)
}

// Connection time out in seconds. Default=10
func (o GlobalConnectionApacheSparkOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionApacheSpark) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// Hostname of the connection
func (o GlobalConnectionApacheSparkOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionApacheSpark) string { return v.Host }).(pulumi.StringOutput)
}

// Authentication method for the connection (http or thrift).
func (o GlobalConnectionApacheSparkOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionApacheSpark) string { return v.Method }).(pulumi.StringOutput)
}

// Organization ID
func (o GlobalConnectionApacheSparkOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionApacheSpark) *string { return v.Organization }).(pulumi.StringPtrOutput)
}

// Port for the connection. Default=443
func (o GlobalConnectionApacheSparkOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionApacheSpark) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// User
func (o GlobalConnectionApacheSparkOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionApacheSpark) *string { return v.User }).(pulumi.StringPtrOutput)
}

type GlobalConnectionApacheSparkPtrOutput struct{ *pulumi.OutputState }

func (GlobalConnectionApacheSparkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionApacheSpark)(nil)).Elem()
}

func (o GlobalConnectionApacheSparkPtrOutput) ToGlobalConnectionApacheSparkPtrOutput() GlobalConnectionApacheSparkPtrOutput {
	return o
}

func (o GlobalConnectionApacheSparkPtrOutput) ToGlobalConnectionApacheSparkPtrOutputWithContext(ctx context.Context) GlobalConnectionApacheSparkPtrOutput {
	return o
}

func (o GlobalConnectionApacheSparkPtrOutput) Elem() GlobalConnectionApacheSparkOutput {
	return o.ApplyT(func(v *GlobalConnectionApacheSpark) GlobalConnectionApacheSpark {
		if v != nil {
			return *v
		}
		var ret GlobalConnectionApacheSpark
		return ret
	}).(GlobalConnectionApacheSparkOutput)
}

// Auth
func (o GlobalConnectionApacheSparkPtrOutput) Auth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionApacheSpark) *string {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(pulumi.StringPtrOutput)
}

// Spark cluster for the connection
func (o GlobalConnectionApacheSparkPtrOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionApacheSpark) *string {
		if v == nil {
			return nil
		}
		return &v.Cluster
	}).(pulumi.StringPtrOutput)
}

// Connection retries. Default=0
func (o GlobalConnectionApacheSparkPtrOutput) ConnectRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionApacheSpark) *int {
		if v == nil {
			return nil
		}
		return v.ConnectRetries
	}).(pulumi.IntPtrOutput)
}

// Connection time out in seconds. Default=10
func (o GlobalConnectionApacheSparkPtrOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionApacheSpark) *int {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(pulumi.IntPtrOutput)
}

// Hostname of the connection
func (o GlobalConnectionApacheSparkPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionApacheSpark) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// Authentication method for the connection (http or thrift).
func (o GlobalConnectionApacheSparkPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionApacheSpark) *string {
		if v == nil {
			return nil
		}
		return &v.Method
	}).(pulumi.StringPtrOutput)
}

// Organization ID
func (o GlobalConnectionApacheSparkPtrOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionApacheSpark) *string {
		if v == nil {
			return nil
		}
		return v.Organization
	}).(pulumi.StringPtrOutput)
}

// Port for the connection. Default=443
func (o GlobalConnectionApacheSparkPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionApacheSpark) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// User
func (o GlobalConnectionApacheSparkPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionApacheSpark) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

type GlobalConnectionAthena struct {
	// Specify the database (data catalog) to build models into (lowercase only).
	Database string `pulumi:"database"`
	// Number of times to retry boto3 requests (e.g. deleting S3 files for materialized tables).
	NumBoto3Retries *int `pulumi:"numBoto3Retries"`
	// Number of times to retry iceberg commit queries to fix ICEBERG*COMMIT*ERROR.
	NumIcebergRetries *int `pulumi:"numIcebergRetries"`
	// Number of times to retry a failing query.
	NumRetries *int `pulumi:"numRetries"`
	// Interval in seconds to use for polling the status of query results in Athena.
	PollInterval *int `pulumi:"pollInterval"`
	// AWS region of your Athena instance.
	RegionName string `pulumi:"regionName"`
	// Prefix for storing tables, if different from the connection's S3 staging directory.
	S3DataDir *string `pulumi:"s3DataDir"`
	// How to generate table paths in the S3 data directory.
	S3DataNaming *string `pulumi:"s3DataNaming"`
	// S3 location to store Athena query results and metadata.
	S3StagingDir string `pulumi:"s3StagingDir"`
	// Prefix for storing temporary tables, if different from the connection's S3 data directory.
	S3TmpTableDir *string `pulumi:"s3TmpTableDir"`
	// Identifier of Athena Spark workgroup for running Python models.
	SparkWorkGroup *string `pulumi:"sparkWorkGroup"`
	// Identifier of Athena workgroup.
	WorkGroup *string `pulumi:"workGroup"`
}

// GlobalConnectionAthenaInput is an input type that accepts GlobalConnectionAthenaArgs and GlobalConnectionAthenaOutput values.
// You can construct a concrete instance of `GlobalConnectionAthenaInput` via:
//
//	GlobalConnectionAthenaArgs{...}
type GlobalConnectionAthenaInput interface {
	pulumi.Input

	ToGlobalConnectionAthenaOutput() GlobalConnectionAthenaOutput
	ToGlobalConnectionAthenaOutputWithContext(context.Context) GlobalConnectionAthenaOutput
}

type GlobalConnectionAthenaArgs struct {
	// Specify the database (data catalog) to build models into (lowercase only).
	Database pulumi.StringInput `pulumi:"database"`
	// Number of times to retry boto3 requests (e.g. deleting S3 files for materialized tables).
	NumBoto3Retries pulumi.IntPtrInput `pulumi:"numBoto3Retries"`
	// Number of times to retry iceberg commit queries to fix ICEBERG*COMMIT*ERROR.
	NumIcebergRetries pulumi.IntPtrInput `pulumi:"numIcebergRetries"`
	// Number of times to retry a failing query.
	NumRetries pulumi.IntPtrInput `pulumi:"numRetries"`
	// Interval in seconds to use for polling the status of query results in Athena.
	PollInterval pulumi.IntPtrInput `pulumi:"pollInterval"`
	// AWS region of your Athena instance.
	RegionName pulumi.StringInput `pulumi:"regionName"`
	// Prefix for storing tables, if different from the connection's S3 staging directory.
	S3DataDir pulumi.StringPtrInput `pulumi:"s3DataDir"`
	// How to generate table paths in the S3 data directory.
	S3DataNaming pulumi.StringPtrInput `pulumi:"s3DataNaming"`
	// S3 location to store Athena query results and metadata.
	S3StagingDir pulumi.StringInput `pulumi:"s3StagingDir"`
	// Prefix for storing temporary tables, if different from the connection's S3 data directory.
	S3TmpTableDir pulumi.StringPtrInput `pulumi:"s3TmpTableDir"`
	// Identifier of Athena Spark workgroup for running Python models.
	SparkWorkGroup pulumi.StringPtrInput `pulumi:"sparkWorkGroup"`
	// Identifier of Athena workgroup.
	WorkGroup pulumi.StringPtrInput `pulumi:"workGroup"`
}

func (GlobalConnectionAthenaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionAthena)(nil)).Elem()
}

func (i GlobalConnectionAthenaArgs) ToGlobalConnectionAthenaOutput() GlobalConnectionAthenaOutput {
	return i.ToGlobalConnectionAthenaOutputWithContext(context.Background())
}

func (i GlobalConnectionAthenaArgs) ToGlobalConnectionAthenaOutputWithContext(ctx context.Context) GlobalConnectionAthenaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionAthenaOutput)
}

func (i GlobalConnectionAthenaArgs) ToGlobalConnectionAthenaPtrOutput() GlobalConnectionAthenaPtrOutput {
	return i.ToGlobalConnectionAthenaPtrOutputWithContext(context.Background())
}

func (i GlobalConnectionAthenaArgs) ToGlobalConnectionAthenaPtrOutputWithContext(ctx context.Context) GlobalConnectionAthenaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionAthenaOutput).ToGlobalConnectionAthenaPtrOutputWithContext(ctx)
}

// GlobalConnectionAthenaPtrInput is an input type that accepts GlobalConnectionAthenaArgs, GlobalConnectionAthenaPtr and GlobalConnectionAthenaPtrOutput values.
// You can construct a concrete instance of `GlobalConnectionAthenaPtrInput` via:
//
//	        GlobalConnectionAthenaArgs{...}
//
//	or:
//
//	        nil
type GlobalConnectionAthenaPtrInput interface {
	pulumi.Input

	ToGlobalConnectionAthenaPtrOutput() GlobalConnectionAthenaPtrOutput
	ToGlobalConnectionAthenaPtrOutputWithContext(context.Context) GlobalConnectionAthenaPtrOutput
}

type globalConnectionAthenaPtrType GlobalConnectionAthenaArgs

func GlobalConnectionAthenaPtr(v *GlobalConnectionAthenaArgs) GlobalConnectionAthenaPtrInput {
	return (*globalConnectionAthenaPtrType)(v)
}

func (*globalConnectionAthenaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionAthena)(nil)).Elem()
}

func (i *globalConnectionAthenaPtrType) ToGlobalConnectionAthenaPtrOutput() GlobalConnectionAthenaPtrOutput {
	return i.ToGlobalConnectionAthenaPtrOutputWithContext(context.Background())
}

func (i *globalConnectionAthenaPtrType) ToGlobalConnectionAthenaPtrOutputWithContext(ctx context.Context) GlobalConnectionAthenaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionAthenaPtrOutput)
}

type GlobalConnectionAthenaOutput struct{ *pulumi.OutputState }

func (GlobalConnectionAthenaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionAthena)(nil)).Elem()
}

func (o GlobalConnectionAthenaOutput) ToGlobalConnectionAthenaOutput() GlobalConnectionAthenaOutput {
	return o
}

func (o GlobalConnectionAthenaOutput) ToGlobalConnectionAthenaOutputWithContext(ctx context.Context) GlobalConnectionAthenaOutput {
	return o
}

func (o GlobalConnectionAthenaOutput) ToGlobalConnectionAthenaPtrOutput() GlobalConnectionAthenaPtrOutput {
	return o.ToGlobalConnectionAthenaPtrOutputWithContext(context.Background())
}

func (o GlobalConnectionAthenaOutput) ToGlobalConnectionAthenaPtrOutputWithContext(ctx context.Context) GlobalConnectionAthenaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlobalConnectionAthena) *GlobalConnectionAthena {
		return &v
	}).(GlobalConnectionAthenaPtrOutput)
}

// Specify the database (data catalog) to build models into (lowercase only).
func (o GlobalConnectionAthenaOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionAthena) string { return v.Database }).(pulumi.StringOutput)
}

// Number of times to retry boto3 requests (e.g. deleting S3 files for materialized tables).
func (o GlobalConnectionAthenaOutput) NumBoto3Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionAthena) *int { return v.NumBoto3Retries }).(pulumi.IntPtrOutput)
}

// Number of times to retry iceberg commit queries to fix ICEBERG*COMMIT*ERROR.
func (o GlobalConnectionAthenaOutput) NumIcebergRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionAthena) *int { return v.NumIcebergRetries }).(pulumi.IntPtrOutput)
}

// Number of times to retry a failing query.
func (o GlobalConnectionAthenaOutput) NumRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionAthena) *int { return v.NumRetries }).(pulumi.IntPtrOutput)
}

// Interval in seconds to use for polling the status of query results in Athena.
func (o GlobalConnectionAthenaOutput) PollInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionAthena) *int { return v.PollInterval }).(pulumi.IntPtrOutput)
}

// AWS region of your Athena instance.
func (o GlobalConnectionAthenaOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionAthena) string { return v.RegionName }).(pulumi.StringOutput)
}

// Prefix for storing tables, if different from the connection's S3 staging directory.
func (o GlobalConnectionAthenaOutput) S3DataDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionAthena) *string { return v.S3DataDir }).(pulumi.StringPtrOutput)
}

// How to generate table paths in the S3 data directory.
func (o GlobalConnectionAthenaOutput) S3DataNaming() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionAthena) *string { return v.S3DataNaming }).(pulumi.StringPtrOutput)
}

// S3 location to store Athena query results and metadata.
func (o GlobalConnectionAthenaOutput) S3StagingDir() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionAthena) string { return v.S3StagingDir }).(pulumi.StringOutput)
}

// Prefix for storing temporary tables, if different from the connection's S3 data directory.
func (o GlobalConnectionAthenaOutput) S3TmpTableDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionAthena) *string { return v.S3TmpTableDir }).(pulumi.StringPtrOutput)
}

// Identifier of Athena Spark workgroup for running Python models.
func (o GlobalConnectionAthenaOutput) SparkWorkGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionAthena) *string { return v.SparkWorkGroup }).(pulumi.StringPtrOutput)
}

// Identifier of Athena workgroup.
func (o GlobalConnectionAthenaOutput) WorkGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionAthena) *string { return v.WorkGroup }).(pulumi.StringPtrOutput)
}

type GlobalConnectionAthenaPtrOutput struct{ *pulumi.OutputState }

func (GlobalConnectionAthenaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionAthena)(nil)).Elem()
}

func (o GlobalConnectionAthenaPtrOutput) ToGlobalConnectionAthenaPtrOutput() GlobalConnectionAthenaPtrOutput {
	return o
}

func (o GlobalConnectionAthenaPtrOutput) ToGlobalConnectionAthenaPtrOutputWithContext(ctx context.Context) GlobalConnectionAthenaPtrOutput {
	return o
}

func (o GlobalConnectionAthenaPtrOutput) Elem() GlobalConnectionAthenaOutput {
	return o.ApplyT(func(v *GlobalConnectionAthena) GlobalConnectionAthena {
		if v != nil {
			return *v
		}
		var ret GlobalConnectionAthena
		return ret
	}).(GlobalConnectionAthenaOutput)
}

// Specify the database (data catalog) to build models into (lowercase only).
func (o GlobalConnectionAthenaPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionAthena) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// Number of times to retry boto3 requests (e.g. deleting S3 files for materialized tables).
func (o GlobalConnectionAthenaPtrOutput) NumBoto3Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionAthena) *int {
		if v == nil {
			return nil
		}
		return v.NumBoto3Retries
	}).(pulumi.IntPtrOutput)
}

// Number of times to retry iceberg commit queries to fix ICEBERG*COMMIT*ERROR.
func (o GlobalConnectionAthenaPtrOutput) NumIcebergRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionAthena) *int {
		if v == nil {
			return nil
		}
		return v.NumIcebergRetries
	}).(pulumi.IntPtrOutput)
}

// Number of times to retry a failing query.
func (o GlobalConnectionAthenaPtrOutput) NumRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionAthena) *int {
		if v == nil {
			return nil
		}
		return v.NumRetries
	}).(pulumi.IntPtrOutput)
}

// Interval in seconds to use for polling the status of query results in Athena.
func (o GlobalConnectionAthenaPtrOutput) PollInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionAthena) *int {
		if v == nil {
			return nil
		}
		return v.PollInterval
	}).(pulumi.IntPtrOutput)
}

// AWS region of your Athena instance.
func (o GlobalConnectionAthenaPtrOutput) RegionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionAthena) *string {
		if v == nil {
			return nil
		}
		return &v.RegionName
	}).(pulumi.StringPtrOutput)
}

// Prefix for storing tables, if different from the connection's S3 staging directory.
func (o GlobalConnectionAthenaPtrOutput) S3DataDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionAthena) *string {
		if v == nil {
			return nil
		}
		return v.S3DataDir
	}).(pulumi.StringPtrOutput)
}

// How to generate table paths in the S3 data directory.
func (o GlobalConnectionAthenaPtrOutput) S3DataNaming() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionAthena) *string {
		if v == nil {
			return nil
		}
		return v.S3DataNaming
	}).(pulumi.StringPtrOutput)
}

// S3 location to store Athena query results and metadata.
func (o GlobalConnectionAthenaPtrOutput) S3StagingDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionAthena) *string {
		if v == nil {
			return nil
		}
		return &v.S3StagingDir
	}).(pulumi.StringPtrOutput)
}

// Prefix for storing temporary tables, if different from the connection's S3 data directory.
func (o GlobalConnectionAthenaPtrOutput) S3TmpTableDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionAthena) *string {
		if v == nil {
			return nil
		}
		return v.S3TmpTableDir
	}).(pulumi.StringPtrOutput)
}

// Identifier of Athena Spark workgroup for running Python models.
func (o GlobalConnectionAthenaPtrOutput) SparkWorkGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionAthena) *string {
		if v == nil {
			return nil
		}
		return v.SparkWorkGroup
	}).(pulumi.StringPtrOutput)
}

// Identifier of Athena workgroup.
func (o GlobalConnectionAthenaPtrOutput) WorkGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionAthena) *string {
		if v == nil {
			return nil
		}
		return v.WorkGroup
	}).(pulumi.StringPtrOutput)
}

type GlobalConnectionBigquery struct {
	// OAuth Client ID
	ApplicationId *string `pulumi:"applicationId"`
	// OAuth Client Secret
	ApplicationSecret *string `pulumi:"applicationSecret"`
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl string `pulumi:"authProviderX509CertUrl"`
	// Auth URI for the Service Account
	AuthUri string `pulumi:"authUri"`
	// Service Account email
	ClientEmail string `pulumi:"clientEmail"`
	// Client ID of the Service Account
	ClientId string `pulumi:"clientId"`
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl string `pulumi:"clientX509CertUrl"`
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName *string `pulumi:"dataprocClusterName"`
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion *string `pulumi:"dataprocRegion"`
	// Project to bill for query execution
	ExecutionProject *string `pulumi:"executionProject"`
	// The GCP project ID to use for the connection
	GcpProjectId string `pulumi:"gcpProjectId"`
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket *string `pulumi:"gcsBucket"`
	// Service Account to impersonate when running queries
	ImpersonateServiceAccount *string `pulumi:"impersonateServiceAccount"`
	// Maximum timeout for the job creation step
	JobCreationTimeoutSeconds *int `pulumi:"jobCreationTimeoutSeconds"`
	// Total number of seconds to wait while retrying the same query
	JobRetryDeadlineSeconds *int `pulumi:"jobRetryDeadlineSeconds"`
	// Location to create new Datasets in
	Location *string `pulumi:"location"`
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled *int `pulumi:"maximumBytesBilled"`
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority *string `pulumi:"priority"`
	// Private Key for the Service Account
	PrivateKey string `pulumi:"privateKey"`
	// Private Key ID for the Service Account
	PrivateKeyId string `pulumi:"privateKeyId"`
	// Number of retries for queries
	Retries *int `pulumi:"retries"`
	// OAuth scopes for the BigQuery connection
	Scopes []string `pulumi:"scopes"`
	// Timeout in seconds for queries
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
	// Token URI for the Service Account
	TokenUri string `pulumi:"tokenUri"`
}

// GlobalConnectionBigqueryInput is an input type that accepts GlobalConnectionBigqueryArgs and GlobalConnectionBigqueryOutput values.
// You can construct a concrete instance of `GlobalConnectionBigqueryInput` via:
//
//	GlobalConnectionBigqueryArgs{...}
type GlobalConnectionBigqueryInput interface {
	pulumi.Input

	ToGlobalConnectionBigqueryOutput() GlobalConnectionBigqueryOutput
	ToGlobalConnectionBigqueryOutputWithContext(context.Context) GlobalConnectionBigqueryOutput
}

type GlobalConnectionBigqueryArgs struct {
	// OAuth Client ID
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
	// OAuth Client Secret
	ApplicationSecret pulumi.StringPtrInput `pulumi:"applicationSecret"`
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl pulumi.StringInput `pulumi:"authProviderX509CertUrl"`
	// Auth URI for the Service Account
	AuthUri pulumi.StringInput `pulumi:"authUri"`
	// Service Account email
	ClientEmail pulumi.StringInput `pulumi:"clientEmail"`
	// Client ID of the Service Account
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl pulumi.StringInput `pulumi:"clientX509CertUrl"`
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName pulumi.StringPtrInput `pulumi:"dataprocClusterName"`
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion pulumi.StringPtrInput `pulumi:"dataprocRegion"`
	// Project to bill for query execution
	ExecutionProject pulumi.StringPtrInput `pulumi:"executionProject"`
	// The GCP project ID to use for the connection
	GcpProjectId pulumi.StringInput `pulumi:"gcpProjectId"`
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket pulumi.StringPtrInput `pulumi:"gcsBucket"`
	// Service Account to impersonate when running queries
	ImpersonateServiceAccount pulumi.StringPtrInput `pulumi:"impersonateServiceAccount"`
	// Maximum timeout for the job creation step
	JobCreationTimeoutSeconds pulumi.IntPtrInput `pulumi:"jobCreationTimeoutSeconds"`
	// Total number of seconds to wait while retrying the same query
	JobRetryDeadlineSeconds pulumi.IntPtrInput `pulumi:"jobRetryDeadlineSeconds"`
	// Location to create new Datasets in
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled pulumi.IntPtrInput `pulumi:"maximumBytesBilled"`
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// Private Key for the Service Account
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
	// Private Key ID for the Service Account
	PrivateKeyId pulumi.StringInput `pulumi:"privateKeyId"`
	// Number of retries for queries
	Retries pulumi.IntPtrInput `pulumi:"retries"`
	// OAuth scopes for the BigQuery connection
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// Timeout in seconds for queries
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
	// Token URI for the Service Account
	TokenUri pulumi.StringInput `pulumi:"tokenUri"`
}

func (GlobalConnectionBigqueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionBigquery)(nil)).Elem()
}

func (i GlobalConnectionBigqueryArgs) ToGlobalConnectionBigqueryOutput() GlobalConnectionBigqueryOutput {
	return i.ToGlobalConnectionBigqueryOutputWithContext(context.Background())
}

func (i GlobalConnectionBigqueryArgs) ToGlobalConnectionBigqueryOutputWithContext(ctx context.Context) GlobalConnectionBigqueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionBigqueryOutput)
}

func (i GlobalConnectionBigqueryArgs) ToGlobalConnectionBigqueryPtrOutput() GlobalConnectionBigqueryPtrOutput {
	return i.ToGlobalConnectionBigqueryPtrOutputWithContext(context.Background())
}

func (i GlobalConnectionBigqueryArgs) ToGlobalConnectionBigqueryPtrOutputWithContext(ctx context.Context) GlobalConnectionBigqueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionBigqueryOutput).ToGlobalConnectionBigqueryPtrOutputWithContext(ctx)
}

// GlobalConnectionBigqueryPtrInput is an input type that accepts GlobalConnectionBigqueryArgs, GlobalConnectionBigqueryPtr and GlobalConnectionBigqueryPtrOutput values.
// You can construct a concrete instance of `GlobalConnectionBigqueryPtrInput` via:
//
//	        GlobalConnectionBigqueryArgs{...}
//
//	or:
//
//	        nil
type GlobalConnectionBigqueryPtrInput interface {
	pulumi.Input

	ToGlobalConnectionBigqueryPtrOutput() GlobalConnectionBigqueryPtrOutput
	ToGlobalConnectionBigqueryPtrOutputWithContext(context.Context) GlobalConnectionBigqueryPtrOutput
}

type globalConnectionBigqueryPtrType GlobalConnectionBigqueryArgs

func GlobalConnectionBigqueryPtr(v *GlobalConnectionBigqueryArgs) GlobalConnectionBigqueryPtrInput {
	return (*globalConnectionBigqueryPtrType)(v)
}

func (*globalConnectionBigqueryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionBigquery)(nil)).Elem()
}

func (i *globalConnectionBigqueryPtrType) ToGlobalConnectionBigqueryPtrOutput() GlobalConnectionBigqueryPtrOutput {
	return i.ToGlobalConnectionBigqueryPtrOutputWithContext(context.Background())
}

func (i *globalConnectionBigqueryPtrType) ToGlobalConnectionBigqueryPtrOutputWithContext(ctx context.Context) GlobalConnectionBigqueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionBigqueryPtrOutput)
}

type GlobalConnectionBigqueryOutput struct{ *pulumi.OutputState }

func (GlobalConnectionBigqueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionBigquery)(nil)).Elem()
}

func (o GlobalConnectionBigqueryOutput) ToGlobalConnectionBigqueryOutput() GlobalConnectionBigqueryOutput {
	return o
}

func (o GlobalConnectionBigqueryOutput) ToGlobalConnectionBigqueryOutputWithContext(ctx context.Context) GlobalConnectionBigqueryOutput {
	return o
}

func (o GlobalConnectionBigqueryOutput) ToGlobalConnectionBigqueryPtrOutput() GlobalConnectionBigqueryPtrOutput {
	return o.ToGlobalConnectionBigqueryPtrOutputWithContext(context.Background())
}

func (o GlobalConnectionBigqueryOutput) ToGlobalConnectionBigqueryPtrOutputWithContext(ctx context.Context) GlobalConnectionBigqueryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlobalConnectionBigquery) *GlobalConnectionBigquery {
		return &v
	}).(GlobalConnectionBigqueryPtrOutput)
}

// OAuth Client ID
func (o GlobalConnectionBigqueryOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// OAuth Client Secret
func (o GlobalConnectionBigqueryOutput) ApplicationSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *string { return v.ApplicationSecret }).(pulumi.StringPtrOutput)
}

// Auth Provider X509 Cert URL for the Service Account
func (o GlobalConnectionBigqueryOutput) AuthProviderX509CertUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) string { return v.AuthProviderX509CertUrl }).(pulumi.StringOutput)
}

// Auth URI for the Service Account
func (o GlobalConnectionBigqueryOutput) AuthUri() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) string { return v.AuthUri }).(pulumi.StringOutput)
}

// Service Account email
func (o GlobalConnectionBigqueryOutput) ClientEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) string { return v.ClientEmail }).(pulumi.StringOutput)
}

// Client ID of the Service Account
func (o GlobalConnectionBigqueryOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) string { return v.ClientId }).(pulumi.StringOutput)
}

// Client X509 Cert URL for the Service Account
func (o GlobalConnectionBigqueryOutput) ClientX509CertUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) string { return v.ClientX509CertUrl }).(pulumi.StringOutput)
}

// Dataproc cluster name for PySpark workloads
func (o GlobalConnectionBigqueryOutput) DataprocClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *string { return v.DataprocClusterName }).(pulumi.StringPtrOutput)
}

// Google Cloud region for PySpark workloads on Dataproc
func (o GlobalConnectionBigqueryOutput) DataprocRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *string { return v.DataprocRegion }).(pulumi.StringPtrOutput)
}

// Project to bill for query execution
func (o GlobalConnectionBigqueryOutput) ExecutionProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *string { return v.ExecutionProject }).(pulumi.StringPtrOutput)
}

// The GCP project ID to use for the connection
func (o GlobalConnectionBigqueryOutput) GcpProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) string { return v.GcpProjectId }).(pulumi.StringOutput)
}

// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
func (o GlobalConnectionBigqueryOutput) GcsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *string { return v.GcsBucket }).(pulumi.StringPtrOutput)
}

// Service Account to impersonate when running queries
func (o GlobalConnectionBigqueryOutput) ImpersonateServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *string { return v.ImpersonateServiceAccount }).(pulumi.StringPtrOutput)
}

// Maximum timeout for the job creation step
func (o GlobalConnectionBigqueryOutput) JobCreationTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *int { return v.JobCreationTimeoutSeconds }).(pulumi.IntPtrOutput)
}

// Total number of seconds to wait while retrying the same query
func (o GlobalConnectionBigqueryOutput) JobRetryDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *int { return v.JobRetryDeadlineSeconds }).(pulumi.IntPtrOutput)
}

// Location to create new Datasets in
func (o GlobalConnectionBigqueryOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Max number of bytes that can be billed for a given BigQuery query
func (o GlobalConnectionBigqueryOutput) MaximumBytesBilled() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *int { return v.MaximumBytesBilled }).(pulumi.IntPtrOutput)
}

// The priority with which to execute BigQuery queries (batch or interactive)
func (o GlobalConnectionBigqueryOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// Private Key for the Service Account
func (o GlobalConnectionBigqueryOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// Private Key ID for the Service Account
func (o GlobalConnectionBigqueryOutput) PrivateKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) string { return v.PrivateKeyId }).(pulumi.StringOutput)
}

// Number of retries for queries
func (o GlobalConnectionBigqueryOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

// OAuth scopes for the BigQuery connection
func (o GlobalConnectionBigqueryOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// Timeout in seconds for queries
func (o GlobalConnectionBigqueryOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

// Token URI for the Service Account
func (o GlobalConnectionBigqueryOutput) TokenUri() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) string { return v.TokenUri }).(pulumi.StringOutput)
}

type GlobalConnectionBigqueryPtrOutput struct{ *pulumi.OutputState }

func (GlobalConnectionBigqueryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionBigquery)(nil)).Elem()
}

func (o GlobalConnectionBigqueryPtrOutput) ToGlobalConnectionBigqueryPtrOutput() GlobalConnectionBigqueryPtrOutput {
	return o
}

func (o GlobalConnectionBigqueryPtrOutput) ToGlobalConnectionBigqueryPtrOutputWithContext(ctx context.Context) GlobalConnectionBigqueryPtrOutput {
	return o
}

func (o GlobalConnectionBigqueryPtrOutput) Elem() GlobalConnectionBigqueryOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) GlobalConnectionBigquery {
		if v != nil {
			return *v
		}
		var ret GlobalConnectionBigquery
		return ret
	}).(GlobalConnectionBigqueryOutput)
}

// OAuth Client ID
func (o GlobalConnectionBigqueryPtrOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationId
	}).(pulumi.StringPtrOutput)
}

// OAuth Client Secret
func (o GlobalConnectionBigqueryPtrOutput) ApplicationSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationSecret
	}).(pulumi.StringPtrOutput)
}

// Auth Provider X509 Cert URL for the Service Account
func (o GlobalConnectionBigqueryPtrOutput) AuthProviderX509CertUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return &v.AuthProviderX509CertUrl
	}).(pulumi.StringPtrOutput)
}

// Auth URI for the Service Account
func (o GlobalConnectionBigqueryPtrOutput) AuthUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return &v.AuthUri
	}).(pulumi.StringPtrOutput)
}

// Service Account email
func (o GlobalConnectionBigqueryPtrOutput) ClientEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return &v.ClientEmail
	}).(pulumi.StringPtrOutput)
}

// Client ID of the Service Account
func (o GlobalConnectionBigqueryPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Client X509 Cert URL for the Service Account
func (o GlobalConnectionBigqueryPtrOutput) ClientX509CertUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return &v.ClientX509CertUrl
	}).(pulumi.StringPtrOutput)
}

// Dataproc cluster name for PySpark workloads
func (o GlobalConnectionBigqueryPtrOutput) DataprocClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return v.DataprocClusterName
	}).(pulumi.StringPtrOutput)
}

// Google Cloud region for PySpark workloads on Dataproc
func (o GlobalConnectionBigqueryPtrOutput) DataprocRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return v.DataprocRegion
	}).(pulumi.StringPtrOutput)
}

// Project to bill for query execution
func (o GlobalConnectionBigqueryPtrOutput) ExecutionProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return v.ExecutionProject
	}).(pulumi.StringPtrOutput)
}

// The GCP project ID to use for the connection
func (o GlobalConnectionBigqueryPtrOutput) GcpProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return &v.GcpProjectId
	}).(pulumi.StringPtrOutput)
}

// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
func (o GlobalConnectionBigqueryPtrOutput) GcsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return v.GcsBucket
	}).(pulumi.StringPtrOutput)
}

// Service Account to impersonate when running queries
func (o GlobalConnectionBigqueryPtrOutput) ImpersonateServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return v.ImpersonateServiceAccount
	}).(pulumi.StringPtrOutput)
}

// Maximum timeout for the job creation step
func (o GlobalConnectionBigqueryPtrOutput) JobCreationTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *int {
		if v == nil {
			return nil
		}
		return v.JobCreationTimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// Total number of seconds to wait while retrying the same query
func (o GlobalConnectionBigqueryPtrOutput) JobRetryDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *int {
		if v == nil {
			return nil
		}
		return v.JobRetryDeadlineSeconds
	}).(pulumi.IntPtrOutput)
}

// Location to create new Datasets in
func (o GlobalConnectionBigqueryPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Max number of bytes that can be billed for a given BigQuery query
func (o GlobalConnectionBigqueryPtrOutput) MaximumBytesBilled() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBytesBilled
	}).(pulumi.IntPtrOutput)
}

// The priority with which to execute BigQuery queries (batch or interactive)
func (o GlobalConnectionBigqueryPtrOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.StringPtrOutput)
}

// Private Key for the Service Account
func (o GlobalConnectionBigqueryPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// Private Key ID for the Service Account
func (o GlobalConnectionBigqueryPtrOutput) PrivateKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateKeyId
	}).(pulumi.StringPtrOutput)
}

// Number of retries for queries
func (o GlobalConnectionBigqueryPtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *int {
		if v == nil {
			return nil
		}
		return v.Retries
	}).(pulumi.IntPtrOutput)
}

// OAuth scopes for the BigQuery connection
func (o GlobalConnectionBigqueryPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// Timeout in seconds for queries
func (o GlobalConnectionBigqueryPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// Token URI for the Service Account
func (o GlobalConnectionBigqueryPtrOutput) TokenUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return &v.TokenUri
	}).(pulumi.StringPtrOutput)
}

type GlobalConnectionDatabricks struct {
	// Catalog name if Unity Catalog is enabled in your Databricks workspace.
	Catalog *string `pulumi:"catalog"`
	// Required to enable Databricks OAuth authentication for IDE developers.
	ClientId *string `pulumi:"clientId"`
	// Required to enable Databricks OAuth authentication for IDE developers.
	ClientSecret *string `pulumi:"clientSecret"`
	// The hostname of the Databricks cluster or SQL warehouse.
	Host string `pulumi:"host"`
	// The HTTP path of the Databricks cluster or SQL warehouse.
	HttpPath string `pulumi:"httpPath"`
}

// GlobalConnectionDatabricksInput is an input type that accepts GlobalConnectionDatabricksArgs and GlobalConnectionDatabricksOutput values.
// You can construct a concrete instance of `GlobalConnectionDatabricksInput` via:
//
//	GlobalConnectionDatabricksArgs{...}
type GlobalConnectionDatabricksInput interface {
	pulumi.Input

	ToGlobalConnectionDatabricksOutput() GlobalConnectionDatabricksOutput
	ToGlobalConnectionDatabricksOutputWithContext(context.Context) GlobalConnectionDatabricksOutput
}

type GlobalConnectionDatabricksArgs struct {
	// Catalog name if Unity Catalog is enabled in your Databricks workspace.
	Catalog pulumi.StringPtrInput `pulumi:"catalog"`
	// Required to enable Databricks OAuth authentication for IDE developers.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Required to enable Databricks OAuth authentication for IDE developers.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// The hostname of the Databricks cluster or SQL warehouse.
	Host pulumi.StringInput `pulumi:"host"`
	// The HTTP path of the Databricks cluster or SQL warehouse.
	HttpPath pulumi.StringInput `pulumi:"httpPath"`
}

func (GlobalConnectionDatabricksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionDatabricks)(nil)).Elem()
}

func (i GlobalConnectionDatabricksArgs) ToGlobalConnectionDatabricksOutput() GlobalConnectionDatabricksOutput {
	return i.ToGlobalConnectionDatabricksOutputWithContext(context.Background())
}

func (i GlobalConnectionDatabricksArgs) ToGlobalConnectionDatabricksOutputWithContext(ctx context.Context) GlobalConnectionDatabricksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionDatabricksOutput)
}

func (i GlobalConnectionDatabricksArgs) ToGlobalConnectionDatabricksPtrOutput() GlobalConnectionDatabricksPtrOutput {
	return i.ToGlobalConnectionDatabricksPtrOutputWithContext(context.Background())
}

func (i GlobalConnectionDatabricksArgs) ToGlobalConnectionDatabricksPtrOutputWithContext(ctx context.Context) GlobalConnectionDatabricksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionDatabricksOutput).ToGlobalConnectionDatabricksPtrOutputWithContext(ctx)
}

// GlobalConnectionDatabricksPtrInput is an input type that accepts GlobalConnectionDatabricksArgs, GlobalConnectionDatabricksPtr and GlobalConnectionDatabricksPtrOutput values.
// You can construct a concrete instance of `GlobalConnectionDatabricksPtrInput` via:
//
//	        GlobalConnectionDatabricksArgs{...}
//
//	or:
//
//	        nil
type GlobalConnectionDatabricksPtrInput interface {
	pulumi.Input

	ToGlobalConnectionDatabricksPtrOutput() GlobalConnectionDatabricksPtrOutput
	ToGlobalConnectionDatabricksPtrOutputWithContext(context.Context) GlobalConnectionDatabricksPtrOutput
}

type globalConnectionDatabricksPtrType GlobalConnectionDatabricksArgs

func GlobalConnectionDatabricksPtr(v *GlobalConnectionDatabricksArgs) GlobalConnectionDatabricksPtrInput {
	return (*globalConnectionDatabricksPtrType)(v)
}

func (*globalConnectionDatabricksPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionDatabricks)(nil)).Elem()
}

func (i *globalConnectionDatabricksPtrType) ToGlobalConnectionDatabricksPtrOutput() GlobalConnectionDatabricksPtrOutput {
	return i.ToGlobalConnectionDatabricksPtrOutputWithContext(context.Background())
}

func (i *globalConnectionDatabricksPtrType) ToGlobalConnectionDatabricksPtrOutputWithContext(ctx context.Context) GlobalConnectionDatabricksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionDatabricksPtrOutput)
}

type GlobalConnectionDatabricksOutput struct{ *pulumi.OutputState }

func (GlobalConnectionDatabricksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionDatabricks)(nil)).Elem()
}

func (o GlobalConnectionDatabricksOutput) ToGlobalConnectionDatabricksOutput() GlobalConnectionDatabricksOutput {
	return o
}

func (o GlobalConnectionDatabricksOutput) ToGlobalConnectionDatabricksOutputWithContext(ctx context.Context) GlobalConnectionDatabricksOutput {
	return o
}

func (o GlobalConnectionDatabricksOutput) ToGlobalConnectionDatabricksPtrOutput() GlobalConnectionDatabricksPtrOutput {
	return o.ToGlobalConnectionDatabricksPtrOutputWithContext(context.Background())
}

func (o GlobalConnectionDatabricksOutput) ToGlobalConnectionDatabricksPtrOutputWithContext(ctx context.Context) GlobalConnectionDatabricksPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlobalConnectionDatabricks) *GlobalConnectionDatabricks {
		return &v
	}).(GlobalConnectionDatabricksPtrOutput)
}

// Catalog name if Unity Catalog is enabled in your Databricks workspace.
func (o GlobalConnectionDatabricksOutput) Catalog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionDatabricks) *string { return v.Catalog }).(pulumi.StringPtrOutput)
}

// Required to enable Databricks OAuth authentication for IDE developers.
func (o GlobalConnectionDatabricksOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionDatabricks) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Required to enable Databricks OAuth authentication for IDE developers.
func (o GlobalConnectionDatabricksOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionDatabricks) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// The hostname of the Databricks cluster or SQL warehouse.
func (o GlobalConnectionDatabricksOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionDatabricks) string { return v.Host }).(pulumi.StringOutput)
}

// The HTTP path of the Databricks cluster or SQL warehouse.
func (o GlobalConnectionDatabricksOutput) HttpPath() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionDatabricks) string { return v.HttpPath }).(pulumi.StringOutput)
}

type GlobalConnectionDatabricksPtrOutput struct{ *pulumi.OutputState }

func (GlobalConnectionDatabricksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionDatabricks)(nil)).Elem()
}

func (o GlobalConnectionDatabricksPtrOutput) ToGlobalConnectionDatabricksPtrOutput() GlobalConnectionDatabricksPtrOutput {
	return o
}

func (o GlobalConnectionDatabricksPtrOutput) ToGlobalConnectionDatabricksPtrOutputWithContext(ctx context.Context) GlobalConnectionDatabricksPtrOutput {
	return o
}

func (o GlobalConnectionDatabricksPtrOutput) Elem() GlobalConnectionDatabricksOutput {
	return o.ApplyT(func(v *GlobalConnectionDatabricks) GlobalConnectionDatabricks {
		if v != nil {
			return *v
		}
		var ret GlobalConnectionDatabricks
		return ret
	}).(GlobalConnectionDatabricksOutput)
}

// Catalog name if Unity Catalog is enabled in your Databricks workspace.
func (o GlobalConnectionDatabricksPtrOutput) Catalog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionDatabricks) *string {
		if v == nil {
			return nil
		}
		return v.Catalog
	}).(pulumi.StringPtrOutput)
}

// Required to enable Databricks OAuth authentication for IDE developers.
func (o GlobalConnectionDatabricksPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionDatabricks) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Required to enable Databricks OAuth authentication for IDE developers.
func (o GlobalConnectionDatabricksPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionDatabricks) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// The hostname of the Databricks cluster or SQL warehouse.
func (o GlobalConnectionDatabricksPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionDatabricks) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The HTTP path of the Databricks cluster or SQL warehouse.
func (o GlobalConnectionDatabricksPtrOutput) HttpPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionDatabricks) *string {
		if v == nil {
			return nil
		}
		return &v.HttpPath
	}).(pulumi.StringPtrOutput)
}

type GlobalConnectionFabric struct {
	// The database to connect to for this connection.
	Database string `pulumi:"database"`
	// The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
	LoginTimeout *int `pulumi:"loginTimeout"`
	// The port to connect to for this connection. Default=1433
	Port *int `pulumi:"port"`
	// The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
	QueryTimeout *int `pulumi:"queryTimeout"`
	// The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
	Retries *int `pulumi:"retries"`
	// The server hostname.
	Server string `pulumi:"server"`
}

// GlobalConnectionFabricInput is an input type that accepts GlobalConnectionFabricArgs and GlobalConnectionFabricOutput values.
// You can construct a concrete instance of `GlobalConnectionFabricInput` via:
//
//	GlobalConnectionFabricArgs{...}
type GlobalConnectionFabricInput interface {
	pulumi.Input

	ToGlobalConnectionFabricOutput() GlobalConnectionFabricOutput
	ToGlobalConnectionFabricOutputWithContext(context.Context) GlobalConnectionFabricOutput
}

type GlobalConnectionFabricArgs struct {
	// The database to connect to for this connection.
	Database pulumi.StringInput `pulumi:"database"`
	// The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
	LoginTimeout pulumi.IntPtrInput `pulumi:"loginTimeout"`
	// The port to connect to for this connection. Default=1433
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
	QueryTimeout pulumi.IntPtrInput `pulumi:"queryTimeout"`
	// The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
	Retries pulumi.IntPtrInput `pulumi:"retries"`
	// The server hostname.
	Server pulumi.StringInput `pulumi:"server"`
}

func (GlobalConnectionFabricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionFabric)(nil)).Elem()
}

func (i GlobalConnectionFabricArgs) ToGlobalConnectionFabricOutput() GlobalConnectionFabricOutput {
	return i.ToGlobalConnectionFabricOutputWithContext(context.Background())
}

func (i GlobalConnectionFabricArgs) ToGlobalConnectionFabricOutputWithContext(ctx context.Context) GlobalConnectionFabricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionFabricOutput)
}

func (i GlobalConnectionFabricArgs) ToGlobalConnectionFabricPtrOutput() GlobalConnectionFabricPtrOutput {
	return i.ToGlobalConnectionFabricPtrOutputWithContext(context.Background())
}

func (i GlobalConnectionFabricArgs) ToGlobalConnectionFabricPtrOutputWithContext(ctx context.Context) GlobalConnectionFabricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionFabricOutput).ToGlobalConnectionFabricPtrOutputWithContext(ctx)
}

// GlobalConnectionFabricPtrInput is an input type that accepts GlobalConnectionFabricArgs, GlobalConnectionFabricPtr and GlobalConnectionFabricPtrOutput values.
// You can construct a concrete instance of `GlobalConnectionFabricPtrInput` via:
//
//	        GlobalConnectionFabricArgs{...}
//
//	or:
//
//	        nil
type GlobalConnectionFabricPtrInput interface {
	pulumi.Input

	ToGlobalConnectionFabricPtrOutput() GlobalConnectionFabricPtrOutput
	ToGlobalConnectionFabricPtrOutputWithContext(context.Context) GlobalConnectionFabricPtrOutput
}

type globalConnectionFabricPtrType GlobalConnectionFabricArgs

func GlobalConnectionFabricPtr(v *GlobalConnectionFabricArgs) GlobalConnectionFabricPtrInput {
	return (*globalConnectionFabricPtrType)(v)
}

func (*globalConnectionFabricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionFabric)(nil)).Elem()
}

func (i *globalConnectionFabricPtrType) ToGlobalConnectionFabricPtrOutput() GlobalConnectionFabricPtrOutput {
	return i.ToGlobalConnectionFabricPtrOutputWithContext(context.Background())
}

func (i *globalConnectionFabricPtrType) ToGlobalConnectionFabricPtrOutputWithContext(ctx context.Context) GlobalConnectionFabricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionFabricPtrOutput)
}

type GlobalConnectionFabricOutput struct{ *pulumi.OutputState }

func (GlobalConnectionFabricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionFabric)(nil)).Elem()
}

func (o GlobalConnectionFabricOutput) ToGlobalConnectionFabricOutput() GlobalConnectionFabricOutput {
	return o
}

func (o GlobalConnectionFabricOutput) ToGlobalConnectionFabricOutputWithContext(ctx context.Context) GlobalConnectionFabricOutput {
	return o
}

func (o GlobalConnectionFabricOutput) ToGlobalConnectionFabricPtrOutput() GlobalConnectionFabricPtrOutput {
	return o.ToGlobalConnectionFabricPtrOutputWithContext(context.Background())
}

func (o GlobalConnectionFabricOutput) ToGlobalConnectionFabricPtrOutputWithContext(ctx context.Context) GlobalConnectionFabricPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlobalConnectionFabric) *GlobalConnectionFabric {
		return &v
	}).(GlobalConnectionFabricPtrOutput)
}

// The database to connect to for this connection.
func (o GlobalConnectionFabricOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionFabric) string { return v.Database }).(pulumi.StringOutput)
}

// The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
func (o GlobalConnectionFabricOutput) LoginTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionFabric) *int { return v.LoginTimeout }).(pulumi.IntPtrOutput)
}

// The port to connect to for this connection. Default=1433
func (o GlobalConnectionFabricOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionFabric) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
func (o GlobalConnectionFabricOutput) QueryTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionFabric) *int { return v.QueryTimeout }).(pulumi.IntPtrOutput)
}

// The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
func (o GlobalConnectionFabricOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionFabric) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

// The server hostname.
func (o GlobalConnectionFabricOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionFabric) string { return v.Server }).(pulumi.StringOutput)
}

type GlobalConnectionFabricPtrOutput struct{ *pulumi.OutputState }

func (GlobalConnectionFabricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionFabric)(nil)).Elem()
}

func (o GlobalConnectionFabricPtrOutput) ToGlobalConnectionFabricPtrOutput() GlobalConnectionFabricPtrOutput {
	return o
}

func (o GlobalConnectionFabricPtrOutput) ToGlobalConnectionFabricPtrOutputWithContext(ctx context.Context) GlobalConnectionFabricPtrOutput {
	return o
}

func (o GlobalConnectionFabricPtrOutput) Elem() GlobalConnectionFabricOutput {
	return o.ApplyT(func(v *GlobalConnectionFabric) GlobalConnectionFabric {
		if v != nil {
			return *v
		}
		var ret GlobalConnectionFabric
		return ret
	}).(GlobalConnectionFabricOutput)
}

// The database to connect to for this connection.
func (o GlobalConnectionFabricPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionFabric) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
func (o GlobalConnectionFabricPtrOutput) LoginTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionFabric) *int {
		if v == nil {
			return nil
		}
		return v.LoginTimeout
	}).(pulumi.IntPtrOutput)
}

// The port to connect to for this connection. Default=1433
func (o GlobalConnectionFabricPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionFabric) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
func (o GlobalConnectionFabricPtrOutput) QueryTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionFabric) *int {
		if v == nil {
			return nil
		}
		return v.QueryTimeout
	}).(pulumi.IntPtrOutput)
}

// The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
func (o GlobalConnectionFabricPtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionFabric) *int {
		if v == nil {
			return nil
		}
		return v.Retries
	}).(pulumi.IntPtrOutput)
}

// The server hostname.
func (o GlobalConnectionFabricPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionFabric) *string {
		if v == nil {
			return nil
		}
		return &v.Server
	}).(pulumi.StringPtrOutput)
}

type GlobalConnectionPostgres struct {
	// The database name for this connection.
	Dbname string `pulumi:"dbname"`
	// The hostname of the database.
	Hostname string `pulumi:"hostname"`
	// The port to connect to for this connection. Default=5432
	Port *int `pulumi:"port"`
	// PostgreSQL SSH Tunnel configuration
	SshTunnel *GlobalConnectionPostgresSshTunnel `pulumi:"sshTunnel"`
}

// GlobalConnectionPostgresInput is an input type that accepts GlobalConnectionPostgresArgs and GlobalConnectionPostgresOutput values.
// You can construct a concrete instance of `GlobalConnectionPostgresInput` via:
//
//	GlobalConnectionPostgresArgs{...}
type GlobalConnectionPostgresInput interface {
	pulumi.Input

	ToGlobalConnectionPostgresOutput() GlobalConnectionPostgresOutput
	ToGlobalConnectionPostgresOutputWithContext(context.Context) GlobalConnectionPostgresOutput
}

type GlobalConnectionPostgresArgs struct {
	// The database name for this connection.
	Dbname pulumi.StringInput `pulumi:"dbname"`
	// The hostname of the database.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The port to connect to for this connection. Default=5432
	Port pulumi.IntPtrInput `pulumi:"port"`
	// PostgreSQL SSH Tunnel configuration
	SshTunnel GlobalConnectionPostgresSshTunnelPtrInput `pulumi:"sshTunnel"`
}

func (GlobalConnectionPostgresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionPostgres)(nil)).Elem()
}

func (i GlobalConnectionPostgresArgs) ToGlobalConnectionPostgresOutput() GlobalConnectionPostgresOutput {
	return i.ToGlobalConnectionPostgresOutputWithContext(context.Background())
}

func (i GlobalConnectionPostgresArgs) ToGlobalConnectionPostgresOutputWithContext(ctx context.Context) GlobalConnectionPostgresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionPostgresOutput)
}

func (i GlobalConnectionPostgresArgs) ToGlobalConnectionPostgresPtrOutput() GlobalConnectionPostgresPtrOutput {
	return i.ToGlobalConnectionPostgresPtrOutputWithContext(context.Background())
}

func (i GlobalConnectionPostgresArgs) ToGlobalConnectionPostgresPtrOutputWithContext(ctx context.Context) GlobalConnectionPostgresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionPostgresOutput).ToGlobalConnectionPostgresPtrOutputWithContext(ctx)
}

// GlobalConnectionPostgresPtrInput is an input type that accepts GlobalConnectionPostgresArgs, GlobalConnectionPostgresPtr and GlobalConnectionPostgresPtrOutput values.
// You can construct a concrete instance of `GlobalConnectionPostgresPtrInput` via:
//
//	        GlobalConnectionPostgresArgs{...}
//
//	or:
//
//	        nil
type GlobalConnectionPostgresPtrInput interface {
	pulumi.Input

	ToGlobalConnectionPostgresPtrOutput() GlobalConnectionPostgresPtrOutput
	ToGlobalConnectionPostgresPtrOutputWithContext(context.Context) GlobalConnectionPostgresPtrOutput
}

type globalConnectionPostgresPtrType GlobalConnectionPostgresArgs

func GlobalConnectionPostgresPtr(v *GlobalConnectionPostgresArgs) GlobalConnectionPostgresPtrInput {
	return (*globalConnectionPostgresPtrType)(v)
}

func (*globalConnectionPostgresPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionPostgres)(nil)).Elem()
}

func (i *globalConnectionPostgresPtrType) ToGlobalConnectionPostgresPtrOutput() GlobalConnectionPostgresPtrOutput {
	return i.ToGlobalConnectionPostgresPtrOutputWithContext(context.Background())
}

func (i *globalConnectionPostgresPtrType) ToGlobalConnectionPostgresPtrOutputWithContext(ctx context.Context) GlobalConnectionPostgresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionPostgresPtrOutput)
}

type GlobalConnectionPostgresOutput struct{ *pulumi.OutputState }

func (GlobalConnectionPostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionPostgres)(nil)).Elem()
}

func (o GlobalConnectionPostgresOutput) ToGlobalConnectionPostgresOutput() GlobalConnectionPostgresOutput {
	return o
}

func (o GlobalConnectionPostgresOutput) ToGlobalConnectionPostgresOutputWithContext(ctx context.Context) GlobalConnectionPostgresOutput {
	return o
}

func (o GlobalConnectionPostgresOutput) ToGlobalConnectionPostgresPtrOutput() GlobalConnectionPostgresPtrOutput {
	return o.ToGlobalConnectionPostgresPtrOutputWithContext(context.Background())
}

func (o GlobalConnectionPostgresOutput) ToGlobalConnectionPostgresPtrOutputWithContext(ctx context.Context) GlobalConnectionPostgresPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlobalConnectionPostgres) *GlobalConnectionPostgres {
		return &v
	}).(GlobalConnectionPostgresPtrOutput)
}

// The database name for this connection.
func (o GlobalConnectionPostgresOutput) Dbname() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionPostgres) string { return v.Dbname }).(pulumi.StringOutput)
}

// The hostname of the database.
func (o GlobalConnectionPostgresOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionPostgres) string { return v.Hostname }).(pulumi.StringOutput)
}

// The port to connect to for this connection. Default=5432
func (o GlobalConnectionPostgresOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionPostgres) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// PostgreSQL SSH Tunnel configuration
func (o GlobalConnectionPostgresOutput) SshTunnel() GlobalConnectionPostgresSshTunnelPtrOutput {
	return o.ApplyT(func(v GlobalConnectionPostgres) *GlobalConnectionPostgresSshTunnel { return v.SshTunnel }).(GlobalConnectionPostgresSshTunnelPtrOutput)
}

type GlobalConnectionPostgresPtrOutput struct{ *pulumi.OutputState }

func (GlobalConnectionPostgresPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionPostgres)(nil)).Elem()
}

func (o GlobalConnectionPostgresPtrOutput) ToGlobalConnectionPostgresPtrOutput() GlobalConnectionPostgresPtrOutput {
	return o
}

func (o GlobalConnectionPostgresPtrOutput) ToGlobalConnectionPostgresPtrOutputWithContext(ctx context.Context) GlobalConnectionPostgresPtrOutput {
	return o
}

func (o GlobalConnectionPostgresPtrOutput) Elem() GlobalConnectionPostgresOutput {
	return o.ApplyT(func(v *GlobalConnectionPostgres) GlobalConnectionPostgres {
		if v != nil {
			return *v
		}
		var ret GlobalConnectionPostgres
		return ret
	}).(GlobalConnectionPostgresOutput)
}

// The database name for this connection.
func (o GlobalConnectionPostgresPtrOutput) Dbname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionPostgres) *string {
		if v == nil {
			return nil
		}
		return &v.Dbname
	}).(pulumi.StringPtrOutput)
}

// The hostname of the database.
func (o GlobalConnectionPostgresPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionPostgres) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The port to connect to for this connection. Default=5432
func (o GlobalConnectionPostgresPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionPostgres) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// PostgreSQL SSH Tunnel configuration
func (o GlobalConnectionPostgresPtrOutput) SshTunnel() GlobalConnectionPostgresSshTunnelPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionPostgres) *GlobalConnectionPostgresSshTunnel {
		if v == nil {
			return nil
		}
		return v.SshTunnel
	}).(GlobalConnectionPostgresSshTunnelPtrOutput)
}

type GlobalConnectionPostgresSshTunnel struct {
	// The hostname for the SSH tunnel.
	Hostname string `pulumi:"hostname"`
	// The ID of the SSH tunnel connection.
	Id *int `pulumi:"id"`
	// The HTTP port for the SSH tunnel.
	Port int `pulumi:"port"`
	// The SSH public key generated to allow connecting via SSH tunnel.
	PublicKey *string `pulumi:"publicKey"`
	// The username to use for the SSH tunnel.
	Username string `pulumi:"username"`
}

// GlobalConnectionPostgresSshTunnelInput is an input type that accepts GlobalConnectionPostgresSshTunnelArgs and GlobalConnectionPostgresSshTunnelOutput values.
// You can construct a concrete instance of `GlobalConnectionPostgresSshTunnelInput` via:
//
//	GlobalConnectionPostgresSshTunnelArgs{...}
type GlobalConnectionPostgresSshTunnelInput interface {
	pulumi.Input

	ToGlobalConnectionPostgresSshTunnelOutput() GlobalConnectionPostgresSshTunnelOutput
	ToGlobalConnectionPostgresSshTunnelOutputWithContext(context.Context) GlobalConnectionPostgresSshTunnelOutput
}

type GlobalConnectionPostgresSshTunnelArgs struct {
	// The hostname for the SSH tunnel.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The ID of the SSH tunnel connection.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The HTTP port for the SSH tunnel.
	Port pulumi.IntInput `pulumi:"port"`
	// The SSH public key generated to allow connecting via SSH tunnel.
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The username to use for the SSH tunnel.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GlobalConnectionPostgresSshTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionPostgresSshTunnel)(nil)).Elem()
}

func (i GlobalConnectionPostgresSshTunnelArgs) ToGlobalConnectionPostgresSshTunnelOutput() GlobalConnectionPostgresSshTunnelOutput {
	return i.ToGlobalConnectionPostgresSshTunnelOutputWithContext(context.Background())
}

func (i GlobalConnectionPostgresSshTunnelArgs) ToGlobalConnectionPostgresSshTunnelOutputWithContext(ctx context.Context) GlobalConnectionPostgresSshTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionPostgresSshTunnelOutput)
}

func (i GlobalConnectionPostgresSshTunnelArgs) ToGlobalConnectionPostgresSshTunnelPtrOutput() GlobalConnectionPostgresSshTunnelPtrOutput {
	return i.ToGlobalConnectionPostgresSshTunnelPtrOutputWithContext(context.Background())
}

func (i GlobalConnectionPostgresSshTunnelArgs) ToGlobalConnectionPostgresSshTunnelPtrOutputWithContext(ctx context.Context) GlobalConnectionPostgresSshTunnelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionPostgresSshTunnelOutput).ToGlobalConnectionPostgresSshTunnelPtrOutputWithContext(ctx)
}

// GlobalConnectionPostgresSshTunnelPtrInput is an input type that accepts GlobalConnectionPostgresSshTunnelArgs, GlobalConnectionPostgresSshTunnelPtr and GlobalConnectionPostgresSshTunnelPtrOutput values.
// You can construct a concrete instance of `GlobalConnectionPostgresSshTunnelPtrInput` via:
//
//	        GlobalConnectionPostgresSshTunnelArgs{...}
//
//	or:
//
//	        nil
type GlobalConnectionPostgresSshTunnelPtrInput interface {
	pulumi.Input

	ToGlobalConnectionPostgresSshTunnelPtrOutput() GlobalConnectionPostgresSshTunnelPtrOutput
	ToGlobalConnectionPostgresSshTunnelPtrOutputWithContext(context.Context) GlobalConnectionPostgresSshTunnelPtrOutput
}

type globalConnectionPostgresSshTunnelPtrType GlobalConnectionPostgresSshTunnelArgs

func GlobalConnectionPostgresSshTunnelPtr(v *GlobalConnectionPostgresSshTunnelArgs) GlobalConnectionPostgresSshTunnelPtrInput {
	return (*globalConnectionPostgresSshTunnelPtrType)(v)
}

func (*globalConnectionPostgresSshTunnelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionPostgresSshTunnel)(nil)).Elem()
}

func (i *globalConnectionPostgresSshTunnelPtrType) ToGlobalConnectionPostgresSshTunnelPtrOutput() GlobalConnectionPostgresSshTunnelPtrOutput {
	return i.ToGlobalConnectionPostgresSshTunnelPtrOutputWithContext(context.Background())
}

func (i *globalConnectionPostgresSshTunnelPtrType) ToGlobalConnectionPostgresSshTunnelPtrOutputWithContext(ctx context.Context) GlobalConnectionPostgresSshTunnelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionPostgresSshTunnelPtrOutput)
}

type GlobalConnectionPostgresSshTunnelOutput struct{ *pulumi.OutputState }

func (GlobalConnectionPostgresSshTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionPostgresSshTunnel)(nil)).Elem()
}

func (o GlobalConnectionPostgresSshTunnelOutput) ToGlobalConnectionPostgresSshTunnelOutput() GlobalConnectionPostgresSshTunnelOutput {
	return o
}

func (o GlobalConnectionPostgresSshTunnelOutput) ToGlobalConnectionPostgresSshTunnelOutputWithContext(ctx context.Context) GlobalConnectionPostgresSshTunnelOutput {
	return o
}

func (o GlobalConnectionPostgresSshTunnelOutput) ToGlobalConnectionPostgresSshTunnelPtrOutput() GlobalConnectionPostgresSshTunnelPtrOutput {
	return o.ToGlobalConnectionPostgresSshTunnelPtrOutputWithContext(context.Background())
}

func (o GlobalConnectionPostgresSshTunnelOutput) ToGlobalConnectionPostgresSshTunnelPtrOutputWithContext(ctx context.Context) GlobalConnectionPostgresSshTunnelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlobalConnectionPostgresSshTunnel) *GlobalConnectionPostgresSshTunnel {
		return &v
	}).(GlobalConnectionPostgresSshTunnelPtrOutput)
}

// The hostname for the SSH tunnel.
func (o GlobalConnectionPostgresSshTunnelOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionPostgresSshTunnel) string { return v.Hostname }).(pulumi.StringOutput)
}

// The ID of the SSH tunnel connection.
func (o GlobalConnectionPostgresSshTunnelOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionPostgresSshTunnel) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The HTTP port for the SSH tunnel.
func (o GlobalConnectionPostgresSshTunnelOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GlobalConnectionPostgresSshTunnel) int { return v.Port }).(pulumi.IntOutput)
}

// The SSH public key generated to allow connecting via SSH tunnel.
func (o GlobalConnectionPostgresSshTunnelOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionPostgresSshTunnel) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The username to use for the SSH tunnel.
func (o GlobalConnectionPostgresSshTunnelOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionPostgresSshTunnel) string { return v.Username }).(pulumi.StringOutput)
}

type GlobalConnectionPostgresSshTunnelPtrOutput struct{ *pulumi.OutputState }

func (GlobalConnectionPostgresSshTunnelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionPostgresSshTunnel)(nil)).Elem()
}

func (o GlobalConnectionPostgresSshTunnelPtrOutput) ToGlobalConnectionPostgresSshTunnelPtrOutput() GlobalConnectionPostgresSshTunnelPtrOutput {
	return o
}

func (o GlobalConnectionPostgresSshTunnelPtrOutput) ToGlobalConnectionPostgresSshTunnelPtrOutputWithContext(ctx context.Context) GlobalConnectionPostgresSshTunnelPtrOutput {
	return o
}

func (o GlobalConnectionPostgresSshTunnelPtrOutput) Elem() GlobalConnectionPostgresSshTunnelOutput {
	return o.ApplyT(func(v *GlobalConnectionPostgresSshTunnel) GlobalConnectionPostgresSshTunnel {
		if v != nil {
			return *v
		}
		var ret GlobalConnectionPostgresSshTunnel
		return ret
	}).(GlobalConnectionPostgresSshTunnelOutput)
}

// The hostname for the SSH tunnel.
func (o GlobalConnectionPostgresSshTunnelPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionPostgresSshTunnel) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The ID of the SSH tunnel connection.
func (o GlobalConnectionPostgresSshTunnelPtrOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionPostgresSshTunnel) *int {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.IntPtrOutput)
}

// The HTTP port for the SSH tunnel.
func (o GlobalConnectionPostgresSshTunnelPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionPostgresSshTunnel) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The SSH public key generated to allow connecting via SSH tunnel.
func (o GlobalConnectionPostgresSshTunnelPtrOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionPostgresSshTunnel) *string {
		if v == nil {
			return nil
		}
		return v.PublicKey
	}).(pulumi.StringPtrOutput)
}

// The username to use for the SSH tunnel.
func (o GlobalConnectionPostgresSshTunnelPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionPostgresSshTunnel) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type GlobalConnectionRedshift struct {
	// The database name for this connection.
	Dbname string `pulumi:"dbname"`
	// The hostname of the data warehouse.
	Hostname string `pulumi:"hostname"`
	// The port to connect to for this connection. Default=5432
	Port *int `pulumi:"port"`
	// Redshift SSH Tunnel configuration
	SshTunnel *GlobalConnectionRedshiftSshTunnel `pulumi:"sshTunnel"`
}

// GlobalConnectionRedshiftInput is an input type that accepts GlobalConnectionRedshiftArgs and GlobalConnectionRedshiftOutput values.
// You can construct a concrete instance of `GlobalConnectionRedshiftInput` via:
//
//	GlobalConnectionRedshiftArgs{...}
type GlobalConnectionRedshiftInput interface {
	pulumi.Input

	ToGlobalConnectionRedshiftOutput() GlobalConnectionRedshiftOutput
	ToGlobalConnectionRedshiftOutputWithContext(context.Context) GlobalConnectionRedshiftOutput
}

type GlobalConnectionRedshiftArgs struct {
	// The database name for this connection.
	Dbname pulumi.StringInput `pulumi:"dbname"`
	// The hostname of the data warehouse.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The port to connect to for this connection. Default=5432
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Redshift SSH Tunnel configuration
	SshTunnel GlobalConnectionRedshiftSshTunnelPtrInput `pulumi:"sshTunnel"`
}

func (GlobalConnectionRedshiftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionRedshift)(nil)).Elem()
}

func (i GlobalConnectionRedshiftArgs) ToGlobalConnectionRedshiftOutput() GlobalConnectionRedshiftOutput {
	return i.ToGlobalConnectionRedshiftOutputWithContext(context.Background())
}

func (i GlobalConnectionRedshiftArgs) ToGlobalConnectionRedshiftOutputWithContext(ctx context.Context) GlobalConnectionRedshiftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionRedshiftOutput)
}

func (i GlobalConnectionRedshiftArgs) ToGlobalConnectionRedshiftPtrOutput() GlobalConnectionRedshiftPtrOutput {
	return i.ToGlobalConnectionRedshiftPtrOutputWithContext(context.Background())
}

func (i GlobalConnectionRedshiftArgs) ToGlobalConnectionRedshiftPtrOutputWithContext(ctx context.Context) GlobalConnectionRedshiftPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionRedshiftOutput).ToGlobalConnectionRedshiftPtrOutputWithContext(ctx)
}

// GlobalConnectionRedshiftPtrInput is an input type that accepts GlobalConnectionRedshiftArgs, GlobalConnectionRedshiftPtr and GlobalConnectionRedshiftPtrOutput values.
// You can construct a concrete instance of `GlobalConnectionRedshiftPtrInput` via:
//
//	        GlobalConnectionRedshiftArgs{...}
//
//	or:
//
//	        nil
type GlobalConnectionRedshiftPtrInput interface {
	pulumi.Input

	ToGlobalConnectionRedshiftPtrOutput() GlobalConnectionRedshiftPtrOutput
	ToGlobalConnectionRedshiftPtrOutputWithContext(context.Context) GlobalConnectionRedshiftPtrOutput
}

type globalConnectionRedshiftPtrType GlobalConnectionRedshiftArgs

func GlobalConnectionRedshiftPtr(v *GlobalConnectionRedshiftArgs) GlobalConnectionRedshiftPtrInput {
	return (*globalConnectionRedshiftPtrType)(v)
}

func (*globalConnectionRedshiftPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionRedshift)(nil)).Elem()
}

func (i *globalConnectionRedshiftPtrType) ToGlobalConnectionRedshiftPtrOutput() GlobalConnectionRedshiftPtrOutput {
	return i.ToGlobalConnectionRedshiftPtrOutputWithContext(context.Background())
}

func (i *globalConnectionRedshiftPtrType) ToGlobalConnectionRedshiftPtrOutputWithContext(ctx context.Context) GlobalConnectionRedshiftPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionRedshiftPtrOutput)
}

type GlobalConnectionRedshiftOutput struct{ *pulumi.OutputState }

func (GlobalConnectionRedshiftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionRedshift)(nil)).Elem()
}

func (o GlobalConnectionRedshiftOutput) ToGlobalConnectionRedshiftOutput() GlobalConnectionRedshiftOutput {
	return o
}

func (o GlobalConnectionRedshiftOutput) ToGlobalConnectionRedshiftOutputWithContext(ctx context.Context) GlobalConnectionRedshiftOutput {
	return o
}

func (o GlobalConnectionRedshiftOutput) ToGlobalConnectionRedshiftPtrOutput() GlobalConnectionRedshiftPtrOutput {
	return o.ToGlobalConnectionRedshiftPtrOutputWithContext(context.Background())
}

func (o GlobalConnectionRedshiftOutput) ToGlobalConnectionRedshiftPtrOutputWithContext(ctx context.Context) GlobalConnectionRedshiftPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlobalConnectionRedshift) *GlobalConnectionRedshift {
		return &v
	}).(GlobalConnectionRedshiftPtrOutput)
}

// The database name for this connection.
func (o GlobalConnectionRedshiftOutput) Dbname() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionRedshift) string { return v.Dbname }).(pulumi.StringOutput)
}

// The hostname of the data warehouse.
func (o GlobalConnectionRedshiftOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionRedshift) string { return v.Hostname }).(pulumi.StringOutput)
}

// The port to connect to for this connection. Default=5432
func (o GlobalConnectionRedshiftOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionRedshift) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Redshift SSH Tunnel configuration
func (o GlobalConnectionRedshiftOutput) SshTunnel() GlobalConnectionRedshiftSshTunnelPtrOutput {
	return o.ApplyT(func(v GlobalConnectionRedshift) *GlobalConnectionRedshiftSshTunnel { return v.SshTunnel }).(GlobalConnectionRedshiftSshTunnelPtrOutput)
}

type GlobalConnectionRedshiftPtrOutput struct{ *pulumi.OutputState }

func (GlobalConnectionRedshiftPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionRedshift)(nil)).Elem()
}

func (o GlobalConnectionRedshiftPtrOutput) ToGlobalConnectionRedshiftPtrOutput() GlobalConnectionRedshiftPtrOutput {
	return o
}

func (o GlobalConnectionRedshiftPtrOutput) ToGlobalConnectionRedshiftPtrOutputWithContext(ctx context.Context) GlobalConnectionRedshiftPtrOutput {
	return o
}

func (o GlobalConnectionRedshiftPtrOutput) Elem() GlobalConnectionRedshiftOutput {
	return o.ApplyT(func(v *GlobalConnectionRedshift) GlobalConnectionRedshift {
		if v != nil {
			return *v
		}
		var ret GlobalConnectionRedshift
		return ret
	}).(GlobalConnectionRedshiftOutput)
}

// The database name for this connection.
func (o GlobalConnectionRedshiftPtrOutput) Dbname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionRedshift) *string {
		if v == nil {
			return nil
		}
		return &v.Dbname
	}).(pulumi.StringPtrOutput)
}

// The hostname of the data warehouse.
func (o GlobalConnectionRedshiftPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionRedshift) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The port to connect to for this connection. Default=5432
func (o GlobalConnectionRedshiftPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionRedshift) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Redshift SSH Tunnel configuration
func (o GlobalConnectionRedshiftPtrOutput) SshTunnel() GlobalConnectionRedshiftSshTunnelPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionRedshift) *GlobalConnectionRedshiftSshTunnel {
		if v == nil {
			return nil
		}
		return v.SshTunnel
	}).(GlobalConnectionRedshiftSshTunnelPtrOutput)
}

type GlobalConnectionRedshiftSshTunnel struct {
	// The hostname for the SSH tunnel.
	Hostname string `pulumi:"hostname"`
	// The ID of the SSH tunnel connection.
	Id *int `pulumi:"id"`
	// The HTTP port for the SSH tunnel.
	Port int `pulumi:"port"`
	// The SSH public key generated to allow connecting via SSH tunnel.
	PublicKey *string `pulumi:"publicKey"`
	// The username to use for the SSH tunnel.
	Username string `pulumi:"username"`
}

// GlobalConnectionRedshiftSshTunnelInput is an input type that accepts GlobalConnectionRedshiftSshTunnelArgs and GlobalConnectionRedshiftSshTunnelOutput values.
// You can construct a concrete instance of `GlobalConnectionRedshiftSshTunnelInput` via:
//
//	GlobalConnectionRedshiftSshTunnelArgs{...}
type GlobalConnectionRedshiftSshTunnelInput interface {
	pulumi.Input

	ToGlobalConnectionRedshiftSshTunnelOutput() GlobalConnectionRedshiftSshTunnelOutput
	ToGlobalConnectionRedshiftSshTunnelOutputWithContext(context.Context) GlobalConnectionRedshiftSshTunnelOutput
}

type GlobalConnectionRedshiftSshTunnelArgs struct {
	// The hostname for the SSH tunnel.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The ID of the SSH tunnel connection.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The HTTP port for the SSH tunnel.
	Port pulumi.IntInput `pulumi:"port"`
	// The SSH public key generated to allow connecting via SSH tunnel.
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The username to use for the SSH tunnel.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GlobalConnectionRedshiftSshTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionRedshiftSshTunnel)(nil)).Elem()
}

func (i GlobalConnectionRedshiftSshTunnelArgs) ToGlobalConnectionRedshiftSshTunnelOutput() GlobalConnectionRedshiftSshTunnelOutput {
	return i.ToGlobalConnectionRedshiftSshTunnelOutputWithContext(context.Background())
}

func (i GlobalConnectionRedshiftSshTunnelArgs) ToGlobalConnectionRedshiftSshTunnelOutputWithContext(ctx context.Context) GlobalConnectionRedshiftSshTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionRedshiftSshTunnelOutput)
}

func (i GlobalConnectionRedshiftSshTunnelArgs) ToGlobalConnectionRedshiftSshTunnelPtrOutput() GlobalConnectionRedshiftSshTunnelPtrOutput {
	return i.ToGlobalConnectionRedshiftSshTunnelPtrOutputWithContext(context.Background())
}

func (i GlobalConnectionRedshiftSshTunnelArgs) ToGlobalConnectionRedshiftSshTunnelPtrOutputWithContext(ctx context.Context) GlobalConnectionRedshiftSshTunnelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionRedshiftSshTunnelOutput).ToGlobalConnectionRedshiftSshTunnelPtrOutputWithContext(ctx)
}

// GlobalConnectionRedshiftSshTunnelPtrInput is an input type that accepts GlobalConnectionRedshiftSshTunnelArgs, GlobalConnectionRedshiftSshTunnelPtr and GlobalConnectionRedshiftSshTunnelPtrOutput values.
// You can construct a concrete instance of `GlobalConnectionRedshiftSshTunnelPtrInput` via:
//
//	        GlobalConnectionRedshiftSshTunnelArgs{...}
//
//	or:
//
//	        nil
type GlobalConnectionRedshiftSshTunnelPtrInput interface {
	pulumi.Input

	ToGlobalConnectionRedshiftSshTunnelPtrOutput() GlobalConnectionRedshiftSshTunnelPtrOutput
	ToGlobalConnectionRedshiftSshTunnelPtrOutputWithContext(context.Context) GlobalConnectionRedshiftSshTunnelPtrOutput
}

type globalConnectionRedshiftSshTunnelPtrType GlobalConnectionRedshiftSshTunnelArgs

func GlobalConnectionRedshiftSshTunnelPtr(v *GlobalConnectionRedshiftSshTunnelArgs) GlobalConnectionRedshiftSshTunnelPtrInput {
	return (*globalConnectionRedshiftSshTunnelPtrType)(v)
}

func (*globalConnectionRedshiftSshTunnelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionRedshiftSshTunnel)(nil)).Elem()
}

func (i *globalConnectionRedshiftSshTunnelPtrType) ToGlobalConnectionRedshiftSshTunnelPtrOutput() GlobalConnectionRedshiftSshTunnelPtrOutput {
	return i.ToGlobalConnectionRedshiftSshTunnelPtrOutputWithContext(context.Background())
}

func (i *globalConnectionRedshiftSshTunnelPtrType) ToGlobalConnectionRedshiftSshTunnelPtrOutputWithContext(ctx context.Context) GlobalConnectionRedshiftSshTunnelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionRedshiftSshTunnelPtrOutput)
}

type GlobalConnectionRedshiftSshTunnelOutput struct{ *pulumi.OutputState }

func (GlobalConnectionRedshiftSshTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionRedshiftSshTunnel)(nil)).Elem()
}

func (o GlobalConnectionRedshiftSshTunnelOutput) ToGlobalConnectionRedshiftSshTunnelOutput() GlobalConnectionRedshiftSshTunnelOutput {
	return o
}

func (o GlobalConnectionRedshiftSshTunnelOutput) ToGlobalConnectionRedshiftSshTunnelOutputWithContext(ctx context.Context) GlobalConnectionRedshiftSshTunnelOutput {
	return o
}

func (o GlobalConnectionRedshiftSshTunnelOutput) ToGlobalConnectionRedshiftSshTunnelPtrOutput() GlobalConnectionRedshiftSshTunnelPtrOutput {
	return o.ToGlobalConnectionRedshiftSshTunnelPtrOutputWithContext(context.Background())
}

func (o GlobalConnectionRedshiftSshTunnelOutput) ToGlobalConnectionRedshiftSshTunnelPtrOutputWithContext(ctx context.Context) GlobalConnectionRedshiftSshTunnelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlobalConnectionRedshiftSshTunnel) *GlobalConnectionRedshiftSshTunnel {
		return &v
	}).(GlobalConnectionRedshiftSshTunnelPtrOutput)
}

// The hostname for the SSH tunnel.
func (o GlobalConnectionRedshiftSshTunnelOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionRedshiftSshTunnel) string { return v.Hostname }).(pulumi.StringOutput)
}

// The ID of the SSH tunnel connection.
func (o GlobalConnectionRedshiftSshTunnelOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionRedshiftSshTunnel) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The HTTP port for the SSH tunnel.
func (o GlobalConnectionRedshiftSshTunnelOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GlobalConnectionRedshiftSshTunnel) int { return v.Port }).(pulumi.IntOutput)
}

// The SSH public key generated to allow connecting via SSH tunnel.
func (o GlobalConnectionRedshiftSshTunnelOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionRedshiftSshTunnel) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The username to use for the SSH tunnel.
func (o GlobalConnectionRedshiftSshTunnelOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionRedshiftSshTunnel) string { return v.Username }).(pulumi.StringOutput)
}

type GlobalConnectionRedshiftSshTunnelPtrOutput struct{ *pulumi.OutputState }

func (GlobalConnectionRedshiftSshTunnelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionRedshiftSshTunnel)(nil)).Elem()
}

func (o GlobalConnectionRedshiftSshTunnelPtrOutput) ToGlobalConnectionRedshiftSshTunnelPtrOutput() GlobalConnectionRedshiftSshTunnelPtrOutput {
	return o
}

func (o GlobalConnectionRedshiftSshTunnelPtrOutput) ToGlobalConnectionRedshiftSshTunnelPtrOutputWithContext(ctx context.Context) GlobalConnectionRedshiftSshTunnelPtrOutput {
	return o
}

func (o GlobalConnectionRedshiftSshTunnelPtrOutput) Elem() GlobalConnectionRedshiftSshTunnelOutput {
	return o.ApplyT(func(v *GlobalConnectionRedshiftSshTunnel) GlobalConnectionRedshiftSshTunnel {
		if v != nil {
			return *v
		}
		var ret GlobalConnectionRedshiftSshTunnel
		return ret
	}).(GlobalConnectionRedshiftSshTunnelOutput)
}

// The hostname for the SSH tunnel.
func (o GlobalConnectionRedshiftSshTunnelPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionRedshiftSshTunnel) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The ID of the SSH tunnel connection.
func (o GlobalConnectionRedshiftSshTunnelPtrOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionRedshiftSshTunnel) *int {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.IntPtrOutput)
}

// The HTTP port for the SSH tunnel.
func (o GlobalConnectionRedshiftSshTunnelPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionRedshiftSshTunnel) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The SSH public key generated to allow connecting via SSH tunnel.
func (o GlobalConnectionRedshiftSshTunnelPtrOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionRedshiftSshTunnel) *string {
		if v == nil {
			return nil
		}
		return v.PublicKey
	}).(pulumi.StringPtrOutput)
}

// The username to use for the SSH tunnel.
func (o GlobalConnectionRedshiftSshTunnelPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionRedshiftSshTunnel) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type GlobalConnectionSnowflake struct {
	// The Snowflake account name
	Account string `pulumi:"account"`
	// Whether to allow Snowflake OAuth for the connection. If true, the `oauthClientId` and `oauthClientSecret` fields must be set
	AllowSso *bool `pulumi:"allowSso"`
	// If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (> 4 hours)
	ClientSessionKeepAlive *bool `pulumi:"clientSessionKeepAlive"`
	// The default database for the connection
	Database string `pulumi:"database"`
	// OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake
	OauthClientId *string `pulumi:"oauthClientId"`
	// OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake
	OauthClientSecret *string `pulumi:"oauthClientSecret"`
	// The Snowflake role to use when running queries on the connection
	Role *string `pulumi:"role"`
	// The default Snowflake Warehouse to use for the connection
	Warehouse string `pulumi:"warehouse"`
}

// GlobalConnectionSnowflakeInput is an input type that accepts GlobalConnectionSnowflakeArgs and GlobalConnectionSnowflakeOutput values.
// You can construct a concrete instance of `GlobalConnectionSnowflakeInput` via:
//
//	GlobalConnectionSnowflakeArgs{...}
type GlobalConnectionSnowflakeInput interface {
	pulumi.Input

	ToGlobalConnectionSnowflakeOutput() GlobalConnectionSnowflakeOutput
	ToGlobalConnectionSnowflakeOutputWithContext(context.Context) GlobalConnectionSnowflakeOutput
}

type GlobalConnectionSnowflakeArgs struct {
	// The Snowflake account name
	Account pulumi.StringInput `pulumi:"account"`
	// Whether to allow Snowflake OAuth for the connection. If true, the `oauthClientId` and `oauthClientSecret` fields must be set
	AllowSso pulumi.BoolPtrInput `pulumi:"allowSso"`
	// If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (> 4 hours)
	ClientSessionKeepAlive pulumi.BoolPtrInput `pulumi:"clientSessionKeepAlive"`
	// The default database for the connection
	Database pulumi.StringInput `pulumi:"database"`
	// OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake
	OauthClientId pulumi.StringPtrInput `pulumi:"oauthClientId"`
	// OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake
	OauthClientSecret pulumi.StringPtrInput `pulumi:"oauthClientSecret"`
	// The Snowflake role to use when running queries on the connection
	Role pulumi.StringPtrInput `pulumi:"role"`
	// The default Snowflake Warehouse to use for the connection
	Warehouse pulumi.StringInput `pulumi:"warehouse"`
}

func (GlobalConnectionSnowflakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionSnowflake)(nil)).Elem()
}

func (i GlobalConnectionSnowflakeArgs) ToGlobalConnectionSnowflakeOutput() GlobalConnectionSnowflakeOutput {
	return i.ToGlobalConnectionSnowflakeOutputWithContext(context.Background())
}

func (i GlobalConnectionSnowflakeArgs) ToGlobalConnectionSnowflakeOutputWithContext(ctx context.Context) GlobalConnectionSnowflakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionSnowflakeOutput)
}

func (i GlobalConnectionSnowflakeArgs) ToGlobalConnectionSnowflakePtrOutput() GlobalConnectionSnowflakePtrOutput {
	return i.ToGlobalConnectionSnowflakePtrOutputWithContext(context.Background())
}

func (i GlobalConnectionSnowflakeArgs) ToGlobalConnectionSnowflakePtrOutputWithContext(ctx context.Context) GlobalConnectionSnowflakePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionSnowflakeOutput).ToGlobalConnectionSnowflakePtrOutputWithContext(ctx)
}

// GlobalConnectionSnowflakePtrInput is an input type that accepts GlobalConnectionSnowflakeArgs, GlobalConnectionSnowflakePtr and GlobalConnectionSnowflakePtrOutput values.
// You can construct a concrete instance of `GlobalConnectionSnowflakePtrInput` via:
//
//	        GlobalConnectionSnowflakeArgs{...}
//
//	or:
//
//	        nil
type GlobalConnectionSnowflakePtrInput interface {
	pulumi.Input

	ToGlobalConnectionSnowflakePtrOutput() GlobalConnectionSnowflakePtrOutput
	ToGlobalConnectionSnowflakePtrOutputWithContext(context.Context) GlobalConnectionSnowflakePtrOutput
}

type globalConnectionSnowflakePtrType GlobalConnectionSnowflakeArgs

func GlobalConnectionSnowflakePtr(v *GlobalConnectionSnowflakeArgs) GlobalConnectionSnowflakePtrInput {
	return (*globalConnectionSnowflakePtrType)(v)
}

func (*globalConnectionSnowflakePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionSnowflake)(nil)).Elem()
}

func (i *globalConnectionSnowflakePtrType) ToGlobalConnectionSnowflakePtrOutput() GlobalConnectionSnowflakePtrOutput {
	return i.ToGlobalConnectionSnowflakePtrOutputWithContext(context.Background())
}

func (i *globalConnectionSnowflakePtrType) ToGlobalConnectionSnowflakePtrOutputWithContext(ctx context.Context) GlobalConnectionSnowflakePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionSnowflakePtrOutput)
}

type GlobalConnectionSnowflakeOutput struct{ *pulumi.OutputState }

func (GlobalConnectionSnowflakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionSnowflake)(nil)).Elem()
}

func (o GlobalConnectionSnowflakeOutput) ToGlobalConnectionSnowflakeOutput() GlobalConnectionSnowflakeOutput {
	return o
}

func (o GlobalConnectionSnowflakeOutput) ToGlobalConnectionSnowflakeOutputWithContext(ctx context.Context) GlobalConnectionSnowflakeOutput {
	return o
}

func (o GlobalConnectionSnowflakeOutput) ToGlobalConnectionSnowflakePtrOutput() GlobalConnectionSnowflakePtrOutput {
	return o.ToGlobalConnectionSnowflakePtrOutputWithContext(context.Background())
}

func (o GlobalConnectionSnowflakeOutput) ToGlobalConnectionSnowflakePtrOutputWithContext(ctx context.Context) GlobalConnectionSnowflakePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlobalConnectionSnowflake) *GlobalConnectionSnowflake {
		return &v
	}).(GlobalConnectionSnowflakePtrOutput)
}

// The Snowflake account name
func (o GlobalConnectionSnowflakeOutput) Account() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionSnowflake) string { return v.Account }).(pulumi.StringOutput)
}

// Whether to allow Snowflake OAuth for the connection. If true, the `oauthClientId` and `oauthClientSecret` fields must be set
func (o GlobalConnectionSnowflakeOutput) AllowSso() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GlobalConnectionSnowflake) *bool { return v.AllowSso }).(pulumi.BoolPtrOutput)
}

// If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (> 4 hours)
func (o GlobalConnectionSnowflakeOutput) ClientSessionKeepAlive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GlobalConnectionSnowflake) *bool { return v.ClientSessionKeepAlive }).(pulumi.BoolPtrOutput)
}

// The default database for the connection
func (o GlobalConnectionSnowflakeOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionSnowflake) string { return v.Database }).(pulumi.StringOutput)
}

// OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake
func (o GlobalConnectionSnowflakeOutput) OauthClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionSnowflake) *string { return v.OauthClientId }).(pulumi.StringPtrOutput)
}

// OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake
func (o GlobalConnectionSnowflakeOutput) OauthClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionSnowflake) *string { return v.OauthClientSecret }).(pulumi.StringPtrOutput)
}

// The Snowflake role to use when running queries on the connection
func (o GlobalConnectionSnowflakeOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionSnowflake) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// The default Snowflake Warehouse to use for the connection
func (o GlobalConnectionSnowflakeOutput) Warehouse() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionSnowflake) string { return v.Warehouse }).(pulumi.StringOutput)
}

type GlobalConnectionSnowflakePtrOutput struct{ *pulumi.OutputState }

func (GlobalConnectionSnowflakePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionSnowflake)(nil)).Elem()
}

func (o GlobalConnectionSnowflakePtrOutput) ToGlobalConnectionSnowflakePtrOutput() GlobalConnectionSnowflakePtrOutput {
	return o
}

func (o GlobalConnectionSnowflakePtrOutput) ToGlobalConnectionSnowflakePtrOutputWithContext(ctx context.Context) GlobalConnectionSnowflakePtrOutput {
	return o
}

func (o GlobalConnectionSnowflakePtrOutput) Elem() GlobalConnectionSnowflakeOutput {
	return o.ApplyT(func(v *GlobalConnectionSnowflake) GlobalConnectionSnowflake {
		if v != nil {
			return *v
		}
		var ret GlobalConnectionSnowflake
		return ret
	}).(GlobalConnectionSnowflakeOutput)
}

// The Snowflake account name
func (o GlobalConnectionSnowflakePtrOutput) Account() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.Account
	}).(pulumi.StringPtrOutput)
}

// Whether to allow Snowflake OAuth for the connection. If true, the `oauthClientId` and `oauthClientSecret` fields must be set
func (o GlobalConnectionSnowflakePtrOutput) AllowSso() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSnowflake) *bool {
		if v == nil {
			return nil
		}
		return v.AllowSso
	}).(pulumi.BoolPtrOutput)
}

// If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (> 4 hours)
func (o GlobalConnectionSnowflakePtrOutput) ClientSessionKeepAlive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSnowflake) *bool {
		if v == nil {
			return nil
		}
		return v.ClientSessionKeepAlive
	}).(pulumi.BoolPtrOutput)
}

// The default database for the connection
func (o GlobalConnectionSnowflakePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake
func (o GlobalConnectionSnowflakePtrOutput) OauthClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSnowflake) *string {
		if v == nil {
			return nil
		}
		return v.OauthClientId
	}).(pulumi.StringPtrOutput)
}

// OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake
func (o GlobalConnectionSnowflakePtrOutput) OauthClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSnowflake) *string {
		if v == nil {
			return nil
		}
		return v.OauthClientSecret
	}).(pulumi.StringPtrOutput)
}

// The Snowflake role to use when running queries on the connection
func (o GlobalConnectionSnowflakePtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSnowflake) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// The default Snowflake Warehouse to use for the connection
func (o GlobalConnectionSnowflakePtrOutput) Warehouse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.Warehouse
	}).(pulumi.StringPtrOutput)
}

type GlobalConnectionStarburst struct {
	// The hostname of the account to connect to.
	Host string `pulumi:"host"`
	// The authentication method. Only LDAP for now.
	Method *string `pulumi:"method"`
	// The port to connect to for this connection. Default=443
	Port *int `pulumi:"port"`
}

// GlobalConnectionStarburstInput is an input type that accepts GlobalConnectionStarburstArgs and GlobalConnectionStarburstOutput values.
// You can construct a concrete instance of `GlobalConnectionStarburstInput` via:
//
//	GlobalConnectionStarburstArgs{...}
type GlobalConnectionStarburstInput interface {
	pulumi.Input

	ToGlobalConnectionStarburstOutput() GlobalConnectionStarburstOutput
	ToGlobalConnectionStarburstOutputWithContext(context.Context) GlobalConnectionStarburstOutput
}

type GlobalConnectionStarburstArgs struct {
	// The hostname of the account to connect to.
	Host pulumi.StringInput `pulumi:"host"`
	// The authentication method. Only LDAP for now.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// The port to connect to for this connection. Default=443
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (GlobalConnectionStarburstArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionStarburst)(nil)).Elem()
}

func (i GlobalConnectionStarburstArgs) ToGlobalConnectionStarburstOutput() GlobalConnectionStarburstOutput {
	return i.ToGlobalConnectionStarburstOutputWithContext(context.Background())
}

func (i GlobalConnectionStarburstArgs) ToGlobalConnectionStarburstOutputWithContext(ctx context.Context) GlobalConnectionStarburstOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionStarburstOutput)
}

func (i GlobalConnectionStarburstArgs) ToGlobalConnectionStarburstPtrOutput() GlobalConnectionStarburstPtrOutput {
	return i.ToGlobalConnectionStarburstPtrOutputWithContext(context.Background())
}

func (i GlobalConnectionStarburstArgs) ToGlobalConnectionStarburstPtrOutputWithContext(ctx context.Context) GlobalConnectionStarburstPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionStarburstOutput).ToGlobalConnectionStarburstPtrOutputWithContext(ctx)
}

// GlobalConnectionStarburstPtrInput is an input type that accepts GlobalConnectionStarburstArgs, GlobalConnectionStarburstPtr and GlobalConnectionStarburstPtrOutput values.
// You can construct a concrete instance of `GlobalConnectionStarburstPtrInput` via:
//
//	        GlobalConnectionStarburstArgs{...}
//
//	or:
//
//	        nil
type GlobalConnectionStarburstPtrInput interface {
	pulumi.Input

	ToGlobalConnectionStarburstPtrOutput() GlobalConnectionStarburstPtrOutput
	ToGlobalConnectionStarburstPtrOutputWithContext(context.Context) GlobalConnectionStarburstPtrOutput
}

type globalConnectionStarburstPtrType GlobalConnectionStarburstArgs

func GlobalConnectionStarburstPtr(v *GlobalConnectionStarburstArgs) GlobalConnectionStarburstPtrInput {
	return (*globalConnectionStarburstPtrType)(v)
}

func (*globalConnectionStarburstPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionStarburst)(nil)).Elem()
}

func (i *globalConnectionStarburstPtrType) ToGlobalConnectionStarburstPtrOutput() GlobalConnectionStarburstPtrOutput {
	return i.ToGlobalConnectionStarburstPtrOutputWithContext(context.Background())
}

func (i *globalConnectionStarburstPtrType) ToGlobalConnectionStarburstPtrOutputWithContext(ctx context.Context) GlobalConnectionStarburstPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionStarburstPtrOutput)
}

type GlobalConnectionStarburstOutput struct{ *pulumi.OutputState }

func (GlobalConnectionStarburstOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionStarburst)(nil)).Elem()
}

func (o GlobalConnectionStarburstOutput) ToGlobalConnectionStarburstOutput() GlobalConnectionStarburstOutput {
	return o
}

func (o GlobalConnectionStarburstOutput) ToGlobalConnectionStarburstOutputWithContext(ctx context.Context) GlobalConnectionStarburstOutput {
	return o
}

func (o GlobalConnectionStarburstOutput) ToGlobalConnectionStarburstPtrOutput() GlobalConnectionStarburstPtrOutput {
	return o.ToGlobalConnectionStarburstPtrOutputWithContext(context.Background())
}

func (o GlobalConnectionStarburstOutput) ToGlobalConnectionStarburstPtrOutputWithContext(ctx context.Context) GlobalConnectionStarburstPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlobalConnectionStarburst) *GlobalConnectionStarburst {
		return &v
	}).(GlobalConnectionStarburstPtrOutput)
}

// The hostname of the account to connect to.
func (o GlobalConnectionStarburstOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionStarburst) string { return v.Host }).(pulumi.StringOutput)
}

// The authentication method. Only LDAP for now.
func (o GlobalConnectionStarburstOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionStarburst) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The port to connect to for this connection. Default=443
func (o GlobalConnectionStarburstOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionStarburst) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type GlobalConnectionStarburstPtrOutput struct{ *pulumi.OutputState }

func (GlobalConnectionStarburstPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionStarburst)(nil)).Elem()
}

func (o GlobalConnectionStarburstPtrOutput) ToGlobalConnectionStarburstPtrOutput() GlobalConnectionStarburstPtrOutput {
	return o
}

func (o GlobalConnectionStarburstPtrOutput) ToGlobalConnectionStarburstPtrOutputWithContext(ctx context.Context) GlobalConnectionStarburstPtrOutput {
	return o
}

func (o GlobalConnectionStarburstPtrOutput) Elem() GlobalConnectionStarburstOutput {
	return o.ApplyT(func(v *GlobalConnectionStarburst) GlobalConnectionStarburst {
		if v != nil {
			return *v
		}
		var ret GlobalConnectionStarburst
		return ret
	}).(GlobalConnectionStarburstOutput)
}

// The hostname of the account to connect to.
func (o GlobalConnectionStarburstPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionStarburst) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The authentication method. Only LDAP for now.
func (o GlobalConnectionStarburstPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionStarburst) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// The port to connect to for this connection. Default=443
func (o GlobalConnectionStarburstPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionStarburst) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

type GlobalConnectionSynapse struct {
	// The database to connect to for this connection.
	Database string `pulumi:"database"`
	// The server hostname.
	Host string `pulumi:"host"`
	// The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
	LoginTimeout *int `pulumi:"loginTimeout"`
	// The port to connect to for this connection. Default=1433
	Port *int `pulumi:"port"`
	// The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
	QueryTimeout *int `pulumi:"queryTimeout"`
	// The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
	Retries *int `pulumi:"retries"`
}

// GlobalConnectionSynapseInput is an input type that accepts GlobalConnectionSynapseArgs and GlobalConnectionSynapseOutput values.
// You can construct a concrete instance of `GlobalConnectionSynapseInput` via:
//
//	GlobalConnectionSynapseArgs{...}
type GlobalConnectionSynapseInput interface {
	pulumi.Input

	ToGlobalConnectionSynapseOutput() GlobalConnectionSynapseOutput
	ToGlobalConnectionSynapseOutputWithContext(context.Context) GlobalConnectionSynapseOutput
}

type GlobalConnectionSynapseArgs struct {
	// The database to connect to for this connection.
	Database pulumi.StringInput `pulumi:"database"`
	// The server hostname.
	Host pulumi.StringInput `pulumi:"host"`
	// The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
	LoginTimeout pulumi.IntPtrInput `pulumi:"loginTimeout"`
	// The port to connect to for this connection. Default=1433
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
	QueryTimeout pulumi.IntPtrInput `pulumi:"queryTimeout"`
	// The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
	Retries pulumi.IntPtrInput `pulumi:"retries"`
}

func (GlobalConnectionSynapseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionSynapse)(nil)).Elem()
}

func (i GlobalConnectionSynapseArgs) ToGlobalConnectionSynapseOutput() GlobalConnectionSynapseOutput {
	return i.ToGlobalConnectionSynapseOutputWithContext(context.Background())
}

func (i GlobalConnectionSynapseArgs) ToGlobalConnectionSynapseOutputWithContext(ctx context.Context) GlobalConnectionSynapseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionSynapseOutput)
}

func (i GlobalConnectionSynapseArgs) ToGlobalConnectionSynapsePtrOutput() GlobalConnectionSynapsePtrOutput {
	return i.ToGlobalConnectionSynapsePtrOutputWithContext(context.Background())
}

func (i GlobalConnectionSynapseArgs) ToGlobalConnectionSynapsePtrOutputWithContext(ctx context.Context) GlobalConnectionSynapsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionSynapseOutput).ToGlobalConnectionSynapsePtrOutputWithContext(ctx)
}

// GlobalConnectionSynapsePtrInput is an input type that accepts GlobalConnectionSynapseArgs, GlobalConnectionSynapsePtr and GlobalConnectionSynapsePtrOutput values.
// You can construct a concrete instance of `GlobalConnectionSynapsePtrInput` via:
//
//	        GlobalConnectionSynapseArgs{...}
//
//	or:
//
//	        nil
type GlobalConnectionSynapsePtrInput interface {
	pulumi.Input

	ToGlobalConnectionSynapsePtrOutput() GlobalConnectionSynapsePtrOutput
	ToGlobalConnectionSynapsePtrOutputWithContext(context.Context) GlobalConnectionSynapsePtrOutput
}

type globalConnectionSynapsePtrType GlobalConnectionSynapseArgs

func GlobalConnectionSynapsePtr(v *GlobalConnectionSynapseArgs) GlobalConnectionSynapsePtrInput {
	return (*globalConnectionSynapsePtrType)(v)
}

func (*globalConnectionSynapsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionSynapse)(nil)).Elem()
}

func (i *globalConnectionSynapsePtrType) ToGlobalConnectionSynapsePtrOutput() GlobalConnectionSynapsePtrOutput {
	return i.ToGlobalConnectionSynapsePtrOutputWithContext(context.Background())
}

func (i *globalConnectionSynapsePtrType) ToGlobalConnectionSynapsePtrOutputWithContext(ctx context.Context) GlobalConnectionSynapsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionSynapsePtrOutput)
}

type GlobalConnectionSynapseOutput struct{ *pulumi.OutputState }

func (GlobalConnectionSynapseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionSynapse)(nil)).Elem()
}

func (o GlobalConnectionSynapseOutput) ToGlobalConnectionSynapseOutput() GlobalConnectionSynapseOutput {
	return o
}

func (o GlobalConnectionSynapseOutput) ToGlobalConnectionSynapseOutputWithContext(ctx context.Context) GlobalConnectionSynapseOutput {
	return o
}

func (o GlobalConnectionSynapseOutput) ToGlobalConnectionSynapsePtrOutput() GlobalConnectionSynapsePtrOutput {
	return o.ToGlobalConnectionSynapsePtrOutputWithContext(context.Background())
}

func (o GlobalConnectionSynapseOutput) ToGlobalConnectionSynapsePtrOutputWithContext(ctx context.Context) GlobalConnectionSynapsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlobalConnectionSynapse) *GlobalConnectionSynapse {
		return &v
	}).(GlobalConnectionSynapsePtrOutput)
}

// The database to connect to for this connection.
func (o GlobalConnectionSynapseOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionSynapse) string { return v.Database }).(pulumi.StringOutput)
}

// The server hostname.
func (o GlobalConnectionSynapseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionSynapse) string { return v.Host }).(pulumi.StringOutput)
}

// The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
func (o GlobalConnectionSynapseOutput) LoginTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionSynapse) *int { return v.LoginTimeout }).(pulumi.IntPtrOutput)
}

// The port to connect to for this connection. Default=1433
func (o GlobalConnectionSynapseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionSynapse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
func (o GlobalConnectionSynapseOutput) QueryTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionSynapse) *int { return v.QueryTimeout }).(pulumi.IntPtrOutput)
}

// The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
func (o GlobalConnectionSynapseOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionSynapse) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

type GlobalConnectionSynapsePtrOutput struct{ *pulumi.OutputState }

func (GlobalConnectionSynapsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionSynapse)(nil)).Elem()
}

func (o GlobalConnectionSynapsePtrOutput) ToGlobalConnectionSynapsePtrOutput() GlobalConnectionSynapsePtrOutput {
	return o
}

func (o GlobalConnectionSynapsePtrOutput) ToGlobalConnectionSynapsePtrOutputWithContext(ctx context.Context) GlobalConnectionSynapsePtrOutput {
	return o
}

func (o GlobalConnectionSynapsePtrOutput) Elem() GlobalConnectionSynapseOutput {
	return o.ApplyT(func(v *GlobalConnectionSynapse) GlobalConnectionSynapse {
		if v != nil {
			return *v
		}
		var ret GlobalConnectionSynapse
		return ret
	}).(GlobalConnectionSynapseOutput)
}

// The database to connect to for this connection.
func (o GlobalConnectionSynapsePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSynapse) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The server hostname.
func (o GlobalConnectionSynapsePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSynapse) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
func (o GlobalConnectionSynapsePtrOutput) LoginTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSynapse) *int {
		if v == nil {
			return nil
		}
		return v.LoginTimeout
	}).(pulumi.IntPtrOutput)
}

// The port to connect to for this connection. Default=1433
func (o GlobalConnectionSynapsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSynapse) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
func (o GlobalConnectionSynapsePtrOutput) QueryTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSynapse) *int {
		if v == nil {
			return nil
		}
		return v.QueryTimeout
	}).(pulumi.IntPtrOutput)
}

// The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
func (o GlobalConnectionSynapsePtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSynapse) *int {
		if v == nil {
			return nil
		}
		return v.Retries
	}).(pulumi.IntPtrOutput)
}

type GroupGroupPermission struct {
	// Whether access should be provided for all projects or not.
	AllProjects bool `pulumi:"allProjects"`
	// Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
	PermissionSet string `pulumi:"permissionSet"`
	// Project ID to apply this permission to for this group.
	ProjectId *int `pulumi:"projectId"`
	// What types of environments to apply Write permissions to.
	// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
	// The values allowed are `all`, `development`, `staging`, `production` and `other`.
	// Not setting a value is the same as selecting `all`.
	// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
	WritableEnvironmentCategories []string `pulumi:"writableEnvironmentCategories"`
}

// GroupGroupPermissionInput is an input type that accepts GroupGroupPermissionArgs and GroupGroupPermissionOutput values.
// You can construct a concrete instance of `GroupGroupPermissionInput` via:
//
//	GroupGroupPermissionArgs{...}
type GroupGroupPermissionInput interface {
	pulumi.Input

	ToGroupGroupPermissionOutput() GroupGroupPermissionOutput
	ToGroupGroupPermissionOutputWithContext(context.Context) GroupGroupPermissionOutput
}

type GroupGroupPermissionArgs struct {
	// Whether access should be provided for all projects or not.
	AllProjects pulumi.BoolInput `pulumi:"allProjects"`
	// Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
	PermissionSet pulumi.StringInput `pulumi:"permissionSet"`
	// Project ID to apply this permission to for this group.
	ProjectId pulumi.IntPtrInput `pulumi:"projectId"`
	// What types of environments to apply Write permissions to.
	// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
	// The values allowed are `all`, `development`, `staging`, `production` and `other`.
	// Not setting a value is the same as selecting `all`.
	// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
	WritableEnvironmentCategories pulumi.StringArrayInput `pulumi:"writableEnvironmentCategories"`
}

func (GroupGroupPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupGroupPermission)(nil)).Elem()
}

func (i GroupGroupPermissionArgs) ToGroupGroupPermissionOutput() GroupGroupPermissionOutput {
	return i.ToGroupGroupPermissionOutputWithContext(context.Background())
}

func (i GroupGroupPermissionArgs) ToGroupGroupPermissionOutputWithContext(ctx context.Context) GroupGroupPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupGroupPermissionOutput)
}

// GroupGroupPermissionArrayInput is an input type that accepts GroupGroupPermissionArray and GroupGroupPermissionArrayOutput values.
// You can construct a concrete instance of `GroupGroupPermissionArrayInput` via:
//
//	GroupGroupPermissionArray{ GroupGroupPermissionArgs{...} }
type GroupGroupPermissionArrayInput interface {
	pulumi.Input

	ToGroupGroupPermissionArrayOutput() GroupGroupPermissionArrayOutput
	ToGroupGroupPermissionArrayOutputWithContext(context.Context) GroupGroupPermissionArrayOutput
}

type GroupGroupPermissionArray []GroupGroupPermissionInput

func (GroupGroupPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupGroupPermission)(nil)).Elem()
}

func (i GroupGroupPermissionArray) ToGroupGroupPermissionArrayOutput() GroupGroupPermissionArrayOutput {
	return i.ToGroupGroupPermissionArrayOutputWithContext(context.Background())
}

func (i GroupGroupPermissionArray) ToGroupGroupPermissionArrayOutputWithContext(ctx context.Context) GroupGroupPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupGroupPermissionArrayOutput)
}

type GroupGroupPermissionOutput struct{ *pulumi.OutputState }

func (GroupGroupPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupGroupPermission)(nil)).Elem()
}

func (o GroupGroupPermissionOutput) ToGroupGroupPermissionOutput() GroupGroupPermissionOutput {
	return o
}

func (o GroupGroupPermissionOutput) ToGroupGroupPermissionOutputWithContext(ctx context.Context) GroupGroupPermissionOutput {
	return o
}

// Whether access should be provided for all projects or not.
func (o GroupGroupPermissionOutput) AllProjects() pulumi.BoolOutput {
	return o.ApplyT(func(v GroupGroupPermission) bool { return v.AllProjects }).(pulumi.BoolOutput)
}

// Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
func (o GroupGroupPermissionOutput) PermissionSet() pulumi.StringOutput {
	return o.ApplyT(func(v GroupGroupPermission) string { return v.PermissionSet }).(pulumi.StringOutput)
}

// Project ID to apply this permission to for this group.
func (o GroupGroupPermissionOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupGroupPermission) *int { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// What types of environments to apply Write permissions to.
// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
// The values allowed are `all`, `development`, `staging`, `production` and `other`.
// Not setting a value is the same as selecting `all`.
// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
func (o GroupGroupPermissionOutput) WritableEnvironmentCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupGroupPermission) []string { return v.WritableEnvironmentCategories }).(pulumi.StringArrayOutput)
}

type GroupGroupPermissionArrayOutput struct{ *pulumi.OutputState }

func (GroupGroupPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupGroupPermission)(nil)).Elem()
}

func (o GroupGroupPermissionArrayOutput) ToGroupGroupPermissionArrayOutput() GroupGroupPermissionArrayOutput {
	return o
}

func (o GroupGroupPermissionArrayOutput) ToGroupGroupPermissionArrayOutputWithContext(ctx context.Context) GroupGroupPermissionArrayOutput {
	return o
}

func (o GroupGroupPermissionArrayOutput) Index(i pulumi.IntInput) GroupGroupPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupGroupPermission {
		return vs[0].([]GroupGroupPermission)[vs[1].(int)]
	}).(GroupGroupPermissionOutput)
}

type GroupPartialPermissionsGroupPermission struct {
	// Whether access should be provided for all projects or not.
	AllProjects bool `pulumi:"allProjects"`
	// Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
	PermissionSet string `pulumi:"permissionSet"`
	// Project ID to apply this permission to for this group.
	ProjectId *int `pulumi:"projectId"`
	// What types of environments to apply Write permissions to.
	// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
	// The values allowed are `all`, `development`, `staging`, `production` and `other`.
	// Not setting a value is the same as selecting `all`.
	// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
	WritableEnvironmentCategories []string `pulumi:"writableEnvironmentCategories"`
}

// GroupPartialPermissionsGroupPermissionInput is an input type that accepts GroupPartialPermissionsGroupPermissionArgs and GroupPartialPermissionsGroupPermissionOutput values.
// You can construct a concrete instance of `GroupPartialPermissionsGroupPermissionInput` via:
//
//	GroupPartialPermissionsGroupPermissionArgs{...}
type GroupPartialPermissionsGroupPermissionInput interface {
	pulumi.Input

	ToGroupPartialPermissionsGroupPermissionOutput() GroupPartialPermissionsGroupPermissionOutput
	ToGroupPartialPermissionsGroupPermissionOutputWithContext(context.Context) GroupPartialPermissionsGroupPermissionOutput
}

type GroupPartialPermissionsGroupPermissionArgs struct {
	// Whether access should be provided for all projects or not.
	AllProjects pulumi.BoolInput `pulumi:"allProjects"`
	// Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
	PermissionSet pulumi.StringInput `pulumi:"permissionSet"`
	// Project ID to apply this permission to for this group.
	ProjectId pulumi.IntPtrInput `pulumi:"projectId"`
	// What types of environments to apply Write permissions to.
	// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
	// The values allowed are `all`, `development`, `staging`, `production` and `other`.
	// Not setting a value is the same as selecting `all`.
	// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
	WritableEnvironmentCategories pulumi.StringArrayInput `pulumi:"writableEnvironmentCategories"`
}

func (GroupPartialPermissionsGroupPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPartialPermissionsGroupPermission)(nil)).Elem()
}

func (i GroupPartialPermissionsGroupPermissionArgs) ToGroupPartialPermissionsGroupPermissionOutput() GroupPartialPermissionsGroupPermissionOutput {
	return i.ToGroupPartialPermissionsGroupPermissionOutputWithContext(context.Background())
}

func (i GroupPartialPermissionsGroupPermissionArgs) ToGroupPartialPermissionsGroupPermissionOutputWithContext(ctx context.Context) GroupPartialPermissionsGroupPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPartialPermissionsGroupPermissionOutput)
}

// GroupPartialPermissionsGroupPermissionArrayInput is an input type that accepts GroupPartialPermissionsGroupPermissionArray and GroupPartialPermissionsGroupPermissionArrayOutput values.
// You can construct a concrete instance of `GroupPartialPermissionsGroupPermissionArrayInput` via:
//
//	GroupPartialPermissionsGroupPermissionArray{ GroupPartialPermissionsGroupPermissionArgs{...} }
type GroupPartialPermissionsGroupPermissionArrayInput interface {
	pulumi.Input

	ToGroupPartialPermissionsGroupPermissionArrayOutput() GroupPartialPermissionsGroupPermissionArrayOutput
	ToGroupPartialPermissionsGroupPermissionArrayOutputWithContext(context.Context) GroupPartialPermissionsGroupPermissionArrayOutput
}

type GroupPartialPermissionsGroupPermissionArray []GroupPartialPermissionsGroupPermissionInput

func (GroupPartialPermissionsGroupPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupPartialPermissionsGroupPermission)(nil)).Elem()
}

func (i GroupPartialPermissionsGroupPermissionArray) ToGroupPartialPermissionsGroupPermissionArrayOutput() GroupPartialPermissionsGroupPermissionArrayOutput {
	return i.ToGroupPartialPermissionsGroupPermissionArrayOutputWithContext(context.Background())
}

func (i GroupPartialPermissionsGroupPermissionArray) ToGroupPartialPermissionsGroupPermissionArrayOutputWithContext(ctx context.Context) GroupPartialPermissionsGroupPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPartialPermissionsGroupPermissionArrayOutput)
}

type GroupPartialPermissionsGroupPermissionOutput struct{ *pulumi.OutputState }

func (GroupPartialPermissionsGroupPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPartialPermissionsGroupPermission)(nil)).Elem()
}

func (o GroupPartialPermissionsGroupPermissionOutput) ToGroupPartialPermissionsGroupPermissionOutput() GroupPartialPermissionsGroupPermissionOutput {
	return o
}

func (o GroupPartialPermissionsGroupPermissionOutput) ToGroupPartialPermissionsGroupPermissionOutputWithContext(ctx context.Context) GroupPartialPermissionsGroupPermissionOutput {
	return o
}

// Whether access should be provided for all projects or not.
func (o GroupPartialPermissionsGroupPermissionOutput) AllProjects() pulumi.BoolOutput {
	return o.ApplyT(func(v GroupPartialPermissionsGroupPermission) bool { return v.AllProjects }).(pulumi.BoolOutput)
}

// Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
func (o GroupPartialPermissionsGroupPermissionOutput) PermissionSet() pulumi.StringOutput {
	return o.ApplyT(func(v GroupPartialPermissionsGroupPermission) string { return v.PermissionSet }).(pulumi.StringOutput)
}

// Project ID to apply this permission to for this group.
func (o GroupPartialPermissionsGroupPermissionOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupPartialPermissionsGroupPermission) *int { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// What types of environments to apply Write permissions to.
// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
// The values allowed are `all`, `development`, `staging`, `production` and `other`.
// Not setting a value is the same as selecting `all`.
// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
func (o GroupPartialPermissionsGroupPermissionOutput) WritableEnvironmentCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupPartialPermissionsGroupPermission) []string { return v.WritableEnvironmentCategories }).(pulumi.StringArrayOutput)
}

type GroupPartialPermissionsGroupPermissionArrayOutput struct{ *pulumi.OutputState }

func (GroupPartialPermissionsGroupPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupPartialPermissionsGroupPermission)(nil)).Elem()
}

func (o GroupPartialPermissionsGroupPermissionArrayOutput) ToGroupPartialPermissionsGroupPermissionArrayOutput() GroupPartialPermissionsGroupPermissionArrayOutput {
	return o
}

func (o GroupPartialPermissionsGroupPermissionArrayOutput) ToGroupPartialPermissionsGroupPermissionArrayOutputWithContext(ctx context.Context) GroupPartialPermissionsGroupPermissionArrayOutput {
	return o
}

func (o GroupPartialPermissionsGroupPermissionArrayOutput) Index(i pulumi.IntInput) GroupPartialPermissionsGroupPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupPartialPermissionsGroupPermission {
		return vs[0].([]GroupPartialPermissionsGroupPermission)[vs[1].(int)]
	}).(GroupPartialPermissionsGroupPermissionOutput)
}

type JobJobCompletionTriggerCondition struct {
	// The ID of the job that would trigger this job after completion.
	JobId int `pulumi:"jobId"`
	// The ID of the project where the trigger job is running in.
	ProjectId int `pulumi:"projectId"`
	// List of statuses to trigger the job on. Possible values are `success`, `error` and `canceled`.
	Statuses []string `pulumi:"statuses"`
}

// JobJobCompletionTriggerConditionInput is an input type that accepts JobJobCompletionTriggerConditionArgs and JobJobCompletionTriggerConditionOutput values.
// You can construct a concrete instance of `JobJobCompletionTriggerConditionInput` via:
//
//	JobJobCompletionTriggerConditionArgs{...}
type JobJobCompletionTriggerConditionInput interface {
	pulumi.Input

	ToJobJobCompletionTriggerConditionOutput() JobJobCompletionTriggerConditionOutput
	ToJobJobCompletionTriggerConditionOutputWithContext(context.Context) JobJobCompletionTriggerConditionOutput
}

type JobJobCompletionTriggerConditionArgs struct {
	// The ID of the job that would trigger this job after completion.
	JobId pulumi.IntInput `pulumi:"jobId"`
	// The ID of the project where the trigger job is running in.
	ProjectId pulumi.IntInput `pulumi:"projectId"`
	// List of statuses to trigger the job on. Possible values are `success`, `error` and `canceled`.
	Statuses pulumi.StringArrayInput `pulumi:"statuses"`
}

func (JobJobCompletionTriggerConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobJobCompletionTriggerCondition)(nil)).Elem()
}

func (i JobJobCompletionTriggerConditionArgs) ToJobJobCompletionTriggerConditionOutput() JobJobCompletionTriggerConditionOutput {
	return i.ToJobJobCompletionTriggerConditionOutputWithContext(context.Background())
}

func (i JobJobCompletionTriggerConditionArgs) ToJobJobCompletionTriggerConditionOutputWithContext(ctx context.Context) JobJobCompletionTriggerConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobJobCompletionTriggerConditionOutput)
}

func (i JobJobCompletionTriggerConditionArgs) ToJobJobCompletionTriggerConditionPtrOutput() JobJobCompletionTriggerConditionPtrOutput {
	return i.ToJobJobCompletionTriggerConditionPtrOutputWithContext(context.Background())
}

func (i JobJobCompletionTriggerConditionArgs) ToJobJobCompletionTriggerConditionPtrOutputWithContext(ctx context.Context) JobJobCompletionTriggerConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobJobCompletionTriggerConditionOutput).ToJobJobCompletionTriggerConditionPtrOutputWithContext(ctx)
}

// JobJobCompletionTriggerConditionPtrInput is an input type that accepts JobJobCompletionTriggerConditionArgs, JobJobCompletionTriggerConditionPtr and JobJobCompletionTriggerConditionPtrOutput values.
// You can construct a concrete instance of `JobJobCompletionTriggerConditionPtrInput` via:
//
//	        JobJobCompletionTriggerConditionArgs{...}
//
//	or:
//
//	        nil
type JobJobCompletionTriggerConditionPtrInput interface {
	pulumi.Input

	ToJobJobCompletionTriggerConditionPtrOutput() JobJobCompletionTriggerConditionPtrOutput
	ToJobJobCompletionTriggerConditionPtrOutputWithContext(context.Context) JobJobCompletionTriggerConditionPtrOutput
}

type jobJobCompletionTriggerConditionPtrType JobJobCompletionTriggerConditionArgs

func JobJobCompletionTriggerConditionPtr(v *JobJobCompletionTriggerConditionArgs) JobJobCompletionTriggerConditionPtrInput {
	return (*jobJobCompletionTriggerConditionPtrType)(v)
}

func (*jobJobCompletionTriggerConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobJobCompletionTriggerCondition)(nil)).Elem()
}

func (i *jobJobCompletionTriggerConditionPtrType) ToJobJobCompletionTriggerConditionPtrOutput() JobJobCompletionTriggerConditionPtrOutput {
	return i.ToJobJobCompletionTriggerConditionPtrOutputWithContext(context.Background())
}

func (i *jobJobCompletionTriggerConditionPtrType) ToJobJobCompletionTriggerConditionPtrOutputWithContext(ctx context.Context) JobJobCompletionTriggerConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobJobCompletionTriggerConditionPtrOutput)
}

type JobJobCompletionTriggerConditionOutput struct{ *pulumi.OutputState }

func (JobJobCompletionTriggerConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobJobCompletionTriggerCondition)(nil)).Elem()
}

func (o JobJobCompletionTriggerConditionOutput) ToJobJobCompletionTriggerConditionOutput() JobJobCompletionTriggerConditionOutput {
	return o
}

func (o JobJobCompletionTriggerConditionOutput) ToJobJobCompletionTriggerConditionOutputWithContext(ctx context.Context) JobJobCompletionTriggerConditionOutput {
	return o
}

func (o JobJobCompletionTriggerConditionOutput) ToJobJobCompletionTriggerConditionPtrOutput() JobJobCompletionTriggerConditionPtrOutput {
	return o.ToJobJobCompletionTriggerConditionPtrOutputWithContext(context.Background())
}

func (o JobJobCompletionTriggerConditionOutput) ToJobJobCompletionTriggerConditionPtrOutputWithContext(ctx context.Context) JobJobCompletionTriggerConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobJobCompletionTriggerCondition) *JobJobCompletionTriggerCondition {
		return &v
	}).(JobJobCompletionTriggerConditionPtrOutput)
}

// The ID of the job that would trigger this job after completion.
func (o JobJobCompletionTriggerConditionOutput) JobId() pulumi.IntOutput {
	return o.ApplyT(func(v JobJobCompletionTriggerCondition) int { return v.JobId }).(pulumi.IntOutput)
}

// The ID of the project where the trigger job is running in.
func (o JobJobCompletionTriggerConditionOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v JobJobCompletionTriggerCondition) int { return v.ProjectId }).(pulumi.IntOutput)
}

// List of statuses to trigger the job on. Possible values are `success`, `error` and `canceled`.
func (o JobJobCompletionTriggerConditionOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobJobCompletionTriggerCondition) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

type JobJobCompletionTriggerConditionPtrOutput struct{ *pulumi.OutputState }

func (JobJobCompletionTriggerConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobJobCompletionTriggerCondition)(nil)).Elem()
}

func (o JobJobCompletionTriggerConditionPtrOutput) ToJobJobCompletionTriggerConditionPtrOutput() JobJobCompletionTriggerConditionPtrOutput {
	return o
}

func (o JobJobCompletionTriggerConditionPtrOutput) ToJobJobCompletionTriggerConditionPtrOutputWithContext(ctx context.Context) JobJobCompletionTriggerConditionPtrOutput {
	return o
}

func (o JobJobCompletionTriggerConditionPtrOutput) Elem() JobJobCompletionTriggerConditionOutput {
	return o.ApplyT(func(v *JobJobCompletionTriggerCondition) JobJobCompletionTriggerCondition {
		if v != nil {
			return *v
		}
		var ret JobJobCompletionTriggerCondition
		return ret
	}).(JobJobCompletionTriggerConditionOutput)
}

// The ID of the job that would trigger this job after completion.
func (o JobJobCompletionTriggerConditionPtrOutput) JobId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobJobCompletionTriggerCondition) *int {
		if v == nil {
			return nil
		}
		return &v.JobId
	}).(pulumi.IntPtrOutput)
}

// The ID of the project where the trigger job is running in.
func (o JobJobCompletionTriggerConditionPtrOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobJobCompletionTriggerCondition) *int {
		if v == nil {
			return nil
		}
		return &v.ProjectId
	}).(pulumi.IntPtrOutput)
}

// List of statuses to trigger the job on. Possible values are `success`, `error` and `canceled`.
func (o JobJobCompletionTriggerConditionPtrOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobJobCompletionTriggerCondition) []string {
		if v == nil {
			return nil
		}
		return v.Statuses
	}).(pulumi.StringArrayOutput)
}

type ServiceTokenServiceTokenPermission struct {
	// Whether or not to apply this permission to all projects for this service token
	AllProjects bool `pulumi:"allProjects"`
	// Set of permissions to apply
	PermissionSet string `pulumi:"permissionSet"`
	// Project ID to apply this permission to for this service token
	ProjectId *int `pulumi:"projectId"`
	// What types of environments to apply Write permissions to.
	// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
	// The values allowed are `all`, `development`, `staging`, `production` and `other`.
	// Not setting a value is the same as selecting `all`.
	// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
	WritableEnvironmentCategories []string `pulumi:"writableEnvironmentCategories"`
}

// ServiceTokenServiceTokenPermissionInput is an input type that accepts ServiceTokenServiceTokenPermissionArgs and ServiceTokenServiceTokenPermissionOutput values.
// You can construct a concrete instance of `ServiceTokenServiceTokenPermissionInput` via:
//
//	ServiceTokenServiceTokenPermissionArgs{...}
type ServiceTokenServiceTokenPermissionInput interface {
	pulumi.Input

	ToServiceTokenServiceTokenPermissionOutput() ServiceTokenServiceTokenPermissionOutput
	ToServiceTokenServiceTokenPermissionOutputWithContext(context.Context) ServiceTokenServiceTokenPermissionOutput
}

type ServiceTokenServiceTokenPermissionArgs struct {
	// Whether or not to apply this permission to all projects for this service token
	AllProjects pulumi.BoolInput `pulumi:"allProjects"`
	// Set of permissions to apply
	PermissionSet pulumi.StringInput `pulumi:"permissionSet"`
	// Project ID to apply this permission to for this service token
	ProjectId pulumi.IntPtrInput `pulumi:"projectId"`
	// What types of environments to apply Write permissions to.
	// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
	// The values allowed are `all`, `development`, `staging`, `production` and `other`.
	// Not setting a value is the same as selecting `all`.
	// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
	WritableEnvironmentCategories pulumi.StringArrayInput `pulumi:"writableEnvironmentCategories"`
}

func (ServiceTokenServiceTokenPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTokenServiceTokenPermission)(nil)).Elem()
}

func (i ServiceTokenServiceTokenPermissionArgs) ToServiceTokenServiceTokenPermissionOutput() ServiceTokenServiceTokenPermissionOutput {
	return i.ToServiceTokenServiceTokenPermissionOutputWithContext(context.Background())
}

func (i ServiceTokenServiceTokenPermissionArgs) ToServiceTokenServiceTokenPermissionOutputWithContext(ctx context.Context) ServiceTokenServiceTokenPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTokenServiceTokenPermissionOutput)
}

// ServiceTokenServiceTokenPermissionArrayInput is an input type that accepts ServiceTokenServiceTokenPermissionArray and ServiceTokenServiceTokenPermissionArrayOutput values.
// You can construct a concrete instance of `ServiceTokenServiceTokenPermissionArrayInput` via:
//
//	ServiceTokenServiceTokenPermissionArray{ ServiceTokenServiceTokenPermissionArgs{...} }
type ServiceTokenServiceTokenPermissionArrayInput interface {
	pulumi.Input

	ToServiceTokenServiceTokenPermissionArrayOutput() ServiceTokenServiceTokenPermissionArrayOutput
	ToServiceTokenServiceTokenPermissionArrayOutputWithContext(context.Context) ServiceTokenServiceTokenPermissionArrayOutput
}

type ServiceTokenServiceTokenPermissionArray []ServiceTokenServiceTokenPermissionInput

func (ServiceTokenServiceTokenPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTokenServiceTokenPermission)(nil)).Elem()
}

func (i ServiceTokenServiceTokenPermissionArray) ToServiceTokenServiceTokenPermissionArrayOutput() ServiceTokenServiceTokenPermissionArrayOutput {
	return i.ToServiceTokenServiceTokenPermissionArrayOutputWithContext(context.Background())
}

func (i ServiceTokenServiceTokenPermissionArray) ToServiceTokenServiceTokenPermissionArrayOutputWithContext(ctx context.Context) ServiceTokenServiceTokenPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTokenServiceTokenPermissionArrayOutput)
}

type ServiceTokenServiceTokenPermissionOutput struct{ *pulumi.OutputState }

func (ServiceTokenServiceTokenPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTokenServiceTokenPermission)(nil)).Elem()
}

func (o ServiceTokenServiceTokenPermissionOutput) ToServiceTokenServiceTokenPermissionOutput() ServiceTokenServiceTokenPermissionOutput {
	return o
}

func (o ServiceTokenServiceTokenPermissionOutput) ToServiceTokenServiceTokenPermissionOutputWithContext(ctx context.Context) ServiceTokenServiceTokenPermissionOutput {
	return o
}

// Whether or not to apply this permission to all projects for this service token
func (o ServiceTokenServiceTokenPermissionOutput) AllProjects() pulumi.BoolOutput {
	return o.ApplyT(func(v ServiceTokenServiceTokenPermission) bool { return v.AllProjects }).(pulumi.BoolOutput)
}

// Set of permissions to apply
func (o ServiceTokenServiceTokenPermissionOutput) PermissionSet() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTokenServiceTokenPermission) string { return v.PermissionSet }).(pulumi.StringOutput)
}

// Project ID to apply this permission to for this service token
func (o ServiceTokenServiceTokenPermissionOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTokenServiceTokenPermission) *int { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// What types of environments to apply Write permissions to.
// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
// The values allowed are `all`, `development`, `staging`, `production` and `other`.
// Not setting a value is the same as selecting `all`.
// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
func (o ServiceTokenServiceTokenPermissionOutput) WritableEnvironmentCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceTokenServiceTokenPermission) []string { return v.WritableEnvironmentCategories }).(pulumi.StringArrayOutput)
}

type ServiceTokenServiceTokenPermissionArrayOutput struct{ *pulumi.OutputState }

func (ServiceTokenServiceTokenPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTokenServiceTokenPermission)(nil)).Elem()
}

func (o ServiceTokenServiceTokenPermissionArrayOutput) ToServiceTokenServiceTokenPermissionArrayOutput() ServiceTokenServiceTokenPermissionArrayOutput {
	return o
}

func (o ServiceTokenServiceTokenPermissionArrayOutput) ToServiceTokenServiceTokenPermissionArrayOutputWithContext(ctx context.Context) ServiceTokenServiceTokenPermissionArrayOutput {
	return o
}

func (o ServiceTokenServiceTokenPermissionArrayOutput) Index(i pulumi.IntInput) ServiceTokenServiceTokenPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceTokenServiceTokenPermission {
		return vs[0].([]ServiceTokenServiceTokenPermission)[vs[1].(int)]
	}).(ServiceTokenServiceTokenPermissionOutput)
}

type GetEnvironmentsEnvironment struct {
	// A connection ID (used with Global Connections)
	ConnectionId int `pulumi:"connectionId"`
	// Credential ID to create the environment with. A credential is not required for development environments but is required for deployment environments
	CredentialsId int `pulumi:"credentialsId"`
	// The custom branch name to use
	CustomBranch string `pulumi:"customBranch"`
	// Version number of dbt to use in this environment.
	DbtVersion string `pulumi:"dbtVersion"`
	// The type of deployment environment (currently 'production', 'staging' or empty)
	DeploymentType string `pulumi:"deploymentType"`
	// The ID of the environment
	EnvironmentId int `pulumi:"environmentId"`
	// The ID of the extended attributes applied
	ExtendedAttributesId int `pulumi:"extendedAttributesId"`
	// The name of the environment
	Name string `pulumi:"name"`
	// The project ID to which the environment belong
	ProjectId int `pulumi:"projectId"`
	// The type of environment (must be either development or deployment)
	Type string `pulumi:"type"`
	// Whether to use a custom git branch in this environment
	UseCustomBranch bool `pulumi:"useCustomBranch"`
}

// GetEnvironmentsEnvironmentInput is an input type that accepts GetEnvironmentsEnvironmentArgs and GetEnvironmentsEnvironmentOutput values.
// You can construct a concrete instance of `GetEnvironmentsEnvironmentInput` via:
//
//	GetEnvironmentsEnvironmentArgs{...}
type GetEnvironmentsEnvironmentInput interface {
	pulumi.Input

	ToGetEnvironmentsEnvironmentOutput() GetEnvironmentsEnvironmentOutput
	ToGetEnvironmentsEnvironmentOutputWithContext(context.Context) GetEnvironmentsEnvironmentOutput
}

type GetEnvironmentsEnvironmentArgs struct {
	// A connection ID (used with Global Connections)
	ConnectionId pulumi.IntInput `pulumi:"connectionId"`
	// Credential ID to create the environment with. A credential is not required for development environments but is required for deployment environments
	CredentialsId pulumi.IntInput `pulumi:"credentialsId"`
	// The custom branch name to use
	CustomBranch pulumi.StringInput `pulumi:"customBranch"`
	// Version number of dbt to use in this environment.
	DbtVersion pulumi.StringInput `pulumi:"dbtVersion"`
	// The type of deployment environment (currently 'production', 'staging' or empty)
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
	// The ID of the environment
	EnvironmentId pulumi.IntInput `pulumi:"environmentId"`
	// The ID of the extended attributes applied
	ExtendedAttributesId pulumi.IntInput `pulumi:"extendedAttributesId"`
	// The name of the environment
	Name pulumi.StringInput `pulumi:"name"`
	// The project ID to which the environment belong
	ProjectId pulumi.IntInput `pulumi:"projectId"`
	// The type of environment (must be either development or deployment)
	Type pulumi.StringInput `pulumi:"type"`
	// Whether to use a custom git branch in this environment
	UseCustomBranch pulumi.BoolInput `pulumi:"useCustomBranch"`
}

func (GetEnvironmentsEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEnvironmentsEnvironment)(nil)).Elem()
}

func (i GetEnvironmentsEnvironmentArgs) ToGetEnvironmentsEnvironmentOutput() GetEnvironmentsEnvironmentOutput {
	return i.ToGetEnvironmentsEnvironmentOutputWithContext(context.Background())
}

func (i GetEnvironmentsEnvironmentArgs) ToGetEnvironmentsEnvironmentOutputWithContext(ctx context.Context) GetEnvironmentsEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEnvironmentsEnvironmentOutput)
}

// GetEnvironmentsEnvironmentArrayInput is an input type that accepts GetEnvironmentsEnvironmentArray and GetEnvironmentsEnvironmentArrayOutput values.
// You can construct a concrete instance of `GetEnvironmentsEnvironmentArrayInput` via:
//
//	GetEnvironmentsEnvironmentArray{ GetEnvironmentsEnvironmentArgs{...} }
type GetEnvironmentsEnvironmentArrayInput interface {
	pulumi.Input

	ToGetEnvironmentsEnvironmentArrayOutput() GetEnvironmentsEnvironmentArrayOutput
	ToGetEnvironmentsEnvironmentArrayOutputWithContext(context.Context) GetEnvironmentsEnvironmentArrayOutput
}

type GetEnvironmentsEnvironmentArray []GetEnvironmentsEnvironmentInput

func (GetEnvironmentsEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEnvironmentsEnvironment)(nil)).Elem()
}

func (i GetEnvironmentsEnvironmentArray) ToGetEnvironmentsEnvironmentArrayOutput() GetEnvironmentsEnvironmentArrayOutput {
	return i.ToGetEnvironmentsEnvironmentArrayOutputWithContext(context.Background())
}

func (i GetEnvironmentsEnvironmentArray) ToGetEnvironmentsEnvironmentArrayOutputWithContext(ctx context.Context) GetEnvironmentsEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEnvironmentsEnvironmentArrayOutput)
}

type GetEnvironmentsEnvironmentOutput struct{ *pulumi.OutputState }

func (GetEnvironmentsEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEnvironmentsEnvironment)(nil)).Elem()
}

func (o GetEnvironmentsEnvironmentOutput) ToGetEnvironmentsEnvironmentOutput() GetEnvironmentsEnvironmentOutput {
	return o
}

func (o GetEnvironmentsEnvironmentOutput) ToGetEnvironmentsEnvironmentOutputWithContext(ctx context.Context) GetEnvironmentsEnvironmentOutput {
	return o
}

// A connection ID (used with Global Connections)
func (o GetEnvironmentsEnvironmentOutput) ConnectionId() pulumi.IntOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) int { return v.ConnectionId }).(pulumi.IntOutput)
}

// Credential ID to create the environment with. A credential is not required for development environments but is required for deployment environments
func (o GetEnvironmentsEnvironmentOutput) CredentialsId() pulumi.IntOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) int { return v.CredentialsId }).(pulumi.IntOutput)
}

// The custom branch name to use
func (o GetEnvironmentsEnvironmentOutput) CustomBranch() pulumi.StringOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) string { return v.CustomBranch }).(pulumi.StringOutput)
}

// Version number of dbt to use in this environment.
func (o GetEnvironmentsEnvironmentOutput) DbtVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) string { return v.DbtVersion }).(pulumi.StringOutput)
}

// The type of deployment environment (currently 'production', 'staging' or empty)
func (o GetEnvironmentsEnvironmentOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// The ID of the environment
func (o GetEnvironmentsEnvironmentOutput) EnvironmentId() pulumi.IntOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) int { return v.EnvironmentId }).(pulumi.IntOutput)
}

// The ID of the extended attributes applied
func (o GetEnvironmentsEnvironmentOutput) ExtendedAttributesId() pulumi.IntOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) int { return v.ExtendedAttributesId }).(pulumi.IntOutput)
}

// The name of the environment
func (o GetEnvironmentsEnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) string { return v.Name }).(pulumi.StringOutput)
}

// The project ID to which the environment belong
func (o GetEnvironmentsEnvironmentOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) int { return v.ProjectId }).(pulumi.IntOutput)
}

// The type of environment (must be either development or deployment)
func (o GetEnvironmentsEnvironmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) string { return v.Type }).(pulumi.StringOutput)
}

// Whether to use a custom git branch in this environment
func (o GetEnvironmentsEnvironmentOutput) UseCustomBranch() pulumi.BoolOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) bool { return v.UseCustomBranch }).(pulumi.BoolOutput)
}

type GetEnvironmentsEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (GetEnvironmentsEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEnvironmentsEnvironment)(nil)).Elem()
}

func (o GetEnvironmentsEnvironmentArrayOutput) ToGetEnvironmentsEnvironmentArrayOutput() GetEnvironmentsEnvironmentArrayOutput {
	return o
}

func (o GetEnvironmentsEnvironmentArrayOutput) ToGetEnvironmentsEnvironmentArrayOutputWithContext(ctx context.Context) GetEnvironmentsEnvironmentArrayOutput {
	return o
}

func (o GetEnvironmentsEnvironmentArrayOutput) Index(i pulumi.IntInput) GetEnvironmentsEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEnvironmentsEnvironment {
		return vs[0].([]GetEnvironmentsEnvironment)[vs[1].(int)]
	}).(GetEnvironmentsEnvironmentOutput)
}

type GetGlobalConnectionApacheSpark struct {
	// Auth
	Auth string `pulumi:"auth"`
	// Spark cluster for the connection
	Cluster string `pulumi:"cluster"`
	// Connection retries. Default=0
	ConnectRetries int `pulumi:"connectRetries"`
	// Connection time out in seconds. Default=10
	ConnectTimeout int `pulumi:"connectTimeout"`
	// Hostname of the connection
	Host string `pulumi:"host"`
	// Authentication method for the connection (http or thrift).
	Method string `pulumi:"method"`
	// Organization ID
	Organization string `pulumi:"organization"`
	// Port for the connection. Default=443
	Port int `pulumi:"port"`
	// User
	User string `pulumi:"user"`
}

// GetGlobalConnectionApacheSparkInput is an input type that accepts GetGlobalConnectionApacheSparkArgs and GetGlobalConnectionApacheSparkOutput values.
// You can construct a concrete instance of `GetGlobalConnectionApacheSparkInput` via:
//
//	GetGlobalConnectionApacheSparkArgs{...}
type GetGlobalConnectionApacheSparkInput interface {
	pulumi.Input

	ToGetGlobalConnectionApacheSparkOutput() GetGlobalConnectionApacheSparkOutput
	ToGetGlobalConnectionApacheSparkOutputWithContext(context.Context) GetGlobalConnectionApacheSparkOutput
}

type GetGlobalConnectionApacheSparkArgs struct {
	// Auth
	Auth pulumi.StringInput `pulumi:"auth"`
	// Spark cluster for the connection
	Cluster pulumi.StringInput `pulumi:"cluster"`
	// Connection retries. Default=0
	ConnectRetries pulumi.IntInput `pulumi:"connectRetries"`
	// Connection time out in seconds. Default=10
	ConnectTimeout pulumi.IntInput `pulumi:"connectTimeout"`
	// Hostname of the connection
	Host pulumi.StringInput `pulumi:"host"`
	// Authentication method for the connection (http or thrift).
	Method pulumi.StringInput `pulumi:"method"`
	// Organization ID
	Organization pulumi.StringInput `pulumi:"organization"`
	// Port for the connection. Default=443
	Port pulumi.IntInput `pulumi:"port"`
	// User
	User pulumi.StringInput `pulumi:"user"`
}

func (GetGlobalConnectionApacheSparkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionApacheSpark)(nil)).Elem()
}

func (i GetGlobalConnectionApacheSparkArgs) ToGetGlobalConnectionApacheSparkOutput() GetGlobalConnectionApacheSparkOutput {
	return i.ToGetGlobalConnectionApacheSparkOutputWithContext(context.Background())
}

func (i GetGlobalConnectionApacheSparkArgs) ToGetGlobalConnectionApacheSparkOutputWithContext(ctx context.Context) GetGlobalConnectionApacheSparkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGlobalConnectionApacheSparkOutput)
}

type GetGlobalConnectionApacheSparkOutput struct{ *pulumi.OutputState }

func (GetGlobalConnectionApacheSparkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionApacheSpark)(nil)).Elem()
}

func (o GetGlobalConnectionApacheSparkOutput) ToGetGlobalConnectionApacheSparkOutput() GetGlobalConnectionApacheSparkOutput {
	return o
}

func (o GetGlobalConnectionApacheSparkOutput) ToGetGlobalConnectionApacheSparkOutputWithContext(ctx context.Context) GetGlobalConnectionApacheSparkOutput {
	return o
}

// Auth
func (o GetGlobalConnectionApacheSparkOutput) Auth() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionApacheSpark) string { return v.Auth }).(pulumi.StringOutput)
}

// Spark cluster for the connection
func (o GetGlobalConnectionApacheSparkOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionApacheSpark) string { return v.Cluster }).(pulumi.StringOutput)
}

// Connection retries. Default=0
func (o GetGlobalConnectionApacheSparkOutput) ConnectRetries() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionApacheSpark) int { return v.ConnectRetries }).(pulumi.IntOutput)
}

// Connection time out in seconds. Default=10
func (o GetGlobalConnectionApacheSparkOutput) ConnectTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionApacheSpark) int { return v.ConnectTimeout }).(pulumi.IntOutput)
}

// Hostname of the connection
func (o GetGlobalConnectionApacheSparkOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionApacheSpark) string { return v.Host }).(pulumi.StringOutput)
}

// Authentication method for the connection (http or thrift).
func (o GetGlobalConnectionApacheSparkOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionApacheSpark) string { return v.Method }).(pulumi.StringOutput)
}

// Organization ID
func (o GetGlobalConnectionApacheSparkOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionApacheSpark) string { return v.Organization }).(pulumi.StringOutput)
}

// Port for the connection. Default=443
func (o GetGlobalConnectionApacheSparkOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionApacheSpark) int { return v.Port }).(pulumi.IntOutput)
}

// User
func (o GetGlobalConnectionApacheSparkOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionApacheSpark) string { return v.User }).(pulumi.StringOutput)
}

type GetGlobalConnectionAthena struct {
	// Specify the database (data catalog) to build models into (lowercase only).
	Database string `pulumi:"database"`
	// Number of times to retry boto3 requests (e.g. deleting S3 files for materialized tables).
	NumBoto3Retries int `pulumi:"numBoto3Retries"`
	// Number of times to retry iceberg commit queries to fix ICEBERG*COMMIT*ERROR.
	NumIcebergRetries int `pulumi:"numIcebergRetries"`
	// Number of times to retry a failing query.
	NumRetries int `pulumi:"numRetries"`
	// Interval in seconds to use for polling the status of query results in Athena.
	PollInterval int `pulumi:"pollInterval"`
	// AWS region of your Athena instance.
	RegionName string `pulumi:"regionName"`
	// Prefix for storing tables, if different from the connection's S3 staging directory.
	S3DataDir string `pulumi:"s3DataDir"`
	// How to generate table paths in the S3 data directory.
	S3DataNaming string `pulumi:"s3DataNaming"`
	// S3 location to store Athena query results and metadata.
	S3StagingDir string `pulumi:"s3StagingDir"`
	// Prefix for storing temporary tables, if different from the connection's S3 data directory.
	S3TmpTableDir string `pulumi:"s3TmpTableDir"`
	// Identifier of Athena Spark workgroup for running Python models.
	SparkWorkGroup string `pulumi:"sparkWorkGroup"`
	// Identifier of Athena workgroup.
	WorkGroup string `pulumi:"workGroup"`
}

// GetGlobalConnectionAthenaInput is an input type that accepts GetGlobalConnectionAthenaArgs and GetGlobalConnectionAthenaOutput values.
// You can construct a concrete instance of `GetGlobalConnectionAthenaInput` via:
//
//	GetGlobalConnectionAthenaArgs{...}
type GetGlobalConnectionAthenaInput interface {
	pulumi.Input

	ToGetGlobalConnectionAthenaOutput() GetGlobalConnectionAthenaOutput
	ToGetGlobalConnectionAthenaOutputWithContext(context.Context) GetGlobalConnectionAthenaOutput
}

type GetGlobalConnectionAthenaArgs struct {
	// Specify the database (data catalog) to build models into (lowercase only).
	Database pulumi.StringInput `pulumi:"database"`
	// Number of times to retry boto3 requests (e.g. deleting S3 files for materialized tables).
	NumBoto3Retries pulumi.IntInput `pulumi:"numBoto3Retries"`
	// Number of times to retry iceberg commit queries to fix ICEBERG*COMMIT*ERROR.
	NumIcebergRetries pulumi.IntInput `pulumi:"numIcebergRetries"`
	// Number of times to retry a failing query.
	NumRetries pulumi.IntInput `pulumi:"numRetries"`
	// Interval in seconds to use for polling the status of query results in Athena.
	PollInterval pulumi.IntInput `pulumi:"pollInterval"`
	// AWS region of your Athena instance.
	RegionName pulumi.StringInput `pulumi:"regionName"`
	// Prefix for storing tables, if different from the connection's S3 staging directory.
	S3DataDir pulumi.StringInput `pulumi:"s3DataDir"`
	// How to generate table paths in the S3 data directory.
	S3DataNaming pulumi.StringInput `pulumi:"s3DataNaming"`
	// S3 location to store Athena query results and metadata.
	S3StagingDir pulumi.StringInput `pulumi:"s3StagingDir"`
	// Prefix for storing temporary tables, if different from the connection's S3 data directory.
	S3TmpTableDir pulumi.StringInput `pulumi:"s3TmpTableDir"`
	// Identifier of Athena Spark workgroup for running Python models.
	SparkWorkGroup pulumi.StringInput `pulumi:"sparkWorkGroup"`
	// Identifier of Athena workgroup.
	WorkGroup pulumi.StringInput `pulumi:"workGroup"`
}

func (GetGlobalConnectionAthenaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionAthena)(nil)).Elem()
}

func (i GetGlobalConnectionAthenaArgs) ToGetGlobalConnectionAthenaOutput() GetGlobalConnectionAthenaOutput {
	return i.ToGetGlobalConnectionAthenaOutputWithContext(context.Background())
}

func (i GetGlobalConnectionAthenaArgs) ToGetGlobalConnectionAthenaOutputWithContext(ctx context.Context) GetGlobalConnectionAthenaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGlobalConnectionAthenaOutput)
}

type GetGlobalConnectionAthenaOutput struct{ *pulumi.OutputState }

func (GetGlobalConnectionAthenaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionAthena)(nil)).Elem()
}

func (o GetGlobalConnectionAthenaOutput) ToGetGlobalConnectionAthenaOutput() GetGlobalConnectionAthenaOutput {
	return o
}

func (o GetGlobalConnectionAthenaOutput) ToGetGlobalConnectionAthenaOutputWithContext(ctx context.Context) GetGlobalConnectionAthenaOutput {
	return o
}

// Specify the database (data catalog) to build models into (lowercase only).
func (o GetGlobalConnectionAthenaOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionAthena) string { return v.Database }).(pulumi.StringOutput)
}

// Number of times to retry boto3 requests (e.g. deleting S3 files for materialized tables).
func (o GetGlobalConnectionAthenaOutput) NumBoto3Retries() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionAthena) int { return v.NumBoto3Retries }).(pulumi.IntOutput)
}

// Number of times to retry iceberg commit queries to fix ICEBERG*COMMIT*ERROR.
func (o GetGlobalConnectionAthenaOutput) NumIcebergRetries() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionAthena) int { return v.NumIcebergRetries }).(pulumi.IntOutput)
}

// Number of times to retry a failing query.
func (o GetGlobalConnectionAthenaOutput) NumRetries() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionAthena) int { return v.NumRetries }).(pulumi.IntOutput)
}

// Interval in seconds to use for polling the status of query results in Athena.
func (o GetGlobalConnectionAthenaOutput) PollInterval() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionAthena) int { return v.PollInterval }).(pulumi.IntOutput)
}

// AWS region of your Athena instance.
func (o GetGlobalConnectionAthenaOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionAthena) string { return v.RegionName }).(pulumi.StringOutput)
}

// Prefix for storing tables, if different from the connection's S3 staging directory.
func (o GetGlobalConnectionAthenaOutput) S3DataDir() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionAthena) string { return v.S3DataDir }).(pulumi.StringOutput)
}

// How to generate table paths in the S3 data directory.
func (o GetGlobalConnectionAthenaOutput) S3DataNaming() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionAthena) string { return v.S3DataNaming }).(pulumi.StringOutput)
}

// S3 location to store Athena query results and metadata.
func (o GetGlobalConnectionAthenaOutput) S3StagingDir() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionAthena) string { return v.S3StagingDir }).(pulumi.StringOutput)
}

// Prefix for storing temporary tables, if different from the connection's S3 data directory.
func (o GetGlobalConnectionAthenaOutput) S3TmpTableDir() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionAthena) string { return v.S3TmpTableDir }).(pulumi.StringOutput)
}

// Identifier of Athena Spark workgroup for running Python models.
func (o GetGlobalConnectionAthenaOutput) SparkWorkGroup() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionAthena) string { return v.SparkWorkGroup }).(pulumi.StringOutput)
}

// Identifier of Athena workgroup.
func (o GetGlobalConnectionAthenaOutput) WorkGroup() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionAthena) string { return v.WorkGroup }).(pulumi.StringOutput)
}

type GetGlobalConnectionBigquery struct {
	// OAuth Client ID
	ApplicationId string `pulumi:"applicationId"`
	// OAuth Client Secret
	ApplicationSecret string `pulumi:"applicationSecret"`
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl string `pulumi:"authProviderX509CertUrl"`
	// Auth URI for the Service Account
	AuthUri string `pulumi:"authUri"`
	// Service Account email
	ClientEmail string `pulumi:"clientEmail"`
	// Client ID of the Service Account
	ClientId string `pulumi:"clientId"`
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl string `pulumi:"clientX509CertUrl"`
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName string `pulumi:"dataprocClusterName"`
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion string `pulumi:"dataprocRegion"`
	// Project to bill for query execution
	ExecutionProject string `pulumi:"executionProject"`
	// The GCP project ID to use for the connection
	GcpProjectId string `pulumi:"gcpProjectId"`
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket string `pulumi:"gcsBucket"`
	// Service Account to impersonate when running queries
	ImpersonateServiceAccount string `pulumi:"impersonateServiceAccount"`
	// Maximum timeout for the job creation step
	JobCreationTimeoutSeconds int `pulumi:"jobCreationTimeoutSeconds"`
	// Total number of seconds to wait while retrying the same query
	JobRetryDeadlineSeconds int `pulumi:"jobRetryDeadlineSeconds"`
	// Location to create new Datasets in
	Location string `pulumi:"location"`
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled int `pulumi:"maximumBytesBilled"`
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority string `pulumi:"priority"`
	// Private Key for the Service Account
	PrivateKey string `pulumi:"privateKey"`
	// Private Key ID for the Service Account
	PrivateKeyId string `pulumi:"privateKeyId"`
	// Number of retries for queries
	Retries int `pulumi:"retries"`
	// OAuth scopes for the BigQuery connection
	Scopes []string `pulumi:"scopes"`
	// Timeout in seconds for queries
	TimeoutSeconds int `pulumi:"timeoutSeconds"`
	// Token URI for the Service Account
	TokenUri string `pulumi:"tokenUri"`
}

// GetGlobalConnectionBigqueryInput is an input type that accepts GetGlobalConnectionBigqueryArgs and GetGlobalConnectionBigqueryOutput values.
// You can construct a concrete instance of `GetGlobalConnectionBigqueryInput` via:
//
//	GetGlobalConnectionBigqueryArgs{...}
type GetGlobalConnectionBigqueryInput interface {
	pulumi.Input

	ToGetGlobalConnectionBigqueryOutput() GetGlobalConnectionBigqueryOutput
	ToGetGlobalConnectionBigqueryOutputWithContext(context.Context) GetGlobalConnectionBigqueryOutput
}

type GetGlobalConnectionBigqueryArgs struct {
	// OAuth Client ID
	ApplicationId pulumi.StringInput `pulumi:"applicationId"`
	// OAuth Client Secret
	ApplicationSecret pulumi.StringInput `pulumi:"applicationSecret"`
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl pulumi.StringInput `pulumi:"authProviderX509CertUrl"`
	// Auth URI for the Service Account
	AuthUri pulumi.StringInput `pulumi:"authUri"`
	// Service Account email
	ClientEmail pulumi.StringInput `pulumi:"clientEmail"`
	// Client ID of the Service Account
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl pulumi.StringInput `pulumi:"clientX509CertUrl"`
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName pulumi.StringInput `pulumi:"dataprocClusterName"`
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion pulumi.StringInput `pulumi:"dataprocRegion"`
	// Project to bill for query execution
	ExecutionProject pulumi.StringInput `pulumi:"executionProject"`
	// The GCP project ID to use for the connection
	GcpProjectId pulumi.StringInput `pulumi:"gcpProjectId"`
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket pulumi.StringInput `pulumi:"gcsBucket"`
	// Service Account to impersonate when running queries
	ImpersonateServiceAccount pulumi.StringInput `pulumi:"impersonateServiceAccount"`
	// Maximum timeout for the job creation step
	JobCreationTimeoutSeconds pulumi.IntInput `pulumi:"jobCreationTimeoutSeconds"`
	// Total number of seconds to wait while retrying the same query
	JobRetryDeadlineSeconds pulumi.IntInput `pulumi:"jobRetryDeadlineSeconds"`
	// Location to create new Datasets in
	Location pulumi.StringInput `pulumi:"location"`
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled pulumi.IntInput `pulumi:"maximumBytesBilled"`
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority pulumi.StringInput `pulumi:"priority"`
	// Private Key for the Service Account
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
	// Private Key ID for the Service Account
	PrivateKeyId pulumi.StringInput `pulumi:"privateKeyId"`
	// Number of retries for queries
	Retries pulumi.IntInput `pulumi:"retries"`
	// OAuth scopes for the BigQuery connection
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// Timeout in seconds for queries
	TimeoutSeconds pulumi.IntInput `pulumi:"timeoutSeconds"`
	// Token URI for the Service Account
	TokenUri pulumi.StringInput `pulumi:"tokenUri"`
}

func (GetGlobalConnectionBigqueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionBigquery)(nil)).Elem()
}

func (i GetGlobalConnectionBigqueryArgs) ToGetGlobalConnectionBigqueryOutput() GetGlobalConnectionBigqueryOutput {
	return i.ToGetGlobalConnectionBigqueryOutputWithContext(context.Background())
}

func (i GetGlobalConnectionBigqueryArgs) ToGetGlobalConnectionBigqueryOutputWithContext(ctx context.Context) GetGlobalConnectionBigqueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGlobalConnectionBigqueryOutput)
}

type GetGlobalConnectionBigqueryOutput struct{ *pulumi.OutputState }

func (GetGlobalConnectionBigqueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionBigquery)(nil)).Elem()
}

func (o GetGlobalConnectionBigqueryOutput) ToGetGlobalConnectionBigqueryOutput() GetGlobalConnectionBigqueryOutput {
	return o
}

func (o GetGlobalConnectionBigqueryOutput) ToGetGlobalConnectionBigqueryOutputWithContext(ctx context.Context) GetGlobalConnectionBigqueryOutput {
	return o
}

// OAuth Client ID
func (o GetGlobalConnectionBigqueryOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) string { return v.ApplicationId }).(pulumi.StringOutput)
}

// OAuth Client Secret
func (o GetGlobalConnectionBigqueryOutput) ApplicationSecret() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) string { return v.ApplicationSecret }).(pulumi.StringOutput)
}

// Auth Provider X509 Cert URL for the Service Account
func (o GetGlobalConnectionBigqueryOutput) AuthProviderX509CertUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) string { return v.AuthProviderX509CertUrl }).(pulumi.StringOutput)
}

// Auth URI for the Service Account
func (o GetGlobalConnectionBigqueryOutput) AuthUri() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) string { return v.AuthUri }).(pulumi.StringOutput)
}

// Service Account email
func (o GetGlobalConnectionBigqueryOutput) ClientEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) string { return v.ClientEmail }).(pulumi.StringOutput)
}

// Client ID of the Service Account
func (o GetGlobalConnectionBigqueryOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) string { return v.ClientId }).(pulumi.StringOutput)
}

// Client X509 Cert URL for the Service Account
func (o GetGlobalConnectionBigqueryOutput) ClientX509CertUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) string { return v.ClientX509CertUrl }).(pulumi.StringOutput)
}

// Dataproc cluster name for PySpark workloads
func (o GetGlobalConnectionBigqueryOutput) DataprocClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) string { return v.DataprocClusterName }).(pulumi.StringOutput)
}

// Google Cloud region for PySpark workloads on Dataproc
func (o GetGlobalConnectionBigqueryOutput) DataprocRegion() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) string { return v.DataprocRegion }).(pulumi.StringOutput)
}

// Project to bill for query execution
func (o GetGlobalConnectionBigqueryOutput) ExecutionProject() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) string { return v.ExecutionProject }).(pulumi.StringOutput)
}

// The GCP project ID to use for the connection
func (o GetGlobalConnectionBigqueryOutput) GcpProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) string { return v.GcpProjectId }).(pulumi.StringOutput)
}

// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
func (o GetGlobalConnectionBigqueryOutput) GcsBucket() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) string { return v.GcsBucket }).(pulumi.StringOutput)
}

// Service Account to impersonate when running queries
func (o GetGlobalConnectionBigqueryOutput) ImpersonateServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) string { return v.ImpersonateServiceAccount }).(pulumi.StringOutput)
}

// Maximum timeout for the job creation step
func (o GetGlobalConnectionBigqueryOutput) JobCreationTimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) int { return v.JobCreationTimeoutSeconds }).(pulumi.IntOutput)
}

// Total number of seconds to wait while retrying the same query
func (o GetGlobalConnectionBigqueryOutput) JobRetryDeadlineSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) int { return v.JobRetryDeadlineSeconds }).(pulumi.IntOutput)
}

// Location to create new Datasets in
func (o GetGlobalConnectionBigqueryOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) string { return v.Location }).(pulumi.StringOutput)
}

// Max number of bytes that can be billed for a given BigQuery query
func (o GetGlobalConnectionBigqueryOutput) MaximumBytesBilled() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) int { return v.MaximumBytesBilled }).(pulumi.IntOutput)
}

// The priority with which to execute BigQuery queries (batch or interactive)
func (o GetGlobalConnectionBigqueryOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) string { return v.Priority }).(pulumi.StringOutput)
}

// Private Key for the Service Account
func (o GetGlobalConnectionBigqueryOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// Private Key ID for the Service Account
func (o GetGlobalConnectionBigqueryOutput) PrivateKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) string { return v.PrivateKeyId }).(pulumi.StringOutput)
}

// Number of retries for queries
func (o GetGlobalConnectionBigqueryOutput) Retries() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) int { return v.Retries }).(pulumi.IntOutput)
}

// OAuth scopes for the BigQuery connection
func (o GetGlobalConnectionBigqueryOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// Timeout in seconds for queries
func (o GetGlobalConnectionBigqueryOutput) TimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) int { return v.TimeoutSeconds }).(pulumi.IntOutput)
}

// Token URI for the Service Account
func (o GetGlobalConnectionBigqueryOutput) TokenUri() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionBigquery) string { return v.TokenUri }).(pulumi.StringOutput)
}

type GetGlobalConnectionDatabricks struct {
	// Catalog name if Unity Catalog is enabled in your Databricks workspace.
	Catalog string `pulumi:"catalog"`
	// Required to enable Databricks OAuth authentication for IDE developers.
	ClientId string `pulumi:"clientId"`
	// Required to enable Databricks OAuth authentication for IDE developers.
	ClientSecret string `pulumi:"clientSecret"`
	// The hostname of the Databricks cluster or SQL warehouse.
	Host string `pulumi:"host"`
	// The HTTP path of the Databricks cluster or SQL warehouse.
	HttpPath string `pulumi:"httpPath"`
}

// GetGlobalConnectionDatabricksInput is an input type that accepts GetGlobalConnectionDatabricksArgs and GetGlobalConnectionDatabricksOutput values.
// You can construct a concrete instance of `GetGlobalConnectionDatabricksInput` via:
//
//	GetGlobalConnectionDatabricksArgs{...}
type GetGlobalConnectionDatabricksInput interface {
	pulumi.Input

	ToGetGlobalConnectionDatabricksOutput() GetGlobalConnectionDatabricksOutput
	ToGetGlobalConnectionDatabricksOutputWithContext(context.Context) GetGlobalConnectionDatabricksOutput
}

type GetGlobalConnectionDatabricksArgs struct {
	// Catalog name if Unity Catalog is enabled in your Databricks workspace.
	Catalog pulumi.StringInput `pulumi:"catalog"`
	// Required to enable Databricks OAuth authentication for IDE developers.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// Required to enable Databricks OAuth authentication for IDE developers.
	ClientSecret pulumi.StringInput `pulumi:"clientSecret"`
	// The hostname of the Databricks cluster or SQL warehouse.
	Host pulumi.StringInput `pulumi:"host"`
	// The HTTP path of the Databricks cluster or SQL warehouse.
	HttpPath pulumi.StringInput `pulumi:"httpPath"`
}

func (GetGlobalConnectionDatabricksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionDatabricks)(nil)).Elem()
}

func (i GetGlobalConnectionDatabricksArgs) ToGetGlobalConnectionDatabricksOutput() GetGlobalConnectionDatabricksOutput {
	return i.ToGetGlobalConnectionDatabricksOutputWithContext(context.Background())
}

func (i GetGlobalConnectionDatabricksArgs) ToGetGlobalConnectionDatabricksOutputWithContext(ctx context.Context) GetGlobalConnectionDatabricksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGlobalConnectionDatabricksOutput)
}

type GetGlobalConnectionDatabricksOutput struct{ *pulumi.OutputState }

func (GetGlobalConnectionDatabricksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionDatabricks)(nil)).Elem()
}

func (o GetGlobalConnectionDatabricksOutput) ToGetGlobalConnectionDatabricksOutput() GetGlobalConnectionDatabricksOutput {
	return o
}

func (o GetGlobalConnectionDatabricksOutput) ToGetGlobalConnectionDatabricksOutputWithContext(ctx context.Context) GetGlobalConnectionDatabricksOutput {
	return o
}

// Catalog name if Unity Catalog is enabled in your Databricks workspace.
func (o GetGlobalConnectionDatabricksOutput) Catalog() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionDatabricks) string { return v.Catalog }).(pulumi.StringOutput)
}

// Required to enable Databricks OAuth authentication for IDE developers.
func (o GetGlobalConnectionDatabricksOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionDatabricks) string { return v.ClientId }).(pulumi.StringOutput)
}

// Required to enable Databricks OAuth authentication for IDE developers.
func (o GetGlobalConnectionDatabricksOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionDatabricks) string { return v.ClientSecret }).(pulumi.StringOutput)
}

// The hostname of the Databricks cluster or SQL warehouse.
func (o GetGlobalConnectionDatabricksOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionDatabricks) string { return v.Host }).(pulumi.StringOutput)
}

// The HTTP path of the Databricks cluster or SQL warehouse.
func (o GetGlobalConnectionDatabricksOutput) HttpPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionDatabricks) string { return v.HttpPath }).(pulumi.StringOutput)
}

type GetGlobalConnectionFabric struct {
	// The database to connect to for this connection.
	Database string `pulumi:"database"`
	// The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
	LoginTimeout int `pulumi:"loginTimeout"`
	// The port to connect to for this connection. Default=1433
	Port int `pulumi:"port"`
	// The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
	QueryTimeout int `pulumi:"queryTimeout"`
	// The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
	Retries int `pulumi:"retries"`
	// The server hostname.
	Server string `pulumi:"server"`
}

// GetGlobalConnectionFabricInput is an input type that accepts GetGlobalConnectionFabricArgs and GetGlobalConnectionFabricOutput values.
// You can construct a concrete instance of `GetGlobalConnectionFabricInput` via:
//
//	GetGlobalConnectionFabricArgs{...}
type GetGlobalConnectionFabricInput interface {
	pulumi.Input

	ToGetGlobalConnectionFabricOutput() GetGlobalConnectionFabricOutput
	ToGetGlobalConnectionFabricOutputWithContext(context.Context) GetGlobalConnectionFabricOutput
}

type GetGlobalConnectionFabricArgs struct {
	// The database to connect to for this connection.
	Database pulumi.StringInput `pulumi:"database"`
	// The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
	LoginTimeout pulumi.IntInput `pulumi:"loginTimeout"`
	// The port to connect to for this connection. Default=1433
	Port pulumi.IntInput `pulumi:"port"`
	// The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
	QueryTimeout pulumi.IntInput `pulumi:"queryTimeout"`
	// The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
	Retries pulumi.IntInput `pulumi:"retries"`
	// The server hostname.
	Server pulumi.StringInput `pulumi:"server"`
}

func (GetGlobalConnectionFabricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionFabric)(nil)).Elem()
}

func (i GetGlobalConnectionFabricArgs) ToGetGlobalConnectionFabricOutput() GetGlobalConnectionFabricOutput {
	return i.ToGetGlobalConnectionFabricOutputWithContext(context.Background())
}

func (i GetGlobalConnectionFabricArgs) ToGetGlobalConnectionFabricOutputWithContext(ctx context.Context) GetGlobalConnectionFabricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGlobalConnectionFabricOutput)
}

type GetGlobalConnectionFabricOutput struct{ *pulumi.OutputState }

func (GetGlobalConnectionFabricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionFabric)(nil)).Elem()
}

func (o GetGlobalConnectionFabricOutput) ToGetGlobalConnectionFabricOutput() GetGlobalConnectionFabricOutput {
	return o
}

func (o GetGlobalConnectionFabricOutput) ToGetGlobalConnectionFabricOutputWithContext(ctx context.Context) GetGlobalConnectionFabricOutput {
	return o
}

// The database to connect to for this connection.
func (o GetGlobalConnectionFabricOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionFabric) string { return v.Database }).(pulumi.StringOutput)
}

// The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
func (o GetGlobalConnectionFabricOutput) LoginTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionFabric) int { return v.LoginTimeout }).(pulumi.IntOutput)
}

// The port to connect to for this connection. Default=1433
func (o GetGlobalConnectionFabricOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionFabric) int { return v.Port }).(pulumi.IntOutput)
}

// The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
func (o GetGlobalConnectionFabricOutput) QueryTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionFabric) int { return v.QueryTimeout }).(pulumi.IntOutput)
}

// The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
func (o GetGlobalConnectionFabricOutput) Retries() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionFabric) int { return v.Retries }).(pulumi.IntOutput)
}

// The server hostname.
func (o GetGlobalConnectionFabricOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionFabric) string { return v.Server }).(pulumi.StringOutput)
}

type GetGlobalConnectionPostgres struct {
	// The database name for this connection.
	Dbname string `pulumi:"dbname"`
	// The hostname of the database.
	Hostname string `pulumi:"hostname"`
	// The port to connect to for this connection. Default=5432
	Port int `pulumi:"port"`
	// PostgreSQL SSH Tunnel configuration
	SshTunnel GetGlobalConnectionPostgresSshTunnel `pulumi:"sshTunnel"`
}

// GetGlobalConnectionPostgresInput is an input type that accepts GetGlobalConnectionPostgresArgs and GetGlobalConnectionPostgresOutput values.
// You can construct a concrete instance of `GetGlobalConnectionPostgresInput` via:
//
//	GetGlobalConnectionPostgresArgs{...}
type GetGlobalConnectionPostgresInput interface {
	pulumi.Input

	ToGetGlobalConnectionPostgresOutput() GetGlobalConnectionPostgresOutput
	ToGetGlobalConnectionPostgresOutputWithContext(context.Context) GetGlobalConnectionPostgresOutput
}

type GetGlobalConnectionPostgresArgs struct {
	// The database name for this connection.
	Dbname pulumi.StringInput `pulumi:"dbname"`
	// The hostname of the database.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The port to connect to for this connection. Default=5432
	Port pulumi.IntInput `pulumi:"port"`
	// PostgreSQL SSH Tunnel configuration
	SshTunnel GetGlobalConnectionPostgresSshTunnelInput `pulumi:"sshTunnel"`
}

func (GetGlobalConnectionPostgresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionPostgres)(nil)).Elem()
}

func (i GetGlobalConnectionPostgresArgs) ToGetGlobalConnectionPostgresOutput() GetGlobalConnectionPostgresOutput {
	return i.ToGetGlobalConnectionPostgresOutputWithContext(context.Background())
}

func (i GetGlobalConnectionPostgresArgs) ToGetGlobalConnectionPostgresOutputWithContext(ctx context.Context) GetGlobalConnectionPostgresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGlobalConnectionPostgresOutput)
}

type GetGlobalConnectionPostgresOutput struct{ *pulumi.OutputState }

func (GetGlobalConnectionPostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionPostgres)(nil)).Elem()
}

func (o GetGlobalConnectionPostgresOutput) ToGetGlobalConnectionPostgresOutput() GetGlobalConnectionPostgresOutput {
	return o
}

func (o GetGlobalConnectionPostgresOutput) ToGetGlobalConnectionPostgresOutputWithContext(ctx context.Context) GetGlobalConnectionPostgresOutput {
	return o
}

// The database name for this connection.
func (o GetGlobalConnectionPostgresOutput) Dbname() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionPostgres) string { return v.Dbname }).(pulumi.StringOutput)
}

// The hostname of the database.
func (o GetGlobalConnectionPostgresOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionPostgres) string { return v.Hostname }).(pulumi.StringOutput)
}

// The port to connect to for this connection. Default=5432
func (o GetGlobalConnectionPostgresOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionPostgres) int { return v.Port }).(pulumi.IntOutput)
}

// PostgreSQL SSH Tunnel configuration
func (o GetGlobalConnectionPostgresOutput) SshTunnel() GetGlobalConnectionPostgresSshTunnelOutput {
	return o.ApplyT(func(v GetGlobalConnectionPostgres) GetGlobalConnectionPostgresSshTunnel { return v.SshTunnel }).(GetGlobalConnectionPostgresSshTunnelOutput)
}

type GetGlobalConnectionPostgresSshTunnel struct {
	// The hostname for the SSH tunnel.
	Hostname string `pulumi:"hostname"`
	// The ID of the SSH tunnel connection.
	Id int `pulumi:"id"`
	// The HTTP port for the SSH tunnel.
	Port int `pulumi:"port"`
	// The SSH public key generated to allow connecting via SSH tunnel.
	PublicKey string `pulumi:"publicKey"`
	// The username to use for the SSH tunnel.
	Username string `pulumi:"username"`
}

// GetGlobalConnectionPostgresSshTunnelInput is an input type that accepts GetGlobalConnectionPostgresSshTunnelArgs and GetGlobalConnectionPostgresSshTunnelOutput values.
// You can construct a concrete instance of `GetGlobalConnectionPostgresSshTunnelInput` via:
//
//	GetGlobalConnectionPostgresSshTunnelArgs{...}
type GetGlobalConnectionPostgresSshTunnelInput interface {
	pulumi.Input

	ToGetGlobalConnectionPostgresSshTunnelOutput() GetGlobalConnectionPostgresSshTunnelOutput
	ToGetGlobalConnectionPostgresSshTunnelOutputWithContext(context.Context) GetGlobalConnectionPostgresSshTunnelOutput
}

type GetGlobalConnectionPostgresSshTunnelArgs struct {
	// The hostname for the SSH tunnel.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The ID of the SSH tunnel connection.
	Id pulumi.IntInput `pulumi:"id"`
	// The HTTP port for the SSH tunnel.
	Port pulumi.IntInput `pulumi:"port"`
	// The SSH public key generated to allow connecting via SSH tunnel.
	PublicKey pulumi.StringInput `pulumi:"publicKey"`
	// The username to use for the SSH tunnel.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetGlobalConnectionPostgresSshTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionPostgresSshTunnel)(nil)).Elem()
}

func (i GetGlobalConnectionPostgresSshTunnelArgs) ToGetGlobalConnectionPostgresSshTunnelOutput() GetGlobalConnectionPostgresSshTunnelOutput {
	return i.ToGetGlobalConnectionPostgresSshTunnelOutputWithContext(context.Background())
}

func (i GetGlobalConnectionPostgresSshTunnelArgs) ToGetGlobalConnectionPostgresSshTunnelOutputWithContext(ctx context.Context) GetGlobalConnectionPostgresSshTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGlobalConnectionPostgresSshTunnelOutput)
}

type GetGlobalConnectionPostgresSshTunnelOutput struct{ *pulumi.OutputState }

func (GetGlobalConnectionPostgresSshTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionPostgresSshTunnel)(nil)).Elem()
}

func (o GetGlobalConnectionPostgresSshTunnelOutput) ToGetGlobalConnectionPostgresSshTunnelOutput() GetGlobalConnectionPostgresSshTunnelOutput {
	return o
}

func (o GetGlobalConnectionPostgresSshTunnelOutput) ToGetGlobalConnectionPostgresSshTunnelOutputWithContext(ctx context.Context) GetGlobalConnectionPostgresSshTunnelOutput {
	return o
}

// The hostname for the SSH tunnel.
func (o GetGlobalConnectionPostgresSshTunnelOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionPostgresSshTunnel) string { return v.Hostname }).(pulumi.StringOutput)
}

// The ID of the SSH tunnel connection.
func (o GetGlobalConnectionPostgresSshTunnelOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionPostgresSshTunnel) int { return v.Id }).(pulumi.IntOutput)
}

// The HTTP port for the SSH tunnel.
func (o GetGlobalConnectionPostgresSshTunnelOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionPostgresSshTunnel) int { return v.Port }).(pulumi.IntOutput)
}

// The SSH public key generated to allow connecting via SSH tunnel.
func (o GetGlobalConnectionPostgresSshTunnelOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionPostgresSshTunnel) string { return v.PublicKey }).(pulumi.StringOutput)
}

// The username to use for the SSH tunnel.
func (o GetGlobalConnectionPostgresSshTunnelOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionPostgresSshTunnel) string { return v.Username }).(pulumi.StringOutput)
}

type GetGlobalConnectionRedshift struct {
	// The database name for this connection.
	Dbname string `pulumi:"dbname"`
	// The hostname of the data warehouse.
	Hostname string `pulumi:"hostname"`
	// The port to connect to for this connection. Default=5432
	Port int `pulumi:"port"`
	// Redshift SSH Tunnel configuration
	SshTunnel GetGlobalConnectionRedshiftSshTunnel `pulumi:"sshTunnel"`
}

// GetGlobalConnectionRedshiftInput is an input type that accepts GetGlobalConnectionRedshiftArgs and GetGlobalConnectionRedshiftOutput values.
// You can construct a concrete instance of `GetGlobalConnectionRedshiftInput` via:
//
//	GetGlobalConnectionRedshiftArgs{...}
type GetGlobalConnectionRedshiftInput interface {
	pulumi.Input

	ToGetGlobalConnectionRedshiftOutput() GetGlobalConnectionRedshiftOutput
	ToGetGlobalConnectionRedshiftOutputWithContext(context.Context) GetGlobalConnectionRedshiftOutput
}

type GetGlobalConnectionRedshiftArgs struct {
	// The database name for this connection.
	Dbname pulumi.StringInput `pulumi:"dbname"`
	// The hostname of the data warehouse.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The port to connect to for this connection. Default=5432
	Port pulumi.IntInput `pulumi:"port"`
	// Redshift SSH Tunnel configuration
	SshTunnel GetGlobalConnectionRedshiftSshTunnelInput `pulumi:"sshTunnel"`
}

func (GetGlobalConnectionRedshiftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionRedshift)(nil)).Elem()
}

func (i GetGlobalConnectionRedshiftArgs) ToGetGlobalConnectionRedshiftOutput() GetGlobalConnectionRedshiftOutput {
	return i.ToGetGlobalConnectionRedshiftOutputWithContext(context.Background())
}

func (i GetGlobalConnectionRedshiftArgs) ToGetGlobalConnectionRedshiftOutputWithContext(ctx context.Context) GetGlobalConnectionRedshiftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGlobalConnectionRedshiftOutput)
}

type GetGlobalConnectionRedshiftOutput struct{ *pulumi.OutputState }

func (GetGlobalConnectionRedshiftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionRedshift)(nil)).Elem()
}

func (o GetGlobalConnectionRedshiftOutput) ToGetGlobalConnectionRedshiftOutput() GetGlobalConnectionRedshiftOutput {
	return o
}

func (o GetGlobalConnectionRedshiftOutput) ToGetGlobalConnectionRedshiftOutputWithContext(ctx context.Context) GetGlobalConnectionRedshiftOutput {
	return o
}

// The database name for this connection.
func (o GetGlobalConnectionRedshiftOutput) Dbname() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionRedshift) string { return v.Dbname }).(pulumi.StringOutput)
}

// The hostname of the data warehouse.
func (o GetGlobalConnectionRedshiftOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionRedshift) string { return v.Hostname }).(pulumi.StringOutput)
}

// The port to connect to for this connection. Default=5432
func (o GetGlobalConnectionRedshiftOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionRedshift) int { return v.Port }).(pulumi.IntOutput)
}

// Redshift SSH Tunnel configuration
func (o GetGlobalConnectionRedshiftOutput) SshTunnel() GetGlobalConnectionRedshiftSshTunnelOutput {
	return o.ApplyT(func(v GetGlobalConnectionRedshift) GetGlobalConnectionRedshiftSshTunnel { return v.SshTunnel }).(GetGlobalConnectionRedshiftSshTunnelOutput)
}

type GetGlobalConnectionRedshiftSshTunnel struct {
	// The hostname for the SSH tunnel.
	Hostname string `pulumi:"hostname"`
	// The ID of the SSH tunnel connection.
	Id int `pulumi:"id"`
	// The HTTP port for the SSH tunnel.
	Port int `pulumi:"port"`
	// The SSH public key generated to allow connecting via SSH tunnel.
	PublicKey string `pulumi:"publicKey"`
	// The username to use for the SSH tunnel.
	Username string `pulumi:"username"`
}

// GetGlobalConnectionRedshiftSshTunnelInput is an input type that accepts GetGlobalConnectionRedshiftSshTunnelArgs and GetGlobalConnectionRedshiftSshTunnelOutput values.
// You can construct a concrete instance of `GetGlobalConnectionRedshiftSshTunnelInput` via:
//
//	GetGlobalConnectionRedshiftSshTunnelArgs{...}
type GetGlobalConnectionRedshiftSshTunnelInput interface {
	pulumi.Input

	ToGetGlobalConnectionRedshiftSshTunnelOutput() GetGlobalConnectionRedshiftSshTunnelOutput
	ToGetGlobalConnectionRedshiftSshTunnelOutputWithContext(context.Context) GetGlobalConnectionRedshiftSshTunnelOutput
}

type GetGlobalConnectionRedshiftSshTunnelArgs struct {
	// The hostname for the SSH tunnel.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The ID of the SSH tunnel connection.
	Id pulumi.IntInput `pulumi:"id"`
	// The HTTP port for the SSH tunnel.
	Port pulumi.IntInput `pulumi:"port"`
	// The SSH public key generated to allow connecting via SSH tunnel.
	PublicKey pulumi.StringInput `pulumi:"publicKey"`
	// The username to use for the SSH tunnel.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetGlobalConnectionRedshiftSshTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionRedshiftSshTunnel)(nil)).Elem()
}

func (i GetGlobalConnectionRedshiftSshTunnelArgs) ToGetGlobalConnectionRedshiftSshTunnelOutput() GetGlobalConnectionRedshiftSshTunnelOutput {
	return i.ToGetGlobalConnectionRedshiftSshTunnelOutputWithContext(context.Background())
}

func (i GetGlobalConnectionRedshiftSshTunnelArgs) ToGetGlobalConnectionRedshiftSshTunnelOutputWithContext(ctx context.Context) GetGlobalConnectionRedshiftSshTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGlobalConnectionRedshiftSshTunnelOutput)
}

type GetGlobalConnectionRedshiftSshTunnelOutput struct{ *pulumi.OutputState }

func (GetGlobalConnectionRedshiftSshTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionRedshiftSshTunnel)(nil)).Elem()
}

func (o GetGlobalConnectionRedshiftSshTunnelOutput) ToGetGlobalConnectionRedshiftSshTunnelOutput() GetGlobalConnectionRedshiftSshTunnelOutput {
	return o
}

func (o GetGlobalConnectionRedshiftSshTunnelOutput) ToGetGlobalConnectionRedshiftSshTunnelOutputWithContext(ctx context.Context) GetGlobalConnectionRedshiftSshTunnelOutput {
	return o
}

// The hostname for the SSH tunnel.
func (o GetGlobalConnectionRedshiftSshTunnelOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionRedshiftSshTunnel) string { return v.Hostname }).(pulumi.StringOutput)
}

// The ID of the SSH tunnel connection.
func (o GetGlobalConnectionRedshiftSshTunnelOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionRedshiftSshTunnel) int { return v.Id }).(pulumi.IntOutput)
}

// The HTTP port for the SSH tunnel.
func (o GetGlobalConnectionRedshiftSshTunnelOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionRedshiftSshTunnel) int { return v.Port }).(pulumi.IntOutput)
}

// The SSH public key generated to allow connecting via SSH tunnel.
func (o GetGlobalConnectionRedshiftSshTunnelOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionRedshiftSshTunnel) string { return v.PublicKey }).(pulumi.StringOutput)
}

// The username to use for the SSH tunnel.
func (o GetGlobalConnectionRedshiftSshTunnelOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionRedshiftSshTunnel) string { return v.Username }).(pulumi.StringOutput)
}

type GetGlobalConnectionSnowflake struct {
	// The Snowflake account name
	Account string `pulumi:"account"`
	// Whether to allow Snowflake OAuth for the connection. If true, the `oauthClientId` and `oauthClientSecret` fields must be set
	AllowSso bool `pulumi:"allowSso"`
	// If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (> 4 hours)
	ClientSessionKeepAlive bool `pulumi:"clientSessionKeepAlive"`
	// The default database for the connection
	Database string `pulumi:"database"`
	// OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake
	OauthClientId string `pulumi:"oauthClientId"`
	// OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake
	OauthClientSecret string `pulumi:"oauthClientSecret"`
	// The Snowflake role to use when running queries on the connection
	Role string `pulumi:"role"`
	// The default Snowflake Warehouse to use for the connection
	Warehouse string `pulumi:"warehouse"`
}

// GetGlobalConnectionSnowflakeInput is an input type that accepts GetGlobalConnectionSnowflakeArgs and GetGlobalConnectionSnowflakeOutput values.
// You can construct a concrete instance of `GetGlobalConnectionSnowflakeInput` via:
//
//	GetGlobalConnectionSnowflakeArgs{...}
type GetGlobalConnectionSnowflakeInput interface {
	pulumi.Input

	ToGetGlobalConnectionSnowflakeOutput() GetGlobalConnectionSnowflakeOutput
	ToGetGlobalConnectionSnowflakeOutputWithContext(context.Context) GetGlobalConnectionSnowflakeOutput
}

type GetGlobalConnectionSnowflakeArgs struct {
	// The Snowflake account name
	Account pulumi.StringInput `pulumi:"account"`
	// Whether to allow Snowflake OAuth for the connection. If true, the `oauthClientId` and `oauthClientSecret` fields must be set
	AllowSso pulumi.BoolInput `pulumi:"allowSso"`
	// If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (> 4 hours)
	ClientSessionKeepAlive pulumi.BoolInput `pulumi:"clientSessionKeepAlive"`
	// The default database for the connection
	Database pulumi.StringInput `pulumi:"database"`
	// OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake
	OauthClientId pulumi.StringInput `pulumi:"oauthClientId"`
	// OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake
	OauthClientSecret pulumi.StringInput `pulumi:"oauthClientSecret"`
	// The Snowflake role to use when running queries on the connection
	Role pulumi.StringInput `pulumi:"role"`
	// The default Snowflake Warehouse to use for the connection
	Warehouse pulumi.StringInput `pulumi:"warehouse"`
}

func (GetGlobalConnectionSnowflakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionSnowflake)(nil)).Elem()
}

func (i GetGlobalConnectionSnowflakeArgs) ToGetGlobalConnectionSnowflakeOutput() GetGlobalConnectionSnowflakeOutput {
	return i.ToGetGlobalConnectionSnowflakeOutputWithContext(context.Background())
}

func (i GetGlobalConnectionSnowflakeArgs) ToGetGlobalConnectionSnowflakeOutputWithContext(ctx context.Context) GetGlobalConnectionSnowflakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGlobalConnectionSnowflakeOutput)
}

type GetGlobalConnectionSnowflakeOutput struct{ *pulumi.OutputState }

func (GetGlobalConnectionSnowflakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionSnowflake)(nil)).Elem()
}

func (o GetGlobalConnectionSnowflakeOutput) ToGetGlobalConnectionSnowflakeOutput() GetGlobalConnectionSnowflakeOutput {
	return o
}

func (o GetGlobalConnectionSnowflakeOutput) ToGetGlobalConnectionSnowflakeOutputWithContext(ctx context.Context) GetGlobalConnectionSnowflakeOutput {
	return o
}

// The Snowflake account name
func (o GetGlobalConnectionSnowflakeOutput) Account() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionSnowflake) string { return v.Account }).(pulumi.StringOutput)
}

// Whether to allow Snowflake OAuth for the connection. If true, the `oauthClientId` and `oauthClientSecret` fields must be set
func (o GetGlobalConnectionSnowflakeOutput) AllowSso() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGlobalConnectionSnowflake) bool { return v.AllowSso }).(pulumi.BoolOutput)
}

// If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (> 4 hours)
func (o GetGlobalConnectionSnowflakeOutput) ClientSessionKeepAlive() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGlobalConnectionSnowflake) bool { return v.ClientSessionKeepAlive }).(pulumi.BoolOutput)
}

// The default database for the connection
func (o GetGlobalConnectionSnowflakeOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionSnowflake) string { return v.Database }).(pulumi.StringOutput)
}

// OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake
func (o GetGlobalConnectionSnowflakeOutput) OauthClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionSnowflake) string { return v.OauthClientId }).(pulumi.StringOutput)
}

// OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake
func (o GetGlobalConnectionSnowflakeOutput) OauthClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionSnowflake) string { return v.OauthClientSecret }).(pulumi.StringOutput)
}

// The Snowflake role to use when running queries on the connection
func (o GetGlobalConnectionSnowflakeOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionSnowflake) string { return v.Role }).(pulumi.StringOutput)
}

// The default Snowflake Warehouse to use for the connection
func (o GetGlobalConnectionSnowflakeOutput) Warehouse() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionSnowflake) string { return v.Warehouse }).(pulumi.StringOutput)
}

type GetGlobalConnectionStarburst struct {
	// The hostname of the account to connect to.
	Host string `pulumi:"host"`
	// The authentication method. Only LDAP for now.
	Method string `pulumi:"method"`
	// The port to connect to for this connection. Default=443
	Port int `pulumi:"port"`
}

// GetGlobalConnectionStarburstInput is an input type that accepts GetGlobalConnectionStarburstArgs and GetGlobalConnectionStarburstOutput values.
// You can construct a concrete instance of `GetGlobalConnectionStarburstInput` via:
//
//	GetGlobalConnectionStarburstArgs{...}
type GetGlobalConnectionStarburstInput interface {
	pulumi.Input

	ToGetGlobalConnectionStarburstOutput() GetGlobalConnectionStarburstOutput
	ToGetGlobalConnectionStarburstOutputWithContext(context.Context) GetGlobalConnectionStarburstOutput
}

type GetGlobalConnectionStarburstArgs struct {
	// The hostname of the account to connect to.
	Host pulumi.StringInput `pulumi:"host"`
	// The authentication method. Only LDAP for now.
	Method pulumi.StringInput `pulumi:"method"`
	// The port to connect to for this connection. Default=443
	Port pulumi.IntInput `pulumi:"port"`
}

func (GetGlobalConnectionStarburstArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionStarburst)(nil)).Elem()
}

func (i GetGlobalConnectionStarburstArgs) ToGetGlobalConnectionStarburstOutput() GetGlobalConnectionStarburstOutput {
	return i.ToGetGlobalConnectionStarburstOutputWithContext(context.Background())
}

func (i GetGlobalConnectionStarburstArgs) ToGetGlobalConnectionStarburstOutputWithContext(ctx context.Context) GetGlobalConnectionStarburstOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGlobalConnectionStarburstOutput)
}

type GetGlobalConnectionStarburstOutput struct{ *pulumi.OutputState }

func (GetGlobalConnectionStarburstOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionStarburst)(nil)).Elem()
}

func (o GetGlobalConnectionStarburstOutput) ToGetGlobalConnectionStarburstOutput() GetGlobalConnectionStarburstOutput {
	return o
}

func (o GetGlobalConnectionStarburstOutput) ToGetGlobalConnectionStarburstOutputWithContext(ctx context.Context) GetGlobalConnectionStarburstOutput {
	return o
}

// The hostname of the account to connect to.
func (o GetGlobalConnectionStarburstOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionStarburst) string { return v.Host }).(pulumi.StringOutput)
}

// The authentication method. Only LDAP for now.
func (o GetGlobalConnectionStarburstOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionStarburst) string { return v.Method }).(pulumi.StringOutput)
}

// The port to connect to for this connection. Default=443
func (o GetGlobalConnectionStarburstOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionStarburst) int { return v.Port }).(pulumi.IntOutput)
}

type GetGlobalConnectionSynapse struct {
	// The database to connect to for this connection.
	Database string `pulumi:"database"`
	// The server hostname.
	Host string `pulumi:"host"`
	// The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
	LoginTimeout int `pulumi:"loginTimeout"`
	// The port to connect to for this connection. Default=1433
	Port int `pulumi:"port"`
	// The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
	QueryTimeout int `pulumi:"queryTimeout"`
	// The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
	Retries int `pulumi:"retries"`
}

// GetGlobalConnectionSynapseInput is an input type that accepts GetGlobalConnectionSynapseArgs and GetGlobalConnectionSynapseOutput values.
// You can construct a concrete instance of `GetGlobalConnectionSynapseInput` via:
//
//	GetGlobalConnectionSynapseArgs{...}
type GetGlobalConnectionSynapseInput interface {
	pulumi.Input

	ToGetGlobalConnectionSynapseOutput() GetGlobalConnectionSynapseOutput
	ToGetGlobalConnectionSynapseOutputWithContext(context.Context) GetGlobalConnectionSynapseOutput
}

type GetGlobalConnectionSynapseArgs struct {
	// The database to connect to for this connection.
	Database pulumi.StringInput `pulumi:"database"`
	// The server hostname.
	Host pulumi.StringInput `pulumi:"host"`
	// The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
	LoginTimeout pulumi.IntInput `pulumi:"loginTimeout"`
	// The port to connect to for this connection. Default=1433
	Port pulumi.IntInput `pulumi:"port"`
	// The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
	QueryTimeout pulumi.IntInput `pulumi:"queryTimeout"`
	// The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
	Retries pulumi.IntInput `pulumi:"retries"`
}

func (GetGlobalConnectionSynapseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionSynapse)(nil)).Elem()
}

func (i GetGlobalConnectionSynapseArgs) ToGetGlobalConnectionSynapseOutput() GetGlobalConnectionSynapseOutput {
	return i.ToGetGlobalConnectionSynapseOutputWithContext(context.Background())
}

func (i GetGlobalConnectionSynapseArgs) ToGetGlobalConnectionSynapseOutputWithContext(ctx context.Context) GetGlobalConnectionSynapseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGlobalConnectionSynapseOutput)
}

type GetGlobalConnectionSynapseOutput struct{ *pulumi.OutputState }

func (GetGlobalConnectionSynapseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionSynapse)(nil)).Elem()
}

func (o GetGlobalConnectionSynapseOutput) ToGetGlobalConnectionSynapseOutput() GetGlobalConnectionSynapseOutput {
	return o
}

func (o GetGlobalConnectionSynapseOutput) ToGetGlobalConnectionSynapseOutputWithContext(ctx context.Context) GetGlobalConnectionSynapseOutput {
	return o
}

// The database to connect to for this connection.
func (o GetGlobalConnectionSynapseOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionSynapse) string { return v.Database }).(pulumi.StringOutput)
}

// The server hostname.
func (o GetGlobalConnectionSynapseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionSynapse) string { return v.Host }).(pulumi.StringOutput)
}

// The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
func (o GetGlobalConnectionSynapseOutput) LoginTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionSynapse) int { return v.LoginTimeout }).(pulumi.IntOutput)
}

// The port to connect to for this connection. Default=1433
func (o GetGlobalConnectionSynapseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionSynapse) int { return v.Port }).(pulumi.IntOutput)
}

// The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
func (o GetGlobalConnectionSynapseOutput) QueryTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionSynapse) int { return v.QueryTimeout }).(pulumi.IntOutput)
}

// The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
func (o GetGlobalConnectionSynapseOutput) Retries() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionSynapse) int { return v.Retries }).(pulumi.IntOutput)
}

type GetGlobalConnectionsConnection struct {
	// Type of adapter used for the connection
	AdapterVersion string `pulumi:"adapterVersion"`
	// When the connection was created
	CreatedAt string `pulumi:"createdAt"`
	// Number of environments using this connection
	EnvironmentCount int `pulumi:"environmentCount"`
	// Connection Identifier
	Id                 int  `pulumi:"id"`
	IsSshTunnelEnabled bool `pulumi:"isSshTunnelEnabled"`
	// Connection name
	Name                 string `pulumi:"name"`
	OauthConfigurationId int    `pulumi:"oauthConfigurationId"`
	// Private Link Endpoint ID.
	PrivateLinkEndpointId int `pulumi:"privateLinkEndpointId"`
	// When the connection was updated
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetGlobalConnectionsConnectionInput is an input type that accepts GetGlobalConnectionsConnectionArgs and GetGlobalConnectionsConnectionOutput values.
// You can construct a concrete instance of `GetGlobalConnectionsConnectionInput` via:
//
//	GetGlobalConnectionsConnectionArgs{...}
type GetGlobalConnectionsConnectionInput interface {
	pulumi.Input

	ToGetGlobalConnectionsConnectionOutput() GetGlobalConnectionsConnectionOutput
	ToGetGlobalConnectionsConnectionOutputWithContext(context.Context) GetGlobalConnectionsConnectionOutput
}

type GetGlobalConnectionsConnectionArgs struct {
	// Type of adapter used for the connection
	AdapterVersion pulumi.StringInput `pulumi:"adapterVersion"`
	// When the connection was created
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Number of environments using this connection
	EnvironmentCount pulumi.IntInput `pulumi:"environmentCount"`
	// Connection Identifier
	Id                 pulumi.IntInput  `pulumi:"id"`
	IsSshTunnelEnabled pulumi.BoolInput `pulumi:"isSshTunnelEnabled"`
	// Connection name
	Name                 pulumi.StringInput `pulumi:"name"`
	OauthConfigurationId pulumi.IntInput    `pulumi:"oauthConfigurationId"`
	// Private Link Endpoint ID.
	PrivateLinkEndpointId pulumi.IntInput `pulumi:"privateLinkEndpointId"`
	// When the connection was updated
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetGlobalConnectionsConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionsConnection)(nil)).Elem()
}

func (i GetGlobalConnectionsConnectionArgs) ToGetGlobalConnectionsConnectionOutput() GetGlobalConnectionsConnectionOutput {
	return i.ToGetGlobalConnectionsConnectionOutputWithContext(context.Background())
}

func (i GetGlobalConnectionsConnectionArgs) ToGetGlobalConnectionsConnectionOutputWithContext(ctx context.Context) GetGlobalConnectionsConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGlobalConnectionsConnectionOutput)
}

// GetGlobalConnectionsConnectionArrayInput is an input type that accepts GetGlobalConnectionsConnectionArray and GetGlobalConnectionsConnectionArrayOutput values.
// You can construct a concrete instance of `GetGlobalConnectionsConnectionArrayInput` via:
//
//	GetGlobalConnectionsConnectionArray{ GetGlobalConnectionsConnectionArgs{...} }
type GetGlobalConnectionsConnectionArrayInput interface {
	pulumi.Input

	ToGetGlobalConnectionsConnectionArrayOutput() GetGlobalConnectionsConnectionArrayOutput
	ToGetGlobalConnectionsConnectionArrayOutputWithContext(context.Context) GetGlobalConnectionsConnectionArrayOutput
}

type GetGlobalConnectionsConnectionArray []GetGlobalConnectionsConnectionInput

func (GetGlobalConnectionsConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGlobalConnectionsConnection)(nil)).Elem()
}

func (i GetGlobalConnectionsConnectionArray) ToGetGlobalConnectionsConnectionArrayOutput() GetGlobalConnectionsConnectionArrayOutput {
	return i.ToGetGlobalConnectionsConnectionArrayOutputWithContext(context.Background())
}

func (i GetGlobalConnectionsConnectionArray) ToGetGlobalConnectionsConnectionArrayOutputWithContext(ctx context.Context) GetGlobalConnectionsConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGlobalConnectionsConnectionArrayOutput)
}

type GetGlobalConnectionsConnectionOutput struct{ *pulumi.OutputState }

func (GetGlobalConnectionsConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGlobalConnectionsConnection)(nil)).Elem()
}

func (o GetGlobalConnectionsConnectionOutput) ToGetGlobalConnectionsConnectionOutput() GetGlobalConnectionsConnectionOutput {
	return o
}

func (o GetGlobalConnectionsConnectionOutput) ToGetGlobalConnectionsConnectionOutputWithContext(ctx context.Context) GetGlobalConnectionsConnectionOutput {
	return o
}

// Type of adapter used for the connection
func (o GetGlobalConnectionsConnectionOutput) AdapterVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionsConnection) string { return v.AdapterVersion }).(pulumi.StringOutput)
}

// When the connection was created
func (o GetGlobalConnectionsConnectionOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionsConnection) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Number of environments using this connection
func (o GetGlobalConnectionsConnectionOutput) EnvironmentCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionsConnection) int { return v.EnvironmentCount }).(pulumi.IntOutput)
}

// Connection Identifier
func (o GetGlobalConnectionsConnectionOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionsConnection) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetGlobalConnectionsConnectionOutput) IsSshTunnelEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGlobalConnectionsConnection) bool { return v.IsSshTunnelEnabled }).(pulumi.BoolOutput)
}

// Connection name
func (o GetGlobalConnectionsConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionsConnection) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetGlobalConnectionsConnectionOutput) OauthConfigurationId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionsConnection) int { return v.OauthConfigurationId }).(pulumi.IntOutput)
}

// Private Link Endpoint ID.
func (o GetGlobalConnectionsConnectionOutput) PrivateLinkEndpointId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGlobalConnectionsConnection) int { return v.PrivateLinkEndpointId }).(pulumi.IntOutput)
}

// When the connection was updated
func (o GetGlobalConnectionsConnectionOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetGlobalConnectionsConnection) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetGlobalConnectionsConnectionArrayOutput struct{ *pulumi.OutputState }

func (GetGlobalConnectionsConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGlobalConnectionsConnection)(nil)).Elem()
}

func (o GetGlobalConnectionsConnectionArrayOutput) ToGetGlobalConnectionsConnectionArrayOutput() GetGlobalConnectionsConnectionArrayOutput {
	return o
}

func (o GetGlobalConnectionsConnectionArrayOutput) ToGetGlobalConnectionsConnectionArrayOutputWithContext(ctx context.Context) GetGlobalConnectionsConnectionArrayOutput {
	return o
}

func (o GetGlobalConnectionsConnectionArrayOutput) Index(i pulumi.IntInput) GetGlobalConnectionsConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGlobalConnectionsConnection {
		return vs[0].([]GetGlobalConnectionsConnection)[vs[1].(int)]
	}).(GetGlobalConnectionsConnectionOutput)
}

type GetGroupGroupPermission struct {
	// Whether access should be provided for all projects or not.
	AllProjects bool `pulumi:"allProjects"`
	// Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
	PermissionSet string `pulumi:"permissionSet"`
	// Project ID to apply this permission to for this group.
	ProjectId int `pulumi:"projectId"`
	// What types of environments to apply Write permissions to.
	WritableEnvironmentCategories []string `pulumi:"writableEnvironmentCategories"`
}

// GetGroupGroupPermissionInput is an input type that accepts GetGroupGroupPermissionArgs and GetGroupGroupPermissionOutput values.
// You can construct a concrete instance of `GetGroupGroupPermissionInput` via:
//
//	GetGroupGroupPermissionArgs{...}
type GetGroupGroupPermissionInput interface {
	pulumi.Input

	ToGetGroupGroupPermissionOutput() GetGroupGroupPermissionOutput
	ToGetGroupGroupPermissionOutputWithContext(context.Context) GetGroupGroupPermissionOutput
}

type GetGroupGroupPermissionArgs struct {
	// Whether access should be provided for all projects or not.
	AllProjects pulumi.BoolInput `pulumi:"allProjects"`
	// Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
	PermissionSet pulumi.StringInput `pulumi:"permissionSet"`
	// Project ID to apply this permission to for this group.
	ProjectId pulumi.IntInput `pulumi:"projectId"`
	// What types of environments to apply Write permissions to.
	WritableEnvironmentCategories pulumi.StringArrayInput `pulumi:"writableEnvironmentCategories"`
}

func (GetGroupGroupPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupGroupPermission)(nil)).Elem()
}

func (i GetGroupGroupPermissionArgs) ToGetGroupGroupPermissionOutput() GetGroupGroupPermissionOutput {
	return i.ToGetGroupGroupPermissionOutputWithContext(context.Background())
}

func (i GetGroupGroupPermissionArgs) ToGetGroupGroupPermissionOutputWithContext(ctx context.Context) GetGroupGroupPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupGroupPermissionOutput)
}

// GetGroupGroupPermissionArrayInput is an input type that accepts GetGroupGroupPermissionArray and GetGroupGroupPermissionArrayOutput values.
// You can construct a concrete instance of `GetGroupGroupPermissionArrayInput` via:
//
//	GetGroupGroupPermissionArray{ GetGroupGroupPermissionArgs{...} }
type GetGroupGroupPermissionArrayInput interface {
	pulumi.Input

	ToGetGroupGroupPermissionArrayOutput() GetGroupGroupPermissionArrayOutput
	ToGetGroupGroupPermissionArrayOutputWithContext(context.Context) GetGroupGroupPermissionArrayOutput
}

type GetGroupGroupPermissionArray []GetGroupGroupPermissionInput

func (GetGroupGroupPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupGroupPermission)(nil)).Elem()
}

func (i GetGroupGroupPermissionArray) ToGetGroupGroupPermissionArrayOutput() GetGroupGroupPermissionArrayOutput {
	return i.ToGetGroupGroupPermissionArrayOutputWithContext(context.Background())
}

func (i GetGroupGroupPermissionArray) ToGetGroupGroupPermissionArrayOutputWithContext(ctx context.Context) GetGroupGroupPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupGroupPermissionArrayOutput)
}

type GetGroupGroupPermissionOutput struct{ *pulumi.OutputState }

func (GetGroupGroupPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupGroupPermission)(nil)).Elem()
}

func (o GetGroupGroupPermissionOutput) ToGetGroupGroupPermissionOutput() GetGroupGroupPermissionOutput {
	return o
}

func (o GetGroupGroupPermissionOutput) ToGetGroupGroupPermissionOutputWithContext(ctx context.Context) GetGroupGroupPermissionOutput {
	return o
}

// Whether access should be provided for all projects or not.
func (o GetGroupGroupPermissionOutput) AllProjects() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupGroupPermission) bool { return v.AllProjects }).(pulumi.BoolOutput)
}

// Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
func (o GetGroupGroupPermissionOutput) PermissionSet() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupGroupPermission) string { return v.PermissionSet }).(pulumi.StringOutput)
}

// Project ID to apply this permission to for this group.
func (o GetGroupGroupPermissionOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupGroupPermission) int { return v.ProjectId }).(pulumi.IntOutput)
}

// What types of environments to apply Write permissions to.
func (o GetGroupGroupPermissionOutput) WritableEnvironmentCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetGroupGroupPermission) []string { return v.WritableEnvironmentCategories }).(pulumi.StringArrayOutput)
}

type GetGroupGroupPermissionArrayOutput struct{ *pulumi.OutputState }

func (GetGroupGroupPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupGroupPermission)(nil)).Elem()
}

func (o GetGroupGroupPermissionArrayOutput) ToGetGroupGroupPermissionArrayOutput() GetGroupGroupPermissionArrayOutput {
	return o
}

func (o GetGroupGroupPermissionArrayOutput) ToGetGroupGroupPermissionArrayOutputWithContext(ctx context.Context) GetGroupGroupPermissionArrayOutput {
	return o
}

func (o GetGroupGroupPermissionArrayOutput) Index(i pulumi.IntInput) GetGroupGroupPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupGroupPermission {
		return vs[0].([]GetGroupGroupPermission)[vs[1].(int)]
	}).(GetGroupGroupPermissionOutput)
}

type GetGroupUsersUser struct {
	Email string `pulumi:"email"`
	Id    int    `pulumi:"id"`
}

// GetGroupUsersUserInput is an input type that accepts GetGroupUsersUserArgs and GetGroupUsersUserOutput values.
// You can construct a concrete instance of `GetGroupUsersUserInput` via:
//
//	GetGroupUsersUserArgs{...}
type GetGroupUsersUserInput interface {
	pulumi.Input

	ToGetGroupUsersUserOutput() GetGroupUsersUserOutput
	ToGetGroupUsersUserOutputWithContext(context.Context) GetGroupUsersUserOutput
}

type GetGroupUsersUserArgs struct {
	Email pulumi.StringInput `pulumi:"email"`
	Id    pulumi.IntInput    `pulumi:"id"`
}

func (GetGroupUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupUsersUser)(nil)).Elem()
}

func (i GetGroupUsersUserArgs) ToGetGroupUsersUserOutput() GetGroupUsersUserOutput {
	return i.ToGetGroupUsersUserOutputWithContext(context.Background())
}

func (i GetGroupUsersUserArgs) ToGetGroupUsersUserOutputWithContext(ctx context.Context) GetGroupUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupUsersUserOutput)
}

// GetGroupUsersUserArrayInput is an input type that accepts GetGroupUsersUserArray and GetGroupUsersUserArrayOutput values.
// You can construct a concrete instance of `GetGroupUsersUserArrayInput` via:
//
//	GetGroupUsersUserArray{ GetGroupUsersUserArgs{...} }
type GetGroupUsersUserArrayInput interface {
	pulumi.Input

	ToGetGroupUsersUserArrayOutput() GetGroupUsersUserArrayOutput
	ToGetGroupUsersUserArrayOutputWithContext(context.Context) GetGroupUsersUserArrayOutput
}

type GetGroupUsersUserArray []GetGroupUsersUserInput

func (GetGroupUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupUsersUser)(nil)).Elem()
}

func (i GetGroupUsersUserArray) ToGetGroupUsersUserArrayOutput() GetGroupUsersUserArrayOutput {
	return i.ToGetGroupUsersUserArrayOutputWithContext(context.Background())
}

func (i GetGroupUsersUserArray) ToGetGroupUsersUserArrayOutputWithContext(ctx context.Context) GetGroupUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupUsersUserArrayOutput)
}

type GetGroupUsersUserOutput struct{ *pulumi.OutputState }

func (GetGroupUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupUsersUser)(nil)).Elem()
}

func (o GetGroupUsersUserOutput) ToGetGroupUsersUserOutput() GetGroupUsersUserOutput {
	return o
}

func (o GetGroupUsersUserOutput) ToGetGroupUsersUserOutputWithContext(ctx context.Context) GetGroupUsersUserOutput {
	return o
}

func (o GetGroupUsersUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupUsersUser) string { return v.Email }).(pulumi.StringOutput)
}

func (o GetGroupUsersUserOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupUsersUser) int { return v.Id }).(pulumi.IntOutput)
}

type GetGroupUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetGroupUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupUsersUser)(nil)).Elem()
}

func (o GetGroupUsersUserArrayOutput) ToGetGroupUsersUserArrayOutput() GetGroupUsersUserArrayOutput {
	return o
}

func (o GetGroupUsersUserArrayOutput) ToGetGroupUsersUserArrayOutputWithContext(ctx context.Context) GetGroupUsersUserArrayOutput {
	return o
}

func (o GetGroupUsersUserArrayOutput) Index(i pulumi.IntInput) GetGroupUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupUsersUser {
		return vs[0].([]GetGroupUsersUser)[vs[1].(int)]
	}).(GetGroupUsersUserOutput)
}

type GetJobJobCompletionTriggerCondition struct {
	// The ID of the job that would trigger this job after completion.
	JobId int `pulumi:"jobId"`
	// The ID of the project where the trigger job is running in.
	ProjectId int `pulumi:"projectId"`
	// List of statuses to trigger the job on.
	Statuses []string `pulumi:"statuses"`
}

// GetJobJobCompletionTriggerConditionInput is an input type that accepts GetJobJobCompletionTriggerConditionArgs and GetJobJobCompletionTriggerConditionOutput values.
// You can construct a concrete instance of `GetJobJobCompletionTriggerConditionInput` via:
//
//	GetJobJobCompletionTriggerConditionArgs{...}
type GetJobJobCompletionTriggerConditionInput interface {
	pulumi.Input

	ToGetJobJobCompletionTriggerConditionOutput() GetJobJobCompletionTriggerConditionOutput
	ToGetJobJobCompletionTriggerConditionOutputWithContext(context.Context) GetJobJobCompletionTriggerConditionOutput
}

type GetJobJobCompletionTriggerConditionArgs struct {
	// The ID of the job that would trigger this job after completion.
	JobId pulumi.IntInput `pulumi:"jobId"`
	// The ID of the project where the trigger job is running in.
	ProjectId pulumi.IntInput `pulumi:"projectId"`
	// List of statuses to trigger the job on.
	Statuses pulumi.StringArrayInput `pulumi:"statuses"`
}

func (GetJobJobCompletionTriggerConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobJobCompletionTriggerCondition)(nil)).Elem()
}

func (i GetJobJobCompletionTriggerConditionArgs) ToGetJobJobCompletionTriggerConditionOutput() GetJobJobCompletionTriggerConditionOutput {
	return i.ToGetJobJobCompletionTriggerConditionOutputWithContext(context.Background())
}

func (i GetJobJobCompletionTriggerConditionArgs) ToGetJobJobCompletionTriggerConditionOutputWithContext(ctx context.Context) GetJobJobCompletionTriggerConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobJobCompletionTriggerConditionOutput)
}

// GetJobJobCompletionTriggerConditionArrayInput is an input type that accepts GetJobJobCompletionTriggerConditionArray and GetJobJobCompletionTriggerConditionArrayOutput values.
// You can construct a concrete instance of `GetJobJobCompletionTriggerConditionArrayInput` via:
//
//	GetJobJobCompletionTriggerConditionArray{ GetJobJobCompletionTriggerConditionArgs{...} }
type GetJobJobCompletionTriggerConditionArrayInput interface {
	pulumi.Input

	ToGetJobJobCompletionTriggerConditionArrayOutput() GetJobJobCompletionTriggerConditionArrayOutput
	ToGetJobJobCompletionTriggerConditionArrayOutputWithContext(context.Context) GetJobJobCompletionTriggerConditionArrayOutput
}

type GetJobJobCompletionTriggerConditionArray []GetJobJobCompletionTriggerConditionInput

func (GetJobJobCompletionTriggerConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobJobCompletionTriggerCondition)(nil)).Elem()
}

func (i GetJobJobCompletionTriggerConditionArray) ToGetJobJobCompletionTriggerConditionArrayOutput() GetJobJobCompletionTriggerConditionArrayOutput {
	return i.ToGetJobJobCompletionTriggerConditionArrayOutputWithContext(context.Background())
}

func (i GetJobJobCompletionTriggerConditionArray) ToGetJobJobCompletionTriggerConditionArrayOutputWithContext(ctx context.Context) GetJobJobCompletionTriggerConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobJobCompletionTriggerConditionArrayOutput)
}

type GetJobJobCompletionTriggerConditionOutput struct{ *pulumi.OutputState }

func (GetJobJobCompletionTriggerConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobJobCompletionTriggerCondition)(nil)).Elem()
}

func (o GetJobJobCompletionTriggerConditionOutput) ToGetJobJobCompletionTriggerConditionOutput() GetJobJobCompletionTriggerConditionOutput {
	return o
}

func (o GetJobJobCompletionTriggerConditionOutput) ToGetJobJobCompletionTriggerConditionOutputWithContext(ctx context.Context) GetJobJobCompletionTriggerConditionOutput {
	return o
}

// The ID of the job that would trigger this job after completion.
func (o GetJobJobCompletionTriggerConditionOutput) JobId() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobJobCompletionTriggerCondition) int { return v.JobId }).(pulumi.IntOutput)
}

// The ID of the project where the trigger job is running in.
func (o GetJobJobCompletionTriggerConditionOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobJobCompletionTriggerCondition) int { return v.ProjectId }).(pulumi.IntOutput)
}

// List of statuses to trigger the job on.
func (o GetJobJobCompletionTriggerConditionOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetJobJobCompletionTriggerCondition) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

type GetJobJobCompletionTriggerConditionArrayOutput struct{ *pulumi.OutputState }

func (GetJobJobCompletionTriggerConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobJobCompletionTriggerCondition)(nil)).Elem()
}

func (o GetJobJobCompletionTriggerConditionArrayOutput) ToGetJobJobCompletionTriggerConditionArrayOutput() GetJobJobCompletionTriggerConditionArrayOutput {
	return o
}

func (o GetJobJobCompletionTriggerConditionArrayOutput) ToGetJobJobCompletionTriggerConditionArrayOutputWithContext(ctx context.Context) GetJobJobCompletionTriggerConditionArrayOutput {
	return o
}

func (o GetJobJobCompletionTriggerConditionArrayOutput) Index(i pulumi.IntInput) GetJobJobCompletionTriggerConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJobJobCompletionTriggerCondition {
		return vs[0].([]GetJobJobCompletionTriggerCondition)[vs[1].(int)]
	}).(GetJobJobCompletionTriggerConditionOutput)
}

type GetJobsJob struct {
	// The version of dbt used for the job. If not set, the environment version will be used.
	DbtVersion string `pulumi:"dbtVersion"`
	// The ID of the environment this job defers to
	DeferringEnvironmentId int `pulumi:"deferringEnvironmentId"`
	// [Deprecated - deferral is now set at the environment level] The ID of the job definition this job defers to
	DeferringJobDefinitionId int `pulumi:"deferringJobDefinitionId"`
	// The description of the job
	Description string `pulumi:"description"`
	// Details of the environment the job is running in
	Environment GetJobsJobEnvironment `pulumi:"environment"`
	// The ID of environment
	EnvironmentId int `pulumi:"environmentId"`
	// The list of steps to run in the job
	ExecuteSteps []string            `pulumi:"executeSteps"`
	Execution    GetJobsJobExecution `pulumi:"execution"`
	// Whether the job generate docs
	GenerateDocs bool `pulumi:"generateDocs"`
	// The ID of the job
	Id int `pulumi:"id"`
	// Whether the job is triggered by the completion of another job
	JobCompletionTriggerCondition GetJobsJobJobCompletionTriggerCondition `pulumi:"jobCompletionTriggerCondition"`
	// The type of job (e.g. CI, scheduled)
	JobType string `pulumi:"jobType"`
	// The name of the job
	Name string `pulumi:"name"`
	// The ID of the project
	ProjectId int `pulumi:"projectId"`
	// Whether the job test source freshness
	RunGenerateSources bool               `pulumi:"runGenerateSources"`
	Schedule           GetJobsJobSchedule `pulumi:"schedule"`
	Settings           GetJobsJobSettings `pulumi:"settings"`
	Triggers           GetJobsJobTriggers `pulumi:"triggers"`
	// Whether the CI job should be automatically triggered on draft PRs
	TriggersOnDraftPr bool `pulumi:"triggersOnDraftPr"`
}

// GetJobsJobInput is an input type that accepts GetJobsJobArgs and GetJobsJobOutput values.
// You can construct a concrete instance of `GetJobsJobInput` via:
//
//	GetJobsJobArgs{...}
type GetJobsJobInput interface {
	pulumi.Input

	ToGetJobsJobOutput() GetJobsJobOutput
	ToGetJobsJobOutputWithContext(context.Context) GetJobsJobOutput
}

type GetJobsJobArgs struct {
	// The version of dbt used for the job. If not set, the environment version will be used.
	DbtVersion pulumi.StringInput `pulumi:"dbtVersion"`
	// The ID of the environment this job defers to
	DeferringEnvironmentId pulumi.IntInput `pulumi:"deferringEnvironmentId"`
	// [Deprecated - deferral is now set at the environment level] The ID of the job definition this job defers to
	DeferringJobDefinitionId pulumi.IntInput `pulumi:"deferringJobDefinitionId"`
	// The description of the job
	Description pulumi.StringInput `pulumi:"description"`
	// Details of the environment the job is running in
	Environment GetJobsJobEnvironmentInput `pulumi:"environment"`
	// The ID of environment
	EnvironmentId pulumi.IntInput `pulumi:"environmentId"`
	// The list of steps to run in the job
	ExecuteSteps pulumi.StringArrayInput  `pulumi:"executeSteps"`
	Execution    GetJobsJobExecutionInput `pulumi:"execution"`
	// Whether the job generate docs
	GenerateDocs pulumi.BoolInput `pulumi:"generateDocs"`
	// The ID of the job
	Id pulumi.IntInput `pulumi:"id"`
	// Whether the job is triggered by the completion of another job
	JobCompletionTriggerCondition GetJobsJobJobCompletionTriggerConditionInput `pulumi:"jobCompletionTriggerCondition"`
	// The type of job (e.g. CI, scheduled)
	JobType pulumi.StringInput `pulumi:"jobType"`
	// The name of the job
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the project
	ProjectId pulumi.IntInput `pulumi:"projectId"`
	// Whether the job test source freshness
	RunGenerateSources pulumi.BoolInput        `pulumi:"runGenerateSources"`
	Schedule           GetJobsJobScheduleInput `pulumi:"schedule"`
	Settings           GetJobsJobSettingsInput `pulumi:"settings"`
	Triggers           GetJobsJobTriggersInput `pulumi:"triggers"`
	// Whether the CI job should be automatically triggered on draft PRs
	TriggersOnDraftPr pulumi.BoolInput `pulumi:"triggersOnDraftPr"`
}

func (GetJobsJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJob)(nil)).Elem()
}

func (i GetJobsJobArgs) ToGetJobsJobOutput() GetJobsJobOutput {
	return i.ToGetJobsJobOutputWithContext(context.Background())
}

func (i GetJobsJobArgs) ToGetJobsJobOutputWithContext(ctx context.Context) GetJobsJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobsJobOutput)
}

// GetJobsJobArrayInput is an input type that accepts GetJobsJobArray and GetJobsJobArrayOutput values.
// You can construct a concrete instance of `GetJobsJobArrayInput` via:
//
//	GetJobsJobArray{ GetJobsJobArgs{...} }
type GetJobsJobArrayInput interface {
	pulumi.Input

	ToGetJobsJobArrayOutput() GetJobsJobArrayOutput
	ToGetJobsJobArrayOutputWithContext(context.Context) GetJobsJobArrayOutput
}

type GetJobsJobArray []GetJobsJobInput

func (GetJobsJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobsJob)(nil)).Elem()
}

func (i GetJobsJobArray) ToGetJobsJobArrayOutput() GetJobsJobArrayOutput {
	return i.ToGetJobsJobArrayOutputWithContext(context.Background())
}

func (i GetJobsJobArray) ToGetJobsJobArrayOutputWithContext(ctx context.Context) GetJobsJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobsJobArrayOutput)
}

type GetJobsJobOutput struct{ *pulumi.OutputState }

func (GetJobsJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJob)(nil)).Elem()
}

func (o GetJobsJobOutput) ToGetJobsJobOutput() GetJobsJobOutput {
	return o
}

func (o GetJobsJobOutput) ToGetJobsJobOutputWithContext(ctx context.Context) GetJobsJobOutput {
	return o
}

// The version of dbt used for the job. If not set, the environment version will be used.
func (o GetJobsJobOutput) DbtVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobsJob) string { return v.DbtVersion }).(pulumi.StringOutput)
}

// The ID of the environment this job defers to
func (o GetJobsJobOutput) DeferringEnvironmentId() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJob) int { return v.DeferringEnvironmentId }).(pulumi.IntOutput)
}

// [Deprecated - deferral is now set at the environment level] The ID of the job definition this job defers to
func (o GetJobsJobOutput) DeferringJobDefinitionId() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJob) int { return v.DeferringJobDefinitionId }).(pulumi.IntOutput)
}

// The description of the job
func (o GetJobsJobOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobsJob) string { return v.Description }).(pulumi.StringOutput)
}

// Details of the environment the job is running in
func (o GetJobsJobOutput) Environment() GetJobsJobEnvironmentOutput {
	return o.ApplyT(func(v GetJobsJob) GetJobsJobEnvironment { return v.Environment }).(GetJobsJobEnvironmentOutput)
}

// The ID of environment
func (o GetJobsJobOutput) EnvironmentId() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJob) int { return v.EnvironmentId }).(pulumi.IntOutput)
}

// The list of steps to run in the job
func (o GetJobsJobOutput) ExecuteSteps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetJobsJob) []string { return v.ExecuteSteps }).(pulumi.StringArrayOutput)
}

func (o GetJobsJobOutput) Execution() GetJobsJobExecutionOutput {
	return o.ApplyT(func(v GetJobsJob) GetJobsJobExecution { return v.Execution }).(GetJobsJobExecutionOutput)
}

// Whether the job generate docs
func (o GetJobsJobOutput) GenerateDocs() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobsJob) bool { return v.GenerateDocs }).(pulumi.BoolOutput)
}

// The ID of the job
func (o GetJobsJobOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJob) int { return v.Id }).(pulumi.IntOutput)
}

// Whether the job is triggered by the completion of another job
func (o GetJobsJobOutput) JobCompletionTriggerCondition() GetJobsJobJobCompletionTriggerConditionOutput {
	return o.ApplyT(func(v GetJobsJob) GetJobsJobJobCompletionTriggerCondition { return v.JobCompletionTriggerCondition }).(GetJobsJobJobCompletionTriggerConditionOutput)
}

// The type of job (e.g. CI, scheduled)
func (o GetJobsJobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobsJob) string { return v.JobType }).(pulumi.StringOutput)
}

// The name of the job
func (o GetJobsJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobsJob) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project
func (o GetJobsJobOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJob) int { return v.ProjectId }).(pulumi.IntOutput)
}

// Whether the job test source freshness
func (o GetJobsJobOutput) RunGenerateSources() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobsJob) bool { return v.RunGenerateSources }).(pulumi.BoolOutput)
}

func (o GetJobsJobOutput) Schedule() GetJobsJobScheduleOutput {
	return o.ApplyT(func(v GetJobsJob) GetJobsJobSchedule { return v.Schedule }).(GetJobsJobScheduleOutput)
}

func (o GetJobsJobOutput) Settings() GetJobsJobSettingsOutput {
	return o.ApplyT(func(v GetJobsJob) GetJobsJobSettings { return v.Settings }).(GetJobsJobSettingsOutput)
}

func (o GetJobsJobOutput) Triggers() GetJobsJobTriggersOutput {
	return o.ApplyT(func(v GetJobsJob) GetJobsJobTriggers { return v.Triggers }).(GetJobsJobTriggersOutput)
}

// Whether the CI job should be automatically triggered on draft PRs
func (o GetJobsJobOutput) TriggersOnDraftPr() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobsJob) bool { return v.TriggersOnDraftPr }).(pulumi.BoolOutput)
}

type GetJobsJobArrayOutput struct{ *pulumi.OutputState }

func (GetJobsJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobsJob)(nil)).Elem()
}

func (o GetJobsJobArrayOutput) ToGetJobsJobArrayOutput() GetJobsJobArrayOutput {
	return o
}

func (o GetJobsJobArrayOutput) ToGetJobsJobArrayOutputWithContext(ctx context.Context) GetJobsJobArrayOutput {
	return o
}

func (o GetJobsJobArrayOutput) Index(i pulumi.IntInput) GetJobsJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJobsJob {
		return vs[0].([]GetJobsJob)[vs[1].(int)]
	}).(GetJobsJobOutput)
}

type GetJobsJobEnvironment struct {
	// Type of deployment environment: staging, production
	DeploymentType string `pulumi:"deploymentType"`
	// ID of the environment
	Id int `pulumi:"id"`
	// Name of the environment
	Name      string `pulumi:"name"`
	ProjectId int    `pulumi:"projectId"`
	// Environment type: development or deployment
	Type string `pulumi:"type"`
}

// GetJobsJobEnvironmentInput is an input type that accepts GetJobsJobEnvironmentArgs and GetJobsJobEnvironmentOutput values.
// You can construct a concrete instance of `GetJobsJobEnvironmentInput` via:
//
//	GetJobsJobEnvironmentArgs{...}
type GetJobsJobEnvironmentInput interface {
	pulumi.Input

	ToGetJobsJobEnvironmentOutput() GetJobsJobEnvironmentOutput
	ToGetJobsJobEnvironmentOutputWithContext(context.Context) GetJobsJobEnvironmentOutput
}

type GetJobsJobEnvironmentArgs struct {
	// Type of deployment environment: staging, production
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
	// ID of the environment
	Id pulumi.IntInput `pulumi:"id"`
	// Name of the environment
	Name      pulumi.StringInput `pulumi:"name"`
	ProjectId pulumi.IntInput    `pulumi:"projectId"`
	// Environment type: development or deployment
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetJobsJobEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobEnvironment)(nil)).Elem()
}

func (i GetJobsJobEnvironmentArgs) ToGetJobsJobEnvironmentOutput() GetJobsJobEnvironmentOutput {
	return i.ToGetJobsJobEnvironmentOutputWithContext(context.Background())
}

func (i GetJobsJobEnvironmentArgs) ToGetJobsJobEnvironmentOutputWithContext(ctx context.Context) GetJobsJobEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobsJobEnvironmentOutput)
}

type GetJobsJobEnvironmentOutput struct{ *pulumi.OutputState }

func (GetJobsJobEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobEnvironment)(nil)).Elem()
}

func (o GetJobsJobEnvironmentOutput) ToGetJobsJobEnvironmentOutput() GetJobsJobEnvironmentOutput {
	return o
}

func (o GetJobsJobEnvironmentOutput) ToGetJobsJobEnvironmentOutputWithContext(ctx context.Context) GetJobsJobEnvironmentOutput {
	return o
}

// Type of deployment environment: staging, production
func (o GetJobsJobEnvironmentOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobsJobEnvironment) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// ID of the environment
func (o GetJobsJobEnvironmentOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJobEnvironment) int { return v.Id }).(pulumi.IntOutput)
}

// Name of the environment
func (o GetJobsJobEnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobsJobEnvironment) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetJobsJobEnvironmentOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJobEnvironment) int { return v.ProjectId }).(pulumi.IntOutput)
}

// Environment type: development or deployment
func (o GetJobsJobEnvironmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobsJobEnvironment) string { return v.Type }).(pulumi.StringOutput)
}

type GetJobsJobExecution struct {
	// The number of seconds before the job times out
	TimeoutSeconds int `pulumi:"timeoutSeconds"`
}

// GetJobsJobExecutionInput is an input type that accepts GetJobsJobExecutionArgs and GetJobsJobExecutionOutput values.
// You can construct a concrete instance of `GetJobsJobExecutionInput` via:
//
//	GetJobsJobExecutionArgs{...}
type GetJobsJobExecutionInput interface {
	pulumi.Input

	ToGetJobsJobExecutionOutput() GetJobsJobExecutionOutput
	ToGetJobsJobExecutionOutputWithContext(context.Context) GetJobsJobExecutionOutput
}

type GetJobsJobExecutionArgs struct {
	// The number of seconds before the job times out
	TimeoutSeconds pulumi.IntInput `pulumi:"timeoutSeconds"`
}

func (GetJobsJobExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobExecution)(nil)).Elem()
}

func (i GetJobsJobExecutionArgs) ToGetJobsJobExecutionOutput() GetJobsJobExecutionOutput {
	return i.ToGetJobsJobExecutionOutputWithContext(context.Background())
}

func (i GetJobsJobExecutionArgs) ToGetJobsJobExecutionOutputWithContext(ctx context.Context) GetJobsJobExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobsJobExecutionOutput)
}

type GetJobsJobExecutionOutput struct{ *pulumi.OutputState }

func (GetJobsJobExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobExecution)(nil)).Elem()
}

func (o GetJobsJobExecutionOutput) ToGetJobsJobExecutionOutput() GetJobsJobExecutionOutput {
	return o
}

func (o GetJobsJobExecutionOutput) ToGetJobsJobExecutionOutputWithContext(ctx context.Context) GetJobsJobExecutionOutput {
	return o
}

// The number of seconds before the job times out
func (o GetJobsJobExecutionOutput) TimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJobExecution) int { return v.TimeoutSeconds }).(pulumi.IntOutput)
}

type GetJobsJobJobCompletionTriggerCondition struct {
	Condition GetJobsJobJobCompletionTriggerConditionCondition `pulumi:"condition"`
}

// GetJobsJobJobCompletionTriggerConditionInput is an input type that accepts GetJobsJobJobCompletionTriggerConditionArgs and GetJobsJobJobCompletionTriggerConditionOutput values.
// You can construct a concrete instance of `GetJobsJobJobCompletionTriggerConditionInput` via:
//
//	GetJobsJobJobCompletionTriggerConditionArgs{...}
type GetJobsJobJobCompletionTriggerConditionInput interface {
	pulumi.Input

	ToGetJobsJobJobCompletionTriggerConditionOutput() GetJobsJobJobCompletionTriggerConditionOutput
	ToGetJobsJobJobCompletionTriggerConditionOutputWithContext(context.Context) GetJobsJobJobCompletionTriggerConditionOutput
}

type GetJobsJobJobCompletionTriggerConditionArgs struct {
	Condition GetJobsJobJobCompletionTriggerConditionConditionInput `pulumi:"condition"`
}

func (GetJobsJobJobCompletionTriggerConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobJobCompletionTriggerCondition)(nil)).Elem()
}

func (i GetJobsJobJobCompletionTriggerConditionArgs) ToGetJobsJobJobCompletionTriggerConditionOutput() GetJobsJobJobCompletionTriggerConditionOutput {
	return i.ToGetJobsJobJobCompletionTriggerConditionOutputWithContext(context.Background())
}

func (i GetJobsJobJobCompletionTriggerConditionArgs) ToGetJobsJobJobCompletionTriggerConditionOutputWithContext(ctx context.Context) GetJobsJobJobCompletionTriggerConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobsJobJobCompletionTriggerConditionOutput)
}

type GetJobsJobJobCompletionTriggerConditionOutput struct{ *pulumi.OutputState }

func (GetJobsJobJobCompletionTriggerConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobJobCompletionTriggerCondition)(nil)).Elem()
}

func (o GetJobsJobJobCompletionTriggerConditionOutput) ToGetJobsJobJobCompletionTriggerConditionOutput() GetJobsJobJobCompletionTriggerConditionOutput {
	return o
}

func (o GetJobsJobJobCompletionTriggerConditionOutput) ToGetJobsJobJobCompletionTriggerConditionOutputWithContext(ctx context.Context) GetJobsJobJobCompletionTriggerConditionOutput {
	return o
}

func (o GetJobsJobJobCompletionTriggerConditionOutput) Condition() GetJobsJobJobCompletionTriggerConditionConditionOutput {
	return o.ApplyT(func(v GetJobsJobJobCompletionTriggerCondition) GetJobsJobJobCompletionTriggerConditionCondition {
		return v.Condition
	}).(GetJobsJobJobCompletionTriggerConditionConditionOutput)
}

type GetJobsJobJobCompletionTriggerConditionCondition struct {
	JobId     int      `pulumi:"jobId"`
	ProjectId int      `pulumi:"projectId"`
	Statuses  []string `pulumi:"statuses"`
}

// GetJobsJobJobCompletionTriggerConditionConditionInput is an input type that accepts GetJobsJobJobCompletionTriggerConditionConditionArgs and GetJobsJobJobCompletionTriggerConditionConditionOutput values.
// You can construct a concrete instance of `GetJobsJobJobCompletionTriggerConditionConditionInput` via:
//
//	GetJobsJobJobCompletionTriggerConditionConditionArgs{...}
type GetJobsJobJobCompletionTriggerConditionConditionInput interface {
	pulumi.Input

	ToGetJobsJobJobCompletionTriggerConditionConditionOutput() GetJobsJobJobCompletionTriggerConditionConditionOutput
	ToGetJobsJobJobCompletionTriggerConditionConditionOutputWithContext(context.Context) GetJobsJobJobCompletionTriggerConditionConditionOutput
}

type GetJobsJobJobCompletionTriggerConditionConditionArgs struct {
	JobId     pulumi.IntInput         `pulumi:"jobId"`
	ProjectId pulumi.IntInput         `pulumi:"projectId"`
	Statuses  pulumi.StringArrayInput `pulumi:"statuses"`
}

func (GetJobsJobJobCompletionTriggerConditionConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobJobCompletionTriggerConditionCondition)(nil)).Elem()
}

func (i GetJobsJobJobCompletionTriggerConditionConditionArgs) ToGetJobsJobJobCompletionTriggerConditionConditionOutput() GetJobsJobJobCompletionTriggerConditionConditionOutput {
	return i.ToGetJobsJobJobCompletionTriggerConditionConditionOutputWithContext(context.Background())
}

func (i GetJobsJobJobCompletionTriggerConditionConditionArgs) ToGetJobsJobJobCompletionTriggerConditionConditionOutputWithContext(ctx context.Context) GetJobsJobJobCompletionTriggerConditionConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobsJobJobCompletionTriggerConditionConditionOutput)
}

type GetJobsJobJobCompletionTriggerConditionConditionOutput struct{ *pulumi.OutputState }

func (GetJobsJobJobCompletionTriggerConditionConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobJobCompletionTriggerConditionCondition)(nil)).Elem()
}

func (o GetJobsJobJobCompletionTriggerConditionConditionOutput) ToGetJobsJobJobCompletionTriggerConditionConditionOutput() GetJobsJobJobCompletionTriggerConditionConditionOutput {
	return o
}

func (o GetJobsJobJobCompletionTriggerConditionConditionOutput) ToGetJobsJobJobCompletionTriggerConditionConditionOutputWithContext(ctx context.Context) GetJobsJobJobCompletionTriggerConditionConditionOutput {
	return o
}

func (o GetJobsJobJobCompletionTriggerConditionConditionOutput) JobId() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJobJobCompletionTriggerConditionCondition) int { return v.JobId }).(pulumi.IntOutput)
}

func (o GetJobsJobJobCompletionTriggerConditionConditionOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJobJobCompletionTriggerConditionCondition) int { return v.ProjectId }).(pulumi.IntOutput)
}

func (o GetJobsJobJobCompletionTriggerConditionConditionOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetJobsJobJobCompletionTriggerConditionCondition) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

type GetJobsJobSchedule struct {
	// The cron schedule for the job. Only used if triggers.schedule is true
	Cron string `pulumi:"cron"`
}

// GetJobsJobScheduleInput is an input type that accepts GetJobsJobScheduleArgs and GetJobsJobScheduleOutput values.
// You can construct a concrete instance of `GetJobsJobScheduleInput` via:
//
//	GetJobsJobScheduleArgs{...}
type GetJobsJobScheduleInput interface {
	pulumi.Input

	ToGetJobsJobScheduleOutput() GetJobsJobScheduleOutput
	ToGetJobsJobScheduleOutputWithContext(context.Context) GetJobsJobScheduleOutput
}

type GetJobsJobScheduleArgs struct {
	// The cron schedule for the job. Only used if triggers.schedule is true
	Cron pulumi.StringInput `pulumi:"cron"`
}

func (GetJobsJobScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobSchedule)(nil)).Elem()
}

func (i GetJobsJobScheduleArgs) ToGetJobsJobScheduleOutput() GetJobsJobScheduleOutput {
	return i.ToGetJobsJobScheduleOutputWithContext(context.Background())
}

func (i GetJobsJobScheduleArgs) ToGetJobsJobScheduleOutputWithContext(ctx context.Context) GetJobsJobScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobsJobScheduleOutput)
}

type GetJobsJobScheduleOutput struct{ *pulumi.OutputState }

func (GetJobsJobScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobSchedule)(nil)).Elem()
}

func (o GetJobsJobScheduleOutput) ToGetJobsJobScheduleOutput() GetJobsJobScheduleOutput {
	return o
}

func (o GetJobsJobScheduleOutput) ToGetJobsJobScheduleOutputWithContext(ctx context.Context) GetJobsJobScheduleOutput {
	return o
}

// The cron schedule for the job. Only used if triggers.schedule is true
func (o GetJobsJobScheduleOutput) Cron() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobsJobSchedule) string { return v.Cron }).(pulumi.StringOutput)
}

type GetJobsJobSettings struct {
	// Value for `target.name` in the Jinja context
	TargetName string `pulumi:"targetName"`
	// Number of threads to run dbt with
	Threads int `pulumi:"threads"`
}

// GetJobsJobSettingsInput is an input type that accepts GetJobsJobSettingsArgs and GetJobsJobSettingsOutput values.
// You can construct a concrete instance of `GetJobsJobSettingsInput` via:
//
//	GetJobsJobSettingsArgs{...}
type GetJobsJobSettingsInput interface {
	pulumi.Input

	ToGetJobsJobSettingsOutput() GetJobsJobSettingsOutput
	ToGetJobsJobSettingsOutputWithContext(context.Context) GetJobsJobSettingsOutput
}

type GetJobsJobSettingsArgs struct {
	// Value for `target.name` in the Jinja context
	TargetName pulumi.StringInput `pulumi:"targetName"`
	// Number of threads to run dbt with
	Threads pulumi.IntInput `pulumi:"threads"`
}

func (GetJobsJobSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobSettings)(nil)).Elem()
}

func (i GetJobsJobSettingsArgs) ToGetJobsJobSettingsOutput() GetJobsJobSettingsOutput {
	return i.ToGetJobsJobSettingsOutputWithContext(context.Background())
}

func (i GetJobsJobSettingsArgs) ToGetJobsJobSettingsOutputWithContext(ctx context.Context) GetJobsJobSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobsJobSettingsOutput)
}

type GetJobsJobSettingsOutput struct{ *pulumi.OutputState }

func (GetJobsJobSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobSettings)(nil)).Elem()
}

func (o GetJobsJobSettingsOutput) ToGetJobsJobSettingsOutput() GetJobsJobSettingsOutput {
	return o
}

func (o GetJobsJobSettingsOutput) ToGetJobsJobSettingsOutputWithContext(ctx context.Context) GetJobsJobSettingsOutput {
	return o
}

// Value for `target.name` in the Jinja context
func (o GetJobsJobSettingsOutput) TargetName() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobsJobSettings) string { return v.TargetName }).(pulumi.StringOutput)
}

// Number of threads to run dbt with
func (o GetJobsJobSettingsOutput) Threads() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJobSettings) int { return v.Threads }).(pulumi.IntOutput)
}

type GetJobsJobTriggers struct {
	// Whether the job runs automatically on PR creation
	GitProviderWebhook bool `pulumi:"gitProviderWebhook"`
	// Whether the job runs automatically on PR creation
	GithubWebhook bool `pulumi:"githubWebhook"`
	// Whether the job runs automatically once a PR is merged
	OnMerge bool `pulumi:"onMerge"`
	// Whether the job runs on a schedule
	Schedule bool `pulumi:"schedule"`
}

// GetJobsJobTriggersInput is an input type that accepts GetJobsJobTriggersArgs and GetJobsJobTriggersOutput values.
// You can construct a concrete instance of `GetJobsJobTriggersInput` via:
//
//	GetJobsJobTriggersArgs{...}
type GetJobsJobTriggersInput interface {
	pulumi.Input

	ToGetJobsJobTriggersOutput() GetJobsJobTriggersOutput
	ToGetJobsJobTriggersOutputWithContext(context.Context) GetJobsJobTriggersOutput
}

type GetJobsJobTriggersArgs struct {
	// Whether the job runs automatically on PR creation
	GitProviderWebhook pulumi.BoolInput `pulumi:"gitProviderWebhook"`
	// Whether the job runs automatically on PR creation
	GithubWebhook pulumi.BoolInput `pulumi:"githubWebhook"`
	// Whether the job runs automatically once a PR is merged
	OnMerge pulumi.BoolInput `pulumi:"onMerge"`
	// Whether the job runs on a schedule
	Schedule pulumi.BoolInput `pulumi:"schedule"`
}

func (GetJobsJobTriggersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobTriggers)(nil)).Elem()
}

func (i GetJobsJobTriggersArgs) ToGetJobsJobTriggersOutput() GetJobsJobTriggersOutput {
	return i.ToGetJobsJobTriggersOutputWithContext(context.Background())
}

func (i GetJobsJobTriggersArgs) ToGetJobsJobTriggersOutputWithContext(ctx context.Context) GetJobsJobTriggersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobsJobTriggersOutput)
}

type GetJobsJobTriggersOutput struct{ *pulumi.OutputState }

func (GetJobsJobTriggersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobTriggers)(nil)).Elem()
}

func (o GetJobsJobTriggersOutput) ToGetJobsJobTriggersOutput() GetJobsJobTriggersOutput {
	return o
}

func (o GetJobsJobTriggersOutput) ToGetJobsJobTriggersOutputWithContext(ctx context.Context) GetJobsJobTriggersOutput {
	return o
}

// Whether the job runs automatically on PR creation
func (o GetJobsJobTriggersOutput) GitProviderWebhook() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobsJobTriggers) bool { return v.GitProviderWebhook }).(pulumi.BoolOutput)
}

// Whether the job runs automatically on PR creation
func (o GetJobsJobTriggersOutput) GithubWebhook() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobsJobTriggers) bool { return v.GithubWebhook }).(pulumi.BoolOutput)
}

// Whether the job runs automatically once a PR is merged
func (o GetJobsJobTriggersOutput) OnMerge() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobsJobTriggers) bool { return v.OnMerge }).(pulumi.BoolOutput)
}

// Whether the job runs on a schedule
func (o GetJobsJobTriggersOutput) Schedule() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobsJobTriggers) bool { return v.Schedule }).(pulumi.BoolOutput)
}

type GetProjectsProject struct {
	// Details for the connection linked to the project
	Connection GetProjectsProjectConnection `pulumi:"connection"`
	// When the project was created
	CreatedAt string `pulumi:"createdAt"`
	// Subdirectory for the dbt project inside the git repo
	DbtProjectSubdirectory string `pulumi:"dbtProjectSubdirectory"`
	// Project description
	Description string `pulumi:"description"`
	// Project ID
	Id int `pulumi:"id"`
	// Project name
	Name string `pulumi:"name"`
	// Details for the repository linked to the project
	Repository GetProjectsProjectRepository `pulumi:"repository"`
	// Semantic layer config ID
	SemanticLayerConfigId int `pulumi:"semanticLayerConfigId"`
	// When the project was last updated
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetProjectsProjectInput is an input type that accepts GetProjectsProjectArgs and GetProjectsProjectOutput values.
// You can construct a concrete instance of `GetProjectsProjectInput` via:
//
//	GetProjectsProjectArgs{...}
type GetProjectsProjectInput interface {
	pulumi.Input

	ToGetProjectsProjectOutput() GetProjectsProjectOutput
	ToGetProjectsProjectOutputWithContext(context.Context) GetProjectsProjectOutput
}

type GetProjectsProjectArgs struct {
	// Details for the connection linked to the project
	Connection GetProjectsProjectConnectionInput `pulumi:"connection"`
	// When the project was created
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Subdirectory for the dbt project inside the git repo
	DbtProjectSubdirectory pulumi.StringInput `pulumi:"dbtProjectSubdirectory"`
	// Project description
	Description pulumi.StringInput `pulumi:"description"`
	// Project ID
	Id pulumi.IntInput `pulumi:"id"`
	// Project name
	Name pulumi.StringInput `pulumi:"name"`
	// Details for the repository linked to the project
	Repository GetProjectsProjectRepositoryInput `pulumi:"repository"`
	// Semantic layer config ID
	SemanticLayerConfigId pulumi.IntInput `pulumi:"semanticLayerConfigId"`
	// When the project was last updated
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetProjectsProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProject)(nil)).Elem()
}

func (i GetProjectsProjectArgs) ToGetProjectsProjectOutput() GetProjectsProjectOutput {
	return i.ToGetProjectsProjectOutputWithContext(context.Background())
}

func (i GetProjectsProjectArgs) ToGetProjectsProjectOutputWithContext(ctx context.Context) GetProjectsProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectOutput)
}

// GetProjectsProjectArrayInput is an input type that accepts GetProjectsProjectArray and GetProjectsProjectArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectArrayInput` via:
//
//	GetProjectsProjectArray{ GetProjectsProjectArgs{...} }
type GetProjectsProjectArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput
	ToGetProjectsProjectArrayOutputWithContext(context.Context) GetProjectsProjectArrayOutput
}

type GetProjectsProjectArray []GetProjectsProjectInput

func (GetProjectsProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProject)(nil)).Elem()
}

func (i GetProjectsProjectArray) ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput {
	return i.ToGetProjectsProjectArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectArray) ToGetProjectsProjectArrayOutputWithContext(ctx context.Context) GetProjectsProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectArrayOutput)
}

type GetProjectsProjectOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProject)(nil)).Elem()
}

func (o GetProjectsProjectOutput) ToGetProjectsProjectOutput() GetProjectsProjectOutput {
	return o
}

func (o GetProjectsProjectOutput) ToGetProjectsProjectOutputWithContext(ctx context.Context) GetProjectsProjectOutput {
	return o
}

// Details for the connection linked to the project
func (o GetProjectsProjectOutput) Connection() GetProjectsProjectConnectionOutput {
	return o.ApplyT(func(v GetProjectsProject) GetProjectsProjectConnection { return v.Connection }).(GetProjectsProjectConnectionOutput)
}

// When the project was created
func (o GetProjectsProjectOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Subdirectory for the dbt project inside the git repo
func (o GetProjectsProjectOutput) DbtProjectSubdirectory() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.DbtProjectSubdirectory }).(pulumi.StringOutput)
}

// Project description
func (o GetProjectsProjectOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Description }).(pulumi.StringOutput)
}

// Project ID
func (o GetProjectsProjectOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.Id }).(pulumi.IntOutput)
}

// Project name
func (o GetProjectsProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Name }).(pulumi.StringOutput)
}

// Details for the repository linked to the project
func (o GetProjectsProjectOutput) Repository() GetProjectsProjectRepositoryOutput {
	return o.ApplyT(func(v GetProjectsProject) GetProjectsProjectRepository { return v.Repository }).(GetProjectsProjectRepositoryOutput)
}

// Semantic layer config ID
func (o GetProjectsProjectOutput) SemanticLayerConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.SemanticLayerConfigId }).(pulumi.IntOutput)
}

// When the project was last updated
func (o GetProjectsProjectOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetProjectsProjectArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProject)(nil)).Elem()
}

func (o GetProjectsProjectArrayOutput) ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput {
	return o
}

func (o GetProjectsProjectArrayOutput) ToGetProjectsProjectArrayOutputWithContext(ctx context.Context) GetProjectsProjectArrayOutput {
	return o
}

func (o GetProjectsProjectArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProject {
		return vs[0].([]GetProjectsProject)[vs[1].(int)]
	}).(GetProjectsProjectOutput)
}

type GetProjectsProjectConnection struct {
	// Version of the adapter for the connection. Will tell what connection type it is
	AdapterVersion string `pulumi:"adapterVersion"`
	// Connection ID
	Id int `pulumi:"id"`
	// Connection name
	Name string `pulumi:"name"`
}

// GetProjectsProjectConnectionInput is an input type that accepts GetProjectsProjectConnectionArgs and GetProjectsProjectConnectionOutput values.
// You can construct a concrete instance of `GetProjectsProjectConnectionInput` via:
//
//	GetProjectsProjectConnectionArgs{...}
type GetProjectsProjectConnectionInput interface {
	pulumi.Input

	ToGetProjectsProjectConnectionOutput() GetProjectsProjectConnectionOutput
	ToGetProjectsProjectConnectionOutputWithContext(context.Context) GetProjectsProjectConnectionOutput
}

type GetProjectsProjectConnectionArgs struct {
	// Version of the adapter for the connection. Will tell what connection type it is
	AdapterVersion pulumi.StringInput `pulumi:"adapterVersion"`
	// Connection ID
	Id pulumi.IntInput `pulumi:"id"`
	// Connection name
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetProjectsProjectConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectConnection)(nil)).Elem()
}

func (i GetProjectsProjectConnectionArgs) ToGetProjectsProjectConnectionOutput() GetProjectsProjectConnectionOutput {
	return i.ToGetProjectsProjectConnectionOutputWithContext(context.Background())
}

func (i GetProjectsProjectConnectionArgs) ToGetProjectsProjectConnectionOutputWithContext(ctx context.Context) GetProjectsProjectConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectConnectionOutput)
}

type GetProjectsProjectConnectionOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectConnection)(nil)).Elem()
}

func (o GetProjectsProjectConnectionOutput) ToGetProjectsProjectConnectionOutput() GetProjectsProjectConnectionOutput {
	return o
}

func (o GetProjectsProjectConnectionOutput) ToGetProjectsProjectConnectionOutputWithContext(ctx context.Context) GetProjectsProjectConnectionOutput {
	return o
}

// Version of the adapter for the connection. Will tell what connection type it is
func (o GetProjectsProjectConnectionOutput) AdapterVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectConnection) string { return v.AdapterVersion }).(pulumi.StringOutput)
}

// Connection ID
func (o GetProjectsProjectConnectionOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProjectConnection) int { return v.Id }).(pulumi.IntOutput)
}

// Connection name
func (o GetProjectsProjectConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectConnection) string { return v.Name }).(pulumi.StringOutput)
}

type GetProjectsProjectRepository struct {
	// Repository ID
	Id int `pulumi:"id"`
	// URL template for PRs
	PullRequestUrlTemplate string `pulumi:"pullRequestUrlTemplate"`
	// URL of the git repo remote
	RemoteUrl string `pulumi:"remoteUrl"`
}

// GetProjectsProjectRepositoryInput is an input type that accepts GetProjectsProjectRepositoryArgs and GetProjectsProjectRepositoryOutput values.
// You can construct a concrete instance of `GetProjectsProjectRepositoryInput` via:
//
//	GetProjectsProjectRepositoryArgs{...}
type GetProjectsProjectRepositoryInput interface {
	pulumi.Input

	ToGetProjectsProjectRepositoryOutput() GetProjectsProjectRepositoryOutput
	ToGetProjectsProjectRepositoryOutputWithContext(context.Context) GetProjectsProjectRepositoryOutput
}

type GetProjectsProjectRepositoryArgs struct {
	// Repository ID
	Id pulumi.IntInput `pulumi:"id"`
	// URL template for PRs
	PullRequestUrlTemplate pulumi.StringInput `pulumi:"pullRequestUrlTemplate"`
	// URL of the git repo remote
	RemoteUrl pulumi.StringInput `pulumi:"remoteUrl"`
}

func (GetProjectsProjectRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectRepository)(nil)).Elem()
}

func (i GetProjectsProjectRepositoryArgs) ToGetProjectsProjectRepositoryOutput() GetProjectsProjectRepositoryOutput {
	return i.ToGetProjectsProjectRepositoryOutputWithContext(context.Background())
}

func (i GetProjectsProjectRepositoryArgs) ToGetProjectsProjectRepositoryOutputWithContext(ctx context.Context) GetProjectsProjectRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectRepositoryOutput)
}

type GetProjectsProjectRepositoryOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectRepository)(nil)).Elem()
}

func (o GetProjectsProjectRepositoryOutput) ToGetProjectsProjectRepositoryOutput() GetProjectsProjectRepositoryOutput {
	return o
}

func (o GetProjectsProjectRepositoryOutput) ToGetProjectsProjectRepositoryOutputWithContext(ctx context.Context) GetProjectsProjectRepositoryOutput {
	return o
}

// Repository ID
func (o GetProjectsProjectRepositoryOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProjectRepository) int { return v.Id }).(pulumi.IntOutput)
}

// URL template for PRs
func (o GetProjectsProjectRepositoryOutput) PullRequestUrlTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectRepository) string { return v.PullRequestUrlTemplate }).(pulumi.StringOutput)
}

// URL of the git repo remote
func (o GetProjectsProjectRepositoryOutput) RemoteUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectRepository) string { return v.RemoteUrl }).(pulumi.StringOutput)
}

type GetServiceTokenServiceTokenPermission struct {
	// Whether or not to apply this permission to all projects for this service token
	AllProjects bool `pulumi:"allProjects"`
	// Set of permissions to apply
	PermissionSet string `pulumi:"permissionSet"`
	// Project ID to apply this permission to for this service token
	ProjectId int `pulumi:"projectId"`
	// What types of environments to apply Write permissions to.
	// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
	// The values allowed are `all`, `development`, `staging`, `production` and `other`.
	// Not setting a value is the same as selecting `all`.
	// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
	WritableEnvironmentCategories []string `pulumi:"writableEnvironmentCategories"`
}

// GetServiceTokenServiceTokenPermissionInput is an input type that accepts GetServiceTokenServiceTokenPermissionArgs and GetServiceTokenServiceTokenPermissionOutput values.
// You can construct a concrete instance of `GetServiceTokenServiceTokenPermissionInput` via:
//
//	GetServiceTokenServiceTokenPermissionArgs{...}
type GetServiceTokenServiceTokenPermissionInput interface {
	pulumi.Input

	ToGetServiceTokenServiceTokenPermissionOutput() GetServiceTokenServiceTokenPermissionOutput
	ToGetServiceTokenServiceTokenPermissionOutputWithContext(context.Context) GetServiceTokenServiceTokenPermissionOutput
}

type GetServiceTokenServiceTokenPermissionArgs struct {
	// Whether or not to apply this permission to all projects for this service token
	AllProjects pulumi.BoolInput `pulumi:"allProjects"`
	// Set of permissions to apply
	PermissionSet pulumi.StringInput `pulumi:"permissionSet"`
	// Project ID to apply this permission to for this service token
	ProjectId pulumi.IntInput `pulumi:"projectId"`
	// What types of environments to apply Write permissions to.
	// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
	// The values allowed are `all`, `development`, `staging`, `production` and `other`.
	// Not setting a value is the same as selecting `all`.
	// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
	WritableEnvironmentCategories pulumi.StringArrayInput `pulumi:"writableEnvironmentCategories"`
}

func (GetServiceTokenServiceTokenPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceTokenServiceTokenPermission)(nil)).Elem()
}

func (i GetServiceTokenServiceTokenPermissionArgs) ToGetServiceTokenServiceTokenPermissionOutput() GetServiceTokenServiceTokenPermissionOutput {
	return i.ToGetServiceTokenServiceTokenPermissionOutputWithContext(context.Background())
}

func (i GetServiceTokenServiceTokenPermissionArgs) ToGetServiceTokenServiceTokenPermissionOutputWithContext(ctx context.Context) GetServiceTokenServiceTokenPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceTokenServiceTokenPermissionOutput)
}

// GetServiceTokenServiceTokenPermissionArrayInput is an input type that accepts GetServiceTokenServiceTokenPermissionArray and GetServiceTokenServiceTokenPermissionArrayOutput values.
// You can construct a concrete instance of `GetServiceTokenServiceTokenPermissionArrayInput` via:
//
//	GetServiceTokenServiceTokenPermissionArray{ GetServiceTokenServiceTokenPermissionArgs{...} }
type GetServiceTokenServiceTokenPermissionArrayInput interface {
	pulumi.Input

	ToGetServiceTokenServiceTokenPermissionArrayOutput() GetServiceTokenServiceTokenPermissionArrayOutput
	ToGetServiceTokenServiceTokenPermissionArrayOutputWithContext(context.Context) GetServiceTokenServiceTokenPermissionArrayOutput
}

type GetServiceTokenServiceTokenPermissionArray []GetServiceTokenServiceTokenPermissionInput

func (GetServiceTokenServiceTokenPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceTokenServiceTokenPermission)(nil)).Elem()
}

func (i GetServiceTokenServiceTokenPermissionArray) ToGetServiceTokenServiceTokenPermissionArrayOutput() GetServiceTokenServiceTokenPermissionArrayOutput {
	return i.ToGetServiceTokenServiceTokenPermissionArrayOutputWithContext(context.Background())
}

func (i GetServiceTokenServiceTokenPermissionArray) ToGetServiceTokenServiceTokenPermissionArrayOutputWithContext(ctx context.Context) GetServiceTokenServiceTokenPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceTokenServiceTokenPermissionArrayOutput)
}

type GetServiceTokenServiceTokenPermissionOutput struct{ *pulumi.OutputState }

func (GetServiceTokenServiceTokenPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceTokenServiceTokenPermission)(nil)).Elem()
}

func (o GetServiceTokenServiceTokenPermissionOutput) ToGetServiceTokenServiceTokenPermissionOutput() GetServiceTokenServiceTokenPermissionOutput {
	return o
}

func (o GetServiceTokenServiceTokenPermissionOutput) ToGetServiceTokenServiceTokenPermissionOutputWithContext(ctx context.Context) GetServiceTokenServiceTokenPermissionOutput {
	return o
}

// Whether or not to apply this permission to all projects for this service token
func (o GetServiceTokenServiceTokenPermissionOutput) AllProjects() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServiceTokenServiceTokenPermission) bool { return v.AllProjects }).(pulumi.BoolOutput)
}

// Set of permissions to apply
func (o GetServiceTokenServiceTokenPermissionOutput) PermissionSet() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceTokenServiceTokenPermission) string { return v.PermissionSet }).(pulumi.StringOutput)
}

// Project ID to apply this permission to for this service token
func (o GetServiceTokenServiceTokenPermissionOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceTokenServiceTokenPermission) int { return v.ProjectId }).(pulumi.IntOutput)
}

// What types of environments to apply Write permissions to.
// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
// The values allowed are `all`, `development`, `staging`, `production` and `other`.
// Not setting a value is the same as selecting `all`.
// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
func (o GetServiceTokenServiceTokenPermissionOutput) WritableEnvironmentCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServiceTokenServiceTokenPermission) []string { return v.WritableEnvironmentCategories }).(pulumi.StringArrayOutput)
}

type GetServiceTokenServiceTokenPermissionArrayOutput struct{ *pulumi.OutputState }

func (GetServiceTokenServiceTokenPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceTokenServiceTokenPermission)(nil)).Elem()
}

func (o GetServiceTokenServiceTokenPermissionArrayOutput) ToGetServiceTokenServiceTokenPermissionArrayOutput() GetServiceTokenServiceTokenPermissionArrayOutput {
	return o
}

func (o GetServiceTokenServiceTokenPermissionArrayOutput) ToGetServiceTokenServiceTokenPermissionArrayOutputWithContext(ctx context.Context) GetServiceTokenServiceTokenPermissionArrayOutput {
	return o
}

func (o GetServiceTokenServiceTokenPermissionArrayOutput) Index(i pulumi.IntInput) GetServiceTokenServiceTokenPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceTokenServiceTokenPermission {
		return vs[0].([]GetServiceTokenServiceTokenPermission)[vs[1].(int)]
	}).(GetServiceTokenServiceTokenPermissionOutput)
}

type GetUsersUser struct {
	// Email for the user
	Email string `pulumi:"email"`
	// ID of the user
	Id int `pulumi:"id"`
}

// GetUsersUserInput is an input type that accepts GetUsersUserArgs and GetUsersUserOutput values.
// You can construct a concrete instance of `GetUsersUserInput` via:
//
//	GetUsersUserArgs{...}
type GetUsersUserInput interface {
	pulumi.Input

	ToGetUsersUserOutput() GetUsersUserOutput
	ToGetUsersUserOutputWithContext(context.Context) GetUsersUserOutput
}

type GetUsersUserArgs struct {
	// Email for the user
	Email pulumi.StringInput `pulumi:"email"`
	// ID of the user
	Id pulumi.IntInput `pulumi:"id"`
}

func (GetUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArgs) ToGetUsersUserOutput() GetUsersUserOutput {
	return i.ToGetUsersUserOutputWithContext(context.Background())
}

func (i GetUsersUserArgs) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOutput)
}

// GetUsersUserArrayInput is an input type that accepts GetUsersUserArray and GetUsersUserArrayOutput values.
// You can construct a concrete instance of `GetUsersUserArrayInput` via:
//
//	GetUsersUserArray{ GetUsersUserArgs{...} }
type GetUsersUserArrayInput interface {
	pulumi.Input

	ToGetUsersUserArrayOutput() GetUsersUserArrayOutput
	ToGetUsersUserArrayOutputWithContext(context.Context) GetUsersUserArrayOutput
}

type GetUsersUserArray []GetUsersUserInput

func (GetUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return i.ToGetUsersUserArrayOutputWithContext(context.Background())
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserArrayOutput)
}

type GetUsersUserOutput struct{ *pulumi.OutputState }

func (GetUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserOutput) ToGetUsersUserOutput() GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return o
}

// Email for the user
func (o GetUsersUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Email }).(pulumi.StringOutput)
}

// ID of the user
func (o GetUsersUserOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.Id }).(pulumi.IntOutput)
}

type GetUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) Index(i pulumi.IntInput) GetUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUser {
		return vs[0].([]GetUsersUser)[vs[1].(int)]
	}).(GetUsersUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionApacheSparkInput)(nil)).Elem(), GlobalConnectionApacheSparkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionApacheSparkPtrInput)(nil)).Elem(), GlobalConnectionApacheSparkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionAthenaInput)(nil)).Elem(), GlobalConnectionAthenaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionAthenaPtrInput)(nil)).Elem(), GlobalConnectionAthenaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionBigqueryInput)(nil)).Elem(), GlobalConnectionBigqueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionBigqueryPtrInput)(nil)).Elem(), GlobalConnectionBigqueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionDatabricksInput)(nil)).Elem(), GlobalConnectionDatabricksArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionDatabricksPtrInput)(nil)).Elem(), GlobalConnectionDatabricksArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionFabricInput)(nil)).Elem(), GlobalConnectionFabricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionFabricPtrInput)(nil)).Elem(), GlobalConnectionFabricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionPostgresInput)(nil)).Elem(), GlobalConnectionPostgresArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionPostgresPtrInput)(nil)).Elem(), GlobalConnectionPostgresArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionPostgresSshTunnelInput)(nil)).Elem(), GlobalConnectionPostgresSshTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionPostgresSshTunnelPtrInput)(nil)).Elem(), GlobalConnectionPostgresSshTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionRedshiftInput)(nil)).Elem(), GlobalConnectionRedshiftArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionRedshiftPtrInput)(nil)).Elem(), GlobalConnectionRedshiftArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionRedshiftSshTunnelInput)(nil)).Elem(), GlobalConnectionRedshiftSshTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionRedshiftSshTunnelPtrInput)(nil)).Elem(), GlobalConnectionRedshiftSshTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionSnowflakeInput)(nil)).Elem(), GlobalConnectionSnowflakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionSnowflakePtrInput)(nil)).Elem(), GlobalConnectionSnowflakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionStarburstInput)(nil)).Elem(), GlobalConnectionStarburstArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionStarburstPtrInput)(nil)).Elem(), GlobalConnectionStarburstArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionSynapseInput)(nil)).Elem(), GlobalConnectionSynapseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionSynapsePtrInput)(nil)).Elem(), GlobalConnectionSynapseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupGroupPermissionInput)(nil)).Elem(), GroupGroupPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupGroupPermissionArrayInput)(nil)).Elem(), GroupGroupPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPartialPermissionsGroupPermissionInput)(nil)).Elem(), GroupPartialPermissionsGroupPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPartialPermissionsGroupPermissionArrayInput)(nil)).Elem(), GroupPartialPermissionsGroupPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobJobCompletionTriggerConditionInput)(nil)).Elem(), JobJobCompletionTriggerConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobJobCompletionTriggerConditionPtrInput)(nil)).Elem(), JobJobCompletionTriggerConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTokenServiceTokenPermissionInput)(nil)).Elem(), ServiceTokenServiceTokenPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTokenServiceTokenPermissionArrayInput)(nil)).Elem(), ServiceTokenServiceTokenPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEnvironmentsEnvironmentInput)(nil)).Elem(), GetEnvironmentsEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEnvironmentsEnvironmentArrayInput)(nil)).Elem(), GetEnvironmentsEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGlobalConnectionApacheSparkInput)(nil)).Elem(), GetGlobalConnectionApacheSparkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGlobalConnectionAthenaInput)(nil)).Elem(), GetGlobalConnectionAthenaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGlobalConnectionBigqueryInput)(nil)).Elem(), GetGlobalConnectionBigqueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGlobalConnectionDatabricksInput)(nil)).Elem(), GetGlobalConnectionDatabricksArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGlobalConnectionFabricInput)(nil)).Elem(), GetGlobalConnectionFabricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGlobalConnectionPostgresInput)(nil)).Elem(), GetGlobalConnectionPostgresArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGlobalConnectionPostgresSshTunnelInput)(nil)).Elem(), GetGlobalConnectionPostgresSshTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGlobalConnectionRedshiftInput)(nil)).Elem(), GetGlobalConnectionRedshiftArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGlobalConnectionRedshiftSshTunnelInput)(nil)).Elem(), GetGlobalConnectionRedshiftSshTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGlobalConnectionSnowflakeInput)(nil)).Elem(), GetGlobalConnectionSnowflakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGlobalConnectionStarburstInput)(nil)).Elem(), GetGlobalConnectionStarburstArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGlobalConnectionSynapseInput)(nil)).Elem(), GetGlobalConnectionSynapseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGlobalConnectionsConnectionInput)(nil)).Elem(), GetGlobalConnectionsConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGlobalConnectionsConnectionArrayInput)(nil)).Elem(), GetGlobalConnectionsConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupGroupPermissionInput)(nil)).Elem(), GetGroupGroupPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupGroupPermissionArrayInput)(nil)).Elem(), GetGroupGroupPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupUsersUserInput)(nil)).Elem(), GetGroupUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupUsersUserArrayInput)(nil)).Elem(), GetGroupUsersUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobJobCompletionTriggerConditionInput)(nil)).Elem(), GetJobJobCompletionTriggerConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobJobCompletionTriggerConditionArrayInput)(nil)).Elem(), GetJobJobCompletionTriggerConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobsJobInput)(nil)).Elem(), GetJobsJobArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobsJobArrayInput)(nil)).Elem(), GetJobsJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobsJobEnvironmentInput)(nil)).Elem(), GetJobsJobEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobsJobExecutionInput)(nil)).Elem(), GetJobsJobExecutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobsJobJobCompletionTriggerConditionInput)(nil)).Elem(), GetJobsJobJobCompletionTriggerConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobsJobJobCompletionTriggerConditionConditionInput)(nil)).Elem(), GetJobsJobJobCompletionTriggerConditionConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobsJobScheduleInput)(nil)).Elem(), GetJobsJobScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobsJobSettingsInput)(nil)).Elem(), GetJobsJobSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobsJobTriggersInput)(nil)).Elem(), GetJobsJobTriggersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectInput)(nil)).Elem(), GetProjectsProjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectArrayInput)(nil)).Elem(), GetProjectsProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectConnectionInput)(nil)).Elem(), GetProjectsProjectConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectRepositoryInput)(nil)).Elem(), GetProjectsProjectRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceTokenServiceTokenPermissionInput)(nil)).Elem(), GetServiceTokenServiceTokenPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceTokenServiceTokenPermissionArrayInput)(nil)).Elem(), GetServiceTokenServiceTokenPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserInput)(nil)).Elem(), GetUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserArrayInput)(nil)).Elem(), GetUsersUserArray{})
	pulumi.RegisterOutputType(GlobalConnectionApacheSparkOutput{})
	pulumi.RegisterOutputType(GlobalConnectionApacheSparkPtrOutput{})
	pulumi.RegisterOutputType(GlobalConnectionAthenaOutput{})
	pulumi.RegisterOutputType(GlobalConnectionAthenaPtrOutput{})
	pulumi.RegisterOutputType(GlobalConnectionBigqueryOutput{})
	pulumi.RegisterOutputType(GlobalConnectionBigqueryPtrOutput{})
	pulumi.RegisterOutputType(GlobalConnectionDatabricksOutput{})
	pulumi.RegisterOutputType(GlobalConnectionDatabricksPtrOutput{})
	pulumi.RegisterOutputType(GlobalConnectionFabricOutput{})
	pulumi.RegisterOutputType(GlobalConnectionFabricPtrOutput{})
	pulumi.RegisterOutputType(GlobalConnectionPostgresOutput{})
	pulumi.RegisterOutputType(GlobalConnectionPostgresPtrOutput{})
	pulumi.RegisterOutputType(GlobalConnectionPostgresSshTunnelOutput{})
	pulumi.RegisterOutputType(GlobalConnectionPostgresSshTunnelPtrOutput{})
	pulumi.RegisterOutputType(GlobalConnectionRedshiftOutput{})
	pulumi.RegisterOutputType(GlobalConnectionRedshiftPtrOutput{})
	pulumi.RegisterOutputType(GlobalConnectionRedshiftSshTunnelOutput{})
	pulumi.RegisterOutputType(GlobalConnectionRedshiftSshTunnelPtrOutput{})
	pulumi.RegisterOutputType(GlobalConnectionSnowflakeOutput{})
	pulumi.RegisterOutputType(GlobalConnectionSnowflakePtrOutput{})
	pulumi.RegisterOutputType(GlobalConnectionStarburstOutput{})
	pulumi.RegisterOutputType(GlobalConnectionStarburstPtrOutput{})
	pulumi.RegisterOutputType(GlobalConnectionSynapseOutput{})
	pulumi.RegisterOutputType(GlobalConnectionSynapsePtrOutput{})
	pulumi.RegisterOutputType(GroupGroupPermissionOutput{})
	pulumi.RegisterOutputType(GroupGroupPermissionArrayOutput{})
	pulumi.RegisterOutputType(GroupPartialPermissionsGroupPermissionOutput{})
	pulumi.RegisterOutputType(GroupPartialPermissionsGroupPermissionArrayOutput{})
	pulumi.RegisterOutputType(JobJobCompletionTriggerConditionOutput{})
	pulumi.RegisterOutputType(JobJobCompletionTriggerConditionPtrOutput{})
	pulumi.RegisterOutputType(ServiceTokenServiceTokenPermissionOutput{})
	pulumi.RegisterOutputType(ServiceTokenServiceTokenPermissionArrayOutput{})
	pulumi.RegisterOutputType(GetEnvironmentsEnvironmentOutput{})
	pulumi.RegisterOutputType(GetEnvironmentsEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(GetGlobalConnectionApacheSparkOutput{})
	pulumi.RegisterOutputType(GetGlobalConnectionAthenaOutput{})
	pulumi.RegisterOutputType(GetGlobalConnectionBigqueryOutput{})
	pulumi.RegisterOutputType(GetGlobalConnectionDatabricksOutput{})
	pulumi.RegisterOutputType(GetGlobalConnectionFabricOutput{})
	pulumi.RegisterOutputType(GetGlobalConnectionPostgresOutput{})
	pulumi.RegisterOutputType(GetGlobalConnectionPostgresSshTunnelOutput{})
	pulumi.RegisterOutputType(GetGlobalConnectionRedshiftOutput{})
	pulumi.RegisterOutputType(GetGlobalConnectionRedshiftSshTunnelOutput{})
	pulumi.RegisterOutputType(GetGlobalConnectionSnowflakeOutput{})
	pulumi.RegisterOutputType(GetGlobalConnectionStarburstOutput{})
	pulumi.RegisterOutputType(GetGlobalConnectionSynapseOutput{})
	pulumi.RegisterOutputType(GetGlobalConnectionsConnectionOutput{})
	pulumi.RegisterOutputType(GetGlobalConnectionsConnectionArrayOutput{})
	pulumi.RegisterOutputType(GetGroupGroupPermissionOutput{})
	pulumi.RegisterOutputType(GetGroupGroupPermissionArrayOutput{})
	pulumi.RegisterOutputType(GetGroupUsersUserOutput{})
	pulumi.RegisterOutputType(GetGroupUsersUserArrayOutput{})
	pulumi.RegisterOutputType(GetJobJobCompletionTriggerConditionOutput{})
	pulumi.RegisterOutputType(GetJobJobCompletionTriggerConditionArrayOutput{})
	pulumi.RegisterOutputType(GetJobsJobOutput{})
	pulumi.RegisterOutputType(GetJobsJobArrayOutput{})
	pulumi.RegisterOutputType(GetJobsJobEnvironmentOutput{})
	pulumi.RegisterOutputType(GetJobsJobExecutionOutput{})
	pulumi.RegisterOutputType(GetJobsJobJobCompletionTriggerConditionOutput{})
	pulumi.RegisterOutputType(GetJobsJobJobCompletionTriggerConditionConditionOutput{})
	pulumi.RegisterOutputType(GetJobsJobScheduleOutput{})
	pulumi.RegisterOutputType(GetJobsJobSettingsOutput{})
	pulumi.RegisterOutputType(GetJobsJobTriggersOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectConnectionOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectRepositoryOutput{})
	pulumi.RegisterOutputType(GetServiceTokenServiceTokenPermissionOutput{})
	pulumi.RegisterOutputType(GetServiceTokenServiceTokenPermissionArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
	pulumi.RegisterOutputType(GetUsersUserArrayOutput{})
}

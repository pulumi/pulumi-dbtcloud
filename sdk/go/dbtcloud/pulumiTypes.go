// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type GlobalConnectionBigquery struct {
	// OAuth Client ID
	ApplicationId *string `pulumi:"applicationId"`
	// OAuth Client Secret
	ApplicationSecret *string `pulumi:"applicationSecret"`
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl string `pulumi:"authProviderX509CertUrl"`
	// Auth URI for the Service Account
	AuthUri string `pulumi:"authUri"`
	// Service Account email
	ClientEmail string `pulumi:"clientEmail"`
	// Client ID of the Service Account
	ClientId string `pulumi:"clientId"`
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl string `pulumi:"clientX509CertUrl"`
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName *string `pulumi:"dataprocClusterName"`
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion *string `pulumi:"dataprocRegion"`
	// Project to bill for query execution
	ExecutionProject *string `pulumi:"executionProject"`
	// The GCP project ID to use for the connection
	GcpProjectId string `pulumi:"gcpProjectId"`
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket *string `pulumi:"gcsBucket"`
	// Service Account to impersonate when running queries
	ImpersonateServiceAccount *string `pulumi:"impersonateServiceAccount"`
	// Maximum timeout for the job creation step
	JobCreationTimeoutSeconds *int `pulumi:"jobCreationTimeoutSeconds"`
	// Total number of seconds to wait while retrying the same query
	JobRetryDeadlineSeconds *int `pulumi:"jobRetryDeadlineSeconds"`
	// Location to create new Datasets in
	Location *string `pulumi:"location"`
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled *int `pulumi:"maximumBytesBilled"`
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority *string `pulumi:"priority"`
	// Private Key for the Service Account
	PrivateKey string `pulumi:"privateKey"`
	// Private Key ID for the Service Account
	PrivateKeyId string `pulumi:"privateKeyId"`
	// Number of retries for queries
	Retries *int `pulumi:"retries"`
	// OAuth scopes for the BigQuery connection
	Scopes []string `pulumi:"scopes"`
	// Timeout in seconds for queries
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
	// Token URI for the Service Account
	TokenUri string `pulumi:"tokenUri"`
}

// GlobalConnectionBigqueryInput is an input type that accepts GlobalConnectionBigqueryArgs and GlobalConnectionBigqueryOutput values.
// You can construct a concrete instance of `GlobalConnectionBigqueryInput` via:
//
//	GlobalConnectionBigqueryArgs{...}
type GlobalConnectionBigqueryInput interface {
	pulumi.Input

	ToGlobalConnectionBigqueryOutput() GlobalConnectionBigqueryOutput
	ToGlobalConnectionBigqueryOutputWithContext(context.Context) GlobalConnectionBigqueryOutput
}

type GlobalConnectionBigqueryArgs struct {
	// OAuth Client ID
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
	// OAuth Client Secret
	ApplicationSecret pulumi.StringPtrInput `pulumi:"applicationSecret"`
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl pulumi.StringInput `pulumi:"authProviderX509CertUrl"`
	// Auth URI for the Service Account
	AuthUri pulumi.StringInput `pulumi:"authUri"`
	// Service Account email
	ClientEmail pulumi.StringInput `pulumi:"clientEmail"`
	// Client ID of the Service Account
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl pulumi.StringInput `pulumi:"clientX509CertUrl"`
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName pulumi.StringPtrInput `pulumi:"dataprocClusterName"`
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion pulumi.StringPtrInput `pulumi:"dataprocRegion"`
	// Project to bill for query execution
	ExecutionProject pulumi.StringPtrInput `pulumi:"executionProject"`
	// The GCP project ID to use for the connection
	GcpProjectId pulumi.StringInput `pulumi:"gcpProjectId"`
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket pulumi.StringPtrInput `pulumi:"gcsBucket"`
	// Service Account to impersonate when running queries
	ImpersonateServiceAccount pulumi.StringPtrInput `pulumi:"impersonateServiceAccount"`
	// Maximum timeout for the job creation step
	JobCreationTimeoutSeconds pulumi.IntPtrInput `pulumi:"jobCreationTimeoutSeconds"`
	// Total number of seconds to wait while retrying the same query
	JobRetryDeadlineSeconds pulumi.IntPtrInput `pulumi:"jobRetryDeadlineSeconds"`
	// Location to create new Datasets in
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled pulumi.IntPtrInput `pulumi:"maximumBytesBilled"`
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// Private Key for the Service Account
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
	// Private Key ID for the Service Account
	PrivateKeyId pulumi.StringInput `pulumi:"privateKeyId"`
	// Number of retries for queries
	Retries pulumi.IntPtrInput `pulumi:"retries"`
	// OAuth scopes for the BigQuery connection
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// Timeout in seconds for queries
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
	// Token URI for the Service Account
	TokenUri pulumi.StringInput `pulumi:"tokenUri"`
}

func (GlobalConnectionBigqueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionBigquery)(nil)).Elem()
}

func (i GlobalConnectionBigqueryArgs) ToGlobalConnectionBigqueryOutput() GlobalConnectionBigqueryOutput {
	return i.ToGlobalConnectionBigqueryOutputWithContext(context.Background())
}

func (i GlobalConnectionBigqueryArgs) ToGlobalConnectionBigqueryOutputWithContext(ctx context.Context) GlobalConnectionBigqueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionBigqueryOutput)
}

func (i GlobalConnectionBigqueryArgs) ToGlobalConnectionBigqueryPtrOutput() GlobalConnectionBigqueryPtrOutput {
	return i.ToGlobalConnectionBigqueryPtrOutputWithContext(context.Background())
}

func (i GlobalConnectionBigqueryArgs) ToGlobalConnectionBigqueryPtrOutputWithContext(ctx context.Context) GlobalConnectionBigqueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionBigqueryOutput).ToGlobalConnectionBigqueryPtrOutputWithContext(ctx)
}

// GlobalConnectionBigqueryPtrInput is an input type that accepts GlobalConnectionBigqueryArgs, GlobalConnectionBigqueryPtr and GlobalConnectionBigqueryPtrOutput values.
// You can construct a concrete instance of `GlobalConnectionBigqueryPtrInput` via:
//
//	        GlobalConnectionBigqueryArgs{...}
//
//	or:
//
//	        nil
type GlobalConnectionBigqueryPtrInput interface {
	pulumi.Input

	ToGlobalConnectionBigqueryPtrOutput() GlobalConnectionBigqueryPtrOutput
	ToGlobalConnectionBigqueryPtrOutputWithContext(context.Context) GlobalConnectionBigqueryPtrOutput
}

type globalConnectionBigqueryPtrType GlobalConnectionBigqueryArgs

func GlobalConnectionBigqueryPtr(v *GlobalConnectionBigqueryArgs) GlobalConnectionBigqueryPtrInput {
	return (*globalConnectionBigqueryPtrType)(v)
}

func (*globalConnectionBigqueryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionBigquery)(nil)).Elem()
}

func (i *globalConnectionBigqueryPtrType) ToGlobalConnectionBigqueryPtrOutput() GlobalConnectionBigqueryPtrOutput {
	return i.ToGlobalConnectionBigqueryPtrOutputWithContext(context.Background())
}

func (i *globalConnectionBigqueryPtrType) ToGlobalConnectionBigqueryPtrOutputWithContext(ctx context.Context) GlobalConnectionBigqueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionBigqueryPtrOutput)
}

type GlobalConnectionBigqueryOutput struct{ *pulumi.OutputState }

func (GlobalConnectionBigqueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionBigquery)(nil)).Elem()
}

func (o GlobalConnectionBigqueryOutput) ToGlobalConnectionBigqueryOutput() GlobalConnectionBigqueryOutput {
	return o
}

func (o GlobalConnectionBigqueryOutput) ToGlobalConnectionBigqueryOutputWithContext(ctx context.Context) GlobalConnectionBigqueryOutput {
	return o
}

func (o GlobalConnectionBigqueryOutput) ToGlobalConnectionBigqueryPtrOutput() GlobalConnectionBigqueryPtrOutput {
	return o.ToGlobalConnectionBigqueryPtrOutputWithContext(context.Background())
}

func (o GlobalConnectionBigqueryOutput) ToGlobalConnectionBigqueryPtrOutputWithContext(ctx context.Context) GlobalConnectionBigqueryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlobalConnectionBigquery) *GlobalConnectionBigquery {
		return &v
	}).(GlobalConnectionBigqueryPtrOutput)
}

// OAuth Client ID
func (o GlobalConnectionBigqueryOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// OAuth Client Secret
func (o GlobalConnectionBigqueryOutput) ApplicationSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *string { return v.ApplicationSecret }).(pulumi.StringPtrOutput)
}

// Auth Provider X509 Cert URL for the Service Account
func (o GlobalConnectionBigqueryOutput) AuthProviderX509CertUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) string { return v.AuthProviderX509CertUrl }).(pulumi.StringOutput)
}

// Auth URI for the Service Account
func (o GlobalConnectionBigqueryOutput) AuthUri() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) string { return v.AuthUri }).(pulumi.StringOutput)
}

// Service Account email
func (o GlobalConnectionBigqueryOutput) ClientEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) string { return v.ClientEmail }).(pulumi.StringOutput)
}

// Client ID of the Service Account
func (o GlobalConnectionBigqueryOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) string { return v.ClientId }).(pulumi.StringOutput)
}

// Client X509 Cert URL for the Service Account
func (o GlobalConnectionBigqueryOutput) ClientX509CertUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) string { return v.ClientX509CertUrl }).(pulumi.StringOutput)
}

// Dataproc cluster name for PySpark workloads
func (o GlobalConnectionBigqueryOutput) DataprocClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *string { return v.DataprocClusterName }).(pulumi.StringPtrOutput)
}

// Google Cloud region for PySpark workloads on Dataproc
func (o GlobalConnectionBigqueryOutput) DataprocRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *string { return v.DataprocRegion }).(pulumi.StringPtrOutput)
}

// Project to bill for query execution
func (o GlobalConnectionBigqueryOutput) ExecutionProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *string { return v.ExecutionProject }).(pulumi.StringPtrOutput)
}

// The GCP project ID to use for the connection
func (o GlobalConnectionBigqueryOutput) GcpProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) string { return v.GcpProjectId }).(pulumi.StringOutput)
}

// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
func (o GlobalConnectionBigqueryOutput) GcsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *string { return v.GcsBucket }).(pulumi.StringPtrOutput)
}

// Service Account to impersonate when running queries
func (o GlobalConnectionBigqueryOutput) ImpersonateServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *string { return v.ImpersonateServiceAccount }).(pulumi.StringPtrOutput)
}

// Maximum timeout for the job creation step
func (o GlobalConnectionBigqueryOutput) JobCreationTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *int { return v.JobCreationTimeoutSeconds }).(pulumi.IntPtrOutput)
}

// Total number of seconds to wait while retrying the same query
func (o GlobalConnectionBigqueryOutput) JobRetryDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *int { return v.JobRetryDeadlineSeconds }).(pulumi.IntPtrOutput)
}

// Location to create new Datasets in
func (o GlobalConnectionBigqueryOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Max number of bytes that can be billed for a given BigQuery query
func (o GlobalConnectionBigqueryOutput) MaximumBytesBilled() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *int { return v.MaximumBytesBilled }).(pulumi.IntPtrOutput)
}

// The priority with which to execute BigQuery queries (batch or interactive)
func (o GlobalConnectionBigqueryOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// Private Key for the Service Account
func (o GlobalConnectionBigqueryOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// Private Key ID for the Service Account
func (o GlobalConnectionBigqueryOutput) PrivateKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) string { return v.PrivateKeyId }).(pulumi.StringOutput)
}

// Number of retries for queries
func (o GlobalConnectionBigqueryOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

// OAuth scopes for the BigQuery connection
func (o GlobalConnectionBigqueryOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// Timeout in seconds for queries
func (o GlobalConnectionBigqueryOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

// Token URI for the Service Account
func (o GlobalConnectionBigqueryOutput) TokenUri() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionBigquery) string { return v.TokenUri }).(pulumi.StringOutput)
}

type GlobalConnectionBigqueryPtrOutput struct{ *pulumi.OutputState }

func (GlobalConnectionBigqueryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionBigquery)(nil)).Elem()
}

func (o GlobalConnectionBigqueryPtrOutput) ToGlobalConnectionBigqueryPtrOutput() GlobalConnectionBigqueryPtrOutput {
	return o
}

func (o GlobalConnectionBigqueryPtrOutput) ToGlobalConnectionBigqueryPtrOutputWithContext(ctx context.Context) GlobalConnectionBigqueryPtrOutput {
	return o
}

func (o GlobalConnectionBigqueryPtrOutput) Elem() GlobalConnectionBigqueryOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) GlobalConnectionBigquery {
		if v != nil {
			return *v
		}
		var ret GlobalConnectionBigquery
		return ret
	}).(GlobalConnectionBigqueryOutput)
}

// OAuth Client ID
func (o GlobalConnectionBigqueryPtrOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationId
	}).(pulumi.StringPtrOutput)
}

// OAuth Client Secret
func (o GlobalConnectionBigqueryPtrOutput) ApplicationSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationSecret
	}).(pulumi.StringPtrOutput)
}

// Auth Provider X509 Cert URL for the Service Account
func (o GlobalConnectionBigqueryPtrOutput) AuthProviderX509CertUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return &v.AuthProviderX509CertUrl
	}).(pulumi.StringPtrOutput)
}

// Auth URI for the Service Account
func (o GlobalConnectionBigqueryPtrOutput) AuthUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return &v.AuthUri
	}).(pulumi.StringPtrOutput)
}

// Service Account email
func (o GlobalConnectionBigqueryPtrOutput) ClientEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return &v.ClientEmail
	}).(pulumi.StringPtrOutput)
}

// Client ID of the Service Account
func (o GlobalConnectionBigqueryPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Client X509 Cert URL for the Service Account
func (o GlobalConnectionBigqueryPtrOutput) ClientX509CertUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return &v.ClientX509CertUrl
	}).(pulumi.StringPtrOutput)
}

// Dataproc cluster name for PySpark workloads
func (o GlobalConnectionBigqueryPtrOutput) DataprocClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return v.DataprocClusterName
	}).(pulumi.StringPtrOutput)
}

// Google Cloud region for PySpark workloads on Dataproc
func (o GlobalConnectionBigqueryPtrOutput) DataprocRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return v.DataprocRegion
	}).(pulumi.StringPtrOutput)
}

// Project to bill for query execution
func (o GlobalConnectionBigqueryPtrOutput) ExecutionProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return v.ExecutionProject
	}).(pulumi.StringPtrOutput)
}

// The GCP project ID to use for the connection
func (o GlobalConnectionBigqueryPtrOutput) GcpProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return &v.GcpProjectId
	}).(pulumi.StringPtrOutput)
}

// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
func (o GlobalConnectionBigqueryPtrOutput) GcsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return v.GcsBucket
	}).(pulumi.StringPtrOutput)
}

// Service Account to impersonate when running queries
func (o GlobalConnectionBigqueryPtrOutput) ImpersonateServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return v.ImpersonateServiceAccount
	}).(pulumi.StringPtrOutput)
}

// Maximum timeout for the job creation step
func (o GlobalConnectionBigqueryPtrOutput) JobCreationTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *int {
		if v == nil {
			return nil
		}
		return v.JobCreationTimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// Total number of seconds to wait while retrying the same query
func (o GlobalConnectionBigqueryPtrOutput) JobRetryDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *int {
		if v == nil {
			return nil
		}
		return v.JobRetryDeadlineSeconds
	}).(pulumi.IntPtrOutput)
}

// Location to create new Datasets in
func (o GlobalConnectionBigqueryPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Max number of bytes that can be billed for a given BigQuery query
func (o GlobalConnectionBigqueryPtrOutput) MaximumBytesBilled() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBytesBilled
	}).(pulumi.IntPtrOutput)
}

// The priority with which to execute BigQuery queries (batch or interactive)
func (o GlobalConnectionBigqueryPtrOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.StringPtrOutput)
}

// Private Key for the Service Account
func (o GlobalConnectionBigqueryPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// Private Key ID for the Service Account
func (o GlobalConnectionBigqueryPtrOutput) PrivateKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateKeyId
	}).(pulumi.StringPtrOutput)
}

// Number of retries for queries
func (o GlobalConnectionBigqueryPtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *int {
		if v == nil {
			return nil
		}
		return v.Retries
	}).(pulumi.IntPtrOutput)
}

// OAuth scopes for the BigQuery connection
func (o GlobalConnectionBigqueryPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// Timeout in seconds for queries
func (o GlobalConnectionBigqueryPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// Token URI for the Service Account
func (o GlobalConnectionBigqueryPtrOutput) TokenUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionBigquery) *string {
		if v == nil {
			return nil
		}
		return &v.TokenUri
	}).(pulumi.StringPtrOutput)
}

type GlobalConnectionSnowflake struct {
	// The Snowflake account name
	Account string `pulumi:"account"`
	// Whether to allow Snowflake OAuth for the connection. If true, the `oauthClientId` and `oauthClientSecret` fields must be set
	AllowSso *bool `pulumi:"allowSso"`
	// If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (> 4 hours)
	ClientSessionKeepAlive *bool `pulumi:"clientSessionKeepAlive"`
	// The default database for the connection
	Database string `pulumi:"database"`
	// OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake
	OauthClientId *string `pulumi:"oauthClientId"`
	// OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake
	OauthClientSecret *string `pulumi:"oauthClientSecret"`
	// The Snowflake role to use when running queries on the connection
	Role *string `pulumi:"role"`
	// The default Snowflake Warehouse to use for the connection
	Warehouse string `pulumi:"warehouse"`
}

// GlobalConnectionSnowflakeInput is an input type that accepts GlobalConnectionSnowflakeArgs and GlobalConnectionSnowflakeOutput values.
// You can construct a concrete instance of `GlobalConnectionSnowflakeInput` via:
//
//	GlobalConnectionSnowflakeArgs{...}
type GlobalConnectionSnowflakeInput interface {
	pulumi.Input

	ToGlobalConnectionSnowflakeOutput() GlobalConnectionSnowflakeOutput
	ToGlobalConnectionSnowflakeOutputWithContext(context.Context) GlobalConnectionSnowflakeOutput
}

type GlobalConnectionSnowflakeArgs struct {
	// The Snowflake account name
	Account pulumi.StringInput `pulumi:"account"`
	// Whether to allow Snowflake OAuth for the connection. If true, the `oauthClientId` and `oauthClientSecret` fields must be set
	AllowSso pulumi.BoolPtrInput `pulumi:"allowSso"`
	// If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (> 4 hours)
	ClientSessionKeepAlive pulumi.BoolPtrInput `pulumi:"clientSessionKeepAlive"`
	// The default database for the connection
	Database pulumi.StringInput `pulumi:"database"`
	// OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake
	OauthClientId pulumi.StringPtrInput `pulumi:"oauthClientId"`
	// OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake
	OauthClientSecret pulumi.StringPtrInput `pulumi:"oauthClientSecret"`
	// The Snowflake role to use when running queries on the connection
	Role pulumi.StringPtrInput `pulumi:"role"`
	// The default Snowflake Warehouse to use for the connection
	Warehouse pulumi.StringInput `pulumi:"warehouse"`
}

func (GlobalConnectionSnowflakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionSnowflake)(nil)).Elem()
}

func (i GlobalConnectionSnowflakeArgs) ToGlobalConnectionSnowflakeOutput() GlobalConnectionSnowflakeOutput {
	return i.ToGlobalConnectionSnowflakeOutputWithContext(context.Background())
}

func (i GlobalConnectionSnowflakeArgs) ToGlobalConnectionSnowflakeOutputWithContext(ctx context.Context) GlobalConnectionSnowflakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionSnowflakeOutput)
}

func (i GlobalConnectionSnowflakeArgs) ToGlobalConnectionSnowflakePtrOutput() GlobalConnectionSnowflakePtrOutput {
	return i.ToGlobalConnectionSnowflakePtrOutputWithContext(context.Background())
}

func (i GlobalConnectionSnowflakeArgs) ToGlobalConnectionSnowflakePtrOutputWithContext(ctx context.Context) GlobalConnectionSnowflakePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionSnowflakeOutput).ToGlobalConnectionSnowflakePtrOutputWithContext(ctx)
}

// GlobalConnectionSnowflakePtrInput is an input type that accepts GlobalConnectionSnowflakeArgs, GlobalConnectionSnowflakePtr and GlobalConnectionSnowflakePtrOutput values.
// You can construct a concrete instance of `GlobalConnectionSnowflakePtrInput` via:
//
//	        GlobalConnectionSnowflakeArgs{...}
//
//	or:
//
//	        nil
type GlobalConnectionSnowflakePtrInput interface {
	pulumi.Input

	ToGlobalConnectionSnowflakePtrOutput() GlobalConnectionSnowflakePtrOutput
	ToGlobalConnectionSnowflakePtrOutputWithContext(context.Context) GlobalConnectionSnowflakePtrOutput
}

type globalConnectionSnowflakePtrType GlobalConnectionSnowflakeArgs

func GlobalConnectionSnowflakePtr(v *GlobalConnectionSnowflakeArgs) GlobalConnectionSnowflakePtrInput {
	return (*globalConnectionSnowflakePtrType)(v)
}

func (*globalConnectionSnowflakePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionSnowflake)(nil)).Elem()
}

func (i *globalConnectionSnowflakePtrType) ToGlobalConnectionSnowflakePtrOutput() GlobalConnectionSnowflakePtrOutput {
	return i.ToGlobalConnectionSnowflakePtrOutputWithContext(context.Background())
}

func (i *globalConnectionSnowflakePtrType) ToGlobalConnectionSnowflakePtrOutputWithContext(ctx context.Context) GlobalConnectionSnowflakePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalConnectionSnowflakePtrOutput)
}

type GlobalConnectionSnowflakeOutput struct{ *pulumi.OutputState }

func (GlobalConnectionSnowflakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalConnectionSnowflake)(nil)).Elem()
}

func (o GlobalConnectionSnowflakeOutput) ToGlobalConnectionSnowflakeOutput() GlobalConnectionSnowflakeOutput {
	return o
}

func (o GlobalConnectionSnowflakeOutput) ToGlobalConnectionSnowflakeOutputWithContext(ctx context.Context) GlobalConnectionSnowflakeOutput {
	return o
}

func (o GlobalConnectionSnowflakeOutput) ToGlobalConnectionSnowflakePtrOutput() GlobalConnectionSnowflakePtrOutput {
	return o.ToGlobalConnectionSnowflakePtrOutputWithContext(context.Background())
}

func (o GlobalConnectionSnowflakeOutput) ToGlobalConnectionSnowflakePtrOutputWithContext(ctx context.Context) GlobalConnectionSnowflakePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlobalConnectionSnowflake) *GlobalConnectionSnowflake {
		return &v
	}).(GlobalConnectionSnowflakePtrOutput)
}

// The Snowflake account name
func (o GlobalConnectionSnowflakeOutput) Account() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionSnowflake) string { return v.Account }).(pulumi.StringOutput)
}

// Whether to allow Snowflake OAuth for the connection. If true, the `oauthClientId` and `oauthClientSecret` fields must be set
func (o GlobalConnectionSnowflakeOutput) AllowSso() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GlobalConnectionSnowflake) *bool { return v.AllowSso }).(pulumi.BoolPtrOutput)
}

// If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (> 4 hours)
func (o GlobalConnectionSnowflakeOutput) ClientSessionKeepAlive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GlobalConnectionSnowflake) *bool { return v.ClientSessionKeepAlive }).(pulumi.BoolPtrOutput)
}

// The default database for the connection
func (o GlobalConnectionSnowflakeOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionSnowflake) string { return v.Database }).(pulumi.StringOutput)
}

// OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake
func (o GlobalConnectionSnowflakeOutput) OauthClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionSnowflake) *string { return v.OauthClientId }).(pulumi.StringPtrOutput)
}

// OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake
func (o GlobalConnectionSnowflakeOutput) OauthClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionSnowflake) *string { return v.OauthClientSecret }).(pulumi.StringPtrOutput)
}

// The Snowflake role to use when running queries on the connection
func (o GlobalConnectionSnowflakeOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalConnectionSnowflake) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// The default Snowflake Warehouse to use for the connection
func (o GlobalConnectionSnowflakeOutput) Warehouse() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalConnectionSnowflake) string { return v.Warehouse }).(pulumi.StringOutput)
}

type GlobalConnectionSnowflakePtrOutput struct{ *pulumi.OutputState }

func (GlobalConnectionSnowflakePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalConnectionSnowflake)(nil)).Elem()
}

func (o GlobalConnectionSnowflakePtrOutput) ToGlobalConnectionSnowflakePtrOutput() GlobalConnectionSnowflakePtrOutput {
	return o
}

func (o GlobalConnectionSnowflakePtrOutput) ToGlobalConnectionSnowflakePtrOutputWithContext(ctx context.Context) GlobalConnectionSnowflakePtrOutput {
	return o
}

func (o GlobalConnectionSnowflakePtrOutput) Elem() GlobalConnectionSnowflakeOutput {
	return o.ApplyT(func(v *GlobalConnectionSnowflake) GlobalConnectionSnowflake {
		if v != nil {
			return *v
		}
		var ret GlobalConnectionSnowflake
		return ret
	}).(GlobalConnectionSnowflakeOutput)
}

// The Snowflake account name
func (o GlobalConnectionSnowflakePtrOutput) Account() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.Account
	}).(pulumi.StringPtrOutput)
}

// Whether to allow Snowflake OAuth for the connection. If true, the `oauthClientId` and `oauthClientSecret` fields must be set
func (o GlobalConnectionSnowflakePtrOutput) AllowSso() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSnowflake) *bool {
		if v == nil {
			return nil
		}
		return v.AllowSso
	}).(pulumi.BoolPtrOutput)
}

// If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (> 4 hours)
func (o GlobalConnectionSnowflakePtrOutput) ClientSessionKeepAlive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSnowflake) *bool {
		if v == nil {
			return nil
		}
		return v.ClientSessionKeepAlive
	}).(pulumi.BoolPtrOutput)
}

// The default database for the connection
func (o GlobalConnectionSnowflakePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake
func (o GlobalConnectionSnowflakePtrOutput) OauthClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSnowflake) *string {
		if v == nil {
			return nil
		}
		return v.OauthClientId
	}).(pulumi.StringPtrOutput)
}

// OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake
func (o GlobalConnectionSnowflakePtrOutput) OauthClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSnowflake) *string {
		if v == nil {
			return nil
		}
		return v.OauthClientSecret
	}).(pulumi.StringPtrOutput)
}

// The Snowflake role to use when running queries on the connection
func (o GlobalConnectionSnowflakePtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSnowflake) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// The default Snowflake Warehouse to use for the connection
func (o GlobalConnectionSnowflakePtrOutput) Warehouse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalConnectionSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.Warehouse
	}).(pulumi.StringPtrOutput)
}

type GroupGroupPermission struct {
	// Whether access should be provided for all projects or not.
	AllProjects bool `pulumi:"allProjects"`
	// Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
	PermissionSet string `pulumi:"permissionSet"`
	// Project ID to apply this permission to for this group.
	ProjectId *int `pulumi:"projectId"`
	// What types of environments to apply Write permissions to.
	// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
	// The values allowed are `all`, `development`, `staging`, `production` and `other`.
	// Not setting a value is the same as selecting `all`.
	// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
	WritableEnvironmentCategories []string `pulumi:"writableEnvironmentCategories"`
}

// GroupGroupPermissionInput is an input type that accepts GroupGroupPermissionArgs and GroupGroupPermissionOutput values.
// You can construct a concrete instance of `GroupGroupPermissionInput` via:
//
//	GroupGroupPermissionArgs{...}
type GroupGroupPermissionInput interface {
	pulumi.Input

	ToGroupGroupPermissionOutput() GroupGroupPermissionOutput
	ToGroupGroupPermissionOutputWithContext(context.Context) GroupGroupPermissionOutput
}

type GroupGroupPermissionArgs struct {
	// Whether access should be provided for all projects or not.
	AllProjects pulumi.BoolInput `pulumi:"allProjects"`
	// Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
	PermissionSet pulumi.StringInput `pulumi:"permissionSet"`
	// Project ID to apply this permission to for this group.
	ProjectId pulumi.IntPtrInput `pulumi:"projectId"`
	// What types of environments to apply Write permissions to.
	// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
	// The values allowed are `all`, `development`, `staging`, `production` and `other`.
	// Not setting a value is the same as selecting `all`.
	// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
	WritableEnvironmentCategories pulumi.StringArrayInput `pulumi:"writableEnvironmentCategories"`
}

func (GroupGroupPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupGroupPermission)(nil)).Elem()
}

func (i GroupGroupPermissionArgs) ToGroupGroupPermissionOutput() GroupGroupPermissionOutput {
	return i.ToGroupGroupPermissionOutputWithContext(context.Background())
}

func (i GroupGroupPermissionArgs) ToGroupGroupPermissionOutputWithContext(ctx context.Context) GroupGroupPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupGroupPermissionOutput)
}

// GroupGroupPermissionArrayInput is an input type that accepts GroupGroupPermissionArray and GroupGroupPermissionArrayOutput values.
// You can construct a concrete instance of `GroupGroupPermissionArrayInput` via:
//
//	GroupGroupPermissionArray{ GroupGroupPermissionArgs{...} }
type GroupGroupPermissionArrayInput interface {
	pulumi.Input

	ToGroupGroupPermissionArrayOutput() GroupGroupPermissionArrayOutput
	ToGroupGroupPermissionArrayOutputWithContext(context.Context) GroupGroupPermissionArrayOutput
}

type GroupGroupPermissionArray []GroupGroupPermissionInput

func (GroupGroupPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupGroupPermission)(nil)).Elem()
}

func (i GroupGroupPermissionArray) ToGroupGroupPermissionArrayOutput() GroupGroupPermissionArrayOutput {
	return i.ToGroupGroupPermissionArrayOutputWithContext(context.Background())
}

func (i GroupGroupPermissionArray) ToGroupGroupPermissionArrayOutputWithContext(ctx context.Context) GroupGroupPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupGroupPermissionArrayOutput)
}

type GroupGroupPermissionOutput struct{ *pulumi.OutputState }

func (GroupGroupPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupGroupPermission)(nil)).Elem()
}

func (o GroupGroupPermissionOutput) ToGroupGroupPermissionOutput() GroupGroupPermissionOutput {
	return o
}

func (o GroupGroupPermissionOutput) ToGroupGroupPermissionOutputWithContext(ctx context.Context) GroupGroupPermissionOutput {
	return o
}

// Whether access should be provided for all projects or not.
func (o GroupGroupPermissionOutput) AllProjects() pulumi.BoolOutput {
	return o.ApplyT(func(v GroupGroupPermission) bool { return v.AllProjects }).(pulumi.BoolOutput)
}

// Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
func (o GroupGroupPermissionOutput) PermissionSet() pulumi.StringOutput {
	return o.ApplyT(func(v GroupGroupPermission) string { return v.PermissionSet }).(pulumi.StringOutput)
}

// Project ID to apply this permission to for this group.
func (o GroupGroupPermissionOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupGroupPermission) *int { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// What types of environments to apply Write permissions to.
// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
// The values allowed are `all`, `development`, `staging`, `production` and `other`.
// Not setting a value is the same as selecting `all`.
// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
func (o GroupGroupPermissionOutput) WritableEnvironmentCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupGroupPermission) []string { return v.WritableEnvironmentCategories }).(pulumi.StringArrayOutput)
}

type GroupGroupPermissionArrayOutput struct{ *pulumi.OutputState }

func (GroupGroupPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupGroupPermission)(nil)).Elem()
}

func (o GroupGroupPermissionArrayOutput) ToGroupGroupPermissionArrayOutput() GroupGroupPermissionArrayOutput {
	return o
}

func (o GroupGroupPermissionArrayOutput) ToGroupGroupPermissionArrayOutputWithContext(ctx context.Context) GroupGroupPermissionArrayOutput {
	return o
}

func (o GroupGroupPermissionArrayOutput) Index(i pulumi.IntInput) GroupGroupPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupGroupPermission {
		return vs[0].([]GroupGroupPermission)[vs[1].(int)]
	}).(GroupGroupPermissionOutput)
}

type GroupPartialPermissionsGroupPermission struct {
	// Whether access should be provided for all projects or not.
	AllProjects bool `pulumi:"allProjects"`
	// Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
	PermissionSet string `pulumi:"permissionSet"`
	// Project ID to apply this permission to for this group.
	ProjectId *int `pulumi:"projectId"`
	// What types of environments to apply Write permissions to.
	// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
	// The values allowed are `all`, `development`, `staging`, `production` and `other`.
	// Not setting a value is the same as selecting `all`.
	// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
	WritableEnvironmentCategories []string `pulumi:"writableEnvironmentCategories"`
}

// GroupPartialPermissionsGroupPermissionInput is an input type that accepts GroupPartialPermissionsGroupPermissionArgs and GroupPartialPermissionsGroupPermissionOutput values.
// You can construct a concrete instance of `GroupPartialPermissionsGroupPermissionInput` via:
//
//	GroupPartialPermissionsGroupPermissionArgs{...}
type GroupPartialPermissionsGroupPermissionInput interface {
	pulumi.Input

	ToGroupPartialPermissionsGroupPermissionOutput() GroupPartialPermissionsGroupPermissionOutput
	ToGroupPartialPermissionsGroupPermissionOutputWithContext(context.Context) GroupPartialPermissionsGroupPermissionOutput
}

type GroupPartialPermissionsGroupPermissionArgs struct {
	// Whether access should be provided for all projects or not.
	AllProjects pulumi.BoolInput `pulumi:"allProjects"`
	// Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
	PermissionSet pulumi.StringInput `pulumi:"permissionSet"`
	// Project ID to apply this permission to for this group.
	ProjectId pulumi.IntPtrInput `pulumi:"projectId"`
	// What types of environments to apply Write permissions to.
	// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
	// The values allowed are `all`, `development`, `staging`, `production` and `other`.
	// Not setting a value is the same as selecting `all`.
	// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
	WritableEnvironmentCategories pulumi.StringArrayInput `pulumi:"writableEnvironmentCategories"`
}

func (GroupPartialPermissionsGroupPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPartialPermissionsGroupPermission)(nil)).Elem()
}

func (i GroupPartialPermissionsGroupPermissionArgs) ToGroupPartialPermissionsGroupPermissionOutput() GroupPartialPermissionsGroupPermissionOutput {
	return i.ToGroupPartialPermissionsGroupPermissionOutputWithContext(context.Background())
}

func (i GroupPartialPermissionsGroupPermissionArgs) ToGroupPartialPermissionsGroupPermissionOutputWithContext(ctx context.Context) GroupPartialPermissionsGroupPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPartialPermissionsGroupPermissionOutput)
}

// GroupPartialPermissionsGroupPermissionArrayInput is an input type that accepts GroupPartialPermissionsGroupPermissionArray and GroupPartialPermissionsGroupPermissionArrayOutput values.
// You can construct a concrete instance of `GroupPartialPermissionsGroupPermissionArrayInput` via:
//
//	GroupPartialPermissionsGroupPermissionArray{ GroupPartialPermissionsGroupPermissionArgs{...} }
type GroupPartialPermissionsGroupPermissionArrayInput interface {
	pulumi.Input

	ToGroupPartialPermissionsGroupPermissionArrayOutput() GroupPartialPermissionsGroupPermissionArrayOutput
	ToGroupPartialPermissionsGroupPermissionArrayOutputWithContext(context.Context) GroupPartialPermissionsGroupPermissionArrayOutput
}

type GroupPartialPermissionsGroupPermissionArray []GroupPartialPermissionsGroupPermissionInput

func (GroupPartialPermissionsGroupPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupPartialPermissionsGroupPermission)(nil)).Elem()
}

func (i GroupPartialPermissionsGroupPermissionArray) ToGroupPartialPermissionsGroupPermissionArrayOutput() GroupPartialPermissionsGroupPermissionArrayOutput {
	return i.ToGroupPartialPermissionsGroupPermissionArrayOutputWithContext(context.Background())
}

func (i GroupPartialPermissionsGroupPermissionArray) ToGroupPartialPermissionsGroupPermissionArrayOutputWithContext(ctx context.Context) GroupPartialPermissionsGroupPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPartialPermissionsGroupPermissionArrayOutput)
}

type GroupPartialPermissionsGroupPermissionOutput struct{ *pulumi.OutputState }

func (GroupPartialPermissionsGroupPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPartialPermissionsGroupPermission)(nil)).Elem()
}

func (o GroupPartialPermissionsGroupPermissionOutput) ToGroupPartialPermissionsGroupPermissionOutput() GroupPartialPermissionsGroupPermissionOutput {
	return o
}

func (o GroupPartialPermissionsGroupPermissionOutput) ToGroupPartialPermissionsGroupPermissionOutputWithContext(ctx context.Context) GroupPartialPermissionsGroupPermissionOutput {
	return o
}

// Whether access should be provided for all projects or not.
func (o GroupPartialPermissionsGroupPermissionOutput) AllProjects() pulumi.BoolOutput {
	return o.ApplyT(func(v GroupPartialPermissionsGroupPermission) bool { return v.AllProjects }).(pulumi.BoolOutput)
}

// Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
func (o GroupPartialPermissionsGroupPermissionOutput) PermissionSet() pulumi.StringOutput {
	return o.ApplyT(func(v GroupPartialPermissionsGroupPermission) string { return v.PermissionSet }).(pulumi.StringOutput)
}

// Project ID to apply this permission to for this group.
func (o GroupPartialPermissionsGroupPermissionOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupPartialPermissionsGroupPermission) *int { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// What types of environments to apply Write permissions to.
// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
// The values allowed are `all`, `development`, `staging`, `production` and `other`.
// Not setting a value is the same as selecting `all`.
// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
func (o GroupPartialPermissionsGroupPermissionOutput) WritableEnvironmentCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupPartialPermissionsGroupPermission) []string { return v.WritableEnvironmentCategories }).(pulumi.StringArrayOutput)
}

type GroupPartialPermissionsGroupPermissionArrayOutput struct{ *pulumi.OutputState }

func (GroupPartialPermissionsGroupPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupPartialPermissionsGroupPermission)(nil)).Elem()
}

func (o GroupPartialPermissionsGroupPermissionArrayOutput) ToGroupPartialPermissionsGroupPermissionArrayOutput() GroupPartialPermissionsGroupPermissionArrayOutput {
	return o
}

func (o GroupPartialPermissionsGroupPermissionArrayOutput) ToGroupPartialPermissionsGroupPermissionArrayOutputWithContext(ctx context.Context) GroupPartialPermissionsGroupPermissionArrayOutput {
	return o
}

func (o GroupPartialPermissionsGroupPermissionArrayOutput) Index(i pulumi.IntInput) GroupPartialPermissionsGroupPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupPartialPermissionsGroupPermission {
		return vs[0].([]GroupPartialPermissionsGroupPermission)[vs[1].(int)]
	}).(GroupPartialPermissionsGroupPermissionOutput)
}

type JobJobCompletionTriggerCondition struct {
	// The ID of the job that would trigger this job after completion.
	JobId int `pulumi:"jobId"`
	// The ID of the project where the trigger job is running in.
	ProjectId int `pulumi:"projectId"`
	// List of statuses to trigger the job on. Possible values are `success`, `error` and `canceled`.
	Statuses []string `pulumi:"statuses"`
}

// JobJobCompletionTriggerConditionInput is an input type that accepts JobJobCompletionTriggerConditionArgs and JobJobCompletionTriggerConditionOutput values.
// You can construct a concrete instance of `JobJobCompletionTriggerConditionInput` via:
//
//	JobJobCompletionTriggerConditionArgs{...}
type JobJobCompletionTriggerConditionInput interface {
	pulumi.Input

	ToJobJobCompletionTriggerConditionOutput() JobJobCompletionTriggerConditionOutput
	ToJobJobCompletionTriggerConditionOutputWithContext(context.Context) JobJobCompletionTriggerConditionOutput
}

type JobJobCompletionTriggerConditionArgs struct {
	// The ID of the job that would trigger this job after completion.
	JobId pulumi.IntInput `pulumi:"jobId"`
	// The ID of the project where the trigger job is running in.
	ProjectId pulumi.IntInput `pulumi:"projectId"`
	// List of statuses to trigger the job on. Possible values are `success`, `error` and `canceled`.
	Statuses pulumi.StringArrayInput `pulumi:"statuses"`
}

func (JobJobCompletionTriggerConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobJobCompletionTriggerCondition)(nil)).Elem()
}

func (i JobJobCompletionTriggerConditionArgs) ToJobJobCompletionTriggerConditionOutput() JobJobCompletionTriggerConditionOutput {
	return i.ToJobJobCompletionTriggerConditionOutputWithContext(context.Background())
}

func (i JobJobCompletionTriggerConditionArgs) ToJobJobCompletionTriggerConditionOutputWithContext(ctx context.Context) JobJobCompletionTriggerConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobJobCompletionTriggerConditionOutput)
}

func (i JobJobCompletionTriggerConditionArgs) ToJobJobCompletionTriggerConditionPtrOutput() JobJobCompletionTriggerConditionPtrOutput {
	return i.ToJobJobCompletionTriggerConditionPtrOutputWithContext(context.Background())
}

func (i JobJobCompletionTriggerConditionArgs) ToJobJobCompletionTriggerConditionPtrOutputWithContext(ctx context.Context) JobJobCompletionTriggerConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobJobCompletionTriggerConditionOutput).ToJobJobCompletionTriggerConditionPtrOutputWithContext(ctx)
}

// JobJobCompletionTriggerConditionPtrInput is an input type that accepts JobJobCompletionTriggerConditionArgs, JobJobCompletionTriggerConditionPtr and JobJobCompletionTriggerConditionPtrOutput values.
// You can construct a concrete instance of `JobJobCompletionTriggerConditionPtrInput` via:
//
//	        JobJobCompletionTriggerConditionArgs{...}
//
//	or:
//
//	        nil
type JobJobCompletionTriggerConditionPtrInput interface {
	pulumi.Input

	ToJobJobCompletionTriggerConditionPtrOutput() JobJobCompletionTriggerConditionPtrOutput
	ToJobJobCompletionTriggerConditionPtrOutputWithContext(context.Context) JobJobCompletionTriggerConditionPtrOutput
}

type jobJobCompletionTriggerConditionPtrType JobJobCompletionTriggerConditionArgs

func JobJobCompletionTriggerConditionPtr(v *JobJobCompletionTriggerConditionArgs) JobJobCompletionTriggerConditionPtrInput {
	return (*jobJobCompletionTriggerConditionPtrType)(v)
}

func (*jobJobCompletionTriggerConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobJobCompletionTriggerCondition)(nil)).Elem()
}

func (i *jobJobCompletionTriggerConditionPtrType) ToJobJobCompletionTriggerConditionPtrOutput() JobJobCompletionTriggerConditionPtrOutput {
	return i.ToJobJobCompletionTriggerConditionPtrOutputWithContext(context.Background())
}

func (i *jobJobCompletionTriggerConditionPtrType) ToJobJobCompletionTriggerConditionPtrOutputWithContext(ctx context.Context) JobJobCompletionTriggerConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobJobCompletionTriggerConditionPtrOutput)
}

type JobJobCompletionTriggerConditionOutput struct{ *pulumi.OutputState }

func (JobJobCompletionTriggerConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobJobCompletionTriggerCondition)(nil)).Elem()
}

func (o JobJobCompletionTriggerConditionOutput) ToJobJobCompletionTriggerConditionOutput() JobJobCompletionTriggerConditionOutput {
	return o
}

func (o JobJobCompletionTriggerConditionOutput) ToJobJobCompletionTriggerConditionOutputWithContext(ctx context.Context) JobJobCompletionTriggerConditionOutput {
	return o
}

func (o JobJobCompletionTriggerConditionOutput) ToJobJobCompletionTriggerConditionPtrOutput() JobJobCompletionTriggerConditionPtrOutput {
	return o.ToJobJobCompletionTriggerConditionPtrOutputWithContext(context.Background())
}

func (o JobJobCompletionTriggerConditionOutput) ToJobJobCompletionTriggerConditionPtrOutputWithContext(ctx context.Context) JobJobCompletionTriggerConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobJobCompletionTriggerCondition) *JobJobCompletionTriggerCondition {
		return &v
	}).(JobJobCompletionTriggerConditionPtrOutput)
}

// The ID of the job that would trigger this job after completion.
func (o JobJobCompletionTriggerConditionOutput) JobId() pulumi.IntOutput {
	return o.ApplyT(func(v JobJobCompletionTriggerCondition) int { return v.JobId }).(pulumi.IntOutput)
}

// The ID of the project where the trigger job is running in.
func (o JobJobCompletionTriggerConditionOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v JobJobCompletionTriggerCondition) int { return v.ProjectId }).(pulumi.IntOutput)
}

// List of statuses to trigger the job on. Possible values are `success`, `error` and `canceled`.
func (o JobJobCompletionTriggerConditionOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobJobCompletionTriggerCondition) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

type JobJobCompletionTriggerConditionPtrOutput struct{ *pulumi.OutputState }

func (JobJobCompletionTriggerConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobJobCompletionTriggerCondition)(nil)).Elem()
}

func (o JobJobCompletionTriggerConditionPtrOutput) ToJobJobCompletionTriggerConditionPtrOutput() JobJobCompletionTriggerConditionPtrOutput {
	return o
}

func (o JobJobCompletionTriggerConditionPtrOutput) ToJobJobCompletionTriggerConditionPtrOutputWithContext(ctx context.Context) JobJobCompletionTriggerConditionPtrOutput {
	return o
}

func (o JobJobCompletionTriggerConditionPtrOutput) Elem() JobJobCompletionTriggerConditionOutput {
	return o.ApplyT(func(v *JobJobCompletionTriggerCondition) JobJobCompletionTriggerCondition {
		if v != nil {
			return *v
		}
		var ret JobJobCompletionTriggerCondition
		return ret
	}).(JobJobCompletionTriggerConditionOutput)
}

// The ID of the job that would trigger this job after completion.
func (o JobJobCompletionTriggerConditionPtrOutput) JobId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobJobCompletionTriggerCondition) *int {
		if v == nil {
			return nil
		}
		return &v.JobId
	}).(pulumi.IntPtrOutput)
}

// The ID of the project where the trigger job is running in.
func (o JobJobCompletionTriggerConditionPtrOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobJobCompletionTriggerCondition) *int {
		if v == nil {
			return nil
		}
		return &v.ProjectId
	}).(pulumi.IntPtrOutput)
}

// List of statuses to trigger the job on. Possible values are `success`, `error` and `canceled`.
func (o JobJobCompletionTriggerConditionPtrOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobJobCompletionTriggerCondition) []string {
		if v == nil {
			return nil
		}
		return v.Statuses
	}).(pulumi.StringArrayOutput)
}

type ServiceTokenServiceTokenPermission struct {
	// Whether or not to apply this permission to all projects for this service token
	AllProjects bool `pulumi:"allProjects"`
	// Set of permissions to apply
	PermissionSet string `pulumi:"permissionSet"`
	// Project ID to apply this permission to for this service token
	ProjectId *int `pulumi:"projectId"`
	// What types of environments to apply Write permissions to.
	// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
	// The values allowed are `all`, `development`, `staging`, `production` and `other`.
	// Not setting a value is the same as selecting `all`.
	// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
	WritableEnvironmentCategories []string `pulumi:"writableEnvironmentCategories"`
}

// ServiceTokenServiceTokenPermissionInput is an input type that accepts ServiceTokenServiceTokenPermissionArgs and ServiceTokenServiceTokenPermissionOutput values.
// You can construct a concrete instance of `ServiceTokenServiceTokenPermissionInput` via:
//
//	ServiceTokenServiceTokenPermissionArgs{...}
type ServiceTokenServiceTokenPermissionInput interface {
	pulumi.Input

	ToServiceTokenServiceTokenPermissionOutput() ServiceTokenServiceTokenPermissionOutput
	ToServiceTokenServiceTokenPermissionOutputWithContext(context.Context) ServiceTokenServiceTokenPermissionOutput
}

type ServiceTokenServiceTokenPermissionArgs struct {
	// Whether or not to apply this permission to all projects for this service token
	AllProjects pulumi.BoolInput `pulumi:"allProjects"`
	// Set of permissions to apply
	PermissionSet pulumi.StringInput `pulumi:"permissionSet"`
	// Project ID to apply this permission to for this service token
	ProjectId pulumi.IntPtrInput `pulumi:"projectId"`
	// What types of environments to apply Write permissions to.
	// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
	// The values allowed are `all`, `development`, `staging`, `production` and `other`.
	// Not setting a value is the same as selecting `all`.
	// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
	WritableEnvironmentCategories pulumi.StringArrayInput `pulumi:"writableEnvironmentCategories"`
}

func (ServiceTokenServiceTokenPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTokenServiceTokenPermission)(nil)).Elem()
}

func (i ServiceTokenServiceTokenPermissionArgs) ToServiceTokenServiceTokenPermissionOutput() ServiceTokenServiceTokenPermissionOutput {
	return i.ToServiceTokenServiceTokenPermissionOutputWithContext(context.Background())
}

func (i ServiceTokenServiceTokenPermissionArgs) ToServiceTokenServiceTokenPermissionOutputWithContext(ctx context.Context) ServiceTokenServiceTokenPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTokenServiceTokenPermissionOutput)
}

// ServiceTokenServiceTokenPermissionArrayInput is an input type that accepts ServiceTokenServiceTokenPermissionArray and ServiceTokenServiceTokenPermissionArrayOutput values.
// You can construct a concrete instance of `ServiceTokenServiceTokenPermissionArrayInput` via:
//
//	ServiceTokenServiceTokenPermissionArray{ ServiceTokenServiceTokenPermissionArgs{...} }
type ServiceTokenServiceTokenPermissionArrayInput interface {
	pulumi.Input

	ToServiceTokenServiceTokenPermissionArrayOutput() ServiceTokenServiceTokenPermissionArrayOutput
	ToServiceTokenServiceTokenPermissionArrayOutputWithContext(context.Context) ServiceTokenServiceTokenPermissionArrayOutput
}

type ServiceTokenServiceTokenPermissionArray []ServiceTokenServiceTokenPermissionInput

func (ServiceTokenServiceTokenPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTokenServiceTokenPermission)(nil)).Elem()
}

func (i ServiceTokenServiceTokenPermissionArray) ToServiceTokenServiceTokenPermissionArrayOutput() ServiceTokenServiceTokenPermissionArrayOutput {
	return i.ToServiceTokenServiceTokenPermissionArrayOutputWithContext(context.Background())
}

func (i ServiceTokenServiceTokenPermissionArray) ToServiceTokenServiceTokenPermissionArrayOutputWithContext(ctx context.Context) ServiceTokenServiceTokenPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTokenServiceTokenPermissionArrayOutput)
}

type ServiceTokenServiceTokenPermissionOutput struct{ *pulumi.OutputState }

func (ServiceTokenServiceTokenPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTokenServiceTokenPermission)(nil)).Elem()
}

func (o ServiceTokenServiceTokenPermissionOutput) ToServiceTokenServiceTokenPermissionOutput() ServiceTokenServiceTokenPermissionOutput {
	return o
}

func (o ServiceTokenServiceTokenPermissionOutput) ToServiceTokenServiceTokenPermissionOutputWithContext(ctx context.Context) ServiceTokenServiceTokenPermissionOutput {
	return o
}

// Whether or not to apply this permission to all projects for this service token
func (o ServiceTokenServiceTokenPermissionOutput) AllProjects() pulumi.BoolOutput {
	return o.ApplyT(func(v ServiceTokenServiceTokenPermission) bool { return v.AllProjects }).(pulumi.BoolOutput)
}

// Set of permissions to apply
func (o ServiceTokenServiceTokenPermissionOutput) PermissionSet() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTokenServiceTokenPermission) string { return v.PermissionSet }).(pulumi.StringOutput)
}

// Project ID to apply this permission to for this service token
func (o ServiceTokenServiceTokenPermissionOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTokenServiceTokenPermission) *int { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// What types of environments to apply Write permissions to.
// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
// The values allowed are `all`, `development`, `staging`, `production` and `other`.
// Not setting a value is the same as selecting `all`.
// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
func (o ServiceTokenServiceTokenPermissionOutput) WritableEnvironmentCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceTokenServiceTokenPermission) []string { return v.WritableEnvironmentCategories }).(pulumi.StringArrayOutput)
}

type ServiceTokenServiceTokenPermissionArrayOutput struct{ *pulumi.OutputState }

func (ServiceTokenServiceTokenPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTokenServiceTokenPermission)(nil)).Elem()
}

func (o ServiceTokenServiceTokenPermissionArrayOutput) ToServiceTokenServiceTokenPermissionArrayOutput() ServiceTokenServiceTokenPermissionArrayOutput {
	return o
}

func (o ServiceTokenServiceTokenPermissionArrayOutput) ToServiceTokenServiceTokenPermissionArrayOutputWithContext(ctx context.Context) ServiceTokenServiceTokenPermissionArrayOutput {
	return o
}

func (o ServiceTokenServiceTokenPermissionArrayOutput) Index(i pulumi.IntInput) ServiceTokenServiceTokenPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceTokenServiceTokenPermission {
		return vs[0].([]ServiceTokenServiceTokenPermission)[vs[1].(int)]
	}).(ServiceTokenServiceTokenPermissionOutput)
}

type GetEnvironmentsEnvironment struct {
	// A connection ID (used with Global Connections)
	ConnectionId int `pulumi:"connectionId"`
	// Credential ID to create the environment with. A credential is not required for development environments but is required for deployment environments
	CredentialsId int `pulumi:"credentialsId"`
	// The custom branch name to use
	CustomBranch string `pulumi:"customBranch"`
	// Version number of dbt to use in this environment.
	DbtVersion string `pulumi:"dbtVersion"`
	// The type of deployment environment (currently 'production', 'staging' or empty)
	DeploymentType string `pulumi:"deploymentType"`
	// The ID of the environment
	EnvironmentId int `pulumi:"environmentId"`
	// The ID of the extended attributes applied
	ExtendedAttributesId int `pulumi:"extendedAttributesId"`
	// The name of the environment
	Name string `pulumi:"name"`
	// The project ID to which the environment belong
	ProjectId int `pulumi:"projectId"`
	// The type of environment (must be either development or deployment)
	Type string `pulumi:"type"`
	// Whether to use a custom git branch in this environment
	UseCustomBranch bool `pulumi:"useCustomBranch"`
}

// GetEnvironmentsEnvironmentInput is an input type that accepts GetEnvironmentsEnvironmentArgs and GetEnvironmentsEnvironmentOutput values.
// You can construct a concrete instance of `GetEnvironmentsEnvironmentInput` via:
//
//	GetEnvironmentsEnvironmentArgs{...}
type GetEnvironmentsEnvironmentInput interface {
	pulumi.Input

	ToGetEnvironmentsEnvironmentOutput() GetEnvironmentsEnvironmentOutput
	ToGetEnvironmentsEnvironmentOutputWithContext(context.Context) GetEnvironmentsEnvironmentOutput
}

type GetEnvironmentsEnvironmentArgs struct {
	// A connection ID (used with Global Connections)
	ConnectionId pulumi.IntInput `pulumi:"connectionId"`
	// Credential ID to create the environment with. A credential is not required for development environments but is required for deployment environments
	CredentialsId pulumi.IntInput `pulumi:"credentialsId"`
	// The custom branch name to use
	CustomBranch pulumi.StringInput `pulumi:"customBranch"`
	// Version number of dbt to use in this environment.
	DbtVersion pulumi.StringInput `pulumi:"dbtVersion"`
	// The type of deployment environment (currently 'production', 'staging' or empty)
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
	// The ID of the environment
	EnvironmentId pulumi.IntInput `pulumi:"environmentId"`
	// The ID of the extended attributes applied
	ExtendedAttributesId pulumi.IntInput `pulumi:"extendedAttributesId"`
	// The name of the environment
	Name pulumi.StringInput `pulumi:"name"`
	// The project ID to which the environment belong
	ProjectId pulumi.IntInput `pulumi:"projectId"`
	// The type of environment (must be either development or deployment)
	Type pulumi.StringInput `pulumi:"type"`
	// Whether to use a custom git branch in this environment
	UseCustomBranch pulumi.BoolInput `pulumi:"useCustomBranch"`
}

func (GetEnvironmentsEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEnvironmentsEnvironment)(nil)).Elem()
}

func (i GetEnvironmentsEnvironmentArgs) ToGetEnvironmentsEnvironmentOutput() GetEnvironmentsEnvironmentOutput {
	return i.ToGetEnvironmentsEnvironmentOutputWithContext(context.Background())
}

func (i GetEnvironmentsEnvironmentArgs) ToGetEnvironmentsEnvironmentOutputWithContext(ctx context.Context) GetEnvironmentsEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEnvironmentsEnvironmentOutput)
}

// GetEnvironmentsEnvironmentArrayInput is an input type that accepts GetEnvironmentsEnvironmentArray and GetEnvironmentsEnvironmentArrayOutput values.
// You can construct a concrete instance of `GetEnvironmentsEnvironmentArrayInput` via:
//
//	GetEnvironmentsEnvironmentArray{ GetEnvironmentsEnvironmentArgs{...} }
type GetEnvironmentsEnvironmentArrayInput interface {
	pulumi.Input

	ToGetEnvironmentsEnvironmentArrayOutput() GetEnvironmentsEnvironmentArrayOutput
	ToGetEnvironmentsEnvironmentArrayOutputWithContext(context.Context) GetEnvironmentsEnvironmentArrayOutput
}

type GetEnvironmentsEnvironmentArray []GetEnvironmentsEnvironmentInput

func (GetEnvironmentsEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEnvironmentsEnvironment)(nil)).Elem()
}

func (i GetEnvironmentsEnvironmentArray) ToGetEnvironmentsEnvironmentArrayOutput() GetEnvironmentsEnvironmentArrayOutput {
	return i.ToGetEnvironmentsEnvironmentArrayOutputWithContext(context.Background())
}

func (i GetEnvironmentsEnvironmentArray) ToGetEnvironmentsEnvironmentArrayOutputWithContext(ctx context.Context) GetEnvironmentsEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEnvironmentsEnvironmentArrayOutput)
}

type GetEnvironmentsEnvironmentOutput struct{ *pulumi.OutputState }

func (GetEnvironmentsEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEnvironmentsEnvironment)(nil)).Elem()
}

func (o GetEnvironmentsEnvironmentOutput) ToGetEnvironmentsEnvironmentOutput() GetEnvironmentsEnvironmentOutput {
	return o
}

func (o GetEnvironmentsEnvironmentOutput) ToGetEnvironmentsEnvironmentOutputWithContext(ctx context.Context) GetEnvironmentsEnvironmentOutput {
	return o
}

// A connection ID (used with Global Connections)
func (o GetEnvironmentsEnvironmentOutput) ConnectionId() pulumi.IntOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) int { return v.ConnectionId }).(pulumi.IntOutput)
}

// Credential ID to create the environment with. A credential is not required for development environments but is required for deployment environments
func (o GetEnvironmentsEnvironmentOutput) CredentialsId() pulumi.IntOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) int { return v.CredentialsId }).(pulumi.IntOutput)
}

// The custom branch name to use
func (o GetEnvironmentsEnvironmentOutput) CustomBranch() pulumi.StringOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) string { return v.CustomBranch }).(pulumi.StringOutput)
}

// Version number of dbt to use in this environment.
func (o GetEnvironmentsEnvironmentOutput) DbtVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) string { return v.DbtVersion }).(pulumi.StringOutput)
}

// The type of deployment environment (currently 'production', 'staging' or empty)
func (o GetEnvironmentsEnvironmentOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// The ID of the environment
func (o GetEnvironmentsEnvironmentOutput) EnvironmentId() pulumi.IntOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) int { return v.EnvironmentId }).(pulumi.IntOutput)
}

// The ID of the extended attributes applied
func (o GetEnvironmentsEnvironmentOutput) ExtendedAttributesId() pulumi.IntOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) int { return v.ExtendedAttributesId }).(pulumi.IntOutput)
}

// The name of the environment
func (o GetEnvironmentsEnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) string { return v.Name }).(pulumi.StringOutput)
}

// The project ID to which the environment belong
func (o GetEnvironmentsEnvironmentOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) int { return v.ProjectId }).(pulumi.IntOutput)
}

// The type of environment (must be either development or deployment)
func (o GetEnvironmentsEnvironmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) string { return v.Type }).(pulumi.StringOutput)
}

// Whether to use a custom git branch in this environment
func (o GetEnvironmentsEnvironmentOutput) UseCustomBranch() pulumi.BoolOutput {
	return o.ApplyT(func(v GetEnvironmentsEnvironment) bool { return v.UseCustomBranch }).(pulumi.BoolOutput)
}

type GetEnvironmentsEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (GetEnvironmentsEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEnvironmentsEnvironment)(nil)).Elem()
}

func (o GetEnvironmentsEnvironmentArrayOutput) ToGetEnvironmentsEnvironmentArrayOutput() GetEnvironmentsEnvironmentArrayOutput {
	return o
}

func (o GetEnvironmentsEnvironmentArrayOutput) ToGetEnvironmentsEnvironmentArrayOutputWithContext(ctx context.Context) GetEnvironmentsEnvironmentArrayOutput {
	return o
}

func (o GetEnvironmentsEnvironmentArrayOutput) Index(i pulumi.IntInput) GetEnvironmentsEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEnvironmentsEnvironment {
		return vs[0].([]GetEnvironmentsEnvironment)[vs[1].(int)]
	}).(GetEnvironmentsEnvironmentOutput)
}

type GetGroupGroupPermission struct {
	// Whether access should be provided for all projects or not.
	AllProjects bool `pulumi:"allProjects"`
	// Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
	PermissionSet string `pulumi:"permissionSet"`
	// Project ID to apply this permission to for this group.
	ProjectId int `pulumi:"projectId"`
	// What types of environments to apply Write permissions to.
	WritableEnvironmentCategories []string `pulumi:"writableEnvironmentCategories"`
}

// GetGroupGroupPermissionInput is an input type that accepts GetGroupGroupPermissionArgs and GetGroupGroupPermissionOutput values.
// You can construct a concrete instance of `GetGroupGroupPermissionInput` via:
//
//	GetGroupGroupPermissionArgs{...}
type GetGroupGroupPermissionInput interface {
	pulumi.Input

	ToGetGroupGroupPermissionOutput() GetGroupGroupPermissionOutput
	ToGetGroupGroupPermissionOutputWithContext(context.Context) GetGroupGroupPermissionOutput
}

type GetGroupGroupPermissionArgs struct {
	// Whether access should be provided for all projects or not.
	AllProjects pulumi.BoolInput `pulumi:"allProjects"`
	// Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
	PermissionSet pulumi.StringInput `pulumi:"permissionSet"`
	// Project ID to apply this permission to for this group.
	ProjectId pulumi.IntInput `pulumi:"projectId"`
	// What types of environments to apply Write permissions to.
	WritableEnvironmentCategories pulumi.StringArrayInput `pulumi:"writableEnvironmentCategories"`
}

func (GetGroupGroupPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupGroupPermission)(nil)).Elem()
}

func (i GetGroupGroupPermissionArgs) ToGetGroupGroupPermissionOutput() GetGroupGroupPermissionOutput {
	return i.ToGetGroupGroupPermissionOutputWithContext(context.Background())
}

func (i GetGroupGroupPermissionArgs) ToGetGroupGroupPermissionOutputWithContext(ctx context.Context) GetGroupGroupPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupGroupPermissionOutput)
}

// GetGroupGroupPermissionArrayInput is an input type that accepts GetGroupGroupPermissionArray and GetGroupGroupPermissionArrayOutput values.
// You can construct a concrete instance of `GetGroupGroupPermissionArrayInput` via:
//
//	GetGroupGroupPermissionArray{ GetGroupGroupPermissionArgs{...} }
type GetGroupGroupPermissionArrayInput interface {
	pulumi.Input

	ToGetGroupGroupPermissionArrayOutput() GetGroupGroupPermissionArrayOutput
	ToGetGroupGroupPermissionArrayOutputWithContext(context.Context) GetGroupGroupPermissionArrayOutput
}

type GetGroupGroupPermissionArray []GetGroupGroupPermissionInput

func (GetGroupGroupPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupGroupPermission)(nil)).Elem()
}

func (i GetGroupGroupPermissionArray) ToGetGroupGroupPermissionArrayOutput() GetGroupGroupPermissionArrayOutput {
	return i.ToGetGroupGroupPermissionArrayOutputWithContext(context.Background())
}

func (i GetGroupGroupPermissionArray) ToGetGroupGroupPermissionArrayOutputWithContext(ctx context.Context) GetGroupGroupPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupGroupPermissionArrayOutput)
}

type GetGroupGroupPermissionOutput struct{ *pulumi.OutputState }

func (GetGroupGroupPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupGroupPermission)(nil)).Elem()
}

func (o GetGroupGroupPermissionOutput) ToGetGroupGroupPermissionOutput() GetGroupGroupPermissionOutput {
	return o
}

func (o GetGroupGroupPermissionOutput) ToGetGroupGroupPermissionOutputWithContext(ctx context.Context) GetGroupGroupPermissionOutput {
	return o
}

// Whether access should be provided for all projects or not.
func (o GetGroupGroupPermissionOutput) AllProjects() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupGroupPermission) bool { return v.AllProjects }).(pulumi.BoolOutput)
}

// Set of permissions to apply. The permissions allowed are the same as the ones for the `Group` resource.
func (o GetGroupGroupPermissionOutput) PermissionSet() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupGroupPermission) string { return v.PermissionSet }).(pulumi.StringOutput)
}

// Project ID to apply this permission to for this group.
func (o GetGroupGroupPermissionOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupGroupPermission) int { return v.ProjectId }).(pulumi.IntOutput)
}

// What types of environments to apply Write permissions to.
func (o GetGroupGroupPermissionOutput) WritableEnvironmentCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetGroupGroupPermission) []string { return v.WritableEnvironmentCategories }).(pulumi.StringArrayOutput)
}

type GetGroupGroupPermissionArrayOutput struct{ *pulumi.OutputState }

func (GetGroupGroupPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupGroupPermission)(nil)).Elem()
}

func (o GetGroupGroupPermissionArrayOutput) ToGetGroupGroupPermissionArrayOutput() GetGroupGroupPermissionArrayOutput {
	return o
}

func (o GetGroupGroupPermissionArrayOutput) ToGetGroupGroupPermissionArrayOutputWithContext(ctx context.Context) GetGroupGroupPermissionArrayOutput {
	return o
}

func (o GetGroupGroupPermissionArrayOutput) Index(i pulumi.IntInput) GetGroupGroupPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupGroupPermission {
		return vs[0].([]GetGroupGroupPermission)[vs[1].(int)]
	}).(GetGroupGroupPermissionOutput)
}

type GetGroupUsersUser struct {
	Email string `pulumi:"email"`
	Id    int    `pulumi:"id"`
}

// GetGroupUsersUserInput is an input type that accepts GetGroupUsersUserArgs and GetGroupUsersUserOutput values.
// You can construct a concrete instance of `GetGroupUsersUserInput` via:
//
//	GetGroupUsersUserArgs{...}
type GetGroupUsersUserInput interface {
	pulumi.Input

	ToGetGroupUsersUserOutput() GetGroupUsersUserOutput
	ToGetGroupUsersUserOutputWithContext(context.Context) GetGroupUsersUserOutput
}

type GetGroupUsersUserArgs struct {
	Email pulumi.StringInput `pulumi:"email"`
	Id    pulumi.IntInput    `pulumi:"id"`
}

func (GetGroupUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupUsersUser)(nil)).Elem()
}

func (i GetGroupUsersUserArgs) ToGetGroupUsersUserOutput() GetGroupUsersUserOutput {
	return i.ToGetGroupUsersUserOutputWithContext(context.Background())
}

func (i GetGroupUsersUserArgs) ToGetGroupUsersUserOutputWithContext(ctx context.Context) GetGroupUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupUsersUserOutput)
}

// GetGroupUsersUserArrayInput is an input type that accepts GetGroupUsersUserArray and GetGroupUsersUserArrayOutput values.
// You can construct a concrete instance of `GetGroupUsersUserArrayInput` via:
//
//	GetGroupUsersUserArray{ GetGroupUsersUserArgs{...} }
type GetGroupUsersUserArrayInput interface {
	pulumi.Input

	ToGetGroupUsersUserArrayOutput() GetGroupUsersUserArrayOutput
	ToGetGroupUsersUserArrayOutputWithContext(context.Context) GetGroupUsersUserArrayOutput
}

type GetGroupUsersUserArray []GetGroupUsersUserInput

func (GetGroupUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupUsersUser)(nil)).Elem()
}

func (i GetGroupUsersUserArray) ToGetGroupUsersUserArrayOutput() GetGroupUsersUserArrayOutput {
	return i.ToGetGroupUsersUserArrayOutputWithContext(context.Background())
}

func (i GetGroupUsersUserArray) ToGetGroupUsersUserArrayOutputWithContext(ctx context.Context) GetGroupUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupUsersUserArrayOutput)
}

type GetGroupUsersUserOutput struct{ *pulumi.OutputState }

func (GetGroupUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupUsersUser)(nil)).Elem()
}

func (o GetGroupUsersUserOutput) ToGetGroupUsersUserOutput() GetGroupUsersUserOutput {
	return o
}

func (o GetGroupUsersUserOutput) ToGetGroupUsersUserOutputWithContext(ctx context.Context) GetGroupUsersUserOutput {
	return o
}

func (o GetGroupUsersUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupUsersUser) string { return v.Email }).(pulumi.StringOutput)
}

func (o GetGroupUsersUserOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupUsersUser) int { return v.Id }).(pulumi.IntOutput)
}

type GetGroupUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetGroupUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupUsersUser)(nil)).Elem()
}

func (o GetGroupUsersUserArrayOutput) ToGetGroupUsersUserArrayOutput() GetGroupUsersUserArrayOutput {
	return o
}

func (o GetGroupUsersUserArrayOutput) ToGetGroupUsersUserArrayOutputWithContext(ctx context.Context) GetGroupUsersUserArrayOutput {
	return o
}

func (o GetGroupUsersUserArrayOutput) Index(i pulumi.IntInput) GetGroupUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupUsersUser {
		return vs[0].([]GetGroupUsersUser)[vs[1].(int)]
	}).(GetGroupUsersUserOutput)
}

type GetJobJobCompletionTriggerCondition struct {
	// The ID of the job that would trigger this job after completion.
	JobId int `pulumi:"jobId"`
	// The ID of the project where the trigger job is running in.
	ProjectId int `pulumi:"projectId"`
	// List of statuses to trigger the job on.
	Statuses []string `pulumi:"statuses"`
}

// GetJobJobCompletionTriggerConditionInput is an input type that accepts GetJobJobCompletionTriggerConditionArgs and GetJobJobCompletionTriggerConditionOutput values.
// You can construct a concrete instance of `GetJobJobCompletionTriggerConditionInput` via:
//
//	GetJobJobCompletionTriggerConditionArgs{...}
type GetJobJobCompletionTriggerConditionInput interface {
	pulumi.Input

	ToGetJobJobCompletionTriggerConditionOutput() GetJobJobCompletionTriggerConditionOutput
	ToGetJobJobCompletionTriggerConditionOutputWithContext(context.Context) GetJobJobCompletionTriggerConditionOutput
}

type GetJobJobCompletionTriggerConditionArgs struct {
	// The ID of the job that would trigger this job after completion.
	JobId pulumi.IntInput `pulumi:"jobId"`
	// The ID of the project where the trigger job is running in.
	ProjectId pulumi.IntInput `pulumi:"projectId"`
	// List of statuses to trigger the job on.
	Statuses pulumi.StringArrayInput `pulumi:"statuses"`
}

func (GetJobJobCompletionTriggerConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobJobCompletionTriggerCondition)(nil)).Elem()
}

func (i GetJobJobCompletionTriggerConditionArgs) ToGetJobJobCompletionTriggerConditionOutput() GetJobJobCompletionTriggerConditionOutput {
	return i.ToGetJobJobCompletionTriggerConditionOutputWithContext(context.Background())
}

func (i GetJobJobCompletionTriggerConditionArgs) ToGetJobJobCompletionTriggerConditionOutputWithContext(ctx context.Context) GetJobJobCompletionTriggerConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobJobCompletionTriggerConditionOutput)
}

// GetJobJobCompletionTriggerConditionArrayInput is an input type that accepts GetJobJobCompletionTriggerConditionArray and GetJobJobCompletionTriggerConditionArrayOutput values.
// You can construct a concrete instance of `GetJobJobCompletionTriggerConditionArrayInput` via:
//
//	GetJobJobCompletionTriggerConditionArray{ GetJobJobCompletionTriggerConditionArgs{...} }
type GetJobJobCompletionTriggerConditionArrayInput interface {
	pulumi.Input

	ToGetJobJobCompletionTriggerConditionArrayOutput() GetJobJobCompletionTriggerConditionArrayOutput
	ToGetJobJobCompletionTriggerConditionArrayOutputWithContext(context.Context) GetJobJobCompletionTriggerConditionArrayOutput
}

type GetJobJobCompletionTriggerConditionArray []GetJobJobCompletionTriggerConditionInput

func (GetJobJobCompletionTriggerConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobJobCompletionTriggerCondition)(nil)).Elem()
}

func (i GetJobJobCompletionTriggerConditionArray) ToGetJobJobCompletionTriggerConditionArrayOutput() GetJobJobCompletionTriggerConditionArrayOutput {
	return i.ToGetJobJobCompletionTriggerConditionArrayOutputWithContext(context.Background())
}

func (i GetJobJobCompletionTriggerConditionArray) ToGetJobJobCompletionTriggerConditionArrayOutputWithContext(ctx context.Context) GetJobJobCompletionTriggerConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobJobCompletionTriggerConditionArrayOutput)
}

type GetJobJobCompletionTriggerConditionOutput struct{ *pulumi.OutputState }

func (GetJobJobCompletionTriggerConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobJobCompletionTriggerCondition)(nil)).Elem()
}

func (o GetJobJobCompletionTriggerConditionOutput) ToGetJobJobCompletionTriggerConditionOutput() GetJobJobCompletionTriggerConditionOutput {
	return o
}

func (o GetJobJobCompletionTriggerConditionOutput) ToGetJobJobCompletionTriggerConditionOutputWithContext(ctx context.Context) GetJobJobCompletionTriggerConditionOutput {
	return o
}

// The ID of the job that would trigger this job after completion.
func (o GetJobJobCompletionTriggerConditionOutput) JobId() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobJobCompletionTriggerCondition) int { return v.JobId }).(pulumi.IntOutput)
}

// The ID of the project where the trigger job is running in.
func (o GetJobJobCompletionTriggerConditionOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobJobCompletionTriggerCondition) int { return v.ProjectId }).(pulumi.IntOutput)
}

// List of statuses to trigger the job on.
func (o GetJobJobCompletionTriggerConditionOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetJobJobCompletionTriggerCondition) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

type GetJobJobCompletionTriggerConditionArrayOutput struct{ *pulumi.OutputState }

func (GetJobJobCompletionTriggerConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobJobCompletionTriggerCondition)(nil)).Elem()
}

func (o GetJobJobCompletionTriggerConditionArrayOutput) ToGetJobJobCompletionTriggerConditionArrayOutput() GetJobJobCompletionTriggerConditionArrayOutput {
	return o
}

func (o GetJobJobCompletionTriggerConditionArrayOutput) ToGetJobJobCompletionTriggerConditionArrayOutputWithContext(ctx context.Context) GetJobJobCompletionTriggerConditionArrayOutput {
	return o
}

func (o GetJobJobCompletionTriggerConditionArrayOutput) Index(i pulumi.IntInput) GetJobJobCompletionTriggerConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJobJobCompletionTriggerCondition {
		return vs[0].([]GetJobJobCompletionTriggerCondition)[vs[1].(int)]
	}).(GetJobJobCompletionTriggerConditionOutput)
}

type GetJobsJob struct {
	// The version of dbt used for the job. If not set, the environment version will be used.
	DbtVersion string `pulumi:"dbtVersion"`
	// The ID of the environment this job defers to
	DeferringEnvironmentId int `pulumi:"deferringEnvironmentId"`
	// [Deprecated - deferral is now set at the environment level] The ID of the job definition this job defers to
	DeferringJobDefinitionId int `pulumi:"deferringJobDefinitionId"`
	// The description of the job
	Description string `pulumi:"description"`
	// Details of the environment the job is running in
	Environment GetJobsJobEnvironment `pulumi:"environment"`
	// The ID of environment
	EnvironmentId int `pulumi:"environmentId"`
	// The list of steps to run in the job
	ExecuteSteps []string            `pulumi:"executeSteps"`
	Execution    GetJobsJobExecution `pulumi:"execution"`
	// Whether the job generate docs
	GenerateDocs bool `pulumi:"generateDocs"`
	// The ID of the job
	Id int `pulumi:"id"`
	// Whether the job is triggered by the completion of another job
	JobCompletionTriggerCondition GetJobsJobJobCompletionTriggerCondition `pulumi:"jobCompletionTriggerCondition"`
	// The type of job (e.g. CI, scheduled)
	JobType string `pulumi:"jobType"`
	// The name of the job
	Name string `pulumi:"name"`
	// The ID of the project
	ProjectId int `pulumi:"projectId"`
	// Whether the job test source freshness
	RunGenerateSources bool               `pulumi:"runGenerateSources"`
	Schedule           GetJobsJobSchedule `pulumi:"schedule"`
	Settings           GetJobsJobSettings `pulumi:"settings"`
	Triggers           GetJobsJobTriggers `pulumi:"triggers"`
	// Whether the CI job should be automatically triggered on draft PRs
	TriggersOnDraftPr bool `pulumi:"triggersOnDraftPr"`
}

// GetJobsJobInput is an input type that accepts GetJobsJobArgs and GetJobsJobOutput values.
// You can construct a concrete instance of `GetJobsJobInput` via:
//
//	GetJobsJobArgs{...}
type GetJobsJobInput interface {
	pulumi.Input

	ToGetJobsJobOutput() GetJobsJobOutput
	ToGetJobsJobOutputWithContext(context.Context) GetJobsJobOutput
}

type GetJobsJobArgs struct {
	// The version of dbt used for the job. If not set, the environment version will be used.
	DbtVersion pulumi.StringInput `pulumi:"dbtVersion"`
	// The ID of the environment this job defers to
	DeferringEnvironmentId pulumi.IntInput `pulumi:"deferringEnvironmentId"`
	// [Deprecated - deferral is now set at the environment level] The ID of the job definition this job defers to
	DeferringJobDefinitionId pulumi.IntInput `pulumi:"deferringJobDefinitionId"`
	// The description of the job
	Description pulumi.StringInput `pulumi:"description"`
	// Details of the environment the job is running in
	Environment GetJobsJobEnvironmentInput `pulumi:"environment"`
	// The ID of environment
	EnvironmentId pulumi.IntInput `pulumi:"environmentId"`
	// The list of steps to run in the job
	ExecuteSteps pulumi.StringArrayInput  `pulumi:"executeSteps"`
	Execution    GetJobsJobExecutionInput `pulumi:"execution"`
	// Whether the job generate docs
	GenerateDocs pulumi.BoolInput `pulumi:"generateDocs"`
	// The ID of the job
	Id pulumi.IntInput `pulumi:"id"`
	// Whether the job is triggered by the completion of another job
	JobCompletionTriggerCondition GetJobsJobJobCompletionTriggerConditionInput `pulumi:"jobCompletionTriggerCondition"`
	// The type of job (e.g. CI, scheduled)
	JobType pulumi.StringInput `pulumi:"jobType"`
	// The name of the job
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the project
	ProjectId pulumi.IntInput `pulumi:"projectId"`
	// Whether the job test source freshness
	RunGenerateSources pulumi.BoolInput        `pulumi:"runGenerateSources"`
	Schedule           GetJobsJobScheduleInput `pulumi:"schedule"`
	Settings           GetJobsJobSettingsInput `pulumi:"settings"`
	Triggers           GetJobsJobTriggersInput `pulumi:"triggers"`
	// Whether the CI job should be automatically triggered on draft PRs
	TriggersOnDraftPr pulumi.BoolInput `pulumi:"triggersOnDraftPr"`
}

func (GetJobsJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJob)(nil)).Elem()
}

func (i GetJobsJobArgs) ToGetJobsJobOutput() GetJobsJobOutput {
	return i.ToGetJobsJobOutputWithContext(context.Background())
}

func (i GetJobsJobArgs) ToGetJobsJobOutputWithContext(ctx context.Context) GetJobsJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobsJobOutput)
}

// GetJobsJobArrayInput is an input type that accepts GetJobsJobArray and GetJobsJobArrayOutput values.
// You can construct a concrete instance of `GetJobsJobArrayInput` via:
//
//	GetJobsJobArray{ GetJobsJobArgs{...} }
type GetJobsJobArrayInput interface {
	pulumi.Input

	ToGetJobsJobArrayOutput() GetJobsJobArrayOutput
	ToGetJobsJobArrayOutputWithContext(context.Context) GetJobsJobArrayOutput
}

type GetJobsJobArray []GetJobsJobInput

func (GetJobsJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobsJob)(nil)).Elem()
}

func (i GetJobsJobArray) ToGetJobsJobArrayOutput() GetJobsJobArrayOutput {
	return i.ToGetJobsJobArrayOutputWithContext(context.Background())
}

func (i GetJobsJobArray) ToGetJobsJobArrayOutputWithContext(ctx context.Context) GetJobsJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobsJobArrayOutput)
}

type GetJobsJobOutput struct{ *pulumi.OutputState }

func (GetJobsJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJob)(nil)).Elem()
}

func (o GetJobsJobOutput) ToGetJobsJobOutput() GetJobsJobOutput {
	return o
}

func (o GetJobsJobOutput) ToGetJobsJobOutputWithContext(ctx context.Context) GetJobsJobOutput {
	return o
}

// The version of dbt used for the job. If not set, the environment version will be used.
func (o GetJobsJobOutput) DbtVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobsJob) string { return v.DbtVersion }).(pulumi.StringOutput)
}

// The ID of the environment this job defers to
func (o GetJobsJobOutput) DeferringEnvironmentId() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJob) int { return v.DeferringEnvironmentId }).(pulumi.IntOutput)
}

// [Deprecated - deferral is now set at the environment level] The ID of the job definition this job defers to
func (o GetJobsJobOutput) DeferringJobDefinitionId() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJob) int { return v.DeferringJobDefinitionId }).(pulumi.IntOutput)
}

// The description of the job
func (o GetJobsJobOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobsJob) string { return v.Description }).(pulumi.StringOutput)
}

// Details of the environment the job is running in
func (o GetJobsJobOutput) Environment() GetJobsJobEnvironmentOutput {
	return o.ApplyT(func(v GetJobsJob) GetJobsJobEnvironment { return v.Environment }).(GetJobsJobEnvironmentOutput)
}

// The ID of environment
func (o GetJobsJobOutput) EnvironmentId() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJob) int { return v.EnvironmentId }).(pulumi.IntOutput)
}

// The list of steps to run in the job
func (o GetJobsJobOutput) ExecuteSteps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetJobsJob) []string { return v.ExecuteSteps }).(pulumi.StringArrayOutput)
}

func (o GetJobsJobOutput) Execution() GetJobsJobExecutionOutput {
	return o.ApplyT(func(v GetJobsJob) GetJobsJobExecution { return v.Execution }).(GetJobsJobExecutionOutput)
}

// Whether the job generate docs
func (o GetJobsJobOutput) GenerateDocs() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobsJob) bool { return v.GenerateDocs }).(pulumi.BoolOutput)
}

// The ID of the job
func (o GetJobsJobOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJob) int { return v.Id }).(pulumi.IntOutput)
}

// Whether the job is triggered by the completion of another job
func (o GetJobsJobOutput) JobCompletionTriggerCondition() GetJobsJobJobCompletionTriggerConditionOutput {
	return o.ApplyT(func(v GetJobsJob) GetJobsJobJobCompletionTriggerCondition { return v.JobCompletionTriggerCondition }).(GetJobsJobJobCompletionTriggerConditionOutput)
}

// The type of job (e.g. CI, scheduled)
func (o GetJobsJobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobsJob) string { return v.JobType }).(pulumi.StringOutput)
}

// The name of the job
func (o GetJobsJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobsJob) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project
func (o GetJobsJobOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJob) int { return v.ProjectId }).(pulumi.IntOutput)
}

// Whether the job test source freshness
func (o GetJobsJobOutput) RunGenerateSources() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobsJob) bool { return v.RunGenerateSources }).(pulumi.BoolOutput)
}

func (o GetJobsJobOutput) Schedule() GetJobsJobScheduleOutput {
	return o.ApplyT(func(v GetJobsJob) GetJobsJobSchedule { return v.Schedule }).(GetJobsJobScheduleOutput)
}

func (o GetJobsJobOutput) Settings() GetJobsJobSettingsOutput {
	return o.ApplyT(func(v GetJobsJob) GetJobsJobSettings { return v.Settings }).(GetJobsJobSettingsOutput)
}

func (o GetJobsJobOutput) Triggers() GetJobsJobTriggersOutput {
	return o.ApplyT(func(v GetJobsJob) GetJobsJobTriggers { return v.Triggers }).(GetJobsJobTriggersOutput)
}

// Whether the CI job should be automatically triggered on draft PRs
func (o GetJobsJobOutput) TriggersOnDraftPr() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobsJob) bool { return v.TriggersOnDraftPr }).(pulumi.BoolOutput)
}

type GetJobsJobArrayOutput struct{ *pulumi.OutputState }

func (GetJobsJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobsJob)(nil)).Elem()
}

func (o GetJobsJobArrayOutput) ToGetJobsJobArrayOutput() GetJobsJobArrayOutput {
	return o
}

func (o GetJobsJobArrayOutput) ToGetJobsJobArrayOutputWithContext(ctx context.Context) GetJobsJobArrayOutput {
	return o
}

func (o GetJobsJobArrayOutput) Index(i pulumi.IntInput) GetJobsJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJobsJob {
		return vs[0].([]GetJobsJob)[vs[1].(int)]
	}).(GetJobsJobOutput)
}

type GetJobsJobEnvironment struct {
	// Type of deployment environment: staging, production
	DeploymentType string `pulumi:"deploymentType"`
	// ID of the environment
	Id int `pulumi:"id"`
	// Name of the environment
	Name      string `pulumi:"name"`
	ProjectId int    `pulumi:"projectId"`
	// Environment type: development or deployment
	Type string `pulumi:"type"`
}

// GetJobsJobEnvironmentInput is an input type that accepts GetJobsJobEnvironmentArgs and GetJobsJobEnvironmentOutput values.
// You can construct a concrete instance of `GetJobsJobEnvironmentInput` via:
//
//	GetJobsJobEnvironmentArgs{...}
type GetJobsJobEnvironmentInput interface {
	pulumi.Input

	ToGetJobsJobEnvironmentOutput() GetJobsJobEnvironmentOutput
	ToGetJobsJobEnvironmentOutputWithContext(context.Context) GetJobsJobEnvironmentOutput
}

type GetJobsJobEnvironmentArgs struct {
	// Type of deployment environment: staging, production
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
	// ID of the environment
	Id pulumi.IntInput `pulumi:"id"`
	// Name of the environment
	Name      pulumi.StringInput `pulumi:"name"`
	ProjectId pulumi.IntInput    `pulumi:"projectId"`
	// Environment type: development or deployment
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetJobsJobEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobEnvironment)(nil)).Elem()
}

func (i GetJobsJobEnvironmentArgs) ToGetJobsJobEnvironmentOutput() GetJobsJobEnvironmentOutput {
	return i.ToGetJobsJobEnvironmentOutputWithContext(context.Background())
}

func (i GetJobsJobEnvironmentArgs) ToGetJobsJobEnvironmentOutputWithContext(ctx context.Context) GetJobsJobEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobsJobEnvironmentOutput)
}

type GetJobsJobEnvironmentOutput struct{ *pulumi.OutputState }

func (GetJobsJobEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobEnvironment)(nil)).Elem()
}

func (o GetJobsJobEnvironmentOutput) ToGetJobsJobEnvironmentOutput() GetJobsJobEnvironmentOutput {
	return o
}

func (o GetJobsJobEnvironmentOutput) ToGetJobsJobEnvironmentOutputWithContext(ctx context.Context) GetJobsJobEnvironmentOutput {
	return o
}

// Type of deployment environment: staging, production
func (o GetJobsJobEnvironmentOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobsJobEnvironment) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// ID of the environment
func (o GetJobsJobEnvironmentOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJobEnvironment) int { return v.Id }).(pulumi.IntOutput)
}

// Name of the environment
func (o GetJobsJobEnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobsJobEnvironment) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetJobsJobEnvironmentOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJobEnvironment) int { return v.ProjectId }).(pulumi.IntOutput)
}

// Environment type: development or deployment
func (o GetJobsJobEnvironmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobsJobEnvironment) string { return v.Type }).(pulumi.StringOutput)
}

type GetJobsJobExecution struct {
	// The number of seconds before the job times out
	TimeoutSeconds int `pulumi:"timeoutSeconds"`
}

// GetJobsJobExecutionInput is an input type that accepts GetJobsJobExecutionArgs and GetJobsJobExecutionOutput values.
// You can construct a concrete instance of `GetJobsJobExecutionInput` via:
//
//	GetJobsJobExecutionArgs{...}
type GetJobsJobExecutionInput interface {
	pulumi.Input

	ToGetJobsJobExecutionOutput() GetJobsJobExecutionOutput
	ToGetJobsJobExecutionOutputWithContext(context.Context) GetJobsJobExecutionOutput
}

type GetJobsJobExecutionArgs struct {
	// The number of seconds before the job times out
	TimeoutSeconds pulumi.IntInput `pulumi:"timeoutSeconds"`
}

func (GetJobsJobExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobExecution)(nil)).Elem()
}

func (i GetJobsJobExecutionArgs) ToGetJobsJobExecutionOutput() GetJobsJobExecutionOutput {
	return i.ToGetJobsJobExecutionOutputWithContext(context.Background())
}

func (i GetJobsJobExecutionArgs) ToGetJobsJobExecutionOutputWithContext(ctx context.Context) GetJobsJobExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobsJobExecutionOutput)
}

type GetJobsJobExecutionOutput struct{ *pulumi.OutputState }

func (GetJobsJobExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobExecution)(nil)).Elem()
}

func (o GetJobsJobExecutionOutput) ToGetJobsJobExecutionOutput() GetJobsJobExecutionOutput {
	return o
}

func (o GetJobsJobExecutionOutput) ToGetJobsJobExecutionOutputWithContext(ctx context.Context) GetJobsJobExecutionOutput {
	return o
}

// The number of seconds before the job times out
func (o GetJobsJobExecutionOutput) TimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJobExecution) int { return v.TimeoutSeconds }).(pulumi.IntOutput)
}

type GetJobsJobJobCompletionTriggerCondition struct {
	Condition GetJobsJobJobCompletionTriggerConditionCondition `pulumi:"condition"`
}

// GetJobsJobJobCompletionTriggerConditionInput is an input type that accepts GetJobsJobJobCompletionTriggerConditionArgs and GetJobsJobJobCompletionTriggerConditionOutput values.
// You can construct a concrete instance of `GetJobsJobJobCompletionTriggerConditionInput` via:
//
//	GetJobsJobJobCompletionTriggerConditionArgs{...}
type GetJobsJobJobCompletionTriggerConditionInput interface {
	pulumi.Input

	ToGetJobsJobJobCompletionTriggerConditionOutput() GetJobsJobJobCompletionTriggerConditionOutput
	ToGetJobsJobJobCompletionTriggerConditionOutputWithContext(context.Context) GetJobsJobJobCompletionTriggerConditionOutput
}

type GetJobsJobJobCompletionTriggerConditionArgs struct {
	Condition GetJobsJobJobCompletionTriggerConditionConditionInput `pulumi:"condition"`
}

func (GetJobsJobJobCompletionTriggerConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobJobCompletionTriggerCondition)(nil)).Elem()
}

func (i GetJobsJobJobCompletionTriggerConditionArgs) ToGetJobsJobJobCompletionTriggerConditionOutput() GetJobsJobJobCompletionTriggerConditionOutput {
	return i.ToGetJobsJobJobCompletionTriggerConditionOutputWithContext(context.Background())
}

func (i GetJobsJobJobCompletionTriggerConditionArgs) ToGetJobsJobJobCompletionTriggerConditionOutputWithContext(ctx context.Context) GetJobsJobJobCompletionTriggerConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobsJobJobCompletionTriggerConditionOutput)
}

type GetJobsJobJobCompletionTriggerConditionOutput struct{ *pulumi.OutputState }

func (GetJobsJobJobCompletionTriggerConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobJobCompletionTriggerCondition)(nil)).Elem()
}

func (o GetJobsJobJobCompletionTriggerConditionOutput) ToGetJobsJobJobCompletionTriggerConditionOutput() GetJobsJobJobCompletionTriggerConditionOutput {
	return o
}

func (o GetJobsJobJobCompletionTriggerConditionOutput) ToGetJobsJobJobCompletionTriggerConditionOutputWithContext(ctx context.Context) GetJobsJobJobCompletionTriggerConditionOutput {
	return o
}

func (o GetJobsJobJobCompletionTriggerConditionOutput) Condition() GetJobsJobJobCompletionTriggerConditionConditionOutput {
	return o.ApplyT(func(v GetJobsJobJobCompletionTriggerCondition) GetJobsJobJobCompletionTriggerConditionCondition {
		return v.Condition
	}).(GetJobsJobJobCompletionTriggerConditionConditionOutput)
}

type GetJobsJobJobCompletionTriggerConditionCondition struct {
	JobId     int      `pulumi:"jobId"`
	ProjectId int      `pulumi:"projectId"`
	Statuses  []string `pulumi:"statuses"`
}

// GetJobsJobJobCompletionTriggerConditionConditionInput is an input type that accepts GetJobsJobJobCompletionTriggerConditionConditionArgs and GetJobsJobJobCompletionTriggerConditionConditionOutput values.
// You can construct a concrete instance of `GetJobsJobJobCompletionTriggerConditionConditionInput` via:
//
//	GetJobsJobJobCompletionTriggerConditionConditionArgs{...}
type GetJobsJobJobCompletionTriggerConditionConditionInput interface {
	pulumi.Input

	ToGetJobsJobJobCompletionTriggerConditionConditionOutput() GetJobsJobJobCompletionTriggerConditionConditionOutput
	ToGetJobsJobJobCompletionTriggerConditionConditionOutputWithContext(context.Context) GetJobsJobJobCompletionTriggerConditionConditionOutput
}

type GetJobsJobJobCompletionTriggerConditionConditionArgs struct {
	JobId     pulumi.IntInput         `pulumi:"jobId"`
	ProjectId pulumi.IntInput         `pulumi:"projectId"`
	Statuses  pulumi.StringArrayInput `pulumi:"statuses"`
}

func (GetJobsJobJobCompletionTriggerConditionConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobJobCompletionTriggerConditionCondition)(nil)).Elem()
}

func (i GetJobsJobJobCompletionTriggerConditionConditionArgs) ToGetJobsJobJobCompletionTriggerConditionConditionOutput() GetJobsJobJobCompletionTriggerConditionConditionOutput {
	return i.ToGetJobsJobJobCompletionTriggerConditionConditionOutputWithContext(context.Background())
}

func (i GetJobsJobJobCompletionTriggerConditionConditionArgs) ToGetJobsJobJobCompletionTriggerConditionConditionOutputWithContext(ctx context.Context) GetJobsJobJobCompletionTriggerConditionConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobsJobJobCompletionTriggerConditionConditionOutput)
}

type GetJobsJobJobCompletionTriggerConditionConditionOutput struct{ *pulumi.OutputState }

func (GetJobsJobJobCompletionTriggerConditionConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobJobCompletionTriggerConditionCondition)(nil)).Elem()
}

func (o GetJobsJobJobCompletionTriggerConditionConditionOutput) ToGetJobsJobJobCompletionTriggerConditionConditionOutput() GetJobsJobJobCompletionTriggerConditionConditionOutput {
	return o
}

func (o GetJobsJobJobCompletionTriggerConditionConditionOutput) ToGetJobsJobJobCompletionTriggerConditionConditionOutputWithContext(ctx context.Context) GetJobsJobJobCompletionTriggerConditionConditionOutput {
	return o
}

func (o GetJobsJobJobCompletionTriggerConditionConditionOutput) JobId() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJobJobCompletionTriggerConditionCondition) int { return v.JobId }).(pulumi.IntOutput)
}

func (o GetJobsJobJobCompletionTriggerConditionConditionOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJobJobCompletionTriggerConditionCondition) int { return v.ProjectId }).(pulumi.IntOutput)
}

func (o GetJobsJobJobCompletionTriggerConditionConditionOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetJobsJobJobCompletionTriggerConditionCondition) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

type GetJobsJobSchedule struct {
	// The cron schedule for the job. Only used if triggers.schedule is true
	Cron string `pulumi:"cron"`
}

// GetJobsJobScheduleInput is an input type that accepts GetJobsJobScheduleArgs and GetJobsJobScheduleOutput values.
// You can construct a concrete instance of `GetJobsJobScheduleInput` via:
//
//	GetJobsJobScheduleArgs{...}
type GetJobsJobScheduleInput interface {
	pulumi.Input

	ToGetJobsJobScheduleOutput() GetJobsJobScheduleOutput
	ToGetJobsJobScheduleOutputWithContext(context.Context) GetJobsJobScheduleOutput
}

type GetJobsJobScheduleArgs struct {
	// The cron schedule for the job. Only used if triggers.schedule is true
	Cron pulumi.StringInput `pulumi:"cron"`
}

func (GetJobsJobScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobSchedule)(nil)).Elem()
}

func (i GetJobsJobScheduleArgs) ToGetJobsJobScheduleOutput() GetJobsJobScheduleOutput {
	return i.ToGetJobsJobScheduleOutputWithContext(context.Background())
}

func (i GetJobsJobScheduleArgs) ToGetJobsJobScheduleOutputWithContext(ctx context.Context) GetJobsJobScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobsJobScheduleOutput)
}

type GetJobsJobScheduleOutput struct{ *pulumi.OutputState }

func (GetJobsJobScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobSchedule)(nil)).Elem()
}

func (o GetJobsJobScheduleOutput) ToGetJobsJobScheduleOutput() GetJobsJobScheduleOutput {
	return o
}

func (o GetJobsJobScheduleOutput) ToGetJobsJobScheduleOutputWithContext(ctx context.Context) GetJobsJobScheduleOutput {
	return o
}

// The cron schedule for the job. Only used if triggers.schedule is true
func (o GetJobsJobScheduleOutput) Cron() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobsJobSchedule) string { return v.Cron }).(pulumi.StringOutput)
}

type GetJobsJobSettings struct {
	// Value for `target.name` in the Jinja context
	TargetName string `pulumi:"targetName"`
	// Number of threads to run dbt with
	Threads int `pulumi:"threads"`
}

// GetJobsJobSettingsInput is an input type that accepts GetJobsJobSettingsArgs and GetJobsJobSettingsOutput values.
// You can construct a concrete instance of `GetJobsJobSettingsInput` via:
//
//	GetJobsJobSettingsArgs{...}
type GetJobsJobSettingsInput interface {
	pulumi.Input

	ToGetJobsJobSettingsOutput() GetJobsJobSettingsOutput
	ToGetJobsJobSettingsOutputWithContext(context.Context) GetJobsJobSettingsOutput
}

type GetJobsJobSettingsArgs struct {
	// Value for `target.name` in the Jinja context
	TargetName pulumi.StringInput `pulumi:"targetName"`
	// Number of threads to run dbt with
	Threads pulumi.IntInput `pulumi:"threads"`
}

func (GetJobsJobSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobSettings)(nil)).Elem()
}

func (i GetJobsJobSettingsArgs) ToGetJobsJobSettingsOutput() GetJobsJobSettingsOutput {
	return i.ToGetJobsJobSettingsOutputWithContext(context.Background())
}

func (i GetJobsJobSettingsArgs) ToGetJobsJobSettingsOutputWithContext(ctx context.Context) GetJobsJobSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobsJobSettingsOutput)
}

type GetJobsJobSettingsOutput struct{ *pulumi.OutputState }

func (GetJobsJobSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobSettings)(nil)).Elem()
}

func (o GetJobsJobSettingsOutput) ToGetJobsJobSettingsOutput() GetJobsJobSettingsOutput {
	return o
}

func (o GetJobsJobSettingsOutput) ToGetJobsJobSettingsOutputWithContext(ctx context.Context) GetJobsJobSettingsOutput {
	return o
}

// Value for `target.name` in the Jinja context
func (o GetJobsJobSettingsOutput) TargetName() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobsJobSettings) string { return v.TargetName }).(pulumi.StringOutput)
}

// Number of threads to run dbt with
func (o GetJobsJobSettingsOutput) Threads() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobsJobSettings) int { return v.Threads }).(pulumi.IntOutput)
}

type GetJobsJobTriggers struct {
	// Whether the job runs automatically on PR creation
	GitProviderWebhook bool `pulumi:"gitProviderWebhook"`
	// Whether the job runs automatically on PR creation
	GithubWebhook bool `pulumi:"githubWebhook"`
	// Whether the job runs automatically once a PR is merged
	OnMerge bool `pulumi:"onMerge"`
	// Whether the job runs on a schedule
	Schedule bool `pulumi:"schedule"`
}

// GetJobsJobTriggersInput is an input type that accepts GetJobsJobTriggersArgs and GetJobsJobTriggersOutput values.
// You can construct a concrete instance of `GetJobsJobTriggersInput` via:
//
//	GetJobsJobTriggersArgs{...}
type GetJobsJobTriggersInput interface {
	pulumi.Input

	ToGetJobsJobTriggersOutput() GetJobsJobTriggersOutput
	ToGetJobsJobTriggersOutputWithContext(context.Context) GetJobsJobTriggersOutput
}

type GetJobsJobTriggersArgs struct {
	// Whether the job runs automatically on PR creation
	GitProviderWebhook pulumi.BoolInput `pulumi:"gitProviderWebhook"`
	// Whether the job runs automatically on PR creation
	GithubWebhook pulumi.BoolInput `pulumi:"githubWebhook"`
	// Whether the job runs automatically once a PR is merged
	OnMerge pulumi.BoolInput `pulumi:"onMerge"`
	// Whether the job runs on a schedule
	Schedule pulumi.BoolInput `pulumi:"schedule"`
}

func (GetJobsJobTriggersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobTriggers)(nil)).Elem()
}

func (i GetJobsJobTriggersArgs) ToGetJobsJobTriggersOutput() GetJobsJobTriggersOutput {
	return i.ToGetJobsJobTriggersOutputWithContext(context.Background())
}

func (i GetJobsJobTriggersArgs) ToGetJobsJobTriggersOutputWithContext(ctx context.Context) GetJobsJobTriggersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobsJobTriggersOutput)
}

type GetJobsJobTriggersOutput struct{ *pulumi.OutputState }

func (GetJobsJobTriggersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobsJobTriggers)(nil)).Elem()
}

func (o GetJobsJobTriggersOutput) ToGetJobsJobTriggersOutput() GetJobsJobTriggersOutput {
	return o
}

func (o GetJobsJobTriggersOutput) ToGetJobsJobTriggersOutputWithContext(ctx context.Context) GetJobsJobTriggersOutput {
	return o
}

// Whether the job runs automatically on PR creation
func (o GetJobsJobTriggersOutput) GitProviderWebhook() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobsJobTriggers) bool { return v.GitProviderWebhook }).(pulumi.BoolOutput)
}

// Whether the job runs automatically on PR creation
func (o GetJobsJobTriggersOutput) GithubWebhook() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobsJobTriggers) bool { return v.GithubWebhook }).(pulumi.BoolOutput)
}

// Whether the job runs automatically once a PR is merged
func (o GetJobsJobTriggersOutput) OnMerge() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobsJobTriggers) bool { return v.OnMerge }).(pulumi.BoolOutput)
}

// Whether the job runs on a schedule
func (o GetJobsJobTriggersOutput) Schedule() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobsJobTriggers) bool { return v.Schedule }).(pulumi.BoolOutput)
}

type GetServiceTokenServiceTokenPermission struct {
	// Whether or not to apply this permission to all projects for this service token
	AllProjects bool `pulumi:"allProjects"`
	// Set of permissions to apply
	PermissionSet string `pulumi:"permissionSet"`
	// Project ID to apply this permission to for this service token
	ProjectId int `pulumi:"projectId"`
	// What types of environments to apply Write permissions to.
	// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
	// The values allowed are `all`, `development`, `staging`, `production` and `other`.
	// Not setting a value is the same as selecting `all`.
	// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
	WritableEnvironmentCategories []string `pulumi:"writableEnvironmentCategories"`
}

// GetServiceTokenServiceTokenPermissionInput is an input type that accepts GetServiceTokenServiceTokenPermissionArgs and GetServiceTokenServiceTokenPermissionOutput values.
// You can construct a concrete instance of `GetServiceTokenServiceTokenPermissionInput` via:
//
//	GetServiceTokenServiceTokenPermissionArgs{...}
type GetServiceTokenServiceTokenPermissionInput interface {
	pulumi.Input

	ToGetServiceTokenServiceTokenPermissionOutput() GetServiceTokenServiceTokenPermissionOutput
	ToGetServiceTokenServiceTokenPermissionOutputWithContext(context.Context) GetServiceTokenServiceTokenPermissionOutput
}

type GetServiceTokenServiceTokenPermissionArgs struct {
	// Whether or not to apply this permission to all projects for this service token
	AllProjects pulumi.BoolInput `pulumi:"allProjects"`
	// Set of permissions to apply
	PermissionSet pulumi.StringInput `pulumi:"permissionSet"`
	// Project ID to apply this permission to for this service token
	ProjectId pulumi.IntInput `pulumi:"projectId"`
	// What types of environments to apply Write permissions to.
	// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
	// The values allowed are `all`, `development`, `staging`, `production` and `other`.
	// Not setting a value is the same as selecting `all`.
	// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
	WritableEnvironmentCategories pulumi.StringArrayInput `pulumi:"writableEnvironmentCategories"`
}

func (GetServiceTokenServiceTokenPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceTokenServiceTokenPermission)(nil)).Elem()
}

func (i GetServiceTokenServiceTokenPermissionArgs) ToGetServiceTokenServiceTokenPermissionOutput() GetServiceTokenServiceTokenPermissionOutput {
	return i.ToGetServiceTokenServiceTokenPermissionOutputWithContext(context.Background())
}

func (i GetServiceTokenServiceTokenPermissionArgs) ToGetServiceTokenServiceTokenPermissionOutputWithContext(ctx context.Context) GetServiceTokenServiceTokenPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceTokenServiceTokenPermissionOutput)
}

// GetServiceTokenServiceTokenPermissionArrayInput is an input type that accepts GetServiceTokenServiceTokenPermissionArray and GetServiceTokenServiceTokenPermissionArrayOutput values.
// You can construct a concrete instance of `GetServiceTokenServiceTokenPermissionArrayInput` via:
//
//	GetServiceTokenServiceTokenPermissionArray{ GetServiceTokenServiceTokenPermissionArgs{...} }
type GetServiceTokenServiceTokenPermissionArrayInput interface {
	pulumi.Input

	ToGetServiceTokenServiceTokenPermissionArrayOutput() GetServiceTokenServiceTokenPermissionArrayOutput
	ToGetServiceTokenServiceTokenPermissionArrayOutputWithContext(context.Context) GetServiceTokenServiceTokenPermissionArrayOutput
}

type GetServiceTokenServiceTokenPermissionArray []GetServiceTokenServiceTokenPermissionInput

func (GetServiceTokenServiceTokenPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceTokenServiceTokenPermission)(nil)).Elem()
}

func (i GetServiceTokenServiceTokenPermissionArray) ToGetServiceTokenServiceTokenPermissionArrayOutput() GetServiceTokenServiceTokenPermissionArrayOutput {
	return i.ToGetServiceTokenServiceTokenPermissionArrayOutputWithContext(context.Background())
}

func (i GetServiceTokenServiceTokenPermissionArray) ToGetServiceTokenServiceTokenPermissionArrayOutputWithContext(ctx context.Context) GetServiceTokenServiceTokenPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceTokenServiceTokenPermissionArrayOutput)
}

type GetServiceTokenServiceTokenPermissionOutput struct{ *pulumi.OutputState }

func (GetServiceTokenServiceTokenPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceTokenServiceTokenPermission)(nil)).Elem()
}

func (o GetServiceTokenServiceTokenPermissionOutput) ToGetServiceTokenServiceTokenPermissionOutput() GetServiceTokenServiceTokenPermissionOutput {
	return o
}

func (o GetServiceTokenServiceTokenPermissionOutput) ToGetServiceTokenServiceTokenPermissionOutputWithContext(ctx context.Context) GetServiceTokenServiceTokenPermissionOutput {
	return o
}

// Whether or not to apply this permission to all projects for this service token
func (o GetServiceTokenServiceTokenPermissionOutput) AllProjects() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServiceTokenServiceTokenPermission) bool { return v.AllProjects }).(pulumi.BoolOutput)
}

// Set of permissions to apply
func (o GetServiceTokenServiceTokenPermissionOutput) PermissionSet() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceTokenServiceTokenPermission) string { return v.PermissionSet }).(pulumi.StringOutput)
}

// Project ID to apply this permission to for this service token
func (o GetServiceTokenServiceTokenPermissionOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceTokenServiceTokenPermission) int { return v.ProjectId }).(pulumi.IntOutput)
}

// What types of environments to apply Write permissions to.
// Even if Write access is restricted to some environment types, the permission set will have Read access to all environments.
// The values allowed are `all`, `development`, `staging`, `production` and `other`.
// Not setting a value is the same as selecting `all`.
// Not all permission sets support environment level write settings, only `analyst`, `databaseAdmin`, `developer`, `gitAdmin` and `teamAdmin`.
func (o GetServiceTokenServiceTokenPermissionOutput) WritableEnvironmentCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServiceTokenServiceTokenPermission) []string { return v.WritableEnvironmentCategories }).(pulumi.StringArrayOutput)
}

type GetServiceTokenServiceTokenPermissionArrayOutput struct{ *pulumi.OutputState }

func (GetServiceTokenServiceTokenPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceTokenServiceTokenPermission)(nil)).Elem()
}

func (o GetServiceTokenServiceTokenPermissionArrayOutput) ToGetServiceTokenServiceTokenPermissionArrayOutput() GetServiceTokenServiceTokenPermissionArrayOutput {
	return o
}

func (o GetServiceTokenServiceTokenPermissionArrayOutput) ToGetServiceTokenServiceTokenPermissionArrayOutputWithContext(ctx context.Context) GetServiceTokenServiceTokenPermissionArrayOutput {
	return o
}

func (o GetServiceTokenServiceTokenPermissionArrayOutput) Index(i pulumi.IntInput) GetServiceTokenServiceTokenPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceTokenServiceTokenPermission {
		return vs[0].([]GetServiceTokenServiceTokenPermission)[vs[1].(int)]
	}).(GetServiceTokenServiceTokenPermissionOutput)
}

type GetUsersUser struct {
	// Email for the user
	Email string `pulumi:"email"`
	// ID of the user
	Id int `pulumi:"id"`
}

// GetUsersUserInput is an input type that accepts GetUsersUserArgs and GetUsersUserOutput values.
// You can construct a concrete instance of `GetUsersUserInput` via:
//
//	GetUsersUserArgs{...}
type GetUsersUserInput interface {
	pulumi.Input

	ToGetUsersUserOutput() GetUsersUserOutput
	ToGetUsersUserOutputWithContext(context.Context) GetUsersUserOutput
}

type GetUsersUserArgs struct {
	// Email for the user
	Email pulumi.StringInput `pulumi:"email"`
	// ID of the user
	Id pulumi.IntInput `pulumi:"id"`
}

func (GetUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArgs) ToGetUsersUserOutput() GetUsersUserOutput {
	return i.ToGetUsersUserOutputWithContext(context.Background())
}

func (i GetUsersUserArgs) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOutput)
}

// GetUsersUserArrayInput is an input type that accepts GetUsersUserArray and GetUsersUserArrayOutput values.
// You can construct a concrete instance of `GetUsersUserArrayInput` via:
//
//	GetUsersUserArray{ GetUsersUserArgs{...} }
type GetUsersUserArrayInput interface {
	pulumi.Input

	ToGetUsersUserArrayOutput() GetUsersUserArrayOutput
	ToGetUsersUserArrayOutputWithContext(context.Context) GetUsersUserArrayOutput
}

type GetUsersUserArray []GetUsersUserInput

func (GetUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return i.ToGetUsersUserArrayOutputWithContext(context.Background())
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserArrayOutput)
}

type GetUsersUserOutput struct{ *pulumi.OutputState }

func (GetUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserOutput) ToGetUsersUserOutput() GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return o
}

// Email for the user
func (o GetUsersUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Email }).(pulumi.StringOutput)
}

// ID of the user
func (o GetUsersUserOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.Id }).(pulumi.IntOutput)
}

type GetUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) Index(i pulumi.IntInput) GetUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUser {
		return vs[0].([]GetUsersUser)[vs[1].(int)]
	}).(GetUsersUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionBigqueryInput)(nil)).Elem(), GlobalConnectionBigqueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionBigqueryPtrInput)(nil)).Elem(), GlobalConnectionBigqueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionSnowflakeInput)(nil)).Elem(), GlobalConnectionSnowflakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalConnectionSnowflakePtrInput)(nil)).Elem(), GlobalConnectionSnowflakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupGroupPermissionInput)(nil)).Elem(), GroupGroupPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupGroupPermissionArrayInput)(nil)).Elem(), GroupGroupPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPartialPermissionsGroupPermissionInput)(nil)).Elem(), GroupPartialPermissionsGroupPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPartialPermissionsGroupPermissionArrayInput)(nil)).Elem(), GroupPartialPermissionsGroupPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobJobCompletionTriggerConditionInput)(nil)).Elem(), JobJobCompletionTriggerConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobJobCompletionTriggerConditionPtrInput)(nil)).Elem(), JobJobCompletionTriggerConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTokenServiceTokenPermissionInput)(nil)).Elem(), ServiceTokenServiceTokenPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTokenServiceTokenPermissionArrayInput)(nil)).Elem(), ServiceTokenServiceTokenPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEnvironmentsEnvironmentInput)(nil)).Elem(), GetEnvironmentsEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEnvironmentsEnvironmentArrayInput)(nil)).Elem(), GetEnvironmentsEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupGroupPermissionInput)(nil)).Elem(), GetGroupGroupPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupGroupPermissionArrayInput)(nil)).Elem(), GetGroupGroupPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupUsersUserInput)(nil)).Elem(), GetGroupUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupUsersUserArrayInput)(nil)).Elem(), GetGroupUsersUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobJobCompletionTriggerConditionInput)(nil)).Elem(), GetJobJobCompletionTriggerConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobJobCompletionTriggerConditionArrayInput)(nil)).Elem(), GetJobJobCompletionTriggerConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobsJobInput)(nil)).Elem(), GetJobsJobArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobsJobArrayInput)(nil)).Elem(), GetJobsJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobsJobEnvironmentInput)(nil)).Elem(), GetJobsJobEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobsJobExecutionInput)(nil)).Elem(), GetJobsJobExecutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobsJobJobCompletionTriggerConditionInput)(nil)).Elem(), GetJobsJobJobCompletionTriggerConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobsJobJobCompletionTriggerConditionConditionInput)(nil)).Elem(), GetJobsJobJobCompletionTriggerConditionConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobsJobScheduleInput)(nil)).Elem(), GetJobsJobScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobsJobSettingsInput)(nil)).Elem(), GetJobsJobSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobsJobTriggersInput)(nil)).Elem(), GetJobsJobTriggersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceTokenServiceTokenPermissionInput)(nil)).Elem(), GetServiceTokenServiceTokenPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceTokenServiceTokenPermissionArrayInput)(nil)).Elem(), GetServiceTokenServiceTokenPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserInput)(nil)).Elem(), GetUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserArrayInput)(nil)).Elem(), GetUsersUserArray{})
	pulumi.RegisterOutputType(GlobalConnectionBigqueryOutput{})
	pulumi.RegisterOutputType(GlobalConnectionBigqueryPtrOutput{})
	pulumi.RegisterOutputType(GlobalConnectionSnowflakeOutput{})
	pulumi.RegisterOutputType(GlobalConnectionSnowflakePtrOutput{})
	pulumi.RegisterOutputType(GroupGroupPermissionOutput{})
	pulumi.RegisterOutputType(GroupGroupPermissionArrayOutput{})
	pulumi.RegisterOutputType(GroupPartialPermissionsGroupPermissionOutput{})
	pulumi.RegisterOutputType(GroupPartialPermissionsGroupPermissionArrayOutput{})
	pulumi.RegisterOutputType(JobJobCompletionTriggerConditionOutput{})
	pulumi.RegisterOutputType(JobJobCompletionTriggerConditionPtrOutput{})
	pulumi.RegisterOutputType(ServiceTokenServiceTokenPermissionOutput{})
	pulumi.RegisterOutputType(ServiceTokenServiceTokenPermissionArrayOutput{})
	pulumi.RegisterOutputType(GetEnvironmentsEnvironmentOutput{})
	pulumi.RegisterOutputType(GetEnvironmentsEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(GetGroupGroupPermissionOutput{})
	pulumi.RegisterOutputType(GetGroupGroupPermissionArrayOutput{})
	pulumi.RegisterOutputType(GetGroupUsersUserOutput{})
	pulumi.RegisterOutputType(GetGroupUsersUserArrayOutput{})
	pulumi.RegisterOutputType(GetJobJobCompletionTriggerConditionOutput{})
	pulumi.RegisterOutputType(GetJobJobCompletionTriggerConditionArrayOutput{})
	pulumi.RegisterOutputType(GetJobsJobOutput{})
	pulumi.RegisterOutputType(GetJobsJobArrayOutput{})
	pulumi.RegisterOutputType(GetJobsJobEnvironmentOutput{})
	pulumi.RegisterOutputType(GetJobsJobExecutionOutput{})
	pulumi.RegisterOutputType(GetJobsJobJobCompletionTriggerConditionOutput{})
	pulumi.RegisterOutputType(GetJobsJobJobCompletionTriggerConditionConditionOutput{})
	pulumi.RegisterOutputType(GetJobsJobScheduleOutput{})
	pulumi.RegisterOutputType(GetJobsJobSettingsOutput{})
	pulumi.RegisterOutputType(GetJobsJobTriggersOutput{})
	pulumi.RegisterOutputType(GetServiceTokenServiceTokenPermissionOutput{})
	pulumi.RegisterOutputType(GetServiceTokenServiceTokenPermissionArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
	pulumi.RegisterOutputType(GetUsersUserArrayOutput{})
}

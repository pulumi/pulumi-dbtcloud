// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Synapse credential data source.
func LookupSynapseCredential(ctx *pulumi.Context, args *LookupSynapseCredentialArgs, opts ...pulumi.InvokeOption) (*LookupSynapseCredentialResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSynapseCredentialResult
	err := ctx.Invoke("dbtcloud:index/getSynapseCredential:getSynapseCredential", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSynapseCredential.
type LookupSynapseCredentialArgs struct {
	// Credential ID
	CredentialId int `pulumi:"credentialId"`
	// Project ID
	ProjectId int `pulumi:"projectId"`
}

// A collection of values returned by getSynapseCredential.
type LookupSynapseCredentialResult struct {
	// The type of the adapter (synapse)
	AdapterType string `pulumi:"adapterType"`
	// Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)
	Authentication string `pulumi:"authentication"`
	// The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientId string `pulumi:"clientId"`
	// Credential ID
	CredentialId int `pulumi:"credentialId"`
	// The ID of this data source. Contains the project ID and the credential ID.
	Id string `pulumi:"id"`
	// Project ID
	ProjectId int `pulumi:"projectId"`
	// The schema where to create the dbt models
	Schema string `pulumi:"schema"`
	// Optionally set this to the principal who should own the schemas created by dbt
	SchemaAuthorization string `pulumi:"schemaAuthorization"`
	// The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
	TenantId string `pulumi:"tenantId"`
	// The username of the Synapse account to connect to. Only used when connection with AD user/pass
	User string `pulumi:"user"`
}

func LookupSynapseCredentialOutput(ctx *pulumi.Context, args LookupSynapseCredentialOutputArgs, opts ...pulumi.InvokeOption) LookupSynapseCredentialResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSynapseCredentialResultOutput, error) {
			args := v.(LookupSynapseCredentialArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("dbtcloud:index/getSynapseCredential:getSynapseCredential", args, LookupSynapseCredentialResultOutput{}, options).(LookupSynapseCredentialResultOutput), nil
		}).(LookupSynapseCredentialResultOutput)
}

// A collection of arguments for invoking getSynapseCredential.
type LookupSynapseCredentialOutputArgs struct {
	// Credential ID
	CredentialId pulumi.IntInput `pulumi:"credentialId"`
	// Project ID
	ProjectId pulumi.IntInput `pulumi:"projectId"`
}

func (LookupSynapseCredentialOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSynapseCredentialArgs)(nil)).Elem()
}

// A collection of values returned by getSynapseCredential.
type LookupSynapseCredentialResultOutput struct{ *pulumi.OutputState }

func (LookupSynapseCredentialResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSynapseCredentialResult)(nil)).Elem()
}

func (o LookupSynapseCredentialResultOutput) ToLookupSynapseCredentialResultOutput() LookupSynapseCredentialResultOutput {
	return o
}

func (o LookupSynapseCredentialResultOutput) ToLookupSynapseCredentialResultOutputWithContext(ctx context.Context) LookupSynapseCredentialResultOutput {
	return o
}

// The type of the adapter (synapse)
func (o LookupSynapseCredentialResultOutput) AdapterType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSynapseCredentialResult) string { return v.AdapterType }).(pulumi.StringOutput)
}

// Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)
func (o LookupSynapseCredentialResultOutput) Authentication() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSynapseCredentialResult) string { return v.Authentication }).(pulumi.StringOutput)
}

// The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
func (o LookupSynapseCredentialResultOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSynapseCredentialResult) string { return v.ClientId }).(pulumi.StringOutput)
}

// Credential ID
func (o LookupSynapseCredentialResultOutput) CredentialId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSynapseCredentialResult) int { return v.CredentialId }).(pulumi.IntOutput)
}

// The ID of this data source. Contains the project ID and the credential ID.
func (o LookupSynapseCredentialResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSynapseCredentialResult) string { return v.Id }).(pulumi.StringOutput)
}

// Project ID
func (o LookupSynapseCredentialResultOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSynapseCredentialResult) int { return v.ProjectId }).(pulumi.IntOutput)
}

// The schema where to create the dbt models
func (o LookupSynapseCredentialResultOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSynapseCredentialResult) string { return v.Schema }).(pulumi.StringOutput)
}

// Optionally set this to the principal who should own the schemas created by dbt
func (o LookupSynapseCredentialResultOutput) SchemaAuthorization() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSynapseCredentialResult) string { return v.SchemaAuthorization }).(pulumi.StringOutput)
}

// The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
func (o LookupSynapseCredentialResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSynapseCredentialResult) string { return v.TenantId }).(pulumi.StringOutput)
}

// The username of the Synapse account to connect to. Only used when connection with AD user/pass
func (o LookupSynapseCredentialResultOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSynapseCredentialResult) string { return v.User }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSynapseCredentialResultOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The resource allows basic configuration of the Semantic Layer for a specific project. For the feature to be completely functional, a Semantic Layer Credential is also required.
// See the documentationh ttps://docs.getdbt.com/docs/use-dbt-semantic-layer/dbt-sl for more information on the Semantic Layer.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dbtcloud.NewSemanticLayerConfiguration(ctx, "example", &dbtcloud.SemanticLayerConfigurationArgs{
//				ProjectId:     pulumi.Any(projectId),
//				EnvironmentId: pulumi.Any(environmentId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// using import blocks (requires Terraform >= 1.5)
//
// import {
//
//	to = dbtcloud_semantic_layer_configuration.example
//
//	id = "project_id:id"
//
// }
//
// import {
//
//	to = dbtcloud_semantic_layer_configuration.example
//
//	id = "12345:5678"
//
// }
//
// using the older import command
//
// ```sh
// $ pulumi import dbtcloud:index/semanticLayerConfiguration:SemanticLayerConfiguration example "project_id:id"
// ```
//
// ```sh
// $ pulumi import dbtcloud:index/semanticLayerConfiguration:SemanticLayerConfiguration example 12345:5678
// ```
type SemanticLayerConfiguration struct {
	pulumi.CustomResourceState

	// The ID of the environment
	EnvironmentId pulumi.IntOutput `pulumi:"environmentId"`
	// The ID of the project
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
}

// NewSemanticLayerConfiguration registers a new resource with the given unique name, arguments, and options.
func NewSemanticLayerConfiguration(ctx *pulumi.Context,
	name string, args *SemanticLayerConfigurationArgs, opts ...pulumi.ResourceOption) (*SemanticLayerConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SemanticLayerConfiguration
	err := ctx.RegisterResource("dbtcloud:index/semanticLayerConfiguration:SemanticLayerConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSemanticLayerConfiguration gets an existing SemanticLayerConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSemanticLayerConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SemanticLayerConfigurationState, opts ...pulumi.ResourceOption) (*SemanticLayerConfiguration, error) {
	var resource SemanticLayerConfiguration
	err := ctx.ReadResource("dbtcloud:index/semanticLayerConfiguration:SemanticLayerConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SemanticLayerConfiguration resources.
type semanticLayerConfigurationState struct {
	// The ID of the environment
	EnvironmentId *int `pulumi:"environmentId"`
	// The ID of the project
	ProjectId *int `pulumi:"projectId"`
}

type SemanticLayerConfigurationState struct {
	// The ID of the environment
	EnvironmentId pulumi.IntPtrInput
	// The ID of the project
	ProjectId pulumi.IntPtrInput
}

func (SemanticLayerConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*semanticLayerConfigurationState)(nil)).Elem()
}

type semanticLayerConfigurationArgs struct {
	// The ID of the environment
	EnvironmentId int `pulumi:"environmentId"`
	// The ID of the project
	ProjectId int `pulumi:"projectId"`
}

// The set of arguments for constructing a SemanticLayerConfiguration resource.
type SemanticLayerConfigurationArgs struct {
	// The ID of the environment
	EnvironmentId pulumi.IntInput
	// The ID of the project
	ProjectId pulumi.IntInput
}

func (SemanticLayerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*semanticLayerConfigurationArgs)(nil)).Elem()
}

type SemanticLayerConfigurationInput interface {
	pulumi.Input

	ToSemanticLayerConfigurationOutput() SemanticLayerConfigurationOutput
	ToSemanticLayerConfigurationOutputWithContext(ctx context.Context) SemanticLayerConfigurationOutput
}

func (*SemanticLayerConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**SemanticLayerConfiguration)(nil)).Elem()
}

func (i *SemanticLayerConfiguration) ToSemanticLayerConfigurationOutput() SemanticLayerConfigurationOutput {
	return i.ToSemanticLayerConfigurationOutputWithContext(context.Background())
}

func (i *SemanticLayerConfiguration) ToSemanticLayerConfigurationOutputWithContext(ctx context.Context) SemanticLayerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SemanticLayerConfigurationOutput)
}

// SemanticLayerConfigurationArrayInput is an input type that accepts SemanticLayerConfigurationArray and SemanticLayerConfigurationArrayOutput values.
// You can construct a concrete instance of `SemanticLayerConfigurationArrayInput` via:
//
//	SemanticLayerConfigurationArray{ SemanticLayerConfigurationArgs{...} }
type SemanticLayerConfigurationArrayInput interface {
	pulumi.Input

	ToSemanticLayerConfigurationArrayOutput() SemanticLayerConfigurationArrayOutput
	ToSemanticLayerConfigurationArrayOutputWithContext(context.Context) SemanticLayerConfigurationArrayOutput
}

type SemanticLayerConfigurationArray []SemanticLayerConfigurationInput

func (SemanticLayerConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SemanticLayerConfiguration)(nil)).Elem()
}

func (i SemanticLayerConfigurationArray) ToSemanticLayerConfigurationArrayOutput() SemanticLayerConfigurationArrayOutput {
	return i.ToSemanticLayerConfigurationArrayOutputWithContext(context.Background())
}

func (i SemanticLayerConfigurationArray) ToSemanticLayerConfigurationArrayOutputWithContext(ctx context.Context) SemanticLayerConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SemanticLayerConfigurationArrayOutput)
}

// SemanticLayerConfigurationMapInput is an input type that accepts SemanticLayerConfigurationMap and SemanticLayerConfigurationMapOutput values.
// You can construct a concrete instance of `SemanticLayerConfigurationMapInput` via:
//
//	SemanticLayerConfigurationMap{ "key": SemanticLayerConfigurationArgs{...} }
type SemanticLayerConfigurationMapInput interface {
	pulumi.Input

	ToSemanticLayerConfigurationMapOutput() SemanticLayerConfigurationMapOutput
	ToSemanticLayerConfigurationMapOutputWithContext(context.Context) SemanticLayerConfigurationMapOutput
}

type SemanticLayerConfigurationMap map[string]SemanticLayerConfigurationInput

func (SemanticLayerConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SemanticLayerConfiguration)(nil)).Elem()
}

func (i SemanticLayerConfigurationMap) ToSemanticLayerConfigurationMapOutput() SemanticLayerConfigurationMapOutput {
	return i.ToSemanticLayerConfigurationMapOutputWithContext(context.Background())
}

func (i SemanticLayerConfigurationMap) ToSemanticLayerConfigurationMapOutputWithContext(ctx context.Context) SemanticLayerConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SemanticLayerConfigurationMapOutput)
}

type SemanticLayerConfigurationOutput struct{ *pulumi.OutputState }

func (SemanticLayerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SemanticLayerConfiguration)(nil)).Elem()
}

func (o SemanticLayerConfigurationOutput) ToSemanticLayerConfigurationOutput() SemanticLayerConfigurationOutput {
	return o
}

func (o SemanticLayerConfigurationOutput) ToSemanticLayerConfigurationOutputWithContext(ctx context.Context) SemanticLayerConfigurationOutput {
	return o
}

// The ID of the environment
func (o SemanticLayerConfigurationOutput) EnvironmentId() pulumi.IntOutput {
	return o.ApplyT(func(v *SemanticLayerConfiguration) pulumi.IntOutput { return v.EnvironmentId }).(pulumi.IntOutput)
}

// The ID of the project
func (o SemanticLayerConfigurationOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *SemanticLayerConfiguration) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

type SemanticLayerConfigurationArrayOutput struct{ *pulumi.OutputState }

func (SemanticLayerConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SemanticLayerConfiguration)(nil)).Elem()
}

func (o SemanticLayerConfigurationArrayOutput) ToSemanticLayerConfigurationArrayOutput() SemanticLayerConfigurationArrayOutput {
	return o
}

func (o SemanticLayerConfigurationArrayOutput) ToSemanticLayerConfigurationArrayOutputWithContext(ctx context.Context) SemanticLayerConfigurationArrayOutput {
	return o
}

func (o SemanticLayerConfigurationArrayOutput) Index(i pulumi.IntInput) SemanticLayerConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SemanticLayerConfiguration {
		return vs[0].([]*SemanticLayerConfiguration)[vs[1].(int)]
	}).(SemanticLayerConfigurationOutput)
}

type SemanticLayerConfigurationMapOutput struct{ *pulumi.OutputState }

func (SemanticLayerConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SemanticLayerConfiguration)(nil)).Elem()
}

func (o SemanticLayerConfigurationMapOutput) ToSemanticLayerConfigurationMapOutput() SemanticLayerConfigurationMapOutput {
	return o
}

func (o SemanticLayerConfigurationMapOutput) ToSemanticLayerConfigurationMapOutputWithContext(ctx context.Context) SemanticLayerConfigurationMapOutput {
	return o
}

func (o SemanticLayerConfigurationMapOutput) MapIndex(k pulumi.StringInput) SemanticLayerConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SemanticLayerConfiguration {
		return vs[0].(map[string]*SemanticLayerConfiguration)[vs[1].(string)]
	}).(SemanticLayerConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SemanticLayerConfigurationInput)(nil)).Elem(), &SemanticLayerConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*SemanticLayerConfigurationArrayInput)(nil)).Elem(), SemanticLayerConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SemanticLayerConfigurationMapInput)(nil)).Elem(), SemanticLayerConfigurationMap{})
	pulumi.RegisterOutputType(SemanticLayerConfigurationOutput{})
	pulumi.RegisterOutputType(SemanticLayerConfigurationArrayOutput{})
	pulumi.RegisterOutputType(SemanticLayerConfigurationMapOutput{})
}

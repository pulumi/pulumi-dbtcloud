// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type GroupPartialPermissions struct {
	pulumi.CustomResourceState

	// Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.
	AssignByDefault pulumi.BoolOutput `pulumi:"assignByDefault"`
	// Partial permissions for the group. Those permissions will be added/removed when config is added/removed.
	GroupPermissions GroupPartialPermissionsGroupPermissionArrayOutput `pulumi:"groupPermissions"`
	// The name of the group. This is used to identify an existing group
	Name pulumi.StringOutput `pulumi:"name"`
	// Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.
	SsoMappingGroups pulumi.StringArrayOutput `pulumi:"ssoMappingGroups"`
}

// NewGroupPartialPermissions registers a new resource with the given unique name, arguments, and options.
func NewGroupPartialPermissions(ctx *pulumi.Context,
	name string, args *GroupPartialPermissionsArgs, opts ...pulumi.ResourceOption) (*GroupPartialPermissions, error) {
	if args == nil {
		args = &GroupPartialPermissionsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupPartialPermissions
	err := ctx.RegisterResource("dbtcloud:index/groupPartialPermissions:GroupPartialPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupPartialPermissions gets an existing GroupPartialPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupPartialPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupPartialPermissionsState, opts ...pulumi.ResourceOption) (*GroupPartialPermissions, error) {
	var resource GroupPartialPermissions
	err := ctx.ReadResource("dbtcloud:index/groupPartialPermissions:GroupPartialPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupPartialPermissions resources.
type groupPartialPermissionsState struct {
	// Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.
	AssignByDefault *bool `pulumi:"assignByDefault"`
	// Partial permissions for the group. Those permissions will be added/removed when config is added/removed.
	GroupPermissions []GroupPartialPermissionsGroupPermission `pulumi:"groupPermissions"`
	// The name of the group. This is used to identify an existing group
	Name *string `pulumi:"name"`
	// Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.
	SsoMappingGroups []string `pulumi:"ssoMappingGroups"`
}

type GroupPartialPermissionsState struct {
	// Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.
	AssignByDefault pulumi.BoolPtrInput
	// Partial permissions for the group. Those permissions will be added/removed when config is added/removed.
	GroupPermissions GroupPartialPermissionsGroupPermissionArrayInput
	// The name of the group. This is used to identify an existing group
	Name pulumi.StringPtrInput
	// Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.
	SsoMappingGroups pulumi.StringArrayInput
}

func (GroupPartialPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupPartialPermissionsState)(nil)).Elem()
}

type groupPartialPermissionsArgs struct {
	// Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.
	AssignByDefault *bool `pulumi:"assignByDefault"`
	// Partial permissions for the group. Those permissions will be added/removed when config is added/removed.
	GroupPermissions []GroupPartialPermissionsGroupPermission `pulumi:"groupPermissions"`
	// The name of the group. This is used to identify an existing group
	Name *string `pulumi:"name"`
	// Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.
	SsoMappingGroups []string `pulumi:"ssoMappingGroups"`
}

// The set of arguments for constructing a GroupPartialPermissions resource.
type GroupPartialPermissionsArgs struct {
	// Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.
	AssignByDefault pulumi.BoolPtrInput
	// Partial permissions for the group. Those permissions will be added/removed when config is added/removed.
	GroupPermissions GroupPartialPermissionsGroupPermissionArrayInput
	// The name of the group. This is used to identify an existing group
	Name pulumi.StringPtrInput
	// Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.
	SsoMappingGroups pulumi.StringArrayInput
}

func (GroupPartialPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupPartialPermissionsArgs)(nil)).Elem()
}

type GroupPartialPermissionsInput interface {
	pulumi.Input

	ToGroupPartialPermissionsOutput() GroupPartialPermissionsOutput
	ToGroupPartialPermissionsOutputWithContext(ctx context.Context) GroupPartialPermissionsOutput
}

func (*GroupPartialPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPartialPermissions)(nil)).Elem()
}

func (i *GroupPartialPermissions) ToGroupPartialPermissionsOutput() GroupPartialPermissionsOutput {
	return i.ToGroupPartialPermissionsOutputWithContext(context.Background())
}

func (i *GroupPartialPermissions) ToGroupPartialPermissionsOutputWithContext(ctx context.Context) GroupPartialPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPartialPermissionsOutput)
}

// GroupPartialPermissionsArrayInput is an input type that accepts GroupPartialPermissionsArray and GroupPartialPermissionsArrayOutput values.
// You can construct a concrete instance of `GroupPartialPermissionsArrayInput` via:
//
//	GroupPartialPermissionsArray{ GroupPartialPermissionsArgs{...} }
type GroupPartialPermissionsArrayInput interface {
	pulumi.Input

	ToGroupPartialPermissionsArrayOutput() GroupPartialPermissionsArrayOutput
	ToGroupPartialPermissionsArrayOutputWithContext(context.Context) GroupPartialPermissionsArrayOutput
}

type GroupPartialPermissionsArray []GroupPartialPermissionsInput

func (GroupPartialPermissionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupPartialPermissions)(nil)).Elem()
}

func (i GroupPartialPermissionsArray) ToGroupPartialPermissionsArrayOutput() GroupPartialPermissionsArrayOutput {
	return i.ToGroupPartialPermissionsArrayOutputWithContext(context.Background())
}

func (i GroupPartialPermissionsArray) ToGroupPartialPermissionsArrayOutputWithContext(ctx context.Context) GroupPartialPermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPartialPermissionsArrayOutput)
}

// GroupPartialPermissionsMapInput is an input type that accepts GroupPartialPermissionsMap and GroupPartialPermissionsMapOutput values.
// You can construct a concrete instance of `GroupPartialPermissionsMapInput` via:
//
//	GroupPartialPermissionsMap{ "key": GroupPartialPermissionsArgs{...} }
type GroupPartialPermissionsMapInput interface {
	pulumi.Input

	ToGroupPartialPermissionsMapOutput() GroupPartialPermissionsMapOutput
	ToGroupPartialPermissionsMapOutputWithContext(context.Context) GroupPartialPermissionsMapOutput
}

type GroupPartialPermissionsMap map[string]GroupPartialPermissionsInput

func (GroupPartialPermissionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupPartialPermissions)(nil)).Elem()
}

func (i GroupPartialPermissionsMap) ToGroupPartialPermissionsMapOutput() GroupPartialPermissionsMapOutput {
	return i.ToGroupPartialPermissionsMapOutputWithContext(context.Background())
}

func (i GroupPartialPermissionsMap) ToGroupPartialPermissionsMapOutputWithContext(ctx context.Context) GroupPartialPermissionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPartialPermissionsMapOutput)
}

type GroupPartialPermissionsOutput struct{ *pulumi.OutputState }

func (GroupPartialPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPartialPermissions)(nil)).Elem()
}

func (o GroupPartialPermissionsOutput) ToGroupPartialPermissionsOutput() GroupPartialPermissionsOutput {
	return o
}

func (o GroupPartialPermissionsOutput) ToGroupPartialPermissionsOutputWithContext(ctx context.Context) GroupPartialPermissionsOutput {
	return o
}

// Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.
func (o GroupPartialPermissionsOutput) AssignByDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v *GroupPartialPermissions) pulumi.BoolOutput { return v.AssignByDefault }).(pulumi.BoolOutput)
}

// Partial permissions for the group. Those permissions will be added/removed when config is added/removed.
func (o GroupPartialPermissionsOutput) GroupPermissions() GroupPartialPermissionsGroupPermissionArrayOutput {
	return o.ApplyT(func(v *GroupPartialPermissions) GroupPartialPermissionsGroupPermissionArrayOutput {
		return v.GroupPermissions
	}).(GroupPartialPermissionsGroupPermissionArrayOutput)
}

// The name of the group. This is used to identify an existing group
func (o GroupPartialPermissionsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupPartialPermissions) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.
func (o GroupPartialPermissionsOutput) SsoMappingGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupPartialPermissions) pulumi.StringArrayOutput { return v.SsoMappingGroups }).(pulumi.StringArrayOutput)
}

type GroupPartialPermissionsArrayOutput struct{ *pulumi.OutputState }

func (GroupPartialPermissionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupPartialPermissions)(nil)).Elem()
}

func (o GroupPartialPermissionsArrayOutput) ToGroupPartialPermissionsArrayOutput() GroupPartialPermissionsArrayOutput {
	return o
}

func (o GroupPartialPermissionsArrayOutput) ToGroupPartialPermissionsArrayOutputWithContext(ctx context.Context) GroupPartialPermissionsArrayOutput {
	return o
}

func (o GroupPartialPermissionsArrayOutput) Index(i pulumi.IntInput) GroupPartialPermissionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupPartialPermissions {
		return vs[0].([]*GroupPartialPermissions)[vs[1].(int)]
	}).(GroupPartialPermissionsOutput)
}

type GroupPartialPermissionsMapOutput struct{ *pulumi.OutputState }

func (GroupPartialPermissionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupPartialPermissions)(nil)).Elem()
}

func (o GroupPartialPermissionsMapOutput) ToGroupPartialPermissionsMapOutput() GroupPartialPermissionsMapOutput {
	return o
}

func (o GroupPartialPermissionsMapOutput) ToGroupPartialPermissionsMapOutputWithContext(ctx context.Context) GroupPartialPermissionsMapOutput {
	return o
}

func (o GroupPartialPermissionsMapOutput) MapIndex(k pulumi.StringInput) GroupPartialPermissionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupPartialPermissions {
		return vs[0].(map[string]*GroupPartialPermissions)[vs[1].(string)]
	}).(GroupPartialPermissionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPartialPermissionsInput)(nil)).Elem(), &GroupPartialPermissions{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPartialPermissionsArrayInput)(nil)).Elem(), GroupPartialPermissionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPartialPermissionsMapInput)(nil)).Elem(), GroupPartialPermissionsMap{})
	pulumi.RegisterOutputType(GroupPartialPermissionsOutput{})
	pulumi.RegisterOutputType(GroupPartialPermissionsArrayOutput{})
	pulumi.RegisterOutputType(GroupPartialPermissionsMapOutput{})
}

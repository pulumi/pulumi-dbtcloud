// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Redshift credential resource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dbtcloud.NewRedshiftCredential(ctx, "redshift", &dbtcloud.RedshiftCredentialArgs{
//				NumThreads:    pulumi.Int(16),
//				ProjectId:     pulumi.Any(testProject.Id),
//				DefaultSchema: pulumi.String("my_schema"),
//				Username:      pulumi.String("my_username"),
//				Password:      pulumi.String("my_sensitive_password"),
//				IsActive:      pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// using  import blocks (requires Terraform >= 1.5)
//
// import {
//
//	to = dbtcloud_redshift_credential.my_credential
//
//	id = "project_id:credential_id"
//
// }
//
// import {
//
//	to = dbtcloud_redshift_credential.my_credential
//
//	id = "12345:6789"
//
// }
//
// using the older import command
//
// ```sh
// $ pulumi import dbtcloud:index/redshiftCredential:RedshiftCredential my_credential "project_id:credential_id"
// ```
//
// ```sh
// $ pulumi import dbtcloud:index/redshiftCredential:RedshiftCredential my_credential 12345:6789
// ```
type RedshiftCredential struct {
	pulumi.CustomResourceState

	// The internal credential ID
	CredentialId pulumi.IntOutput `pulumi:"credentialId"`
	// Default schema name
	DefaultSchema pulumi.StringOutput `pulumi:"defaultSchema"`
	// Whether the Redshift credential is active
	IsActive pulumi.BoolOutput `pulumi:"isActive"`
	// Number of threads to use
	NumThreads pulumi.IntOutput `pulumi:"numThreads"`
	// The password for the Redshift account
	Password pulumi.StringOutput `pulumi:"password"`
	// Project ID to create the Redshift credential in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// The username for the Redshift account.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewRedshiftCredential registers a new resource with the given unique name, arguments, and options.
func NewRedshiftCredential(ctx *pulumi.Context,
	name string, args *RedshiftCredentialArgs, opts ...pulumi.ResourceOption) (*RedshiftCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultSchema == nil {
		return nil, errors.New("invalid value for required argument 'DefaultSchema'")
	}
	if args.NumThreads == nil {
		return nil, errors.New("invalid value for required argument 'NumThreads'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RedshiftCredential
	err := ctx.RegisterResource("dbtcloud:index/redshiftCredential:RedshiftCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedshiftCredential gets an existing RedshiftCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedshiftCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedshiftCredentialState, opts ...pulumi.ResourceOption) (*RedshiftCredential, error) {
	var resource RedshiftCredential
	err := ctx.ReadResource("dbtcloud:index/redshiftCredential:RedshiftCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RedshiftCredential resources.
type redshiftCredentialState struct {
	// The internal credential ID
	CredentialId *int `pulumi:"credentialId"`
	// Default schema name
	DefaultSchema *string `pulumi:"defaultSchema"`
	// Whether the Redshift credential is active
	IsActive *bool `pulumi:"isActive"`
	// Number of threads to use
	NumThreads *int `pulumi:"numThreads"`
	// The password for the Redshift account
	Password *string `pulumi:"password"`
	// Project ID to create the Redshift credential in
	ProjectId *int `pulumi:"projectId"`
	// The username for the Redshift account.
	Username *string `pulumi:"username"`
}

type RedshiftCredentialState struct {
	// The internal credential ID
	CredentialId pulumi.IntPtrInput
	// Default schema name
	DefaultSchema pulumi.StringPtrInput
	// Whether the Redshift credential is active
	IsActive pulumi.BoolPtrInput
	// Number of threads to use
	NumThreads pulumi.IntPtrInput
	// The password for the Redshift account
	Password pulumi.StringPtrInput
	// Project ID to create the Redshift credential in
	ProjectId pulumi.IntPtrInput
	// The username for the Redshift account.
	Username pulumi.StringPtrInput
}

func (RedshiftCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*redshiftCredentialState)(nil)).Elem()
}

type redshiftCredentialArgs struct {
	// Default schema name
	DefaultSchema string `pulumi:"defaultSchema"`
	// Whether the Redshift credential is active
	IsActive *bool `pulumi:"isActive"`
	// Number of threads to use
	NumThreads int `pulumi:"numThreads"`
	// The password for the Redshift account
	Password *string `pulumi:"password"`
	// Project ID to create the Redshift credential in
	ProjectId int `pulumi:"projectId"`
	// The username for the Redshift account.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a RedshiftCredential resource.
type RedshiftCredentialArgs struct {
	// Default schema name
	DefaultSchema pulumi.StringInput
	// Whether the Redshift credential is active
	IsActive pulumi.BoolPtrInput
	// Number of threads to use
	NumThreads pulumi.IntInput
	// The password for the Redshift account
	Password pulumi.StringPtrInput
	// Project ID to create the Redshift credential in
	ProjectId pulumi.IntInput
	// The username for the Redshift account.
	Username pulumi.StringPtrInput
}

func (RedshiftCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redshiftCredentialArgs)(nil)).Elem()
}

type RedshiftCredentialInput interface {
	pulumi.Input

	ToRedshiftCredentialOutput() RedshiftCredentialOutput
	ToRedshiftCredentialOutputWithContext(ctx context.Context) RedshiftCredentialOutput
}

func (*RedshiftCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**RedshiftCredential)(nil)).Elem()
}

func (i *RedshiftCredential) ToRedshiftCredentialOutput() RedshiftCredentialOutput {
	return i.ToRedshiftCredentialOutputWithContext(context.Background())
}

func (i *RedshiftCredential) ToRedshiftCredentialOutputWithContext(ctx context.Context) RedshiftCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedshiftCredentialOutput)
}

// RedshiftCredentialArrayInput is an input type that accepts RedshiftCredentialArray and RedshiftCredentialArrayOutput values.
// You can construct a concrete instance of `RedshiftCredentialArrayInput` via:
//
//	RedshiftCredentialArray{ RedshiftCredentialArgs{...} }
type RedshiftCredentialArrayInput interface {
	pulumi.Input

	ToRedshiftCredentialArrayOutput() RedshiftCredentialArrayOutput
	ToRedshiftCredentialArrayOutputWithContext(context.Context) RedshiftCredentialArrayOutput
}

type RedshiftCredentialArray []RedshiftCredentialInput

func (RedshiftCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RedshiftCredential)(nil)).Elem()
}

func (i RedshiftCredentialArray) ToRedshiftCredentialArrayOutput() RedshiftCredentialArrayOutput {
	return i.ToRedshiftCredentialArrayOutputWithContext(context.Background())
}

func (i RedshiftCredentialArray) ToRedshiftCredentialArrayOutputWithContext(ctx context.Context) RedshiftCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedshiftCredentialArrayOutput)
}

// RedshiftCredentialMapInput is an input type that accepts RedshiftCredentialMap and RedshiftCredentialMapOutput values.
// You can construct a concrete instance of `RedshiftCredentialMapInput` via:
//
//	RedshiftCredentialMap{ "key": RedshiftCredentialArgs{...} }
type RedshiftCredentialMapInput interface {
	pulumi.Input

	ToRedshiftCredentialMapOutput() RedshiftCredentialMapOutput
	ToRedshiftCredentialMapOutputWithContext(context.Context) RedshiftCredentialMapOutput
}

type RedshiftCredentialMap map[string]RedshiftCredentialInput

func (RedshiftCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RedshiftCredential)(nil)).Elem()
}

func (i RedshiftCredentialMap) ToRedshiftCredentialMapOutput() RedshiftCredentialMapOutput {
	return i.ToRedshiftCredentialMapOutputWithContext(context.Background())
}

func (i RedshiftCredentialMap) ToRedshiftCredentialMapOutputWithContext(ctx context.Context) RedshiftCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedshiftCredentialMapOutput)
}

type RedshiftCredentialOutput struct{ *pulumi.OutputState }

func (RedshiftCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedshiftCredential)(nil)).Elem()
}

func (o RedshiftCredentialOutput) ToRedshiftCredentialOutput() RedshiftCredentialOutput {
	return o
}

func (o RedshiftCredentialOutput) ToRedshiftCredentialOutputWithContext(ctx context.Context) RedshiftCredentialOutput {
	return o
}

// The internal credential ID
func (o RedshiftCredentialOutput) CredentialId() pulumi.IntOutput {
	return o.ApplyT(func(v *RedshiftCredential) pulumi.IntOutput { return v.CredentialId }).(pulumi.IntOutput)
}

// Default schema name
func (o RedshiftCredentialOutput) DefaultSchema() pulumi.StringOutput {
	return o.ApplyT(func(v *RedshiftCredential) pulumi.StringOutput { return v.DefaultSchema }).(pulumi.StringOutput)
}

// Whether the Redshift credential is active
func (o RedshiftCredentialOutput) IsActive() pulumi.BoolOutput {
	return o.ApplyT(func(v *RedshiftCredential) pulumi.BoolOutput { return v.IsActive }).(pulumi.BoolOutput)
}

// Number of threads to use
func (o RedshiftCredentialOutput) NumThreads() pulumi.IntOutput {
	return o.ApplyT(func(v *RedshiftCredential) pulumi.IntOutput { return v.NumThreads }).(pulumi.IntOutput)
}

// The password for the Redshift account
func (o RedshiftCredentialOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *RedshiftCredential) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Project ID to create the Redshift credential in
func (o RedshiftCredentialOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *RedshiftCredential) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// The username for the Redshift account.
func (o RedshiftCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *RedshiftCredential) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type RedshiftCredentialArrayOutput struct{ *pulumi.OutputState }

func (RedshiftCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RedshiftCredential)(nil)).Elem()
}

func (o RedshiftCredentialArrayOutput) ToRedshiftCredentialArrayOutput() RedshiftCredentialArrayOutput {
	return o
}

func (o RedshiftCredentialArrayOutput) ToRedshiftCredentialArrayOutputWithContext(ctx context.Context) RedshiftCredentialArrayOutput {
	return o
}

func (o RedshiftCredentialArrayOutput) Index(i pulumi.IntInput) RedshiftCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RedshiftCredential {
		return vs[0].([]*RedshiftCredential)[vs[1].(int)]
	}).(RedshiftCredentialOutput)
}

type RedshiftCredentialMapOutput struct{ *pulumi.OutputState }

func (RedshiftCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RedshiftCredential)(nil)).Elem()
}

func (o RedshiftCredentialMapOutput) ToRedshiftCredentialMapOutput() RedshiftCredentialMapOutput {
	return o
}

func (o RedshiftCredentialMapOutput) ToRedshiftCredentialMapOutputWithContext(ctx context.Context) RedshiftCredentialMapOutput {
	return o
}

func (o RedshiftCredentialMapOutput) MapIndex(k pulumi.StringInput) RedshiftCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RedshiftCredential {
		return vs[0].(map[string]*RedshiftCredential)[vs[1].(string)]
	}).(RedshiftCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RedshiftCredentialInput)(nil)).Elem(), &RedshiftCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedshiftCredentialArrayInput)(nil)).Elem(), RedshiftCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedshiftCredentialMapInput)(nil)).Elem(), RedshiftCredentialMap{})
	pulumi.RegisterOutputType(RedshiftCredentialOutput{})
	pulumi.RegisterOutputType(RedshiftCredentialArrayOutput{})
	pulumi.RegisterOutputType(RedshiftCredentialMapOutput{})
}

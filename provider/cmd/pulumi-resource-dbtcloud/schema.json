{
    "name": "dbtcloud",
    "displayName": "dbt Cloud",
    "description": "A Pulumi package for creating and managing dbt Cloud resources.",
    "keywords": [
        "pulumi",
        "dbtcloud",
        "dbt",
        "cloud",
        "category/cloud"
    ],
    "homepage": "https://pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`dbtcloud` Terraform Provider](https://github.com/dbt-labs/terraform-provider-dbtcloud).",
    "repository": "https://github.com/pulumi/pulumi-dbtcloud",
    "logoUrl": "https://raw.githubusercontent.com/pulumi/pulumi-dbtcloud/main/res/dbt-bit_tm.png",
    "pluginDownloadURL": "github://api.github.com/pulumi/pulumi-dbtcloud",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "dbtcloud": "DbtCloud"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumi",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageName": "@pulumi/dbtcloud",
            "packageDescription": "A Pulumi package for creating and managing dbt Cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/dbt-labs/terraform-provider-dbtcloud)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-dbtcloud` repo](https://github.com/pulumi/pulumi-dbtcloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-dbtcloud` repo](https://github.com/dbt-labs/terraform-provider-dbtcloud/issues).",
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "packageName": "pulumi_dbtcloud",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/dbt-labs/terraform-provider-dbtcloud)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-dbtcloud` repo](https://github.com/pulumi/pulumi-dbtcloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-dbtcloud` repo](https://github.com/dbt-labs/terraform-provider-dbtcloud/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "accountId": {
                "type": "integer",
                "description": "Account identifier for your dbt Cloud implementation. Instead of setting the parameter, you can set the environment\nvariable `DBT_CLOUD_ACCOUNT_ID`\n",
                "defaultInfo": {
                    "environment": [
                        "DBT_CLOUD_ACCOUNT_ID"
                    ]
                }
            },
            "hostUrl": {
                "type": "string",
                "description": "URL for your dbt Cloud deployment. Instead of setting the parameter, you can set the environment variable\n`DBT_CLOUD_HOST_URL` - Defaults to https://cloud.getdbt.com/api\n",
                "default": "https://cloud.getdbt.com/api",
                "defaultInfo": {
                    "environment": [
                        "DBT_CLOUD_HOST_URL"
                    ]
                }
            },
            "token": {
                "type": "string",
                "description": "API token for your dbt Cloud. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_TOKEN`\n",
                "defaultInfo": {
                    "environment": [
                        "DBT_CLOUD_TOKEN"
                    ]
                },
                "secret": true
            }
        }
    },
    "types": {
        "dbtcloud:index/BigquerySemanticLayerCredentialConfiguration:BigquerySemanticLayerCredentialConfiguration": {
            "properties": {
                "adapterVersion": {
                    "type": "string",
                    "description": "The adapter version\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the configuration\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The ID of the project\n"
                }
            },
            "type": "object",
            "required": [
                "adapterVersion",
                "name",
                "projectId"
            ]
        },
        "dbtcloud:index/BigquerySemanticLayerCredentialCredential:BigquerySemanticLayerCredentialCredential": {
            "properties": {
                "credentialId": {
                    "type": "integer",
                    "description": "The internal credential ID\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "Default dataset name\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource. Contains the project ID and the credential ID.\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the BigQuery credential is active\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the BigQuery credential in\n"
                }
            },
            "type": "object",
            "required": [
                "dataset",
                "numThreads",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "credentialId",
                        "dataset",
                        "id",
                        "isActive",
                        "numThreads",
                        "projectId"
                    ]
                }
            }
        },
        "dbtcloud:index/GlobalConnectionApacheSpark:GlobalConnectionApacheSpark": {
            "properties": {
                "auth": {
                    "type": "string",
                    "description": "Auth\n"
                },
                "cluster": {
                    "type": "string",
                    "description": "Spark cluster for the connection\n"
                },
                "connectRetries": {
                    "type": "integer",
                    "description": "Connection retries. Default=0\n"
                },
                "connectTimeout": {
                    "type": "integer",
                    "description": "Connection time out in seconds. Default=10\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the connection\n"
                },
                "method": {
                    "type": "string",
                    "description": "Authentication method for the connection (http or thrift).\n"
                },
                "organization": {
                    "type": "string",
                    "description": "Organization ID\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port for the connection. Default=443\n"
                },
                "user": {
                    "type": "string",
                    "description": "User\n"
                }
            },
            "type": "object",
            "required": [
                "cluster",
                "host",
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cluster",
                        "connectRetries",
                        "connectTimeout",
                        "host",
                        "method",
                        "port"
                    ]
                }
            }
        },
        "dbtcloud:index/GlobalConnectionAthena:GlobalConnectionAthena": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Specify the database (data catalog) to build models into (lowercase only).\n"
                },
                "numBoto3Retries": {
                    "type": "integer",
                    "description": "Number of times to retry boto3 requests (e.g. deleting S3 files for materialized tables).\n"
                },
                "numIcebergRetries": {
                    "type": "integer",
                    "description": "Number of times to retry iceberg commit queries to fix ICEBERG*COMMIT*ERROR.\n"
                },
                "numRetries": {
                    "type": "integer",
                    "description": "Number of times to retry a failing query.\n"
                },
                "pollInterval": {
                    "type": "integer",
                    "description": "Interval in seconds to use for polling the status of query results in Athena.\n"
                },
                "regionName": {
                    "type": "string",
                    "description": "AWS region of your Athena instance.\n"
                },
                "s3DataDir": {
                    "type": "string",
                    "description": "Prefix for storing tables, if different from the connection's S3 staging directory.\n"
                },
                "s3DataNaming": {
                    "type": "string",
                    "description": "How to generate table paths in the S3 data directory.\n"
                },
                "s3StagingDir": {
                    "type": "string",
                    "description": "S3 location to store Athena query results and metadata.\n"
                },
                "s3TmpTableDir": {
                    "type": "string",
                    "description": "Prefix for storing temporary tables, if different from the connection's S3 data directory.\n"
                },
                "sparkWorkGroup": {
                    "type": "string",
                    "description": "Identifier of Athena Spark workgroup for running Python models.\n"
                },
                "workGroup": {
                    "type": "string",
                    "description": "Identifier of Athena workgroup.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "regionName",
                "s3StagingDir"
            ]
        },
        "dbtcloud:index/GlobalConnectionBigquery:GlobalConnectionBigquery": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "OAuth Client ID\n",
                    "secret": true
                },
                "applicationSecret": {
                    "type": "string",
                    "description": "OAuth Client Secret\n",
                    "secret": true
                },
                "authProviderX509CertUrl": {
                    "type": "string",
                    "description": "Auth Provider X509 Cert URL for the Service Account\n"
                },
                "authUri": {
                    "type": "string",
                    "description": "Auth URI for the Service Account\n"
                },
                "clientEmail": {
                    "type": "string",
                    "description": "Service Account email\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Client ID of the Service Account\n"
                },
                "clientX509CertUrl": {
                    "type": "string",
                    "description": "Client X509 Cert URL for the Service Account\n"
                },
                "dataprocClusterName": {
                    "type": "string",
                    "description": "Dataproc cluster name for PySpark workloads\n"
                },
                "dataprocRegion": {
                    "type": "string",
                    "description": "Google Cloud region for PySpark workloads on Dataproc\n"
                },
                "executionProject": {
                    "type": "string",
                    "description": "Project to bill for query execution\n"
                },
                "gcpProjectId": {
                    "type": "string",
                    "description": "The GCP project ID to use for the connection\n"
                },
                "gcsBucket": {
                    "type": "string",
                    "description": "URI for a Google Cloud Storage bucket to host Python code executed via Datapro\n"
                },
                "impersonateServiceAccount": {
                    "type": "string",
                    "description": "Service Account to impersonate when running queries\n"
                },
                "jobCreationTimeoutSeconds": {
                    "type": "integer",
                    "description": "Maximum timeout for the job creation step\n"
                },
                "jobRetryDeadlineSeconds": {
                    "type": "integer",
                    "description": "Total number of seconds to wait while retrying the same query\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location to create new Datasets in\n"
                },
                "maximumBytesBilled": {
                    "type": "integer",
                    "description": "Max number of bytes that can be billed for a given BigQuery query\n"
                },
                "priority": {
                    "type": "string",
                    "description": "The priority with which to execute BigQuery queries (batch or interactive)\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Private Key for the Service Account\n",
                    "secret": true
                },
                "privateKeyId": {
                    "type": "string",
                    "description": "Private Key ID for the Service Account\n"
                },
                "retries": {
                    "type": "integer",
                    "description": "Number of retries for queries\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "OAuth scopes for the BigQuery connection\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Timeout in seconds for queries\n"
                },
                "tokenUri": {
                    "type": "string",
                    "description": "Token URI for the Service Account\n"
                }
            },
            "type": "object",
            "required": [
                "authProviderX509CertUrl",
                "authUri",
                "clientEmail",
                "clientId",
                "clientX509CertUrl",
                "gcpProjectId",
                "privateKey",
                "privateKeyId",
                "tokenUri"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authProviderX509CertUrl",
                        "authUri",
                        "clientEmail",
                        "clientId",
                        "clientX509CertUrl",
                        "gcpProjectId",
                        "privateKey",
                        "privateKeyId",
                        "retries",
                        "scopes",
                        "timeoutSeconds",
                        "tokenUri"
                    ]
                }
            }
        },
        "dbtcloud:index/GlobalConnectionDatabricks:GlobalConnectionDatabricks": {
            "properties": {
                "catalog": {
                    "type": "string",
                    "description": "Catalog name if Unity Catalog is enabled in your Databricks workspace.\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Required to enable Databricks OAuth authentication for IDE developers.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Required to enable Databricks OAuth authentication for IDE developers.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The hostname of the Databricks cluster or SQL warehouse.\n"
                },
                "httpPath": {
                    "type": "string",
                    "description": "The HTTP path of the Databricks cluster or SQL warehouse.\n"
                }
            },
            "type": "object",
            "required": [
                "host",
                "httpPath"
            ]
        },
        "dbtcloud:index/GlobalConnectionFabric:GlobalConnectionFabric": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The database to connect to for this connection.\n"
                },
                "loginTimeout": {
                    "type": "integer",
                    "description": "The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to connect to for this connection. Default=1433\n"
                },
                "queryTimeout": {
                    "type": "integer",
                    "description": "The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.\n"
                },
                "retries": {
                    "type": "integer",
                    "description": "The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.\n"
                },
                "server": {
                    "type": "string",
                    "description": "The server hostname.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "server"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "database",
                        "loginTimeout",
                        "port",
                        "queryTimeout",
                        "retries",
                        "server"
                    ]
                }
            }
        },
        "dbtcloud:index/GlobalConnectionPostgres:GlobalConnectionPostgres": {
            "properties": {
                "dbname": {
                    "type": "string",
                    "description": "The database name for this connection.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname of the database.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to connect to for this connection. Default=5432\n"
                },
                "sshTunnel": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionPostgresSshTunnel:GlobalConnectionPostgresSshTunnel",
                    "description": "PostgreSQL SSH Tunnel configuration\n"
                }
            },
            "type": "object",
            "required": [
                "dbname",
                "hostname"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dbname",
                        "hostname",
                        "port"
                    ]
                }
            }
        },
        "dbtcloud:index/GlobalConnectionPostgresSshTunnel:GlobalConnectionPostgresSshTunnel": {
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": "The hostname for the SSH tunnel.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the SSH tunnel connection.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The HTTP port for the SSH tunnel.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The SSH public key generated to allow connecting via SSH tunnel.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to use for the SSH tunnel.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "port",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hostname",
                        "id",
                        "port",
                        "publicKey",
                        "username"
                    ]
                }
            }
        },
        "dbtcloud:index/GlobalConnectionRedshift:GlobalConnectionRedshift": {
            "properties": {
                "dbname": {
                    "type": "string",
                    "description": "The database name for this connection.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname of the data warehouse.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to connect to for this connection. Default=5432\n"
                },
                "sshTunnel": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionRedshiftSshTunnel:GlobalConnectionRedshiftSshTunnel",
                    "description": "Redshift SSH Tunnel configuration\n"
                }
            },
            "type": "object",
            "required": [
                "dbname",
                "hostname"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dbname",
                        "hostname",
                        "port"
                    ]
                }
            }
        },
        "dbtcloud:index/GlobalConnectionRedshiftSshTunnel:GlobalConnectionRedshiftSshTunnel": {
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": "The hostname for the SSH tunnel.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the SSH tunnel connection.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The HTTP port for the SSH tunnel.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The SSH public key generated to allow connecting via SSH tunnel.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to use for the SSH tunnel.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "port",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hostname",
                        "id",
                        "port",
                        "publicKey",
                        "username"
                    ]
                }
            }
        },
        "dbtcloud:index/GlobalConnectionSnowflake:GlobalConnectionSnowflake": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "The Snowflake account name\n"
                },
                "allowSso": {
                    "type": "boolean",
                    "description": "Whether to allow Snowflake OAuth for the connection. If true, the `oauth_client_id` and `oauth_client_secret` fields must be set\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (\u003e 4 hours)\n"
                },
                "database": {
                    "type": "string",
                    "description": "The default database for the connection\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake\n",
                    "secret": true
                },
                "oauthClientSecret": {
                    "type": "string",
                    "description": "OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake\n",
                    "secret": true
                },
                "role": {
                    "type": "string",
                    "description": "The Snowflake role to use when running queries on the connection\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The default Snowflake Warehouse to use for the connection\n"
                }
            },
            "type": "object",
            "required": [
                "account",
                "database",
                "warehouse"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "account",
                        "allowSso",
                        "clientSessionKeepAlive",
                        "database",
                        "warehouse"
                    ]
                }
            }
        },
        "dbtcloud:index/GlobalConnectionStarburst:GlobalConnectionStarburst": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "The hostname of the account to connect to.\n"
                },
                "method": {
                    "type": "string",
                    "description": "The authentication method. Only LDAP for now.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to connect to for this connection. Default=443\n"
                }
            },
            "type": "object",
            "required": [
                "host"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "host",
                        "method",
                        "port"
                    ]
                }
            }
        },
        "dbtcloud:index/GlobalConnectionSynapse:GlobalConnectionSynapse": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The database to connect to for this connection.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The server hostname.\n"
                },
                "loginTimeout": {
                    "type": "integer",
                    "description": "The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to connect to for this connection. Default=1433\n"
                },
                "queryTimeout": {
                    "type": "integer",
                    "description": "The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.\n"
                },
                "retries": {
                    "type": "integer",
                    "description": "The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "host"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "database",
                        "host",
                        "loginTimeout",
                        "port",
                        "queryTimeout",
                        "retries"
                    ]
                }
            }
        },
        "dbtcloud:index/GlobalConnectionTeradata:GlobalConnectionTeradata": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "The hostname of the database.\n"
                },
                "port": {
                    "type": "string",
                    "description": "The port to connect to for this connection. Default=1025\n"
                },
                "requestTimeout": {
                    "type": "integer",
                    "description": "The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.\n"
                },
                "retries": {
                    "type": "integer",
                    "description": "The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.\n"
                },
                "tmode": {
                    "type": "string",
                    "description": "The transaction mode to use for the connection.\n"
                }
            },
            "type": "object",
            "required": [
                "host",
                "tmode"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "host",
                        "port",
                        "requestTimeout",
                        "retries",
                        "tmode"
                    ]
                }
            }
        },
        "dbtcloud:index/GroupGroupPermission:GroupGroupPermission": {
            "properties": {
                "allProjects": {
                    "type": "boolean",
                    "description": "Whether access should be provided for all projects or not.\n"
                },
                "permissionSet": {
                    "type": "string",
                    "description": "Set of permissions to apply. The permissions allowed are the same as the ones for the `dbtcloud.Group` resource.\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to apply this permission to for this group.\n"
                },
                "writableEnvironmentCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "What types of environments to apply Write permissions to.\nEven if Write access is restricted to some environment types, the permission set will have Read access to all environments.\nThe values allowed are `all`, `development`, `staging`, `production` and `other`.\nNot setting a value is the same as selecting `all`.\nNot all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.\n"
                }
            },
            "type": "object",
            "required": [
                "allProjects",
                "permissionSet"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allProjects",
                        "permissionSet",
                        "writableEnvironmentCategories"
                    ]
                }
            }
        },
        "dbtcloud:index/GroupPartialPermissionsGroupPermission:GroupPartialPermissionsGroupPermission": {
            "properties": {
                "allProjects": {
                    "type": "boolean",
                    "description": "Whether access should be provided for all projects or not.\n"
                },
                "permissionSet": {
                    "type": "string",
                    "description": "Set of permissions to apply. The permissions allowed are the same as the ones for the `dbtcloud.Group` resource.\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to apply this permission to for this group.\n"
                },
                "writableEnvironmentCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "What types of environments to apply Write permissions to.\nEven if Write access is restricted to some environment types, the permission set will have Read access to all environments.\nThe values allowed are `all`, `development`, `staging`, `production` and `other`.\nNot setting a value is the same as selecting `all`.\nNot all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.\n"
                }
            },
            "type": "object",
            "required": [
                "allProjects",
                "permissionSet"
            ]
        },
        "dbtcloud:index/IpRestrictionsRuleCidr:IpRestrictionsRuleCidr": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "description": "IP CIDR range (can be IPv4 or IPv6)\n"
                },
                "cidrIpv6": {
                    "type": "string",
                    "description": "IPv6 CIDR range (read-only)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "ID of the CIDR range\n"
                },
                "ipRestrictionRuleId": {
                    "type": "integer",
                    "description": "ID of the IP restriction rule\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cidr",
                        "cidrIpv6",
                        "id",
                        "ipRestrictionRuleId"
                    ]
                }
            }
        },
        "dbtcloud:index/JobJobCompletionTriggerCondition:JobJobCompletionTriggerCondition": {
            "properties": {
                "jobId": {
                    "type": "integer",
                    "description": "The ID of the job that would trigger this job after completion.\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The ID of the project where the trigger job is running in.\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of statuses to trigger the job on. Possible values are `success`, `error` and `canceled`.\n"
                }
            },
            "type": "object",
            "required": [
                "jobId",
                "projectId",
                "statuses"
            ]
        },
        "dbtcloud:index/JobTriggers:JobTriggers": {
            "properties": {
                "gitProviderWebhook": {
                    "type": "boolean",
                    "description": "Whether the job runs automatically on PR creation\n"
                },
                "githubWebhook": {
                    "type": "boolean",
                    "description": "Whether the job runs automatically on PR creation\n"
                },
                "onMerge": {
                    "type": "boolean",
                    "description": "Whether the job runs automatically once a PR is merged\n"
                },
                "schedule": {
                    "type": "boolean",
                    "description": "Whether the job runs on a schedule\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "gitProviderWebhook",
                        "githubWebhook",
                        "onMerge",
                        "schedule"
                    ]
                }
            }
        },
        "dbtcloud:index/RedshiftSemanticLayerCredentialConfiguration:RedshiftSemanticLayerCredentialConfiguration": {
            "properties": {
                "adapterVersion": {
                    "type": "string",
                    "description": "The adapter version\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the configuration\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The ID of the project\n"
                }
            },
            "type": "object",
            "required": [
                "adapterVersion",
                "name",
                "projectId"
            ]
        },
        "dbtcloud:index/RedshiftSemanticLayerCredentialCredential:RedshiftSemanticLayerCredentialCredential": {
            "properties": {
                "credentialId": {
                    "type": "integer",
                    "description": "The internal credential ID\n"
                },
                "defaultSchema": {
                    "type": "string",
                    "description": "Default schema name\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource. Contains the project ID and the credential ID.\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the Redshift credential is active\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the Redshift account\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Redshift credential in\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username for the Redshift account.\n"
                }
            },
            "type": "object",
            "required": [
                "defaultSchema",
                "numThreads",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "credentialId",
                        "defaultSchema",
                        "id",
                        "isActive",
                        "numThreads",
                        "password",
                        "projectId",
                        "username"
                    ]
                }
            }
        },
        "dbtcloud:index/ServiceTokenServiceTokenPermission:ServiceTokenServiceTokenPermission": {
            "properties": {
                "allProjects": {
                    "type": "boolean",
                    "description": "Whether or not to apply this permission to all projects for this service token\n"
                },
                "permissionSet": {
                    "type": "string",
                    "description": "Set of permissions to apply\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to apply this permission to for this service token\n"
                },
                "writableEnvironmentCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "What types of environments to apply Write permissions to.\nEven if Write access is restricted to some environment types, the permission set will have Read access to all environments.\nThe values allowed are `all`, `development`, `staging`, `production` and `other`.\nNot setting a value is the same as selecting `all`.\nNot all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.\n"
                }
            },
            "type": "object",
            "required": [
                "allProjects",
                "permissionSet"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allProjects",
                        "permissionSet",
                        "writableEnvironmentCategories"
                    ]
                }
            }
        },
        "dbtcloud:index/SnowflakeSemanticLayerCredentialConfiguration:SnowflakeSemanticLayerCredentialConfiguration": {
            "properties": {
                "adapterVersion": {
                    "type": "string",
                    "description": "The adapter version\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the configuration\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The ID of the project\n"
                }
            },
            "type": "object",
            "required": [
                "adapterVersion",
                "name",
                "projectId"
            ]
        },
        "dbtcloud:index/SnowflakeSemanticLayerCredentialCredential:SnowflakeSemanticLayerCredentialCredential": {
            "properties": {
                "authType": {
                    "type": "string",
                    "description": "The type of Snowflake credential ('password' or 'keypair')\n"
                },
                "credentialId": {
                    "type": "integer",
                    "description": "The internal credential ID\n"
                },
                "database": {
                    "type": "string",
                    "description": "The catalog to connect use\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource. Contains the project ID and the credential ID.\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the Snowflake credential is active\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the Snowflake account\n",
                    "secret": true
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key for the Snowflake account\n",
                    "secret": true
                },
                "privateKeyPassphrase": {
                    "type": "string",
                    "description": "The passphrase for the private key\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Snowflake credential in\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role to assume\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where to create models. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.\n"
                },
                "semanticLayerCredential": {
                    "type": "boolean",
                    "description": "This field indicates that the credential is used as part of the Semantic Layer configuration. It is used to create a Snowflake credential for the Semantic Layer.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username for the Snowflake account. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse to use\n"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "numThreads",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authType",
                        "credentialId",
                        "id",
                        "isActive",
                        "numThreads",
                        "password",
                        "privateKey",
                        "privateKeyPassphrase",
                        "projectId",
                        "schema",
                        "semanticLayerCredential",
                        "user"
                    ]
                }
            }
        },
        "dbtcloud:index/getEnvironmentsEnvironment:getEnvironmentsEnvironment": {
            "properties": {
                "connectionId": {
                    "type": "integer",
                    "description": "A connection ID (used with Global Connections)\n"
                },
                "credentialsId": {
                    "type": "integer",
                    "description": "Credential ID for this environment. A credential is not required for development environments, as dbt Cloud defaults to the user's credentials, but deployment environments will have this.\n"
                },
                "customBranch": {
                    "type": "string",
                    "description": "The custom branch name to use\n"
                },
                "dbtVersion": {
                    "type": "string",
                    "description": "Version number of dbt to use in this environment.\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "The type of deployment environment (currently 'production', 'staging' or empty)\n"
                },
                "enableModelQueryHistory": {
                    "type": "boolean",
                    "description": "Whether model query history is on\n"
                },
                "environmentId": {
                    "type": "integer",
                    "description": "The ID of the environment\n"
                },
                "extendedAttributesId": {
                    "type": "integer",
                    "description": "The ID of the extended attributes applied\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the environment\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The project ID to which the environment belong\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of environment (must be either development or deployment)\n"
                },
                "useCustomBranch": {
                    "type": "boolean",
                    "description": "Whether to use a custom git branch in this environment\n"
                }
            },
            "type": "object",
            "required": [
                "connectionId",
                "credentialsId",
                "customBranch",
                "dbtVersion",
                "deploymentType",
                "enableModelQueryHistory",
                "environmentId",
                "extendedAttributesId",
                "name",
                "projectId",
                "type",
                "useCustomBranch"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getGlobalConnectionApacheSpark:getGlobalConnectionApacheSpark": {
            "properties": {
                "auth": {
                    "type": "string",
                    "description": "Auth\n"
                },
                "cluster": {
                    "type": "string",
                    "description": "Spark cluster for the connection\n"
                },
                "connectRetries": {
                    "type": "integer",
                    "description": "Connection retries. Default=0\n"
                },
                "connectTimeout": {
                    "type": "integer",
                    "description": "Connection time out in seconds. Default=10\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the connection\n"
                },
                "method": {
                    "type": "string",
                    "description": "Authentication method for the connection (http or thrift).\n"
                },
                "organization": {
                    "type": "string",
                    "description": "Organization ID\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port for the connection. Default=443\n"
                },
                "user": {
                    "type": "string",
                    "description": "User\n"
                }
            },
            "type": "object",
            "required": [
                "auth",
                "cluster",
                "connectRetries",
                "connectTimeout",
                "host",
                "method",
                "organization",
                "port",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getGlobalConnectionAthena:getGlobalConnectionAthena": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Specify the database (data catalog) to build models into (lowercase only).\n"
                },
                "numBoto3Retries": {
                    "type": "integer",
                    "description": "Number of times to retry boto3 requests (e.g. deleting S3 files for materialized tables).\n"
                },
                "numIcebergRetries": {
                    "type": "integer",
                    "description": "Number of times to retry iceberg commit queries to fix ICEBERG*COMMIT*ERROR.\n"
                },
                "numRetries": {
                    "type": "integer",
                    "description": "Number of times to retry a failing query.\n"
                },
                "pollInterval": {
                    "type": "integer",
                    "description": "Interval in seconds to use for polling the status of query results in Athena.\n"
                },
                "regionName": {
                    "type": "string",
                    "description": "AWS region of your Athena instance.\n"
                },
                "s3DataDir": {
                    "type": "string",
                    "description": "Prefix for storing tables, if different from the connection's S3 staging directory.\n"
                },
                "s3DataNaming": {
                    "type": "string",
                    "description": "How to generate table paths in the S3 data directory.\n"
                },
                "s3StagingDir": {
                    "type": "string",
                    "description": "S3 location to store Athena query results and metadata.\n"
                },
                "s3TmpTableDir": {
                    "type": "string",
                    "description": "Prefix for storing temporary tables, if different from the connection's S3 data directory.\n"
                },
                "sparkWorkGroup": {
                    "type": "string",
                    "description": "Identifier of Athena Spark workgroup for running Python models.\n"
                },
                "workGroup": {
                    "type": "string",
                    "description": "Identifier of Athena workgroup.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "numBoto3Retries",
                "numIcebergRetries",
                "numRetries",
                "pollInterval",
                "regionName",
                "s3DataDir",
                "s3DataNaming",
                "s3StagingDir",
                "s3TmpTableDir",
                "sparkWorkGroup",
                "workGroup"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getGlobalConnectionBigquery:getGlobalConnectionBigquery": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "OAuth Client ID\n",
                    "secret": true
                },
                "applicationSecret": {
                    "type": "string",
                    "description": "OAuth Client Secret\n",
                    "secret": true
                },
                "authProviderX509CertUrl": {
                    "type": "string",
                    "description": "Auth Provider X509 Cert URL for the Service Account\n"
                },
                "authUri": {
                    "type": "string",
                    "description": "Auth URI for the Service Account\n"
                },
                "clientEmail": {
                    "type": "string",
                    "description": "Service Account email\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Client ID of the Service Account\n"
                },
                "clientX509CertUrl": {
                    "type": "string",
                    "description": "Client X509 Cert URL for the Service Account\n"
                },
                "dataprocClusterName": {
                    "type": "string",
                    "description": "Dataproc cluster name for PySpark workloads\n"
                },
                "dataprocRegion": {
                    "type": "string",
                    "description": "Google Cloud region for PySpark workloads on Dataproc\n"
                },
                "executionProject": {
                    "type": "string",
                    "description": "Project to bill for query execution\n"
                },
                "gcpProjectId": {
                    "type": "string",
                    "description": "The GCP project ID to use for the connection\n"
                },
                "gcsBucket": {
                    "type": "string",
                    "description": "URI for a Google Cloud Storage bucket to host Python code executed via Datapro\n"
                },
                "impersonateServiceAccount": {
                    "type": "string",
                    "description": "Service Account to impersonate when running queries\n"
                },
                "jobCreationTimeoutSeconds": {
                    "type": "integer",
                    "description": "Maximum timeout for the job creation step\n"
                },
                "jobRetryDeadlineSeconds": {
                    "type": "integer",
                    "description": "Total number of seconds to wait while retrying the same query\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location to create new Datasets in\n"
                },
                "maximumBytesBilled": {
                    "type": "integer",
                    "description": "Max number of bytes that can be billed for a given BigQuery query\n"
                },
                "priority": {
                    "type": "string",
                    "description": "The priority with which to execute BigQuery queries (batch or interactive)\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Private Key for the Service Account\n",
                    "secret": true
                },
                "privateKeyId": {
                    "type": "string",
                    "description": "Private Key ID for the Service Account\n"
                },
                "retries": {
                    "type": "integer",
                    "description": "Number of retries for queries\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "OAuth scopes for the BigQuery connection\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Timeout in seconds for queries\n"
                },
                "tokenUri": {
                    "type": "string",
                    "description": "Token URI for the Service Account\n"
                }
            },
            "type": "object",
            "required": [
                "applicationId",
                "applicationSecret",
                "authProviderX509CertUrl",
                "authUri",
                "clientEmail",
                "clientId",
                "clientX509CertUrl",
                "dataprocClusterName",
                "dataprocRegion",
                "executionProject",
                "gcpProjectId",
                "gcsBucket",
                "impersonateServiceAccount",
                "jobCreationTimeoutSeconds",
                "jobRetryDeadlineSeconds",
                "location",
                "maximumBytesBilled",
                "priority",
                "privateKey",
                "privateKeyId",
                "retries",
                "scopes",
                "timeoutSeconds",
                "tokenUri"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getGlobalConnectionDatabricks:getGlobalConnectionDatabricks": {
            "properties": {
                "catalog": {
                    "type": "string",
                    "description": "Catalog name if Unity Catalog is enabled in your Databricks workspace.\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Required to enable Databricks OAuth authentication for IDE developers.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Required to enable Databricks OAuth authentication for IDE developers.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The hostname of the Databricks cluster or SQL warehouse.\n"
                },
                "httpPath": {
                    "type": "string",
                    "description": "The HTTP path of the Databricks cluster or SQL warehouse.\n"
                }
            },
            "type": "object",
            "required": [
                "catalog",
                "clientId",
                "clientSecret",
                "host",
                "httpPath"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getGlobalConnectionFabric:getGlobalConnectionFabric": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The database to connect to for this connection.\n"
                },
                "loginTimeout": {
                    "type": "integer",
                    "description": "The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to connect to for this connection. Default=1433\n"
                },
                "queryTimeout": {
                    "type": "integer",
                    "description": "The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.\n"
                },
                "retries": {
                    "type": "integer",
                    "description": "The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.\n"
                },
                "server": {
                    "type": "string",
                    "description": "The server hostname.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "loginTimeout",
                "port",
                "queryTimeout",
                "retries",
                "server"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getGlobalConnectionPostgres:getGlobalConnectionPostgres": {
            "properties": {
                "dbname": {
                    "type": "string",
                    "description": "The database name for this connection.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname of the database.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to connect to for this connection. Default=5432\n"
                },
                "sshTunnel": {
                    "$ref": "#/types/dbtcloud:index/getGlobalConnectionPostgresSshTunnel:getGlobalConnectionPostgresSshTunnel",
                    "description": "PostgreSQL SSH Tunnel configuration\n"
                }
            },
            "type": "object",
            "required": [
                "dbname",
                "hostname",
                "port",
                "sshTunnel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getGlobalConnectionPostgresSshTunnel:getGlobalConnectionPostgresSshTunnel": {
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": "The hostname for the SSH tunnel.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the SSH tunnel connection.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The HTTP port for the SSH tunnel.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The SSH public key generated to allow connecting via SSH tunnel.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to use for the SSH tunnel.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "id",
                "port",
                "publicKey",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getGlobalConnectionRedshift:getGlobalConnectionRedshift": {
            "properties": {
                "dbname": {
                    "type": "string",
                    "description": "The database name for this connection.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname of the data warehouse.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to connect to for this connection. Default=5432\n"
                },
                "sshTunnel": {
                    "$ref": "#/types/dbtcloud:index/getGlobalConnectionRedshiftSshTunnel:getGlobalConnectionRedshiftSshTunnel",
                    "description": "Redshift SSH Tunnel configuration\n"
                }
            },
            "type": "object",
            "required": [
                "dbname",
                "hostname",
                "port",
                "sshTunnel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getGlobalConnectionRedshiftSshTunnel:getGlobalConnectionRedshiftSshTunnel": {
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": "The hostname for the SSH tunnel.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the SSH tunnel connection.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The HTTP port for the SSH tunnel.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The SSH public key generated to allow connecting via SSH tunnel.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to use for the SSH tunnel.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "id",
                "port",
                "publicKey",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getGlobalConnectionSnowflake:getGlobalConnectionSnowflake": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "The Snowflake account name\n"
                },
                "allowSso": {
                    "type": "boolean",
                    "description": "Whether to allow Snowflake OAuth for the connection. If true, the `oauth_client_id` and `oauth_client_secret` fields must be set\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "If true, the snowflake client will keep connections for longer than the default 4 hours. This is helpful when particularly long-running queries are executing (\u003e 4 hours)\n"
                },
                "database": {
                    "type": "string",
                    "description": "The default database for the connection\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "OAuth Client ID. Required to allow OAuth between dbt Cloud and Snowflake\n",
                    "secret": true
                },
                "oauthClientSecret": {
                    "type": "string",
                    "description": "OAuth Client Secret. Required to allow OAuth between dbt Cloud and Snowflake\n",
                    "secret": true
                },
                "role": {
                    "type": "string",
                    "description": "The Snowflake role to use when running queries on the connection\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The default Snowflake Warehouse to use for the connection\n"
                }
            },
            "type": "object",
            "required": [
                "account",
                "allowSso",
                "clientSessionKeepAlive",
                "database",
                "oauthClientId",
                "oauthClientSecret",
                "role",
                "warehouse"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getGlobalConnectionStarburst:getGlobalConnectionStarburst": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "The hostname of the account to connect to.\n"
                },
                "method": {
                    "type": "string",
                    "description": "The authentication method. Only LDAP for now.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to connect to for this connection. Default=443\n"
                }
            },
            "type": "object",
            "required": [
                "host",
                "method",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getGlobalConnectionSynapse:getGlobalConnectionSynapse": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The database to connect to for this connection.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The server hostname.\n"
                },
                "loginTimeout": {
                    "type": "integer",
                    "description": "The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to connect to for this connection. Default=1433\n"
                },
                "queryTimeout": {
                    "type": "integer",
                    "description": "The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.\n"
                },
                "retries": {
                    "type": "integer",
                    "description": "The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "host",
                "loginTimeout",
                "port",
                "queryTimeout",
                "retries"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getGlobalConnectionTeradata:getGlobalConnectionTeradata": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "The hostname of the database.\n"
                },
                "port": {
                    "type": "string",
                    "description": "The port to connect to for this connection. Default=1025\n"
                },
                "requestTimeout": {
                    "type": "integer",
                    "description": "The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.\n"
                },
                "retries": {
                    "type": "integer",
                    "description": "The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.\n"
                },
                "tmode": {
                    "type": "string",
                    "description": "The transaction mode to use for the connection.\n"
                }
            },
            "type": "object",
            "required": [
                "host",
                "port",
                "requestTimeout",
                "retries",
                "tmode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getGlobalConnectionsConnection:getGlobalConnectionsConnection": {
            "properties": {
                "adapterVersion": {
                    "type": "string",
                    "description": "Type of adapter used for the connection\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the connection was created\n"
                },
                "environmentCount": {
                    "type": "integer",
                    "description": "Number of environments using this connection\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Connection Identifier\n"
                },
                "isSshTunnelEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "Connection name\n"
                },
                "oauthConfigurationId": {
                    "type": "integer"
                },
                "privateLinkEndpointId": {
                    "type": "string",
                    "description": "Private Link Endpoint ID.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "When the connection was updated\n"
                }
            },
            "type": "object",
            "required": [
                "adapterVersion",
                "createdAt",
                "environmentCount",
                "id",
                "isSshTunnelEnabled",
                "name",
                "oauthConfigurationId",
                "privateLinkEndpointId",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getGroupGroupPermission:getGroupGroupPermission": {
            "properties": {
                "allProjects": {
                    "type": "boolean",
                    "description": "Whether access should be provided for all projects or not.\n"
                },
                "permissionSet": {
                    "type": "string",
                    "description": "Set of permissions to apply. The permissions allowed are the same as the ones for the `dbtcloud.Group` resource.\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to apply this permission to for this group.\n"
                },
                "writableEnvironmentCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "What types of environments to apply Write permissions to.\n"
                }
            },
            "type": "object",
            "required": [
                "allProjects",
                "permissionSet",
                "projectId",
                "writableEnvironmentCategories"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getGroupUsersUser:getGroupUsersUser": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "Email of the user\n"
                },
                "id": {
                    "type": "integer",
                    "description": "ID of the user\n"
                }
            },
            "type": "object",
            "required": [
                "email",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getJobEnvironment:getJobEnvironment": {
            "properties": {
                "deploymentType": {
                    "type": "string",
                    "description": "Type of deployment environment: staging, production\n"
                },
                "id": {
                    "type": "integer",
                    "description": "ID of the environment\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the environment\n"
                },
                "projectId": {
                    "type": "integer"
                },
                "type": {
                    "type": "string",
                    "description": "Environment type: development or deployment\n"
                }
            },
            "type": "object",
            "required": [
                "deploymentType",
                "id",
                "name",
                "projectId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getJobExecution:getJobExecution": {
            "properties": {
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "The number of seconds before the job times out\n"
                }
            },
            "type": "object",
            "required": [
                "timeoutSeconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getJobJobCompletionTriggerCondition:getJobJobCompletionTriggerCondition": {
            "properties": {
                "jobId": {
                    "type": "integer",
                    "description": "The ID of the job that would trigger this job after completion.\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The ID of the project where the trigger job is running in.\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of statuses to trigger the job on.\n"
                }
            },
            "type": "object",
            "required": [
                "jobId",
                "projectId",
                "statuses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getJobSchedule:getJobSchedule": {
            "properties": {
                "cron": {
                    "type": "string",
                    "description": "The cron schedule for the job. Only used if triggers.schedule is true\n"
                }
            },
            "type": "object",
            "required": [
                "cron"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getJobSettings:getJobSettings": {
            "properties": {
                "targetName": {
                    "type": "string",
                    "description": "Value for `target.name` in the Jinja context\n"
                },
                "threads": {
                    "type": "integer",
                    "description": "Number of threads to run dbt with\n"
                }
            },
            "type": "object",
            "required": [
                "targetName",
                "threads"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getJobTriggers:getJobTriggers": {
            "properties": {
                "gitProviderWebhook": {
                    "type": "boolean",
                    "description": "Whether the job runs automatically on PR creation\n"
                },
                "githubWebhook": {
                    "type": "boolean",
                    "description": "Whether the job runs automatically on PR creation\n"
                },
                "onMerge": {
                    "type": "boolean",
                    "description": "Whether the job runs automatically once a PR is merged\n"
                },
                "schedule": {
                    "type": "boolean",
                    "description": "Whether the job runs on a schedule\n"
                }
            },
            "type": "object",
            "required": [
                "gitProviderWebhook",
                "githubWebhook",
                "onMerge",
                "schedule"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getJobsJob:getJobsJob": {
            "properties": {
                "dbtVersion": {
                    "type": "string",
                    "description": "The version of dbt used for the job. If not set, the environment version will be used.\n"
                },
                "deferringEnvironmentId": {
                    "type": "integer",
                    "description": "The ID of the environment this job defers to\n"
                },
                "deferringJobDefinitionId": {
                    "type": "integer",
                    "description": "[Deprectated - Deferral is now set at the environment level] The ID of the job definition this job defers to\n",
                    "deprecationMessage": "Deferral is now set at the environment level"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the job\n"
                },
                "environment": {
                    "$ref": "#/types/dbtcloud:index/getJobsJobEnvironment:getJobsJobEnvironment",
                    "description": "Details of the environment the job is running in\n"
                },
                "environmentId": {
                    "type": "integer",
                    "description": "The ID of environment\n"
                },
                "executeSteps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of steps to run in the job\n"
                },
                "execution": {
                    "$ref": "#/types/dbtcloud:index/getJobsJobExecution:getJobsJobExecution"
                },
                "generateDocs": {
                    "type": "boolean",
                    "description": "Whether the job generate docs\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the job\n"
                },
                "jobCompletionTriggerCondition": {
                    "$ref": "#/types/dbtcloud:index/getJobsJobJobCompletionTriggerCondition:getJobsJobJobCompletionTriggerCondition",
                    "description": "Whether the job is triggered by the completion of another job\n"
                },
                "jobId": {
                    "type": "integer",
                    "description": "The ID of the job\n"
                },
                "jobType": {
                    "type": "string",
                    "description": "The type of job (e.g. CI, scheduled)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the job\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The ID of the project\n"
                },
                "runCompareChanges": {
                    "type": "boolean",
                    "description": "Whether the job should compare data changes introduced by the code change in the PR\n"
                },
                "runGenerateSources": {
                    "type": "boolean",
                    "description": "Whether the job test source freshness\n"
                },
                "schedule": {
                    "$ref": "#/types/dbtcloud:index/getJobsJobSchedule:getJobsJobSchedule"
                },
                "settings": {
                    "$ref": "#/types/dbtcloud:index/getJobsJobSettings:getJobsJobSettings"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "[Deprectated - Moved to execution.timeout_seconds] Number of seconds before the job times out\n",
                    "deprecationMessage": "Moved to execution.timeout_seconds"
                },
                "triggers": {
                    "$ref": "#/types/dbtcloud:index/getJobsJobTriggers:getJobsJobTriggers"
                },
                "triggersOnDraftPr": {
                    "type": "boolean",
                    "description": "Whether the CI job should be automatically triggered on draft PRs\n"
                }
            },
            "type": "object",
            "required": [
                "dbtVersion",
                "deferringEnvironmentId",
                "deferringJobDefinitionId",
                "description",
                "environment",
                "environmentId",
                "executeSteps",
                "execution",
                "generateDocs",
                "id",
                "jobCompletionTriggerCondition",
                "jobId",
                "jobType",
                "name",
                "projectId",
                "runCompareChanges",
                "runGenerateSources",
                "schedule",
                "settings",
                "timeoutSeconds",
                "triggers",
                "triggersOnDraftPr"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getJobsJobEnvironment:getJobsJobEnvironment": {
            "properties": {
                "deploymentType": {
                    "type": "string",
                    "description": "Type of deployment environment: staging, production\n"
                },
                "id": {
                    "type": "integer",
                    "description": "ID of the environment\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the environment\n"
                },
                "projectId": {
                    "type": "integer"
                },
                "type": {
                    "type": "string",
                    "description": "Environment type: development or deployment\n"
                }
            },
            "type": "object",
            "required": [
                "deploymentType",
                "id",
                "name",
                "projectId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getJobsJobExecution:getJobsJobExecution": {
            "properties": {
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "The number of seconds before the job times out\n"
                }
            },
            "type": "object",
            "required": [
                "timeoutSeconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getJobsJobJobCompletionTriggerCondition:getJobsJobJobCompletionTriggerCondition": {
            "properties": {
                "condition": {
                    "$ref": "#/types/dbtcloud:index/getJobsJobJobCompletionTriggerConditionCondition:getJobsJobJobCompletionTriggerConditionCondition"
                }
            },
            "type": "object",
            "required": [
                "condition"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getJobsJobJobCompletionTriggerConditionCondition:getJobsJobJobCompletionTriggerConditionCondition": {
            "properties": {
                "jobId": {
                    "type": "integer"
                },
                "projectId": {
                    "type": "integer"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "jobId",
                "projectId",
                "statuses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getJobsJobSchedule:getJobsJobSchedule": {
            "properties": {
                "cron": {
                    "type": "string",
                    "description": "The cron schedule for the job. Only used if triggers.schedule is true\n"
                }
            },
            "type": "object",
            "required": [
                "cron"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getJobsJobSettings:getJobsJobSettings": {
            "properties": {
                "targetName": {
                    "type": "string",
                    "description": "Value for `target.name` in the Jinja context\n"
                },
                "threads": {
                    "type": "integer",
                    "description": "Number of threads to run dbt with\n"
                }
            },
            "type": "object",
            "required": [
                "targetName",
                "threads"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getJobsJobTriggers:getJobsJobTriggers": {
            "properties": {
                "gitProviderWebhook": {
                    "type": "boolean",
                    "description": "Whether the job runs automatically on PR creation\n"
                },
                "githubWebhook": {
                    "type": "boolean",
                    "description": "Whether the job runs automatically on PR creation\n"
                },
                "onMerge": {
                    "type": "boolean",
                    "description": "Whether the job runs automatically once a PR is merged\n"
                },
                "schedule": {
                    "type": "boolean",
                    "description": "Whether the job runs on a schedule\n"
                }
            },
            "type": "object",
            "required": [
                "gitProviderWebhook",
                "githubWebhook",
                "onMerge",
                "schedule"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getProjectProjectConnection:getProjectProjectConnection": {
            "properties": {
                "adapterVersion": {
                    "type": "string",
                    "description": "Version of the adapter for the connection. Will tell what connection type it is\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Connection ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Connection name\n"
                }
            },
            "type": "object",
            "required": [
                "adapterVersion",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getProjectRepository:getProjectRepository": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Repository ID\n"
                },
                "pullRequestUrlTemplate": {
                    "type": "string",
                    "description": "URL template for PRs\n"
                },
                "remoteUrl": {
                    "type": "string",
                    "description": "URL of the git repo remote\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "pullRequestUrlTemplate",
                "remoteUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getProjectsProject:getProjectsProject": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "When the project was created\n"
                },
                "dbtProjectSubdirectory": {
                    "type": "string",
                    "description": "Subdirectory for the dbt project inside the git repo\n"
                },
                "description": {
                    "type": "string",
                    "description": "Project description\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Project ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Project name\n"
                },
                "projectConnection": {
                    "$ref": "#/types/dbtcloud:index/getProjectsProjectProjectConnection:getProjectsProjectProjectConnection",
                    "description": "Details for the connection linked to the project\n"
                },
                "repository": {
                    "$ref": "#/types/dbtcloud:index/getProjectsProjectRepository:getProjectsProjectRepository",
                    "description": "Details for the repository linked to the project\n"
                },
                "semanticLayerConfigId": {
                    "type": "integer",
                    "description": "Semantic layer config ID\n"
                },
                "type": {
                    "type": "integer",
                    "description": "The type of dbt project (default or hybrid)\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "When the project was last updated\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "dbtProjectSubdirectory",
                "description",
                "id",
                "name",
                "projectConnection",
                "repository",
                "semanticLayerConfigId",
                "type",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getProjectsProjectProjectConnection:getProjectsProjectProjectConnection": {
            "properties": {
                "adapterVersion": {
                    "type": "string",
                    "description": "Version of the adapter for the connection. Will tell what connection type it is\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Connection ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Connection name\n"
                }
            },
            "type": "object",
            "required": [
                "adapterVersion",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getProjectsProjectRepository:getProjectsProjectRepository": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Repository ID\n"
                },
                "pullRequestUrlTemplate": {
                    "type": "string",
                    "description": "URL template for PRs\n"
                },
                "remoteUrl": {
                    "type": "string",
                    "description": "URL of the git repo remote\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "pullRequestUrlTemplate",
                "remoteUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getRunsFilter:getRunsFilter": {
            "properties": {
                "environmentId": {
                    "type": "integer",
                    "description": "The ID of the environment\n"
                },
                "jobDefinitionId": {
                    "type": "integer",
                    "description": "The ID of the job definition\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "The limit of the runs\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The ID of the project\n"
                },
                "pullRequestId": {
                    "type": "integer",
                    "description": "The ID of the pull request\n"
                },
                "status": {
                    "type": "integer",
                    "description": "The status of the run\n"
                },
                "statusIn": {
                    "type": "string",
                    "description": "The status of the run\n"
                },
                "triggerId": {
                    "type": "integer",
                    "description": "The ID of the trigger\n"
                }
            },
            "type": "object"
        },
        "dbtcloud:index/getRunsRun:getRunsRun": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The ID of the account\n"
                },
                "cause": {
                    "type": "string",
                    "description": "The cause of the run\n"
                },
                "gitBranch": {
                    "type": "string",
                    "description": "The branch of the commit\n"
                },
                "gitSha": {
                    "type": "string",
                    "description": "The SHA of the commit\n"
                },
                "githubPullRequestId": {
                    "type": "string",
                    "description": "The ID of the pull request\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the run\n"
                },
                "jobId": {
                    "type": "integer",
                    "description": "The ID of the job\n"
                },
                "schemaOverride": {
                    "type": "string",
                    "description": "The schema override\n"
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "cause",
                "gitBranch",
                "gitSha",
                "githubPullRequestId",
                "id",
                "jobId",
                "schemaOverride"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getServiceTokenServiceTokenPermission:getServiceTokenServiceTokenPermission": {
            "properties": {
                "allProjects": {
                    "type": "boolean",
                    "description": "Whether or not to apply this permission to all projects for this service token\n"
                },
                "permissionSet": {
                    "type": "string",
                    "description": "Set of permissions to apply\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to apply this permission to for this service token\n"
                },
                "writableEnvironmentCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "What types of environments to apply Write permissions to.\nEven if Write access is restricted to some environment types, the permission set will have Read access to all environments.\nThe values allowed are `all`, `development`, `staging`, `production` and `other`.\nNot setting a value is the same as selecting `all`.\nNot all permission sets support environment level write settings, only `analyst`, `database_admin`, `developer`, `git_admin` and `team_admin`.\n"
                }
            },
            "type": "object",
            "required": [
                "allProjects",
                "permissionSet",
                "projectId",
                "writableEnvironmentCategories"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getUsersUser:getUsersUser": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "Email for the user\n"
                },
                "id": {
                    "type": "integer",
                    "description": "ID of the user\n"
                }
            },
            "type": "object",
            "required": [
                "email",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the dbtcloud package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accountId": {
                "type": "integer",
                "description": "Account identifier for your dbt Cloud implementation. Instead of setting the parameter, you can set the environment\nvariable `DBT_CLOUD_ACCOUNT_ID`\n"
            },
            "hostUrl": {
                "type": "string",
                "description": "URL for your dbt Cloud deployment. Instead of setting the parameter, you can set the environment variable\n`DBT_CLOUD_HOST_URL` - Defaults to https://cloud.getdbt.com/api\n"
            },
            "token": {
                "type": "string",
                "description": "API token for your dbt Cloud. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_TOKEN`\n",
                "secret": true
            }
        },
        "inputProperties": {
            "accountId": {
                "type": "integer",
                "description": "Account identifier for your dbt Cloud implementation. Instead of setting the parameter, you can set the environment\nvariable `DBT_CLOUD_ACCOUNT_ID`\n",
                "defaultInfo": {
                    "environment": [
                        "DBT_CLOUD_ACCOUNT_ID"
                    ]
                }
            },
            "hostUrl": {
                "type": "string",
                "description": "URL for your dbt Cloud deployment. Instead of setting the parameter, you can set the environment variable\n`DBT_CLOUD_HOST_URL` - Defaults to https://cloud.getdbt.com/api\n",
                "default": "https://cloud.getdbt.com/api",
                "defaultInfo": {
                    "environment": [
                        "DBT_CLOUD_HOST_URL"
                    ]
                }
            },
            "token": {
                "type": "string",
                "description": "API token for your dbt Cloud. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_TOKEN`\n",
                "defaultInfo": {
                    "environment": [
                        "DBT_CLOUD_TOKEN"
                    ]
                },
                "secret": true
            }
        },
        "methods": {
            "terraformConfig": "pulumi:providers:dbtcloud/terraformConfig"
        }
    },
    "resources": {
        "dbtcloud:index/accountFeatures:AccountFeatures": {
            "description": "Manages dbt Cloud global features at the account level, like Advanced CI. The same feature should not be configured in different resources to avoid conflicts.\n\nWhen destroying the resource or removing the value for an attribute, the features status will not be changed. Deactivating features will require applying them wih the value set to `false`.\n",
            "properties": {
                "advancedCi": {
                    "type": "boolean",
                    "description": "Whether advanced CI is enabled.\n"
                },
                "aiFeatures": {
                    "type": "boolean",
                    "description": "Whether AI features are enabled.\n"
                },
                "partialParsing": {
                    "type": "boolean",
                    "description": "Whether partial parsing is enabled.\n"
                },
                "repoCaching": {
                    "type": "boolean",
                    "description": "Whether repository caching is enabled.\n"
                },
                "warehouseCostVisibility": {
                    "type": "boolean",
                    "description": "Whether warehouse cost visibility is enabled.\n"
                }
            },
            "required": [
                "advancedCi",
                "aiFeatures",
                "partialParsing",
                "repoCaching",
                "warehouseCostVisibility"
            ],
            "inputProperties": {
                "advancedCi": {
                    "type": "boolean",
                    "description": "Whether advanced CI is enabled.\n"
                },
                "aiFeatures": {
                    "type": "boolean",
                    "description": "Whether AI features are enabled.\n"
                },
                "partialParsing": {
                    "type": "boolean",
                    "description": "Whether partial parsing is enabled.\n"
                },
                "repoCaching": {
                    "type": "boolean",
                    "description": "Whether repository caching is enabled.\n"
                },
                "warehouseCostVisibility": {
                    "type": "boolean",
                    "description": "Whether warehouse cost visibility is enabled.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountFeatures resources.\n",
                "properties": {
                    "advancedCi": {
                        "type": "boolean",
                        "description": "Whether advanced CI is enabled.\n"
                    },
                    "aiFeatures": {
                        "type": "boolean",
                        "description": "Whether AI features are enabled.\n"
                    },
                    "partialParsing": {
                        "type": "boolean",
                        "description": "Whether partial parsing is enabled.\n"
                    },
                    "repoCaching": {
                        "type": "boolean",
                        "description": "Whether repository caching is enabled.\n"
                    },
                    "warehouseCostVisibility": {
                        "type": "boolean",
                        "description": "Whether warehouse cost visibility is enabled.\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/athenaCredential:AthenaCredential": {
            "description": "Athena credential resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst example = new dbtcloud.AthenaCredential(\"example\", {\n    projectId: exampleDbtcloudProject.id,\n    awsAccessKeyId: \"your-access-key-id\",\n    awsSecretAccessKey: \"your-secret-access-key\",\n    schema: \"your_schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nexample = dbtcloud.AthenaCredential(\"example\",\n    project_id=example_dbtcloud_project[\"id\"],\n    aws_access_key_id=\"your-access-key-id\",\n    aws_secret_access_key=\"your-secret-access-key\",\n    schema=\"your_schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new DbtCloud.AthenaCredential(\"example\", new()\n    {\n        ProjectId = exampleDbtcloudProject.Id,\n        AwsAccessKeyId = \"your-access-key-id\",\n        AwsSecretAccessKey = \"your-secret-access-key\",\n        Schema = \"your_schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewAthenaCredential(ctx, \"example\", \u0026dbtcloud.AthenaCredentialArgs{\n\t\t\tProjectId:          pulumi.Any(exampleDbtcloudProject.Id),\n\t\t\tAwsAccessKeyId:     pulumi.String(\"your-access-key-id\"),\n\t\t\tAwsSecretAccessKey: pulumi.String(\"your-secret-access-key\"),\n\t\t\tSchema:             pulumi.String(\"your_schema\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.AthenaCredential;\nimport com.pulumi.dbtcloud.AthenaCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new AthenaCredential(\"example\", AthenaCredentialArgs.builder()\n            .projectId(exampleDbtcloudProject.id())\n            .awsAccessKeyId(\"your-access-key-id\")\n            .awsSecretAccessKey(\"your-secret-access-key\")\n            .schema(\"your_schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: dbtcloud:AthenaCredential\n    properties:\n      projectId: ${exampleDbtcloudProject.id}\n      awsAccessKeyId: your-access-key-id\n      awsSecretAccessKey: your-secret-access-key\n      schema: your_schema\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_athena_credential.my_athena_credential\n\n  id = \"project_id:credential_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_athena_credential.my_athena_credential\n\n  id = \"12345:6789\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/athenaCredential:AthenaCredential my_athena_credential \"project_id:credential_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/athenaCredential:AthenaCredential my_athena_credential 12345:6789\n```\n\n",
            "properties": {
                "awsAccessKeyId": {
                    "type": "string",
                    "description": "AWS access key ID for Athena user\n",
                    "secret": true
                },
                "awsSecretAccessKey": {
                    "type": "string",
                    "description": "AWS secret access key for Athena user\n",
                    "secret": true
                },
                "credentialId": {
                    "type": "integer",
                    "description": "The internal credential ID\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Athena credential in\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where to create models\n"
                }
            },
            "required": [
                "awsAccessKeyId",
                "awsSecretAccessKey",
                "credentialId",
                "projectId",
                "schema"
            ],
            "inputProperties": {
                "awsAccessKeyId": {
                    "type": "string",
                    "description": "AWS access key ID for Athena user\n",
                    "secret": true
                },
                "awsSecretAccessKey": {
                    "type": "string",
                    "description": "AWS secret access key for Athena user\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Athena credential in\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where to create models\n"
                }
            },
            "requiredInputs": [
                "awsAccessKeyId",
                "awsSecretAccessKey",
                "projectId",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AthenaCredential resources.\n",
                "properties": {
                    "awsAccessKeyId": {
                        "type": "string",
                        "description": "AWS access key ID for Athena user\n",
                        "secret": true
                    },
                    "awsSecretAccessKey": {
                        "type": "string",
                        "description": "AWS secret access key for Athena user\n",
                        "secret": true
                    },
                    "credentialId": {
                        "type": "integer",
                        "description": "The internal credential ID\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the Athena credential in\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema where to create models\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/bigQueryCredential:BigQueryCredential": {
            "description": "Bigquery credential resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myCredential = new dbtcloud.BigQueryCredential(\"my_credential\", {\n    projectId: dbtProject.id,\n    dataset: \"my_bq_dataset\",\n    numThreads: 16,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_credential = dbtcloud.BigQueryCredential(\"my_credential\",\n    project_id=dbt_project[\"id\"],\n    dataset=\"my_bq_dataset\",\n    num_threads=16)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myCredential = new DbtCloud.BigQueryCredential(\"my_credential\", new()\n    {\n        ProjectId = dbtProject.Id,\n        Dataset = \"my_bq_dataset\",\n        NumThreads = 16,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewBigQueryCredential(ctx, \"my_credential\", \u0026dbtcloud.BigQueryCredentialArgs{\n\t\t\tProjectId:  pulumi.Any(dbtProject.Id),\n\t\t\tDataset:    pulumi.String(\"my_bq_dataset\"),\n\t\t\tNumThreads: pulumi.Int(16),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.BigQueryCredential;\nimport com.pulumi.dbtcloud.BigQueryCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myCredential = new BigQueryCredential(\"myCredential\", BigQueryCredentialArgs.builder()\n            .projectId(dbtProject.id())\n            .dataset(\"my_bq_dataset\")\n            .numThreads(16)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myCredential:\n    type: dbtcloud:BigQueryCredential\n    name: my_credential\n    properties:\n      projectId: ${dbtProject.id}\n      dataset: my_bq_dataset\n      numThreads: 16\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_bigquery_credential.my_credential\n\n  id = \"project_id:credential_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_bigquery_credential.my_credential\n\n  id = \"12345:5678\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/bigQueryCredential:BigQueryCredential my_credential \"project_id:credential_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/bigQueryCredential:BigQueryCredential my_credential 12345:5678\n```\n\n",
            "properties": {
                "credentialId": {
                    "type": "integer",
                    "description": "The internal credential ID\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "Default dataset name\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the BigQuery credential is active\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the BigQuery credential in\n"
                }
            },
            "required": [
                "credentialId",
                "dataset",
                "isActive",
                "numThreads",
                "projectId"
            ],
            "inputProperties": {
                "dataset": {
                    "type": "string",
                    "description": "Default dataset name\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the BigQuery credential is active\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the BigQuery credential in\n"
                }
            },
            "requiredInputs": [
                "dataset",
                "numThreads",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BigQueryCredential resources.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "The internal credential ID\n"
                    },
                    "dataset": {
                        "type": "string",
                        "description": "Default dataset name\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the BigQuery credential is active\n"
                    },
                    "numThreads": {
                        "type": "integer",
                        "description": "Number of threads to use\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the BigQuery credential in\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/bigquerySemanticLayerCredential:BigquerySemanticLayerCredential": {
            "description": "BigQuery credential resource. This resource is composed of a BigQuery credential and a Semantic Layer configuration. It is used to create a BigQuery credential for the Semantic Layer.\n",
            "properties": {
                "authProviderX509CertUrl": {
                    "type": "string",
                    "description": "Auth Provider X509 Cert URL for the Service Account\n"
                },
                "authUri": {
                    "type": "string",
                    "description": "Auth URI for the Service Account\n"
                },
                "clientEmail": {
                    "type": "string",
                    "description": "Service Account email\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Client ID of the Service Account\n"
                },
                "clientX509CertUrl": {
                    "type": "string",
                    "description": "Client X509 Cert URL for the Service Account\n"
                },
                "configuration": {
                    "$ref": "#/types/dbtcloud:index/BigquerySemanticLayerCredentialConfiguration:BigquerySemanticLayerCredentialConfiguration",
                    "description": "Semantic Layer credential configuration details.\n"
                },
                "credential": {
                    "$ref": "#/types/dbtcloud:index/BigquerySemanticLayerCredentialCredential:BigquerySemanticLayerCredentialCredential",
                    "description": "BigQuery credential details, but used in the context of the Semantic Layer.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Private Key for the Service Account\n",
                    "secret": true
                },
                "privateKeyId": {
                    "type": "string",
                    "description": "Private Key ID for the Service Account\n"
                },
                "tokenUri": {
                    "type": "string",
                    "description": "Token URI for the Service Account\n"
                }
            },
            "required": [
                "authProviderX509CertUrl",
                "authUri",
                "clientEmail",
                "clientId",
                "clientX509CertUrl",
                "configuration",
                "credential",
                "privateKey",
                "privateKeyId",
                "tokenUri"
            ],
            "inputProperties": {
                "authProviderX509CertUrl": {
                    "type": "string",
                    "description": "Auth Provider X509 Cert URL for the Service Account\n"
                },
                "authUri": {
                    "type": "string",
                    "description": "Auth URI for the Service Account\n"
                },
                "clientEmail": {
                    "type": "string",
                    "description": "Service Account email\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Client ID of the Service Account\n"
                },
                "clientX509CertUrl": {
                    "type": "string",
                    "description": "Client X509 Cert URL for the Service Account\n"
                },
                "configuration": {
                    "$ref": "#/types/dbtcloud:index/BigquerySemanticLayerCredentialConfiguration:BigquerySemanticLayerCredentialConfiguration",
                    "description": "Semantic Layer credential configuration details.\n"
                },
                "credential": {
                    "$ref": "#/types/dbtcloud:index/BigquerySemanticLayerCredentialCredential:BigquerySemanticLayerCredentialCredential",
                    "description": "BigQuery credential details, but used in the context of the Semantic Layer.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Private Key for the Service Account\n",
                    "secret": true
                },
                "privateKeyId": {
                    "type": "string",
                    "description": "Private Key ID for the Service Account\n"
                },
                "tokenUri": {
                    "type": "string",
                    "description": "Token URI for the Service Account\n"
                }
            },
            "requiredInputs": [
                "authProviderX509CertUrl",
                "authUri",
                "clientEmail",
                "clientId",
                "clientX509CertUrl",
                "configuration",
                "credential",
                "privateKey",
                "privateKeyId",
                "tokenUri"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BigquerySemanticLayerCredential resources.\n",
                "properties": {
                    "authProviderX509CertUrl": {
                        "type": "string",
                        "description": "Auth Provider X509 Cert URL for the Service Account\n"
                    },
                    "authUri": {
                        "type": "string",
                        "description": "Auth URI for the Service Account\n"
                    },
                    "clientEmail": {
                        "type": "string",
                        "description": "Service Account email\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "Client ID of the Service Account\n"
                    },
                    "clientX509CertUrl": {
                        "type": "string",
                        "description": "Client X509 Cert URL for the Service Account\n"
                    },
                    "configuration": {
                        "$ref": "#/types/dbtcloud:index/BigquerySemanticLayerCredentialConfiguration:BigquerySemanticLayerCredentialConfiguration",
                        "description": "Semantic Layer credential configuration details.\n"
                    },
                    "credential": {
                        "$ref": "#/types/dbtcloud:index/BigquerySemanticLayerCredentialCredential:BigquerySemanticLayerCredentialCredential",
                        "description": "BigQuery credential details, but used in the context of the Semantic Layer.\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "Private Key for the Service Account\n",
                        "secret": true
                    },
                    "privateKeyId": {
                        "type": "string",
                        "description": "Private Key ID for the Service Account\n"
                    },
                    "tokenUri": {
                        "type": "string",
                        "description": "Token URI for the Service Account\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/databricksCredential:DatabricksCredential": {
            "description": "Databricks credential resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myDatabricksCred = new dbtcloud.DatabricksCredential(\"my_databricks_cred\", {\n    projectId: dbtProject.id,\n    token: \"abcdefgh\",\n    schema: \"my_schema\",\n    adapterType: \"databricks\",\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_databricks_cred = dbtcloud.DatabricksCredential(\"my_databricks_cred\",\n    project_id=dbt_project[\"id\"],\n    token=\"abcdefgh\",\n    schema=\"my_schema\",\n    adapter_type=\"databricks\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDatabricksCred = new DbtCloud.DatabricksCredential(\"my_databricks_cred\", new()\n    {\n        ProjectId = dbtProject.Id,\n        Token = \"abcdefgh\",\n        Schema = \"my_schema\",\n        AdapterType = \"databricks\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewDatabricksCredential(ctx, \"my_databricks_cred\", \u0026dbtcloud.DatabricksCredentialArgs{\n\t\t\tProjectId:   pulumi.Any(dbtProject.Id),\n\t\t\tToken:       pulumi.String(\"abcdefgh\"),\n\t\t\tSchema:      pulumi.String(\"my_schema\"),\n\t\t\tAdapterType: pulumi.String(\"databricks\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DatabricksCredential;\nimport com.pulumi.dbtcloud.DatabricksCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDatabricksCred = new DatabricksCredential(\"myDatabricksCred\", DatabricksCredentialArgs.builder()\n            .projectId(dbtProject.id())\n            .token(\"abcdefgh\")\n            .schema(\"my_schema\")\n            .adapterType(\"databricks\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDatabricksCred:\n    type: dbtcloud:DatabricksCredential\n    name: my_databricks_cred\n    properties:\n      projectId: ${dbtProject.id}\n      token: abcdefgh\n      schema: my_schema\n      adapterType: databricks\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_databricks_credential.my_databricks_credential\n\n  id = \"project_id:credential_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_databricks_credential.my_databricks_credential\n\n  id = \"12345:6789\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/databricksCredential:DatabricksCredential my_databricks_credential \"project_id:credential_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/databricksCredential:DatabricksCredential my_databricks_credential 12345:6789\n```\n\n",
            "properties": {
                "adapterType": {
                    "type": "string",
                    "description": "The type of the adapter (databricks or spark)\n"
                },
                "catalog": {
                    "type": "string",
                    "description": "The catalog where to create models (only for the databricks adapter)\n"
                },
                "credentialId": {
                    "type": "integer",
                    "description": "The system Databricks credential ID\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Databricks credential in\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where to create models\n"
                },
                "targetName": {
                    "type": "string",
                    "description": "Target name\n",
                    "deprecationMessage": "This field is deprecated at the environment level (it was never possible to set it in the UI) and will be removed in a future release. Please remove it and set the target name at the job level or leverage environment variables."
                },
                "token": {
                    "type": "string",
                    "description": "Token for Databricks user\n",
                    "secret": true
                }
            },
            "required": [
                "adapterType",
                "catalog",
                "credentialId",
                "projectId",
                "schema",
                "targetName",
                "token"
            ],
            "inputProperties": {
                "adapterType": {
                    "type": "string",
                    "description": "The type of the adapter (databricks or spark)\n"
                },
                "catalog": {
                    "type": "string",
                    "description": "The catalog where to create models (only for the databricks adapter)\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Databricks credential in\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where to create models\n"
                },
                "targetName": {
                    "type": "string",
                    "description": "Target name\n",
                    "deprecationMessage": "This field is deprecated at the environment level (it was never possible to set it in the UI) and will be removed in a future release. Please remove it and set the target name at the job level or leverage environment variables."
                },
                "token": {
                    "type": "string",
                    "description": "Token for Databricks user\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "adapterType",
                "projectId",
                "schema",
                "token"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabricksCredential resources.\n",
                "properties": {
                    "adapterType": {
                        "type": "string",
                        "description": "The type of the adapter (databricks or spark)\n"
                    },
                    "catalog": {
                        "type": "string",
                        "description": "The catalog where to create models (only for the databricks adapter)\n"
                    },
                    "credentialId": {
                        "type": "integer",
                        "description": "The system Databricks credential ID\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the Databricks credential in\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema where to create models\n"
                    },
                    "targetName": {
                        "type": "string",
                        "description": "Target name\n",
                        "deprecationMessage": "This field is deprecated at the environment level (it was never possible to set it in the UI) and will be removed in a future release. Please remove it and set the target name at the job level or leverage environment variables."
                    },
                    "token": {
                        "type": "string",
                        "description": "Token for Databricks user\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/environment:Environment": {
            "description": "Resource to manage dbt Cloud environments for the different dbt Cloud projects. In a given dbt Cloud project, one development environment can be defined and as many deployment environments as needed can be created. \u003e In August 2024, dbt Cloud released the \"global connection\" feature, allowing connections to be defined at the account level and reused across environments and projects. This version of the provider has the connection_id as an optional field but it is recommended to start setting it up in your projects. In future versions, this field will become mandatory.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst ciEnvironment = new dbtcloud.Environment(\"ci_environment\", {\n    dbtVersion: \"latest\",\n    name: \"CI\",\n    projectId: dbtProject.id,\n    type: \"deployment\",\n    credentialId: ciCredential.credentialId,\n    connectionId: myGlobalConnection.id,\n});\n// we can also set a deployment environment as being the production one\nconst prodEnvironment = new dbtcloud.Environment(\"prod_environment\", {\n    dbtVersion: \"1.7.0-latest\",\n    name: \"Prod\",\n    projectId: dbtProject.id,\n    type: \"deployment\",\n    credentialId: prodCredential.credentialId,\n    deploymentType: \"production\",\n    connectionId: myLegacyConnection.connectionId,\n});\n// Creating a development environment\nconst devEnvironment = new dbtcloud.Environment(\"dev_environment\", {\n    dbtVersion: \"latest\",\n    name: \"Dev\",\n    projectId: dbtProject.id,\n    type: \"development\",\n    connectionId: myOtherGlobalConnection.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nci_environment = dbtcloud.Environment(\"ci_environment\",\n    dbt_version=\"latest\",\n    name=\"CI\",\n    project_id=dbt_project[\"id\"],\n    type=\"deployment\",\n    credential_id=ci_credential[\"credentialId\"],\n    connection_id=my_global_connection[\"id\"])\n# we can also set a deployment environment as being the production one\nprod_environment = dbtcloud.Environment(\"prod_environment\",\n    dbt_version=\"1.7.0-latest\",\n    name=\"Prod\",\n    project_id=dbt_project[\"id\"],\n    type=\"deployment\",\n    credential_id=prod_credential[\"credentialId\"],\n    deployment_type=\"production\",\n    connection_id=my_legacy_connection[\"connectionId\"])\n# Creating a development environment\ndev_environment = dbtcloud.Environment(\"dev_environment\",\n    dbt_version=\"latest\",\n    name=\"Dev\",\n    project_id=dbt_project[\"id\"],\n    type=\"development\",\n    connection_id=my_other_global_connection[\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ciEnvironment = new DbtCloud.Environment(\"ci_environment\", new()\n    {\n        DbtVersion = \"latest\",\n        Name = \"CI\",\n        ProjectId = dbtProject.Id,\n        Type = \"deployment\",\n        CredentialId = ciCredential.CredentialId,\n        ConnectionId = myGlobalConnection.Id,\n    });\n\n    // we can also set a deployment environment as being the production one\n    var prodEnvironment = new DbtCloud.Environment(\"prod_environment\", new()\n    {\n        DbtVersion = \"1.7.0-latest\",\n        Name = \"Prod\",\n        ProjectId = dbtProject.Id,\n        Type = \"deployment\",\n        CredentialId = prodCredential.CredentialId,\n        DeploymentType = \"production\",\n        ConnectionId = myLegacyConnection.ConnectionId,\n    });\n\n    // Creating a development environment\n    var devEnvironment = new DbtCloud.Environment(\"dev_environment\", new()\n    {\n        DbtVersion = \"latest\",\n        Name = \"Dev\",\n        ProjectId = dbtProject.Id,\n        Type = \"development\",\n        ConnectionId = myOtherGlobalConnection.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewEnvironment(ctx, \"ci_environment\", \u0026dbtcloud.EnvironmentArgs{\n\t\t\tDbtVersion:   pulumi.String(\"latest\"),\n\t\t\tName:         pulumi.String(\"CI\"),\n\t\t\tProjectId:    pulumi.Any(dbtProject.Id),\n\t\t\tType:         pulumi.String(\"deployment\"),\n\t\t\tCredentialId: pulumi.Any(ciCredential.CredentialId),\n\t\t\tConnectionId: pulumi.Any(myGlobalConnection.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// we can also set a deployment environment as being the production one\n\t\t_, err = dbtcloud.NewEnvironment(ctx, \"prod_environment\", \u0026dbtcloud.EnvironmentArgs{\n\t\t\tDbtVersion:     pulumi.String(\"1.7.0-latest\"),\n\t\t\tName:           pulumi.String(\"Prod\"),\n\t\t\tProjectId:      pulumi.Any(dbtProject.Id),\n\t\t\tType:           pulumi.String(\"deployment\"),\n\t\t\tCredentialId:   pulumi.Any(prodCredential.CredentialId),\n\t\t\tDeploymentType: pulumi.String(\"production\"),\n\t\t\tConnectionId:   pulumi.Any(myLegacyConnection.ConnectionId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Creating a development environment\n\t\t_, err = dbtcloud.NewEnvironment(ctx, \"dev_environment\", \u0026dbtcloud.EnvironmentArgs{\n\t\t\tDbtVersion:   pulumi.String(\"latest\"),\n\t\t\tName:         pulumi.String(\"Dev\"),\n\t\t\tProjectId:    pulumi.Any(dbtProject.Id),\n\t\t\tType:         pulumi.String(\"development\"),\n\t\t\tConnectionId: pulumi.Any(myOtherGlobalConnection.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.Environment;\nimport com.pulumi.dbtcloud.EnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ciEnvironment = new Environment(\"ciEnvironment\", EnvironmentArgs.builder()\n            .dbtVersion(\"latest\")\n            .name(\"CI\")\n            .projectId(dbtProject.id())\n            .type(\"deployment\")\n            .credentialId(ciCredential.credentialId())\n            .connectionId(myGlobalConnection.id())\n            .build());\n\n        // we can also set a deployment environment as being the production one\n        var prodEnvironment = new Environment(\"prodEnvironment\", EnvironmentArgs.builder()\n            .dbtVersion(\"1.7.0-latest\")\n            .name(\"Prod\")\n            .projectId(dbtProject.id())\n            .type(\"deployment\")\n            .credentialId(prodCredential.credentialId())\n            .deploymentType(\"production\")\n            .connectionId(myLegacyConnection.connectionId())\n            .build());\n\n        // Creating a development environment\n        var devEnvironment = new Environment(\"devEnvironment\", EnvironmentArgs.builder()\n            .dbtVersion(\"latest\")\n            .name(\"Dev\")\n            .projectId(dbtProject.id())\n            .type(\"development\")\n            .connectionId(myOtherGlobalConnection.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ciEnvironment:\n    type: dbtcloud:Environment\n    name: ci_environment\n    properties:\n      dbtVersion: latest\n      name: CI\n      projectId: ${dbtProject.id}\n      type: deployment\n      credentialId: ${ciCredential.credentialId}\n      connectionId: ${myGlobalConnection.id}\n  # we can also set a deployment environment as being the production one\n  prodEnvironment:\n    type: dbtcloud:Environment\n    name: prod_environment\n    properties:\n      dbtVersion: 1.7.0-latest\n      name: Prod\n      projectId: ${dbtProject.id}\n      type: deployment\n      credentialId: ${prodCredential.credentialId}\n      deploymentType: production\n      connectionId: ${myLegacyConnection.connectionId}\n  # Creating a development environment\n  devEnvironment:\n    type: dbtcloud:Environment\n    name: dev_environment\n    properties:\n      dbtVersion: latest\n      name: Dev\n      projectId: ${dbtProject.id}\n      type: development\n      connectionId: ${myOtherGlobalConnection.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_environment.prod_environment\n\n  id = \"project_id:environment_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_environment.prod_environment\n\n  id = \"12345:6789\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/environment:Environment prod_environment \"project_id:environment_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/environment:Environment prod_environment 12345:6789\n```\n\n",
            "properties": {
                "connectionId": {
                    "type": "integer",
                    "description": "A connection ID (used with Global Connections)\n"
                },
                "credentialId": {
                    "type": "integer",
                    "description": "The project ID to which the environment belongs.\n"
                },
                "customBranch": {
                    "type": "string",
                    "description": "The custom branch name to use\n"
                },
                "dbtVersion": {
                    "type": "string",
                    "description": "Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` (e.g. `1.5.0-latest`), `major.minor.0-pre`, `versionless`, or `latest`. While `versionless` is still supported, using `latest` is recommended. Defaults to `latest` if no version is provided\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "The type of environment. Only valid for environments of type 'deployment' and for now can only be 'production', 'staging' or left empty for generic environments\n"
                },
                "enableModelQueryHistory": {
                    "type": "boolean",
                    "description": "Whether to enable model query history in this environment. As of Oct 2024, works only for Snowflake and BigQuery.\n"
                },
                "environmentId": {
                    "type": "integer",
                    "description": "The ID of the environment. Duplicated. Here for backward compatibility.\n"
                },
                "extendedAttributesId": {
                    "type": "integer",
                    "description": "The ID of the extended attributes applied\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the environment is active\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the environment\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the environment in\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of environment (must be either development or deployment)\n"
                },
                "useCustomBranch": {
                    "type": "boolean",
                    "description": "Whether to use a custom git branch in this environment\n"
                }
            },
            "required": [
                "connectionId",
                "credentialId",
                "dbtVersion",
                "enableModelQueryHistory",
                "environmentId",
                "extendedAttributesId",
                "isActive",
                "name",
                "projectId",
                "type",
                "useCustomBranch"
            ],
            "inputProperties": {
                "connectionId": {
                    "type": "integer",
                    "description": "A connection ID (used with Global Connections)\n"
                },
                "credentialId": {
                    "type": "integer",
                    "description": "The project ID to which the environment belongs.\n"
                },
                "customBranch": {
                    "type": "string",
                    "description": "The custom branch name to use\n"
                },
                "dbtVersion": {
                    "type": "string",
                    "description": "Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` (e.g. `1.5.0-latest`), `major.minor.0-pre`, `versionless`, or `latest`. While `versionless` is still supported, using `latest` is recommended. Defaults to `latest` if no version is provided\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "The type of environment. Only valid for environments of type 'deployment' and for now can only be 'production', 'staging' or left empty for generic environments\n"
                },
                "enableModelQueryHistory": {
                    "type": "boolean",
                    "description": "Whether to enable model query history in this environment. As of Oct 2024, works only for Snowflake and BigQuery.\n"
                },
                "extendedAttributesId": {
                    "type": "integer",
                    "description": "The ID of the extended attributes applied\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the environment is active\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the environment\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the environment in\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of environment (must be either development or deployment)\n"
                },
                "useCustomBranch": {
                    "type": "boolean",
                    "description": "Whether to use a custom git branch in this environment\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "connectionId": {
                        "type": "integer",
                        "description": "A connection ID (used with Global Connections)\n"
                    },
                    "credentialId": {
                        "type": "integer",
                        "description": "The project ID to which the environment belongs.\n"
                    },
                    "customBranch": {
                        "type": "string",
                        "description": "The custom branch name to use\n"
                    },
                    "dbtVersion": {
                        "type": "string",
                        "description": "Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` (e.g. `1.5.0-latest`), `major.minor.0-pre`, `versionless`, or `latest`. While `versionless` is still supported, using `latest` is recommended. Defaults to `latest` if no version is provided\n"
                    },
                    "deploymentType": {
                        "type": "string",
                        "description": "The type of environment. Only valid for environments of type 'deployment' and for now can only be 'production', 'staging' or left empty for generic environments\n"
                    },
                    "enableModelQueryHistory": {
                        "type": "boolean",
                        "description": "Whether to enable model query history in this environment. As of Oct 2024, works only for Snowflake and BigQuery.\n"
                    },
                    "environmentId": {
                        "type": "integer",
                        "description": "The ID of the environment. Duplicated. Here for backward compatibility.\n"
                    },
                    "extendedAttributesId": {
                        "type": "integer",
                        "description": "The ID of the extended attributes applied\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the environment is active\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the environment\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the environment in\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of environment (must be either development or deployment)\n"
                    },
                    "useCustomBranch": {
                        "type": "boolean",
                        "description": "Whether to use a custom git branch in this environment\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/environmentVariable:EnvironmentVariable": {
            "description": "*Note*: Some upstream resources can be slow to create, so if creating a project or environment at\nthe same time as the environment variables, it's recommended to use the `depends_on` meta argument.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst dbtMyEnvVar = new dbtcloud.EnvironmentVariable(\"dbt_my_env_var\", {\n    name: \"DBT_MY_ENV_VAR\",\n    projectId: dbtProject.id,\n    environmentValues: {\n        project: \"my_project_level_value\",\n        Dev: \"my_env_level_value\",\n        CI: \"my_ci_override_value\",\n        Prod: \"my_prod_override_value\",\n    },\n}, {\n    dependsOn: [\n        dbtProject,\n        devEnv,\n        ciEnv,\n        prodEnv,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\ndbt_my_env_var = dbtcloud.EnvironmentVariable(\"dbt_my_env_var\",\n    name=\"DBT_MY_ENV_VAR\",\n    project_id=dbt_project[\"id\"],\n    environment_values={\n        \"project\": \"my_project_level_value\",\n        \"Dev\": \"my_env_level_value\",\n        \"CI\": \"my_ci_override_value\",\n        \"Prod\": \"my_prod_override_value\",\n    },\n    opts = pulumi.ResourceOptions(depends_on=[\n            dbt_project,\n            dev_env,\n            ci_env,\n            prod_env,\n        ]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dbtMyEnvVar = new DbtCloud.EnvironmentVariable(\"dbt_my_env_var\", new()\n    {\n        Name = \"DBT_MY_ENV_VAR\",\n        ProjectId = dbtProject.Id,\n        EnvironmentValues = \n        {\n            { \"project\", \"my_project_level_value\" },\n            { \"Dev\", \"my_env_level_value\" },\n            { \"CI\", \"my_ci_override_value\" },\n            { \"Prod\", \"my_prod_override_value\" },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            dbtProject,\n            devEnv,\n            ciEnv,\n            prodEnv,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewEnvironmentVariable(ctx, \"dbt_my_env_var\", \u0026dbtcloud.EnvironmentVariableArgs{\n\t\t\tName:      pulumi.String(\"DBT_MY_ENV_VAR\"),\n\t\t\tProjectId: pulumi.Any(dbtProject.Id),\n\t\t\tEnvironmentValues: pulumi.StringMap{\n\t\t\t\t\"project\": pulumi.String(\"my_project_level_value\"),\n\t\t\t\t\"Dev\":     pulumi.String(\"my_env_level_value\"),\n\t\t\t\t\"CI\":      pulumi.String(\"my_ci_override_value\"),\n\t\t\t\t\"Prod\":    pulumi.String(\"my_prod_override_value\"),\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tdbtProject,\n\t\t\tdevEnv,\n\t\t\tciEnv,\n\t\t\tprodEnv,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.EnvironmentVariable;\nimport com.pulumi.dbtcloud.EnvironmentVariableArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dbtMyEnvVar = new EnvironmentVariable(\"dbtMyEnvVar\", EnvironmentVariableArgs.builder()\n            .name(\"DBT_MY_ENV_VAR\")\n            .projectId(dbtProject.id())\n            .environmentValues(Map.ofEntries(\n                Map.entry(\"project\", \"my_project_level_value\"),\n                Map.entry(\"Dev\", \"my_env_level_value\"),\n                Map.entry(\"CI\", \"my_ci_override_value\"),\n                Map.entry(\"Prod\", \"my_prod_override_value\")\n            ))\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(                \n                    dbtProject,\n                    devEnv,\n                    ciEnv,\n                    prodEnv)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dbtMyEnvVar:\n    type: dbtcloud:EnvironmentVariable\n    name: dbt_my_env_var\n    properties:\n      name: DBT_MY_ENV_VAR\n      projectId: ${dbtProject.id}\n      environmentValues:\n        project: my_project_level_value\n        Dev: my_env_level_value\n        CI: my_ci_override_value\n        Prod: my_prod_override_value\n    options:\n      dependsOn:\n        - ${dbtProject}\n        - ${devEnv}\n        - ${ciEnv}\n        - ${prodEnv}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_environment_variable.test_environment_variable\n\n  id = \"project_id:environment_variable_name\"\n\n}\n\nimport {\n\n  to = dbtcloud_environment_variable.test_environment_variable\n\n  id = \"12345:DBT_ENV_VAR\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/environmentVariable:EnvironmentVariable test_environment_variable \"project_id:environment_variable_name\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/environmentVariable:EnvironmentVariable test_environment_variable 12345:DBT_ENV_VAR\n```\n\n",
            "properties": {
                "environmentValues": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map from environment names to respective variable value, a special key `project` should be set for the project default variable value. This field is not set as sensitive so take precautions when using secret environment variables.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the variable, must be unique within a project, must be prefixed with 'DBT_'\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the environment variable in\n"
                }
            },
            "required": [
                "environmentValues",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "environmentValues": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map from environment names to respective variable value, a special key `project` should be set for the project default variable value. This field is not set as sensitive so take precautions when using secret environment variables.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the variable, must be unique within a project, must be prefixed with 'DBT_'\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the environment variable in\n"
                }
            },
            "requiredInputs": [
                "environmentValues",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EnvironmentVariable resources.\n",
                "properties": {
                    "environmentValues": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map from environment names to respective variable value, a special key `project` should be set for the project default variable value. This field is not set as sensitive so take precautions when using secret environment variables.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for the variable, must be unique within a project, must be prefixed with 'DBT_'\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the environment variable in\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/environmentVariableJobOverride:EnvironmentVariableJobOverride": {
            "description": "Environment variable job override resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myEnvVarJobOverride = new dbtcloud.EnvironmentVariableJobOverride(\"my_env_var_job_override\", {\n    name: dbtMyEnvVar.name,\n    projectId: dbtProject.id,\n    jobDefinitionId: dailyJob.id,\n    rawValue: \"my_override_value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_env_var_job_override = dbtcloud.EnvironmentVariableJobOverride(\"my_env_var_job_override\",\n    name=dbt_my_env_var[\"name\"],\n    project_id=dbt_project[\"id\"],\n    job_definition_id=daily_job[\"id\"],\n    raw_value=\"my_override_value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myEnvVarJobOverride = new DbtCloud.EnvironmentVariableJobOverride(\"my_env_var_job_override\", new()\n    {\n        Name = dbtMyEnvVar.Name,\n        ProjectId = dbtProject.Id,\n        JobDefinitionId = dailyJob.Id,\n        RawValue = \"my_override_value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewEnvironmentVariableJobOverride(ctx, \"my_env_var_job_override\", \u0026dbtcloud.EnvironmentVariableJobOverrideArgs{\n\t\t\tName:            pulumi.Any(dbtMyEnvVar.Name),\n\t\t\tProjectId:       pulumi.Any(dbtProject.Id),\n\t\t\tJobDefinitionId: pulumi.Any(dailyJob.Id),\n\t\t\tRawValue:        pulumi.String(\"my_override_value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.EnvironmentVariableJobOverride;\nimport com.pulumi.dbtcloud.EnvironmentVariableJobOverrideArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myEnvVarJobOverride = new EnvironmentVariableJobOverride(\"myEnvVarJobOverride\", EnvironmentVariableJobOverrideArgs.builder()\n            .name(dbtMyEnvVar.name())\n            .projectId(dbtProject.id())\n            .jobDefinitionId(dailyJob.id())\n            .rawValue(\"my_override_value\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myEnvVarJobOverride:\n    type: dbtcloud:EnvironmentVariableJobOverride\n    name: my_env_var_job_override\n    properties:\n      name: ${dbtMyEnvVar.name}\n      projectId: ${dbtProject.id}\n      jobDefinitionId: ${dailyJob.id}\n      rawValue: my_override_value\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_environment_variable_job_override.test_environment_variable_job_override\n\n  id = \"project_id:job_id:environment_variable_override_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_environment_variable_job_override.test_environment_variable_job_override\n\n  id = \"12345:678:123456\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/environmentVariableJobOverride:EnvironmentVariableJobOverride test_environment_variable_job_override \"project_id:job_id:environment_variable_override_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/environmentVariableJobOverride:EnvironmentVariableJobOverride test_environment_variable_job_override 12345:678:123456\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account id\n"
                },
                "environmentVariableJobOverrideId": {
                    "type": "integer",
                    "description": "The internal ID of this resource. Contains the project ID and the environment variable job override ID.\n"
                },
                "jobDefinitionId": {
                    "type": "integer",
                    "description": "The job ID for which the environment variable is being overridden\n"
                },
                "name": {
                    "type": "string",
                    "description": "The environment variable name to override\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the environment variable job override in\n"
                },
                "rawValue": {
                    "type": "string",
                    "description": "The value for the override of the environment variable\n"
                }
            },
            "required": [
                "accountId",
                "environmentVariableJobOverrideId",
                "jobDefinitionId",
                "name",
                "projectId",
                "rawValue"
            ],
            "inputProperties": {
                "jobDefinitionId": {
                    "type": "integer",
                    "description": "The job ID for which the environment variable is being overridden\n"
                },
                "name": {
                    "type": "string",
                    "description": "The environment variable name to override\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the environment variable job override in\n"
                },
                "rawValue": {
                    "type": "string",
                    "description": "The value for the override of the environment variable\n"
                }
            },
            "requiredInputs": [
                "jobDefinitionId",
                "projectId",
                "rawValue"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EnvironmentVariableJobOverride resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The account id\n"
                    },
                    "environmentVariableJobOverrideId": {
                        "type": "integer",
                        "description": "The internal ID of this resource. Contains the project ID and the environment variable job override ID.\n"
                    },
                    "jobDefinitionId": {
                        "type": "integer",
                        "description": "The job ID for which the environment variable is being overridden\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The environment variable name to override\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the environment variable job override in\n"
                    },
                    "rawValue": {
                        "type": "string",
                        "description": "The value for the override of the environment variable\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/extendedAttributes:ExtendedAttributes": {
            "description": "Extended attributes resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\n// extended_attributes can be set as a raw JSON string or encoded with Terraform's `jsonencode()` function\n// we recommend using `jsonencode()` to avoid Terraform reporting changes due to whitespaces or keys ordering\nconst myAttributes = new dbtcloud.ExtendedAttributes(\"my_attributes\", {\n    extendedAttributes: JSON.stringify({\n        type: \"databricks\",\n        catalog: \"dbt_catalog\",\n        http_path: \"/sql/your/http/path\",\n        my_nested_field: {\n            subfield: \"my_value\",\n        },\n    }),\n    projectId: dbtProject.id,\n});\nconst issueDepl = new dbtcloud.Environment(\"issue_depl\", {\n    dbtVersion: \"latest\",\n    name: \"My environment\",\n    projectId: dbtProject.id,\n    type: \"deployment\",\n    useCustomBranch: false,\n    credentialId: dbtCredentialId,\n    deploymentType: \"production\",\n    extendedAttributesId: myAttributes.extendedAttributesId,\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_dbtcloud as dbtcloud\n\n# extended_attributes can be set as a raw JSON string or encoded with Terraform's `jsonencode()` function\n# we recommend using `jsonencode()` to avoid Terraform reporting changes due to whitespaces or keys ordering\nmy_attributes = dbtcloud.ExtendedAttributes(\"my_attributes\",\n    extended_attributes=json.dumps({\n        \"type\": \"databricks\",\n        \"catalog\": \"dbt_catalog\",\n        \"http_path\": \"/sql/your/http/path\",\n        \"my_nested_field\": {\n            \"subfield\": \"my_value\",\n        },\n    }),\n    project_id=dbt_project[\"id\"])\nissue_depl = dbtcloud.Environment(\"issue_depl\",\n    dbt_version=\"latest\",\n    name=\"My environment\",\n    project_id=dbt_project[\"id\"],\n    type=\"deployment\",\n    use_custom_branch=False,\n    credential_id=dbt_credential_id,\n    deployment_type=\"production\",\n    extended_attributes_id=my_attributes.extended_attributes_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // extended_attributes can be set as a raw JSON string or encoded with Terraform's `jsonencode()` function\n    // we recommend using `jsonencode()` to avoid Terraform reporting changes due to whitespaces or keys ordering\n    var myAttributes = new DbtCloud.ExtendedAttributesDetails(\"my_attributes\", new()\n    {\n        ExtendedAttributes = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"databricks\",\n            [\"catalog\"] = \"dbt_catalog\",\n            [\"http_path\"] = \"/sql/your/http/path\",\n            [\"my_nested_field\"] = new Dictionary\u003cstring, object?\u003e\n            {\n                [\"subfield\"] = \"my_value\",\n            },\n        }),\n        ProjectId = dbtProject.Id,\n    });\n\n    var issueDepl = new DbtCloud.Environment(\"issue_depl\", new()\n    {\n        DbtVersion = \"latest\",\n        Name = \"My environment\",\n        ProjectId = dbtProject.Id,\n        Type = \"deployment\",\n        UseCustomBranch = false,\n        CredentialId = dbtCredentialId,\n        DeploymentType = \"production\",\n        ExtendedAttributesId = myAttributes.ExtendedAttributesId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\":      \"databricks\",\n\t\t\t\"catalog\":   \"dbt_catalog\",\n\t\t\t\"http_path\": \"/sql/your/http/path\",\n\t\t\t\"my_nested_field\": map[string]interface{}{\n\t\t\t\t\"subfield\": \"my_value\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t// extended_attributes can be set as a raw JSON string or encoded with Terraform's `jsonencode()` function\n\t\t// we recommend using `jsonencode()` to avoid Terraform reporting changes due to whitespaces or keys ordering\n\t\tmyAttributes, err := dbtcloud.NewExtendedAttributes(ctx, \"my_attributes\", \u0026dbtcloud.ExtendedAttributesArgs{\n\t\t\tExtendedAttributes: pulumi.String(json0),\n\t\t\tProjectId:          pulumi.Any(dbtProject.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = dbtcloud.NewEnvironment(ctx, \"issue_depl\", \u0026dbtcloud.EnvironmentArgs{\n\t\t\tDbtVersion:           pulumi.String(\"latest\"),\n\t\t\tName:                 pulumi.String(\"My environment\"),\n\t\t\tProjectId:            pulumi.Any(dbtProject.Id),\n\t\t\tType:                 pulumi.String(\"deployment\"),\n\t\t\tUseCustomBranch:      pulumi.Bool(false),\n\t\t\tCredentialId:         pulumi.Any(dbtCredentialId),\n\t\t\tDeploymentType:       pulumi.String(\"production\"),\n\t\t\tExtendedAttributesId: myAttributes.ExtendedAttributesId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.ExtendedAttributes;\nimport com.pulumi.dbtcloud.ExtendedAttributesArgs;\nimport com.pulumi.dbtcloud.Environment;\nimport com.pulumi.dbtcloud.EnvironmentArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // extended_attributes can be set as a raw JSON string or encoded with Terraform's `jsonencode()` function\n        // we recommend using `jsonencode()` to avoid Terraform reporting changes due to whitespaces or keys ordering\n        var myAttributes = new ExtendedAttributes(\"myAttributes\", ExtendedAttributesArgs.builder()\n            .extendedAttributes(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"databricks\"),\n                    jsonProperty(\"catalog\", \"dbt_catalog\"),\n                    jsonProperty(\"http_path\", \"/sql/your/http/path\"),\n                    jsonProperty(\"my_nested_field\", jsonObject(\n                        jsonProperty(\"subfield\", \"my_value\")\n                    ))\n                )))\n            .projectId(dbtProject.id())\n            .build());\n\n        var issueDepl = new Environment(\"issueDepl\", EnvironmentArgs.builder()\n            .dbtVersion(\"latest\")\n            .name(\"My environment\")\n            .projectId(dbtProject.id())\n            .type(\"deployment\")\n            .useCustomBranch(false)\n            .credentialId(dbtCredentialId)\n            .deploymentType(\"production\")\n            .extendedAttributesId(myAttributes.extendedAttributesId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # extended_attributes can be set as a raw JSON string or encoded with Terraform's `jsonencode()` function\n  # we recommend using `jsonencode()` to avoid Terraform reporting changes due to whitespaces or keys ordering\n  myAttributes:\n    type: dbtcloud:ExtendedAttributes\n    name: my_attributes\n    properties:\n      extendedAttributes:\n        fn::toJSON:\n          type: databricks\n          catalog: dbt_catalog\n          http_path: /sql/your/http/path\n          my_nested_field:\n            subfield: my_value\n      projectId: ${dbtProject.id}\n  issueDepl:\n    type: dbtcloud:Environment\n    name: issue_depl\n    properties:\n      dbtVersion: latest\n      name: My environment\n      projectId: ${dbtProject.id}\n      type: deployment\n      useCustomBranch: false\n      credentialId: ${dbtCredentialId}\n      deploymentType: production\n      extendedAttributesId: ${myAttributes.extendedAttributesId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_extended_attributes.test_extended_attributes\n\n  id = \"project_id_id:extended_attributes_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_extended_attributes.test_extended_attributes\n\n  id = \"12345:6789\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/extendedAttributes:ExtendedAttributes test_extended_attributes \"project_id_id:extended_attributes_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/extendedAttributes:ExtendedAttributes test_extended_attributes 12345:6789\n```\n\n",
            "properties": {
                "extendedAttributes": {
                    "type": "string"
                },
                "extendedAttributesId": {
                    "type": "integer",
                    "description": "Extended attributes ID\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the extended attributes in\n"
                },
                "state": {
                    "type": "integer",
                    "description": "The state of the extended attributes (1 = active, 2 = inactive)\n"
                }
            },
            "required": [
                "extendedAttributes",
                "extendedAttributesId",
                "projectId",
                "state"
            ],
            "language": {
                "csharp": {
                    "name": "ExtendedAttributesDetails"
                }
            },
            "inputProperties": {
                "extendedAttributes": {
                    "type": "string"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the extended attributes in\n"
                },
                "state": {
                    "type": "integer",
                    "description": "The state of the extended attributes (1 = active, 2 = inactive)\n"
                }
            },
            "requiredInputs": [
                "extendedAttributes",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExtendedAttributes resources.\n",
                "properties": {
                    "extendedAttributes": {
                        "type": "string"
                    },
                    "extendedAttributesId": {
                        "type": "integer",
                        "description": "Extended attributes ID\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the extended attributes in\n"
                    },
                    "state": {
                        "type": "integer",
                        "description": "The state of the extended attributes (1 = active, 2 = inactive)\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/fabricCredential:FabricCredential": {
            "description": "Fabric credential resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\n// when using AD authentication\nconst myFabricCredAd = new dbtcloud.FabricCredential(\"my_fabric_cred_ad\", {\n    projectId: dbtProject.id,\n    schema: \"my_schema\",\n    user: \"my_user\",\n    password: \"my_password\",\n    schemaAuthorization: \"abcd\",\n});\n// when using service principal authentication\nconst myFabricCredServPrinc = new dbtcloud.FabricCredential(\"my_fabric_cred_serv_princ\", {\n    projectId: dbtProject.id,\n    schema: \"my_schema\",\n    clientId: \"my_client_id\",\n    tenantId: \"my_tenant_id\",\n    clientSecret: \"my_secret\",\n    schemaAuthorization: \"abcd\",\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\n# when using AD authentication\nmy_fabric_cred_ad = dbtcloud.FabricCredential(\"my_fabric_cred_ad\",\n    project_id=dbt_project[\"id\"],\n    schema=\"my_schema\",\n    user=\"my_user\",\n    password=\"my_password\",\n    schema_authorization=\"abcd\")\n# when using service principal authentication\nmy_fabric_cred_serv_princ = dbtcloud.FabricCredential(\"my_fabric_cred_serv_princ\",\n    project_id=dbt_project[\"id\"],\n    schema=\"my_schema\",\n    client_id=\"my_client_id\",\n    tenant_id=\"my_tenant_id\",\n    client_secret=\"my_secret\",\n    schema_authorization=\"abcd\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // when using AD authentication\n    var myFabricCredAd = new DbtCloud.FabricCredential(\"my_fabric_cred_ad\", new()\n    {\n        ProjectId = dbtProject.Id,\n        Schema = \"my_schema\",\n        User = \"my_user\",\n        Password = \"my_password\",\n        SchemaAuthorization = \"abcd\",\n    });\n\n    // when using service principal authentication\n    var myFabricCredServPrinc = new DbtCloud.FabricCredential(\"my_fabric_cred_serv_princ\", new()\n    {\n        ProjectId = dbtProject.Id,\n        Schema = \"my_schema\",\n        ClientId = \"my_client_id\",\n        TenantId = \"my_tenant_id\",\n        ClientSecret = \"my_secret\",\n        SchemaAuthorization = \"abcd\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// when using AD authentication\n\t\t_, err := dbtcloud.NewFabricCredential(ctx, \"my_fabric_cred_ad\", \u0026dbtcloud.FabricCredentialArgs{\n\t\t\tProjectId:           pulumi.Any(dbtProject.Id),\n\t\t\tSchema:              pulumi.String(\"my_schema\"),\n\t\t\tUser:                pulumi.String(\"my_user\"),\n\t\t\tPassword:            pulumi.String(\"my_password\"),\n\t\t\tSchemaAuthorization: pulumi.String(\"abcd\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// when using service principal authentication\n\t\t_, err = dbtcloud.NewFabricCredential(ctx, \"my_fabric_cred_serv_princ\", \u0026dbtcloud.FabricCredentialArgs{\n\t\t\tProjectId:           pulumi.Any(dbtProject.Id),\n\t\t\tSchema:              pulumi.String(\"my_schema\"),\n\t\t\tClientId:            pulumi.String(\"my_client_id\"),\n\t\t\tTenantId:            pulumi.String(\"my_tenant_id\"),\n\t\t\tClientSecret:        pulumi.String(\"my_secret\"),\n\t\t\tSchemaAuthorization: pulumi.String(\"abcd\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.FabricCredential;\nimport com.pulumi.dbtcloud.FabricCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // when using AD authentication\n        var myFabricCredAd = new FabricCredential(\"myFabricCredAd\", FabricCredentialArgs.builder()\n            .projectId(dbtProject.id())\n            .schema(\"my_schema\")\n            .user(\"my_user\")\n            .password(\"my_password\")\n            .schemaAuthorization(\"abcd\")\n            .build());\n\n        // when using service principal authentication\n        var myFabricCredServPrinc = new FabricCredential(\"myFabricCredServPrinc\", FabricCredentialArgs.builder()\n            .projectId(dbtProject.id())\n            .schema(\"my_schema\")\n            .clientId(\"my_client_id\")\n            .tenantId(\"my_tenant_id\")\n            .clientSecret(\"my_secret\")\n            .schemaAuthorization(\"abcd\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # when using AD authentication\n  myFabricCredAd:\n    type: dbtcloud:FabricCredential\n    name: my_fabric_cred_ad\n    properties:\n      projectId: ${dbtProject.id}\n      schema: my_schema\n      user: my_user\n      password: my_password\n      schemaAuthorization: abcd\n  # when using service principal authentication\n  myFabricCredServPrinc:\n    type: dbtcloud:FabricCredential\n    name: my_fabric_cred_serv_princ\n    properties:\n      projectId: ${dbtProject.id}\n      schema: my_schema\n      clientId: my_client_id\n      tenantId: my_tenant_id\n      clientSecret: my_secret\n      schemaAuthorization: abcd\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_fabric_credential.my_fabric_credential\n\n  id = \"project_id:credential_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_fabric_credential.my_fabric_credential\n\n  id = \"12345:6789\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/fabricCredential:FabricCredential my_fabric_credential \"project_id:credential_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/fabricCredential:FabricCredential my_fabric_credential 12345:6789\n```\n\n",
            "properties": {
                "adapterType": {
                    "type": "string",
                    "description": "The type of the adapter (fabric)\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.\n",
                    "secret": true
                },
                "credentialId": {
                    "type": "integer",
                    "description": "The internal credential ID\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the account to connect to. Only used when connection with AD user/pass\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Fabric credential in\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where to create the dbt models\n"
                },
                "schemaAuthorization": {
                    "type": "string",
                    "description": "Optionally set this to the principal who should own the schemas created by dbt\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username of the Fabric account to connect to. Only used when connection with AD user/pass\n"
                }
            },
            "required": [
                "adapterType",
                "clientId",
                "clientSecret",
                "credentialId",
                "password",
                "projectId",
                "schema",
                "schemaAuthorization",
                "tenantId",
                "user"
            ],
            "inputProperties": {
                "adapterType": {
                    "type": "string",
                    "description": "The type of the adapter (fabric)\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.\n",
                    "secret": true
                },
                "password": {
                    "type": "string",
                    "description": "The password for the account to connect to. Only used when connection with AD user/pass\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Fabric credential in\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where to create the dbt models\n"
                },
                "schemaAuthorization": {
                    "type": "string",
                    "description": "Optionally set this to the principal who should own the schemas created by dbt\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username of the Fabric account to connect to. Only used when connection with AD user/pass\n"
                }
            },
            "requiredInputs": [
                "adapterType",
                "projectId",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FabricCredential resources.\n",
                "properties": {
                    "adapterType": {
                        "type": "string",
                        "description": "The type of the adapter (fabric)\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.\n",
                        "secret": true
                    },
                    "credentialId": {
                        "type": "integer",
                        "description": "The internal credential ID\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for the account to connect to. Only used when connection with AD user/pass\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the Fabric credential in\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema where to create the dbt models\n"
                    },
                    "schemaAuthorization": {
                        "type": "string",
                        "description": "Optionally set this to the principal who should own the schemas created by dbt\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "The username of the Fabric account to connect to. Only used when connection with AD user/pass\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/globalConnection:GlobalConnection": {
            "description": "This resource can be used to create global connections as introduced in dbt Cloud in August 2024.\n\nThose connections are not linked to a specific project and can be linked to environments from different projects by using the `connection_id` field in the `dbtcloud.Environment` resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  apacheSpark:\n    type: dbtcloud:GlobalConnection\n    name: apache_spark\n    properties:\n      name: My Apache Spark connection\n      apacheSpark:\n        method: http\n        host: my-spark-host.com\n        cluster: my-cluster\n        connect_timeout: 100\n  athena:\n    type: dbtcloud:GlobalConnection\n    properties:\n      name: My Athena connection\n      athena:\n        region_name: us-east-1\n        database: mydatabase\n        s3_staging_dir: my_dir\n        work_group: my_work_group\n  bigquery:\n    type: dbtcloud:GlobalConnection\n    properties:\n      name: My BigQuery connection\n      bigquery:\n        gcp_project_id: my-gcp-project-id\n        timeout_seconds: 1000\n        private_key_id: my-private-key-id\n        private_key: ABCDEFGHIJKL\n        client_email: my_client_email\n        client_id: my_client_id\n        auth_uri: my_auth_uri\n        token_uri: my_token_uri\n        auth_provider_x509_cert_url: my_auth_provider_x509_cert_url\n        client_x509_cert_url: my_client_x509_cert_url\n        application_id: oauth_application_id\n        application_secret: oauth_secret_id\n  databricks:\n    type: dbtcloud:GlobalConnection\n    properties:\n      name: My Databricks connection\n      databricks:\n        host: my-databricks-host.cloud.databricks.com\n        http_path: /sql/my/http/path\n        catalog: dbt_catalog\n        client_id: yourclientid\n        client_secret: yourclientsecret\n  fabric:\n    type: dbtcloud:GlobalConnection\n    properties:\n      name: My Fabric connection\n      fabric:\n        server: my-fabric-server.com\n        database: mydb\n        port: 1234\n        retries: 3\n        login_timeout: 60\n        query_timeout: 3600\n  postgres:\n    type: dbtcloud:GlobalConnection\n    properties:\n      name: My PostgreSQL connection\n      postgres:\n        hostname: my-postgresql-server.com\n        port: 5432\n        dbname: my_database\n  redshift:\n    type: dbtcloud:GlobalConnection\n    properties:\n      name: My Redshift connection\n      redshift:\n        hostname: my-redshift-connection.com\n        port: 5432\n        dbname: my_database\n  snowflake:\n    type: dbtcloud:GlobalConnection\n    properties:\n      name: My Snowflake connection\n      privateLinkEndpointId: ${myPrivateLink.id}\n      snowflake:\n        account: my-snowflake-account\n        database: MY_DATABASE\n        warehouse: MY_WAREHOUSE\n        client_session_keep_alive: false\n        allow_sso: true\n        oauth_client_id: yourclientid\n        oauth_client_secret: yourclientsecret\n  starburst:\n    type: dbtcloud:GlobalConnection\n    properties:\n      name: My Starburst connection\n      starburst:\n        host: my-starburst-host.com\n        database: mydb\n  synapse:\n    type: dbtcloud:GlobalConnection\n    properties:\n      name: My Synapse connection\n      synapse:\n        host: my-synapse-server.com\n        database: mydb\n        port: 1234\n        retries: 3\n        login_timeout: 60\n        query_timeout: 3600\n  teradata:\n    type: dbtcloud:GlobalConnection\n    properties:\n      name: My Teradata connection\n      teradata:\n        host: my-teradata-server.com\n        tmode: ANSI\n        port: '1234'\n        request_timeout: 600\n        retries: 3\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nA project-scoped connection can be imported as a global connection by specifying the connection ID\n\nMigrating from project-scoped connections to global connections could be done by:\n\n1. Adding the config for the global connection and importing it (see below)\n\n2. Removing the project-scoped connection from the config AND from the state\n\n   - CAREFUL: If the connection is removed from the config but not the state, it will be destroyed on the next apply\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_global_connection.my_connection\n\n  id = \"connection_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_global_connection.my_connection\n\n  id = \"1234\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/globalConnection:GlobalConnection my_connection \"connection_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/globalConnection:GlobalConnection my_connection 1234\n```\n\n",
            "properties": {
                "adapterVersion": {
                    "type": "string",
                    "description": "Version of the adapter\n"
                },
                "apacheSpark": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionApacheSpark:GlobalConnectionApacheSpark",
                    "description": "Apache Spark connection configuration.\n"
                },
                "athena": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionAthena:GlobalConnectionAthena",
                    "description": "Athena connection configuration.\n"
                },
                "bigquery": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionBigquery:GlobalConnectionBigquery"
                },
                "databricks": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionDatabricks:GlobalConnectionDatabricks",
                    "description": "Databricks connection configuration\n"
                },
                "fabric": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionFabric:GlobalConnectionFabric",
                    "description": "Microsoft Fabric connection configuration.\n"
                },
                "isSshTunnelEnabled": {
                    "type": "boolean",
                    "description": "Whether the connection can use an SSH tunnel\n"
                },
                "name": {
                    "type": "string",
                    "description": "Connection name\n"
                },
                "oauthConfigurationId": {
                    "type": "integer",
                    "description": "External OAuth configuration ID (only Snowflake for now)\n"
                },
                "postgres": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionPostgres:GlobalConnectionPostgres",
                    "description": "PostgreSQL connection configuration.\n"
                },
                "privateLinkEndpointId": {
                    "type": "string",
                    "description": "Private Link Endpoint ID. This ID can be found using the `privatelink_endpoint` data source\n"
                },
                "redshift": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionRedshift:GlobalConnectionRedshift",
                    "description": "Redshift connection configuration\n"
                },
                "snowflake": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionSnowflake:GlobalConnectionSnowflake",
                    "description": "Snowflake connection configuration\n"
                },
                "starburst": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionStarburst:GlobalConnectionStarburst",
                    "description": "Starburst/Trino connection configuration.\n"
                },
                "synapse": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionSynapse:GlobalConnectionSynapse",
                    "description": "Azure Synapse Analytics connection configuration.\n"
                },
                "teradata": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionTeradata:GlobalConnectionTeradata",
                    "description": "Teradata connection configuration.\n"
                }
            },
            "required": [
                "adapterVersion",
                "isSshTunnelEnabled",
                "name"
            ],
            "inputProperties": {
                "apacheSpark": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionApacheSpark:GlobalConnectionApacheSpark",
                    "description": "Apache Spark connection configuration.\n"
                },
                "athena": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionAthena:GlobalConnectionAthena",
                    "description": "Athena connection configuration.\n"
                },
                "bigquery": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionBigquery:GlobalConnectionBigquery"
                },
                "databricks": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionDatabricks:GlobalConnectionDatabricks",
                    "description": "Databricks connection configuration\n"
                },
                "fabric": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionFabric:GlobalConnectionFabric",
                    "description": "Microsoft Fabric connection configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Connection name\n"
                },
                "oauthConfigurationId": {
                    "type": "integer",
                    "description": "External OAuth configuration ID (only Snowflake for now)\n"
                },
                "postgres": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionPostgres:GlobalConnectionPostgres",
                    "description": "PostgreSQL connection configuration.\n"
                },
                "privateLinkEndpointId": {
                    "type": "string",
                    "description": "Private Link Endpoint ID. This ID can be found using the `privatelink_endpoint` data source\n"
                },
                "redshift": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionRedshift:GlobalConnectionRedshift",
                    "description": "Redshift connection configuration\n"
                },
                "snowflake": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionSnowflake:GlobalConnectionSnowflake",
                    "description": "Snowflake connection configuration\n"
                },
                "starburst": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionStarburst:GlobalConnectionStarburst",
                    "description": "Starburst/Trino connection configuration.\n"
                },
                "synapse": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionSynapse:GlobalConnectionSynapse",
                    "description": "Azure Synapse Analytics connection configuration.\n"
                },
                "teradata": {
                    "$ref": "#/types/dbtcloud:index/GlobalConnectionTeradata:GlobalConnectionTeradata",
                    "description": "Teradata connection configuration.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GlobalConnection resources.\n",
                "properties": {
                    "adapterVersion": {
                        "type": "string",
                        "description": "Version of the adapter\n"
                    },
                    "apacheSpark": {
                        "$ref": "#/types/dbtcloud:index/GlobalConnectionApacheSpark:GlobalConnectionApacheSpark",
                        "description": "Apache Spark connection configuration.\n"
                    },
                    "athena": {
                        "$ref": "#/types/dbtcloud:index/GlobalConnectionAthena:GlobalConnectionAthena",
                        "description": "Athena connection configuration.\n"
                    },
                    "bigquery": {
                        "$ref": "#/types/dbtcloud:index/GlobalConnectionBigquery:GlobalConnectionBigquery"
                    },
                    "databricks": {
                        "$ref": "#/types/dbtcloud:index/GlobalConnectionDatabricks:GlobalConnectionDatabricks",
                        "description": "Databricks connection configuration\n"
                    },
                    "fabric": {
                        "$ref": "#/types/dbtcloud:index/GlobalConnectionFabric:GlobalConnectionFabric",
                        "description": "Microsoft Fabric connection configuration.\n"
                    },
                    "isSshTunnelEnabled": {
                        "type": "boolean",
                        "description": "Whether the connection can use an SSH tunnel\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Connection name\n"
                    },
                    "oauthConfigurationId": {
                        "type": "integer",
                        "description": "External OAuth configuration ID (only Snowflake for now)\n"
                    },
                    "postgres": {
                        "$ref": "#/types/dbtcloud:index/GlobalConnectionPostgres:GlobalConnectionPostgres",
                        "description": "PostgreSQL connection configuration.\n"
                    },
                    "privateLinkEndpointId": {
                        "type": "string",
                        "description": "Private Link Endpoint ID. This ID can be found using the `privatelink_endpoint` data source\n"
                    },
                    "redshift": {
                        "$ref": "#/types/dbtcloud:index/GlobalConnectionRedshift:GlobalConnectionRedshift",
                        "description": "Redshift connection configuration\n"
                    },
                    "snowflake": {
                        "$ref": "#/types/dbtcloud:index/GlobalConnectionSnowflake:GlobalConnectionSnowflake",
                        "description": "Snowflake connection configuration\n"
                    },
                    "starburst": {
                        "$ref": "#/types/dbtcloud:index/GlobalConnectionStarburst:GlobalConnectionStarburst",
                        "description": "Starburst/Trino connection configuration.\n"
                    },
                    "synapse": {
                        "$ref": "#/types/dbtcloud:index/GlobalConnectionSynapse:GlobalConnectionSynapse",
                        "description": "Azure Synapse Analytics connection configuration.\n"
                    },
                    "teradata": {
                        "$ref": "#/types/dbtcloud:index/GlobalConnectionTeradata:GlobalConnectionTeradata",
                        "description": "Teradata connection configuration.\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/group:Group": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst tfGroup1 = new dbtcloud.Group(\"tf_group_1\", {\n    name: \"TF Group 1\",\n    groupPermissions: [\n        {\n            permissionSet: \"member\",\n            allProjects: true,\n        },\n        {\n            permissionSet: \"developer\",\n            allProjects: false,\n            projectId: dbtProject.id,\n            writableEnvironmentCategories: [\n                \"development\",\n                \"staging\",\n            ],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\ntf_group1 = dbtcloud.Group(\"tf_group_1\",\n    name=\"TF Group 1\",\n    group_permissions=[\n        {\n            \"permission_set\": \"member\",\n            \"all_projects\": True,\n        },\n        {\n            \"permission_set\": \"developer\",\n            \"all_projects\": False,\n            \"project_id\": dbt_project[\"id\"],\n            \"writable_environment_categories\": [\n                \"development\",\n                \"staging\",\n            ],\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tfGroup1 = new DbtCloud.Group(\"tf_group_1\", new()\n    {\n        Name = \"TF Group 1\",\n        GroupPermissions = new[]\n        {\n            new DbtCloud.Inputs.GroupGroupPermissionArgs\n            {\n                PermissionSet = \"member\",\n                AllProjects = true,\n            },\n            new DbtCloud.Inputs.GroupGroupPermissionArgs\n            {\n                PermissionSet = \"developer\",\n                AllProjects = false,\n                ProjectId = dbtProject.Id,\n                WritableEnvironmentCategories = new[]\n                {\n                    \"development\",\n                    \"staging\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewGroup(ctx, \"tf_group_1\", \u0026dbtcloud.GroupArgs{\n\t\t\tName: pulumi.String(\"TF Group 1\"),\n\t\t\tGroupPermissions: dbtcloud.GroupGroupPermissionArray{\n\t\t\t\t\u0026dbtcloud.GroupGroupPermissionArgs{\n\t\t\t\t\tPermissionSet: pulumi.String(\"member\"),\n\t\t\t\t\tAllProjects:   pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026dbtcloud.GroupGroupPermissionArgs{\n\t\t\t\t\tPermissionSet: pulumi.String(\"developer\"),\n\t\t\t\t\tAllProjects:   pulumi.Bool(false),\n\t\t\t\t\tProjectId:     pulumi.Any(dbtProject.Id),\n\t\t\t\t\tWritableEnvironmentCategories: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"development\"),\n\t\t\t\t\t\tpulumi.String(\"staging\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.Group;\nimport com.pulumi.dbtcloud.GroupArgs;\nimport com.pulumi.dbtcloud.inputs.GroupGroupPermissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tfGroup1 = new Group(\"tfGroup1\", GroupArgs.builder()\n            .name(\"TF Group 1\")\n            .groupPermissions(            \n                GroupGroupPermissionArgs.builder()\n                    .permissionSet(\"member\")\n                    .allProjects(true)\n                    .build(),\n                GroupGroupPermissionArgs.builder()\n                    .permissionSet(\"developer\")\n                    .allProjects(false)\n                    .projectId(dbtProject.id())\n                    .writableEnvironmentCategories(                    \n                        \"development\",\n                        \"staging\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tfGroup1:\n    type: dbtcloud:Group\n    name: tf_group_1\n    properties:\n      name: TF Group 1\n      groupPermissions:\n        - permissionSet: member\n          allProjects: true\n        - permissionSet: developer\n          allProjects: false\n          projectId: ${dbtProject.id}\n          writableEnvironmentCategories:\n            - development\n            - staging\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_group.my_group\n\n  id = \"group_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_group.my_group\n\n  id = \"12345\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/group:Group my_group \"group_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/group:Group my_group 12345\n```\n\n",
            "properties": {
                "assignByDefault": {
                    "type": "boolean",
                    "description": "Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.\n"
                },
                "groupPermissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dbtcloud:index/GroupGroupPermission:GroupGroupPermission"
                    },
                    "description": "Partial permissions for the group. Those permissions will be added/removed when config is added/removed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group. This is used to identify an existing group\n"
                },
                "ssoMappingGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.\n"
                }
            },
            "required": [
                "assignByDefault",
                "name",
                "ssoMappingGroups"
            ],
            "inputProperties": {
                "assignByDefault": {
                    "type": "boolean",
                    "description": "Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.\n"
                },
                "groupPermissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dbtcloud:index/GroupGroupPermission:GroupGroupPermission"
                    },
                    "description": "Partial permissions for the group. Those permissions will be added/removed when config is added/removed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group. This is used to identify an existing group\n"
                },
                "ssoMappingGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "assignByDefault": {
                        "type": "boolean",
                        "description": "Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.\n"
                    },
                    "groupPermissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/GroupGroupPermission:GroupGroupPermission"
                        },
                        "description": "Partial permissions for the group. Those permissions will be added/removed when config is added/removed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the group. This is used to identify an existing group\n"
                    },
                    "ssoMappingGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/groupPartialPermissions:GroupPartialPermissions": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  # we add some permissions to the group \"TF Group 1\" (existing or not) to  a new project\n  tfGroup1:\n    type: dbtcloud:GroupPartialPermissions\n    name: tf_group_1\n    properties:\n      name: TF Group 1\n      groupPermissions:\n        - permission_set: developer\n          project_id: ${dbtProject.id}\n          all_projects: false\n          writable_environment_categories:\n            - development\n            - staging\n        - permission_set: git_admin\n          project_id: ${dbtProject.id}\n          all_projects: false\n  # we add Admin permissions to the group \"TF Group 2\" (existing or not) to  a new project \n  # // it is possible to add more permissions to the same group name in other Terraform projects/workspaces, using another `dbtcloud_group_partial_permissions` resource\n  tfGroup2:\n    type: dbtcloud:GroupPartialPermissions\n    name: tf_group_2\n    properties:\n      name: TF Group 2\n      ssoMappingGroups:\n        - group2\n      groupPermissions:\n        - permission_set: admin\n          project_id: ${dbtProject.id}\n          all_projects: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "assignByDefault": {
                    "type": "boolean",
                    "description": "Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.\n"
                },
                "groupPermissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dbtcloud:index/GroupPartialPermissionsGroupPermission:GroupPartialPermissionsGroupPermission"
                    },
                    "description": "Partial permissions for the group. Those permissions will be added/removed when config is added/removed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group. This is used to identify an existing group\n"
                },
                "ssoMappingGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.\n"
                }
            },
            "required": [
                "assignByDefault",
                "name",
                "ssoMappingGroups"
            ],
            "inputProperties": {
                "assignByDefault": {
                    "type": "boolean",
                    "description": "Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.\n"
                },
                "groupPermissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dbtcloud:index/GroupPartialPermissionsGroupPermission:GroupPartialPermissionsGroupPermission"
                    },
                    "description": "Partial permissions for the group. Those permissions will be added/removed when config is added/removed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group. This is used to identify an existing group\n"
                },
                "ssoMappingGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupPartialPermissions resources.\n",
                "properties": {
                    "assignByDefault": {
                        "type": "boolean",
                        "description": "Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.\n"
                    },
                    "groupPermissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/GroupPartialPermissionsGroupPermission:GroupPartialPermissionsGroupPermission"
                        },
                        "description": "Partial permissions for the group. Those permissions will be added/removed when config is added/removed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the group. This is used to identify an existing group\n"
                    },
                    "ssoMappingGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Mapping groups from the IdP. At the moment the complete list needs to be provided in each partial permission for the same group.\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/ipRestrictionsRule:IpRestrictionsRule": {
            "description": "Manages IP restriction rules in dbt Cloud. IP restriction rules allow you to control access to your dbt Cloud instance based on IP address ranges.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst test = new dbtcloud.IpRestrictionsRule(\"test\", {\n    name: \"My restriction rule\",\n    description: \"Important description\",\n    cidrs: [\n        {\n            cidr: \"::ffff:106:708\",\n        },\n        {\n            cidr: \"1.6.7.10/24\",\n        },\n    ],\n    type: \"deny\",\n    ruleSetEnabled: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\ntest = dbtcloud.IpRestrictionsRule(\"test\",\n    name=\"My restriction rule\",\n    description=\"Important description\",\n    cidrs=[\n        {\n            \"cidr\": \"::ffff:106:708\",\n        },\n        {\n            \"cidr\": \"1.6.7.10/24\",\n        },\n    ],\n    type=\"deny\",\n    rule_set_enabled=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new DbtCloud.IpRestrictionsRule(\"test\", new()\n    {\n        Name = \"My restriction rule\",\n        Description = \"Important description\",\n        Cidrs = new[]\n        {\n            new DbtCloud.Inputs.IpRestrictionsRuleCidrArgs\n            {\n                Cidr = \"::ffff:106:708\",\n            },\n            new DbtCloud.Inputs.IpRestrictionsRuleCidrArgs\n            {\n                Cidr = \"1.6.7.10/24\",\n            },\n        },\n        Type = \"deny\",\n        RuleSetEnabled = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewIpRestrictionsRule(ctx, \"test\", \u0026dbtcloud.IpRestrictionsRuleArgs{\n\t\t\tName:        pulumi.String(\"My restriction rule\"),\n\t\t\tDescription: pulumi.String(\"Important description\"),\n\t\t\tCidrs: dbtcloud.IpRestrictionsRuleCidrArray{\n\t\t\t\t\u0026dbtcloud.IpRestrictionsRuleCidrArgs{\n\t\t\t\t\tCidr: pulumi.String(\"::ffff:106:708\"),\n\t\t\t\t},\n\t\t\t\t\u0026dbtcloud.IpRestrictionsRuleCidrArgs{\n\t\t\t\t\tCidr: pulumi.String(\"1.6.7.10/24\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType:           pulumi.String(\"deny\"),\n\t\t\tRuleSetEnabled: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.IpRestrictionsRule;\nimport com.pulumi.dbtcloud.IpRestrictionsRuleArgs;\nimport com.pulumi.dbtcloud.inputs.IpRestrictionsRuleCidrArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new IpRestrictionsRule(\"test\", IpRestrictionsRuleArgs.builder()\n            .name(\"My restriction rule\")\n            .description(\"Important description\")\n            .cidrs(            \n                IpRestrictionsRuleCidrArgs.builder()\n                    .cidr(\"::ffff:106:708\")\n                    .build(),\n                IpRestrictionsRuleCidrArgs.builder()\n                    .cidr(\"1.6.7.10/24\")\n                    .build())\n            .type(\"deny\")\n            .ruleSetEnabled(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: dbtcloud:IpRestrictionsRule\n    properties:\n      name: My restriction rule\n      description: Important description\n      cidrs:\n        - cidr: ::ffff:106:708\n        - cidr: 1.6.7.10/24\n      type: deny\n      ruleSetEnabled: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_ip_restrictions_rule.my_rule\n\n  id = \"ip_restriction_rule_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_ip_restrictions_rule.my_rule\n\n  id = \"12345\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/ipRestrictionsRule:IpRestrictionsRule my_rule \"ip_restriction_rule_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/ipRestrictionsRule:IpRestrictionsRule my_rule 12345\n```\n\n",
            "properties": {
                "cidrs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dbtcloud:index/IpRestrictionsRuleCidr:IpRestrictionsRuleCidr"
                    },
                    "description": "Set of CIDR ranges for this rule\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the IP restriction rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IP restriction rule\n"
                },
                "ruleSetEnabled": {
                    "type": "boolean",
                    "description": "Whether the IP restriction rule set is enabled or not. Important!: This value needs to be the same for all rules if multiple rules are defined. All rules must be active or inactive at the same time.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the IP restriction rule (allow or deny)\n"
                }
            },
            "required": [
                "cidrs",
                "name",
                "ruleSetEnabled",
                "type"
            ],
            "inputProperties": {
                "cidrs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dbtcloud:index/IpRestrictionsRuleCidr:IpRestrictionsRuleCidr"
                    },
                    "description": "Set of CIDR ranges for this rule\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the IP restriction rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IP restriction rule\n"
                },
                "ruleSetEnabled": {
                    "type": "boolean",
                    "description": "Whether the IP restriction rule set is enabled or not. Important!: This value needs to be the same for all rules if multiple rules are defined. All rules must be active or inactive at the same time.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the IP restriction rule (allow or deny)\n"
                }
            },
            "requiredInputs": [
                "cidrs",
                "ruleSetEnabled",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpRestrictionsRule resources.\n",
                "properties": {
                    "cidrs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/IpRestrictionsRuleCidr:IpRestrictionsRuleCidr"
                        },
                        "description": "Set of CIDR ranges for this rule\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the IP restriction rule\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IP restriction rule\n"
                    },
                    "ruleSetEnabled": {
                        "type": "boolean",
                        "description": "Whether the IP restriction rule set is enabled or not. Important!: This value needs to be the same for all rules if multiple rules are defined. All rules must be active or inactive at the same time.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the IP restriction rule (allow or deny)\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/job:Job": {
            "description": "\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_job.my_job\n\n  id = \"job_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_job.my_job\n\n  id = \"12345\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/job:Job my_job \"job_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/job:Job my_job 12345\n```\n\n",
            "properties": {
                "compareChangesFlags": {
                    "type": "string",
                    "description": "The model selector for checking changes in the compare changes Advanced CI feature\n"
                },
                "dbtVersion": {
                    "type": "string",
                    "description": "Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions\n"
                },
                "deferringEnvironmentId": {
                    "type": "integer",
                    "description": "Environment identifier that this job defers to (new deferring approach)\n"
                },
                "deferringJobId": {
                    "type": "integer",
                    "description": "Job identifier that this job defers to (legacy deferring approach)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the job\n"
                },
                "environmentId": {
                    "type": "integer",
                    "description": "Environment ID to create the job in\n"
                },
                "errorsOnLintFailure": {
                    "type": "boolean",
                    "description": "Whether the CI job should fail when a lint error is found. Only used when `run_lint` is set to `true`. Defaults to `true`.\n"
                },
                "executeSteps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of commands to execute for the job\n"
                },
                "generateDocs": {
                    "type": "boolean",
                    "description": "Flag for whether the job should generate documentation\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Should always be set to true as setting it to false is the same as creating a job in a deleted state. To create/keep a job in a 'deactivated' state, check  the `triggers` config.\n"
                },
                "jobCompletionTriggerConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dbtcloud:index/JobJobCompletionTriggerCondition:JobJobCompletionTriggerCondition"
                    },
                    "description": "Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as 'job chaining').\n",
                    "language": {
                        "csharp": {
                            "name": "CompletionTriggerCondition"
                        }
                    }
                },
                "jobId": {
                    "type": "integer",
                    "description": "Job identifier\n"
                },
                "jobType": {
                    "type": "string",
                    "description": "Can be used to enforce the job type betwen `ci`, `merge` and `scheduled`. Without this value the job type is inferred from the triggers configured\n"
                },
                "name": {
                    "type": "string",
                    "description": "Job name\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use in the job\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the job in\n"
                },
                "runCompareChanges": {
                    "type": "boolean",
                    "description": "Whether the CI job should compare data changes introduced by the code changes. Requires `deferring_environment_id` to be set. (Advanced CI needs to be activated in the dbt Cloud Account Settings first as well)\n"
                },
                "runGenerateSources": {
                    "type": "boolean",
                    "description": "Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.\n"
                },
                "runLint": {
                    "type": "boolean",
                    "description": "Whether the CI job should lint SQL changes. Defaults to `false`.\n"
                },
                "scheduleCron": {
                    "type": "string",
                    "description": "Custom cron expression for schedule\n"
                },
                "scheduleDays": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule\n"
                },
                "scheduleHours": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of hours to execute the job at if running on a schedule\n"
                },
                "scheduleInterval": {
                    "type": "integer",
                    "description": "Number of hours between job executions if running on a schedule\n"
                },
                "scheduleType": {
                    "type": "string",
                    "description": "Type of schedule to use, one of every*day/ days*of*week/ custom*cron/ interval_cron\n"
                },
                "selfDeferring": {
                    "type": "boolean",
                    "description": "Whether this job defers on a previous run of itself\n"
                },
                "targetName": {
                    "type": "string",
                    "description": "Target name for the dbt profile\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "[Deprectated - Moved to execution.timeout_seconds] Number of seconds to allow the job to run before timing out\n",
                    "deprecationMessage": "Moved to execution.timeout_seconds"
                },
                "triggers": {
                    "$ref": "#/types/dbtcloud:index/JobTriggers:JobTriggers",
                    "description": "Flags for which types of triggers to use, the values are `github_webhook`, `git_provider_webhook`, `schedule` and `on_merge`. All flags should be listed and set with `true` or `false`. When `on_merge` is `true`, all the other values must be false.\\n\\n`custom_branch_only` used to be allowed but has been deprecated from the API. The jobs will use the custom branch of the environment. Please remove the `custom_branch_only` from your config. \\n\\nTo create a job in a 'deactivated' state, set all to `false`.\n"
                },
                "triggersOnDraftPr": {
                    "type": "boolean",
                    "description": "Whether the CI job should be automatically triggered on draft PRs\n"
                }
            },
            "required": [
                "compareChangesFlags",
                "description",
                "environmentId",
                "errorsOnLintFailure",
                "executeSteps",
                "generateDocs",
                "isActive",
                "jobId",
                "jobType",
                "name",
                "numThreads",
                "projectId",
                "runCompareChanges",
                "runGenerateSources",
                "runLint",
                "scheduleInterval",
                "scheduleType",
                "selfDeferring",
                "targetName",
                "timeoutSeconds",
                "triggers",
                "triggersOnDraftPr"
            ],
            "inputProperties": {
                "compareChangesFlags": {
                    "type": "string",
                    "description": "The model selector for checking changes in the compare changes Advanced CI feature\n"
                },
                "dbtVersion": {
                    "type": "string",
                    "description": "Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions\n"
                },
                "deferringEnvironmentId": {
                    "type": "integer",
                    "description": "Environment identifier that this job defers to (new deferring approach)\n"
                },
                "deferringJobId": {
                    "type": "integer",
                    "description": "Job identifier that this job defers to (legacy deferring approach)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the job\n"
                },
                "environmentId": {
                    "type": "integer",
                    "description": "Environment ID to create the job in\n"
                },
                "errorsOnLintFailure": {
                    "type": "boolean",
                    "description": "Whether the CI job should fail when a lint error is found. Only used when `run_lint` is set to `true`. Defaults to `true`.\n"
                },
                "executeSteps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of commands to execute for the job\n"
                },
                "generateDocs": {
                    "type": "boolean",
                    "description": "Flag for whether the job should generate documentation\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Should always be set to true as setting it to false is the same as creating a job in a deleted state. To create/keep a job in a 'deactivated' state, check  the `triggers` config.\n"
                },
                "jobCompletionTriggerConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dbtcloud:index/JobJobCompletionTriggerCondition:JobJobCompletionTriggerCondition"
                    },
                    "description": "Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as 'job chaining').\n",
                    "language": {
                        "csharp": {
                            "name": "CompletionTriggerCondition"
                        }
                    }
                },
                "jobType": {
                    "type": "string",
                    "description": "Can be used to enforce the job type betwen `ci`, `merge` and `scheduled`. Without this value the job type is inferred from the triggers configured\n"
                },
                "name": {
                    "type": "string",
                    "description": "Job name\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use in the job\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the job in\n"
                },
                "runCompareChanges": {
                    "type": "boolean",
                    "description": "Whether the CI job should compare data changes introduced by the code changes. Requires `deferring_environment_id` to be set. (Advanced CI needs to be activated in the dbt Cloud Account Settings first as well)\n"
                },
                "runGenerateSources": {
                    "type": "boolean",
                    "description": "Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.\n"
                },
                "runLint": {
                    "type": "boolean",
                    "description": "Whether the CI job should lint SQL changes. Defaults to `false`.\n"
                },
                "scheduleCron": {
                    "type": "string",
                    "description": "Custom cron expression for schedule\n"
                },
                "scheduleDays": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule\n"
                },
                "scheduleHours": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of hours to execute the job at if running on a schedule\n"
                },
                "scheduleInterval": {
                    "type": "integer",
                    "description": "Number of hours between job executions if running on a schedule\n"
                },
                "scheduleType": {
                    "type": "string",
                    "description": "Type of schedule to use, one of every*day/ days*of*week/ custom*cron/ interval_cron\n"
                },
                "selfDeferring": {
                    "type": "boolean",
                    "description": "Whether this job defers on a previous run of itself\n"
                },
                "targetName": {
                    "type": "string",
                    "description": "Target name for the dbt profile\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "[Deprectated - Moved to execution.timeout_seconds] Number of seconds to allow the job to run before timing out\n",
                    "deprecationMessage": "Moved to execution.timeout_seconds"
                },
                "triggers": {
                    "$ref": "#/types/dbtcloud:index/JobTriggers:JobTriggers",
                    "description": "Flags for which types of triggers to use, the values are `github_webhook`, `git_provider_webhook`, `schedule` and `on_merge`. All flags should be listed and set with `true` or `false`. When `on_merge` is `true`, all the other values must be false.\\n\\n`custom_branch_only` used to be allowed but has been deprecated from the API. The jobs will use the custom branch of the environment. Please remove the `custom_branch_only` from your config. \\n\\nTo create a job in a 'deactivated' state, set all to `false`.\n"
                },
                "triggersOnDraftPr": {
                    "type": "boolean",
                    "description": "Whether the CI job should be automatically triggered on draft PRs\n"
                }
            },
            "requiredInputs": [
                "environmentId",
                "executeSteps",
                "projectId",
                "triggers"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Job resources.\n",
                "properties": {
                    "compareChangesFlags": {
                        "type": "string",
                        "description": "The model selector for checking changes in the compare changes Advanced CI feature\n"
                    },
                    "dbtVersion": {
                        "type": "string",
                        "description": "Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions\n"
                    },
                    "deferringEnvironmentId": {
                        "type": "integer",
                        "description": "Environment identifier that this job defers to (new deferring approach)\n"
                    },
                    "deferringJobId": {
                        "type": "integer",
                        "description": "Job identifier that this job defers to (legacy deferring approach)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description for the job\n"
                    },
                    "environmentId": {
                        "type": "integer",
                        "description": "Environment ID to create the job in\n"
                    },
                    "errorsOnLintFailure": {
                        "type": "boolean",
                        "description": "Whether the CI job should fail when a lint error is found. Only used when `run_lint` is set to `true`. Defaults to `true`.\n"
                    },
                    "executeSteps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of commands to execute for the job\n"
                    },
                    "generateDocs": {
                        "type": "boolean",
                        "description": "Flag for whether the job should generate documentation\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Should always be set to true as setting it to false is the same as creating a job in a deleted state. To create/keep a job in a 'deactivated' state, check  the `triggers` config.\n"
                    },
                    "jobCompletionTriggerConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/JobJobCompletionTriggerCondition:JobJobCompletionTriggerCondition"
                        },
                        "description": "Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as 'job chaining').\n",
                        "language": {
                            "csharp": {
                                "name": "CompletionTriggerCondition"
                            }
                        }
                    },
                    "jobId": {
                        "type": "integer",
                        "description": "Job identifier\n"
                    },
                    "jobType": {
                        "type": "string",
                        "description": "Can be used to enforce the job type betwen `ci`, `merge` and `scheduled`. Without this value the job type is inferred from the triggers configured\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Job name\n"
                    },
                    "numThreads": {
                        "type": "integer",
                        "description": "Number of threads to use in the job\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the job in\n"
                    },
                    "runCompareChanges": {
                        "type": "boolean",
                        "description": "Whether the CI job should compare data changes introduced by the code changes. Requires `deferring_environment_id` to be set. (Advanced CI needs to be activated in the dbt Cloud Account Settings first as well)\n"
                    },
                    "runGenerateSources": {
                        "type": "boolean",
                        "description": "Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.\n"
                    },
                    "runLint": {
                        "type": "boolean",
                        "description": "Whether the CI job should lint SQL changes. Defaults to `false`.\n"
                    },
                    "scheduleCron": {
                        "type": "string",
                        "description": "Custom cron expression for schedule\n"
                    },
                    "scheduleDays": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule\n"
                    },
                    "scheduleHours": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of hours to execute the job at if running on a schedule\n"
                    },
                    "scheduleInterval": {
                        "type": "integer",
                        "description": "Number of hours between job executions if running on a schedule\n"
                    },
                    "scheduleType": {
                        "type": "string",
                        "description": "Type of schedule to use, one of every*day/ days*of*week/ custom*cron/ interval_cron\n"
                    },
                    "selfDeferring": {
                        "type": "boolean",
                        "description": "Whether this job defers on a previous run of itself\n"
                    },
                    "targetName": {
                        "type": "string",
                        "description": "Target name for the dbt profile\n"
                    },
                    "timeoutSeconds": {
                        "type": "integer",
                        "description": "[Deprectated - Moved to execution.timeout_seconds] Number of seconds to allow the job to run before timing out\n",
                        "deprecationMessage": "Moved to execution.timeout_seconds"
                    },
                    "triggers": {
                        "$ref": "#/types/dbtcloud:index/JobTriggers:JobTriggers",
                        "description": "Flags for which types of triggers to use, the values are `github_webhook`, `git_provider_webhook`, `schedule` and `on_merge`. All flags should be listed and set with `true` or `false`. When `on_merge` is `true`, all the other values must be false.\\n\\n`custom_branch_only` used to be allowed but has been deprecated from the API. The jobs will use the custom branch of the environment. Please remove the `custom_branch_only` from your config. \\n\\nTo create a job in a 'deactivated' state, set all to `false`.\n"
                    },
                    "triggersOnDraftPr": {
                        "type": "boolean",
                        "description": "Whether the CI job should be automatically triggered on draft PRs\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/licenseMap:LicenseMap": {
            "description": "Maps SSO groups to a given license type\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\n// Developer license group mapping\nconst devLicenseMap = new dbtcloud.LicenseMap(\"dev_license_map\", {\n    licenseType: \"developer\",\n    ssoLicenseMappingGroups: [\"DEV-SSO-GROUP\"],\n});\n// Read-only license mapping\nconst readOnlyLicenseMap = new dbtcloud.LicenseMap(\"read_only_license_map\", {\n    licenseType: \"read_only\",\n    ssoLicenseMappingGroups: [\"READ-ONLY-SSO-GROUP\"],\n});\n// IT license mapping\nconst itLicenseMap = new dbtcloud.LicenseMap(\"it_license_map\", {\n    licenseType: \"it\",\n    ssoLicenseMappingGroups: [\"IT-SSO-GROUP\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\n# Developer license group mapping\ndev_license_map = dbtcloud.LicenseMap(\"dev_license_map\",\n    license_type=\"developer\",\n    sso_license_mapping_groups=[\"DEV-SSO-GROUP\"])\n# Read-only license mapping\nread_only_license_map = dbtcloud.LicenseMap(\"read_only_license_map\",\n    license_type=\"read_only\",\n    sso_license_mapping_groups=[\"READ-ONLY-SSO-GROUP\"])\n# IT license mapping\nit_license_map = dbtcloud.LicenseMap(\"it_license_map\",\n    license_type=\"it\",\n    sso_license_mapping_groups=[\"IT-SSO-GROUP\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Developer license group mapping\n    var devLicenseMap = new DbtCloud.LicenseMap(\"dev_license_map\", new()\n    {\n        LicenseType = \"developer\",\n        SsoLicenseMappingGroups = new[]\n        {\n            \"DEV-SSO-GROUP\",\n        },\n    });\n\n    // Read-only license mapping\n    var readOnlyLicenseMap = new DbtCloud.LicenseMap(\"read_only_license_map\", new()\n    {\n        LicenseType = \"read_only\",\n        SsoLicenseMappingGroups = new[]\n        {\n            \"READ-ONLY-SSO-GROUP\",\n        },\n    });\n\n    // IT license mapping\n    var itLicenseMap = new DbtCloud.LicenseMap(\"it_license_map\", new()\n    {\n        LicenseType = \"it\",\n        SsoLicenseMappingGroups = new[]\n        {\n            \"IT-SSO-GROUP\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Developer license group mapping\n\t\t_, err := dbtcloud.NewLicenseMap(ctx, \"dev_license_map\", \u0026dbtcloud.LicenseMapArgs{\n\t\t\tLicenseType: pulumi.String(\"developer\"),\n\t\t\tSsoLicenseMappingGroups: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"DEV-SSO-GROUP\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Read-only license mapping\n\t\t_, err = dbtcloud.NewLicenseMap(ctx, \"read_only_license_map\", \u0026dbtcloud.LicenseMapArgs{\n\t\t\tLicenseType: pulumi.String(\"read_only\"),\n\t\t\tSsoLicenseMappingGroups: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"READ-ONLY-SSO-GROUP\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// IT license mapping\n\t\t_, err = dbtcloud.NewLicenseMap(ctx, \"it_license_map\", \u0026dbtcloud.LicenseMapArgs{\n\t\t\tLicenseType: pulumi.String(\"it\"),\n\t\t\tSsoLicenseMappingGroups: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"IT-SSO-GROUP\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.LicenseMap;\nimport com.pulumi.dbtcloud.LicenseMapArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Developer license group mapping\n        var devLicenseMap = new LicenseMap(\"devLicenseMap\", LicenseMapArgs.builder()\n            .licenseType(\"developer\")\n            .ssoLicenseMappingGroups(\"DEV-SSO-GROUP\")\n            .build());\n\n        // Read-only license mapping\n        var readOnlyLicenseMap = new LicenseMap(\"readOnlyLicenseMap\", LicenseMapArgs.builder()\n            .licenseType(\"read_only\")\n            .ssoLicenseMappingGroups(\"READ-ONLY-SSO-GROUP\")\n            .build());\n\n        // IT license mapping\n        var itLicenseMap = new LicenseMap(\"itLicenseMap\", LicenseMapArgs.builder()\n            .licenseType(\"it\")\n            .ssoLicenseMappingGroups(\"IT-SSO-GROUP\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Developer license group mapping\n  devLicenseMap:\n    type: dbtcloud:LicenseMap\n    name: dev_license_map\n    properties:\n      licenseType: developer\n      ssoLicenseMappingGroups:\n        - DEV-SSO-GROUP\n  # Read-only license mapping\n  readOnlyLicenseMap:\n    type: dbtcloud:LicenseMap\n    name: read_only_license_map\n    properties:\n      licenseType: read_only\n      ssoLicenseMappingGroups:\n        - READ-ONLY-SSO-GROUP\n  # IT license mapping\n  itLicenseMap:\n    type: dbtcloud:LicenseMap\n    name: it_license_map\n    properties:\n      licenseType: it\n      ssoLicenseMappingGroups:\n        - IT-SSO-GROUP\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_license_map.my_license_map\n\n  id = \"license_map_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_license_map.my_license_map\n\n  id = \"12345\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/licenseMap:LicenseMap my_license_map \"license_map_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/licenseMap:LicenseMap my_license_map 12345\n```\n\n",
            "properties": {
                "licenseType": {
                    "type": "string",
                    "description": "License type\n"
                },
                "ssoLicenseMappingGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSO license mapping group names for this group\n"
                }
            },
            "required": [
                "licenseType"
            ],
            "inputProperties": {
                "licenseType": {
                    "type": "string",
                    "description": "License type\n"
                },
                "ssoLicenseMappingGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSO license mapping group names for this group\n"
                }
            },
            "requiredInputs": [
                "licenseType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LicenseMap resources.\n",
                "properties": {
                    "licenseType": {
                        "type": "string",
                        "description": "License type\n"
                    },
                    "ssoLicenseMappingGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "SSO license mapping group names for this group\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/lineageIntegration:LineageIntegration": {
            "description": "Setup lineage integration for dbt Cloud to automatically fetch lineage from external BI tools in dbt Explorer. Currently supports Tableau.\n\nThis resource requires having an environment tagged as production already created for you project.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\n// the resource can only be configured when a Prod environment has been set\n// so, you might want to explicitly set the dependency on your Prod environment resource\nconst myLineage = new dbtcloud.LineageIntegration(\"my_lineage\", {\n    projectId: myProject.id,\n    host: \"my.host.com\",\n    siteId: \"mysiteid\",\n    tokenName: \"my-token-name\",\n    token: \"my-sensitive-token\",\n}, {\n    dependsOn: [myProdEnv],\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\n# the resource can only be configured when a Prod environment has been set\n# so, you might want to explicitly set the dependency on your Prod environment resource\nmy_lineage = dbtcloud.LineageIntegration(\"my_lineage\",\n    project_id=my_project[\"id\"],\n    host=\"my.host.com\",\n    site_id=\"mysiteid\",\n    token_name=\"my-token-name\",\n    token=\"my-sensitive-token\",\n    opts = pulumi.ResourceOptions(depends_on=[my_prod_env]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // the resource can only be configured when a Prod environment has been set\n    // so, you might want to explicitly set the dependency on your Prod environment resource\n    var myLineage = new DbtCloud.LineageIntegration(\"my_lineage\", new()\n    {\n        ProjectId = myProject.Id,\n        Host = \"my.host.com\",\n        SiteId = \"mysiteid\",\n        TokenName = \"my-token-name\",\n        Token = \"my-sensitive-token\",\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            myProdEnv,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// the resource can only be configured when a Prod environment has been set\n\t\t// so, you might want to explicitly set the dependency on your Prod environment resource\n\t\t_, err := dbtcloud.NewLineageIntegration(ctx, \"my_lineage\", \u0026dbtcloud.LineageIntegrationArgs{\n\t\t\tProjectId: pulumi.Any(myProject.Id),\n\t\t\tHost:      pulumi.String(\"my.host.com\"),\n\t\t\tSiteId:    pulumi.String(\"mysiteid\"),\n\t\t\tTokenName: pulumi.String(\"my-token-name\"),\n\t\t\tToken:     pulumi.String(\"my-sensitive-token\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmyProdEnv,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.LineageIntegration;\nimport com.pulumi.dbtcloud.LineageIntegrationArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // the resource can only be configured when a Prod environment has been set\n        // so, you might want to explicitly set the dependency on your Prod environment resource\n        var myLineage = new LineageIntegration(\"myLineage\", LineageIntegrationArgs.builder()\n            .projectId(myProject.id())\n            .host(\"my.host.com\")\n            .siteId(\"mysiteid\")\n            .tokenName(\"my-token-name\")\n            .token(\"my-sensitive-token\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(myProdEnv)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # the resource can only be configured when a Prod environment has been set\n  # // so, you might want to explicitly set the dependency on your Prod environment resource\n  myLineage:\n    type: dbtcloud:LineageIntegration\n    name: my_lineage\n    properties:\n      projectId: ${myProject.id}\n      host: my.host.com\n      siteId: mysiteid\n      tokenName: my-token-name\n      token: my-sensitive-token\n    options:\n      dependsOn:\n        - ${myProdEnv}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_lineage_integration.my_lineage_integration\n\n  id = \"projet_id:lineage_integration_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_lineage_integration.my_lineage_integration\n\n  id = \"123:4567\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/lineageIntegration:LineageIntegration my_lineage_integration \"projet_id:lineage_integration_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/lineageIntegration:LineageIntegration my_lineage_integration 123:4567\n```\n\n",
            "properties": {
                "host": {
                    "type": "string",
                    "description": "The URL of the BI server (see docs for more details)\n"
                },
                "lineageIntegrationId": {
                    "type": "integer",
                    "description": "The ID of the lineage integration\n"
                },
                "name": {
                    "type": "string",
                    "description": "The integration type. Today only 'tableau' is supported\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The dbt Cloud project ID for the integration\n"
                },
                "siteId": {
                    "type": "string",
                    "description": "The sitename for the collections of dashboards (see docs for more details)\n"
                },
                "token": {
                    "type": "string",
                    "description": "The secret token value to use to authenticate to the BI server\n",
                    "secret": true
                },
                "tokenName": {
                    "type": "string",
                    "description": "The token to use to authenticate to the BI server\n"
                }
            },
            "required": [
                "host",
                "lineageIntegrationId",
                "name",
                "projectId",
                "siteId",
                "token",
                "tokenName"
            ],
            "inputProperties": {
                "host": {
                    "type": "string",
                    "description": "The URL of the BI server (see docs for more details)\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The dbt Cloud project ID for the integration\n"
                },
                "siteId": {
                    "type": "string",
                    "description": "The sitename for the collections of dashboards (see docs for more details)\n"
                },
                "token": {
                    "type": "string",
                    "description": "The secret token value to use to authenticate to the BI server\n",
                    "secret": true
                },
                "tokenName": {
                    "type": "string",
                    "description": "The token to use to authenticate to the BI server\n"
                }
            },
            "requiredInputs": [
                "host",
                "projectId",
                "siteId",
                "token",
                "tokenName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LineageIntegration resources.\n",
                "properties": {
                    "host": {
                        "type": "string",
                        "description": "The URL of the BI server (see docs for more details)\n"
                    },
                    "lineageIntegrationId": {
                        "type": "integer",
                        "description": "The ID of the lineage integration\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The integration type. Today only 'tableau' is supported\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "The dbt Cloud project ID for the integration\n"
                    },
                    "siteId": {
                        "type": "string",
                        "description": "The sitename for the collections of dashboards (see docs for more details)\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The secret token value to use to authenticate to the BI server\n",
                        "secret": true
                    },
                    "tokenName": {
                        "type": "string",
                        "description": "The token to use to authenticate to the BI server\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/modelNotifications:ModelNotifications": {
            "description": "Configure model notifications for a dbt Cloud environment. By default all the `on_...` are set to false. When destroyed, the model notifications are disabled.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst prodModelNotifications = new dbtcloud.ModelNotifications(\"prod_model_notifications\", {\n    environmentId: prodEnvironment.environmentId,\n    enabled: true,\n    onSuccess: false,\n    onFailure: true,\n    onWarning: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nprod_model_notifications = dbtcloud.ModelNotifications(\"prod_model_notifications\",\n    environment_id=prod_environment[\"environmentId\"],\n    enabled=True,\n    on_success=False,\n    on_failure=True,\n    on_warning=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var prodModelNotifications = new DbtCloud.ModelNotifications(\"prod_model_notifications\", new()\n    {\n        EnvironmentId = prodEnvironment.EnvironmentId,\n        Enabled = true,\n        OnSuccess = false,\n        OnFailure = true,\n        OnWarning = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewModelNotifications(ctx, \"prod_model_notifications\", \u0026dbtcloud.ModelNotificationsArgs{\n\t\t\tEnvironmentId: pulumi.Any(prodEnvironment.EnvironmentId),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tOnSuccess:     pulumi.Bool(false),\n\t\t\tOnFailure:     pulumi.Bool(true),\n\t\t\tOnWarning:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.ModelNotifications;\nimport com.pulumi.dbtcloud.ModelNotificationsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var prodModelNotifications = new ModelNotifications(\"prodModelNotifications\", ModelNotificationsArgs.builder()\n            .environmentId(prodEnvironment.environmentId())\n            .enabled(true)\n            .onSuccess(false)\n            .onFailure(true)\n            .onWarning(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  prodModelNotifications:\n    type: dbtcloud:ModelNotifications\n    name: prod_model_notifications\n    properties:\n      environmentId: ${prodEnvironment.environmentId}\n      enabled: true\n      onSuccess: false\n      onFailure: true\n      onWarning: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nModel notifications are imported using the environment ID where the notifications are enabled\n\nUsing import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_model_notifications.my_model_notifications\n\n  id = \"environment_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_model_notifications.my_model_notifications\n\n  id = \"12345\"\n\n}\n\nUsing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/modelNotifications:ModelNotifications my_model_notifications \"environment_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/modelNotifications:ModelNotifications my_model_notifications 12345\n```\n\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether model notifications are enabled for this environment\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "The ID of the dbt Cloud environment\n"
                },
                "onFailure": {
                    "type": "boolean",
                    "description": "Whether to send notifications for failed model runs\n"
                },
                "onSkipped": {
                    "type": "boolean",
                    "description": "Whether to send notifications for skipped model runs\n"
                },
                "onSuccess": {
                    "type": "boolean",
                    "description": "Whether to send notifications for successful model runs\n"
                },
                "onWarning": {
                    "type": "boolean",
                    "description": "Whether to send notifications for model runs with warnings\n"
                }
            },
            "required": [
                "enabled",
                "environmentId",
                "onFailure",
                "onSkipped",
                "onSuccess",
                "onWarning"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether model notifications are enabled for this environment\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "The ID of the dbt Cloud environment\n"
                },
                "onFailure": {
                    "type": "boolean",
                    "description": "Whether to send notifications for failed model runs\n"
                },
                "onSkipped": {
                    "type": "boolean",
                    "description": "Whether to send notifications for skipped model runs\n"
                },
                "onSuccess": {
                    "type": "boolean",
                    "description": "Whether to send notifications for successful model runs\n"
                },
                "onWarning": {
                    "type": "boolean",
                    "description": "Whether to send notifications for model runs with warnings\n"
                }
            },
            "requiredInputs": [
                "environmentId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ModelNotifications resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether model notifications are enabled for this environment\n"
                    },
                    "environmentId": {
                        "type": "string",
                        "description": "The ID of the dbt Cloud environment\n"
                    },
                    "onFailure": {
                        "type": "boolean",
                        "description": "Whether to send notifications for failed model runs\n"
                    },
                    "onSkipped": {
                        "type": "boolean",
                        "description": "Whether to send notifications for skipped model runs\n"
                    },
                    "onSuccess": {
                        "type": "boolean",
                        "description": "Whether to send notifications for successful model runs\n"
                    },
                    "onWarning": {
                        "type": "boolean",
                        "description": "Whether to send notifications for model runs with warnings\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/notification:Notification": {
            "description": "Setup notifications on jobs success/failure to internal users, external email addresses or Slack channels\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\n// dbt Cloud allows us to create internal and external notifications\n//\n// an internal notification will send emails to the user mentioned in `user_id`\n//\n// NOTE: If internal notification settings already exist for a user, currently you MUST import\n// those first into the state file before you can create a new internal notification for that user.\n// Failure to do so, will result in the user losing access to existing notifications and dbt\n// support will need to be contacted to restore access.\n// cmd: terraform import dbtcloud_notification.prod_job_internal_notification \u003cuser_id\u003e\nconst prodJobInternalNotification = new dbtcloud.Notification(\"prod_job_internal_notification\", {\n    userId: 100,\n    onSuccesses: [prodJob.id],\n    onFailures: [12345],\n    notificationType: 1,\n});\n// we can also send \"external\" email notifications to emails to related to dbt Cloud users\nconst prodJobExternalNotification = new dbtcloud.Notification(\"prod_job_external_notification\", {\n    userId: 100,\n    onFailures: [\n        23456,\n        56788,\n    ],\n    onCancels: [prodJob.id],\n    notificationType: 4,\n    externalEmail: \"my_email@mail.com\",\n});\n// and finally, we can set up Slack notifications\nconst prodJobSlackNotifications = new dbtcloud.Notification(\"prod_job_slack_notifications\", {\n    userId: 100,\n    onFailures: [\n        23456,\n        56788,\n    ],\n    onCancels: [prodJob.id],\n    notificationType: 2,\n    slackChannelId: \"C12345ABCDE\",\n    slackChannelName: \"#my-awesome-channel\",\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\n# dbt Cloud allows us to create internal and external notifications\n#\n# an internal notification will send emails to the user mentioned in `user_id`\n#\n# NOTE: If internal notification settings already exist for a user, currently you MUST import\n# those first into the state file before you can create a new internal notification for that user.\n# Failure to do so, will result in the user losing access to existing notifications and dbt\n# support will need to be contacted to restore access.\n# cmd: terraform import dbtcloud_notification.prod_job_internal_notification \u003cuser_id\u003e\nprod_job_internal_notification = dbtcloud.Notification(\"prod_job_internal_notification\",\n    user_id=100,\n    on_successes=[prod_job[\"id\"]],\n    on_failures=[12345],\n    notification_type=1)\n# we can also send \"external\" email notifications to emails to related to dbt Cloud users\nprod_job_external_notification = dbtcloud.Notification(\"prod_job_external_notification\",\n    user_id=100,\n    on_failures=[\n        23456,\n        56788,\n    ],\n    on_cancels=[prod_job[\"id\"]],\n    notification_type=4,\n    external_email=\"my_email@mail.com\")\n# and finally, we can set up Slack notifications\nprod_job_slack_notifications = dbtcloud.Notification(\"prod_job_slack_notifications\",\n    user_id=100,\n    on_failures=[\n        23456,\n        56788,\n    ],\n    on_cancels=[prod_job[\"id\"]],\n    notification_type=2,\n    slack_channel_id=\"C12345ABCDE\",\n    slack_channel_name=\"#my-awesome-channel\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // dbt Cloud allows us to create internal and external notifications\n    //\n    // an internal notification will send emails to the user mentioned in `user_id`\n    //\n    // NOTE: If internal notification settings already exist for a user, currently you MUST import\n    // those first into the state file before you can create a new internal notification for that user.\n    // Failure to do so, will result in the user losing access to existing notifications and dbt\n    // support will need to be contacted to restore access.\n    // cmd: terraform import dbtcloud_notification.prod_job_internal_notification \u003cuser_id\u003e\n    var prodJobInternalNotification = new DbtCloud.Notification(\"prod_job_internal_notification\", new()\n    {\n        UserId = 100,\n        OnSuccesses = new[]\n        {\n            prodJob.Id,\n        },\n        OnFailures = new[]\n        {\n            12345,\n        },\n        NotificationType = 1,\n    });\n\n    // we can also send \"external\" email notifications to emails to related to dbt Cloud users\n    var prodJobExternalNotification = new DbtCloud.Notification(\"prod_job_external_notification\", new()\n    {\n        UserId = 100,\n        OnFailures = new[]\n        {\n            23456,\n            56788,\n        },\n        OnCancels = new[]\n        {\n            prodJob.Id,\n        },\n        NotificationType = 4,\n        ExternalEmail = \"my_email@mail.com\",\n    });\n\n    // and finally, we can set up Slack notifications\n    var prodJobSlackNotifications = new DbtCloud.Notification(\"prod_job_slack_notifications\", new()\n    {\n        UserId = 100,\n        OnFailures = new[]\n        {\n            23456,\n            56788,\n        },\n        OnCancels = new[]\n        {\n            prodJob.Id,\n        },\n        NotificationType = 2,\n        SlackChannelId = \"C12345ABCDE\",\n        SlackChannelName = \"#my-awesome-channel\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// dbt Cloud allows us to create internal and external notifications\n\t\t//\n\t\t// an internal notification will send emails to the user mentioned in `user_id`\n\t\t//\n\t\t// NOTE: If internal notification settings already exist for a user, currently you MUST import\n\t\t// those first into the state file before you can create a new internal notification for that user.\n\t\t// Failure to do so, will result in the user losing access to existing notifications and dbt\n\t\t// support will need to be contacted to restore access.\n\t\t// cmd: terraform import dbtcloud_notification.prod_job_internal_notification \u003cuser_id\u003e\n\t\t_, err := dbtcloud.NewNotification(ctx, \"prod_job_internal_notification\", \u0026dbtcloud.NotificationArgs{\n\t\t\tUserId: pulumi.Int(100),\n\t\t\tOnSuccesses: pulumi.IntArray{\n\t\t\t\tprodJob.Id,\n\t\t\t},\n\t\t\tOnFailures: pulumi.IntArray{\n\t\t\t\tpulumi.Int(12345),\n\t\t\t},\n\t\t\tNotificationType: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// we can also send \"external\" email notifications to emails to related to dbt Cloud users\n\t\t_, err = dbtcloud.NewNotification(ctx, \"prod_job_external_notification\", \u0026dbtcloud.NotificationArgs{\n\t\t\tUserId: pulumi.Int(100),\n\t\t\tOnFailures: pulumi.IntArray{\n\t\t\t\tpulumi.Int(23456),\n\t\t\t\tpulumi.Int(56788),\n\t\t\t},\n\t\t\tOnCancels: pulumi.IntArray{\n\t\t\t\tprodJob.Id,\n\t\t\t},\n\t\t\tNotificationType: pulumi.Int(4),\n\t\t\tExternalEmail:    pulumi.String(\"my_email@mail.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// and finally, we can set up Slack notifications\n\t\t_, err = dbtcloud.NewNotification(ctx, \"prod_job_slack_notifications\", \u0026dbtcloud.NotificationArgs{\n\t\t\tUserId: pulumi.Int(100),\n\t\t\tOnFailures: pulumi.IntArray{\n\t\t\t\tpulumi.Int(23456),\n\t\t\t\tpulumi.Int(56788),\n\t\t\t},\n\t\t\tOnCancels: pulumi.IntArray{\n\t\t\t\tprodJob.Id,\n\t\t\t},\n\t\t\tNotificationType: pulumi.Int(2),\n\t\t\tSlackChannelId:   pulumi.String(\"C12345ABCDE\"),\n\t\t\tSlackChannelName: pulumi.String(\"#my-awesome-channel\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.Notification;\nimport com.pulumi.dbtcloud.NotificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // dbt Cloud allows us to create internal and external notifications\n        //\n        // an internal notification will send emails to the user mentioned in `user_id`\n        //\n        // NOTE: If internal notification settings already exist for a user, currently you MUST import\n        // those first into the state file before you can create a new internal notification for that user.\n        // Failure to do so, will result in the user losing access to existing notifications and dbt\n        // support will need to be contacted to restore access.\n        // cmd: terraform import dbtcloud_notification.prod_job_internal_notification \u003cuser_id\u003e\n        var prodJobInternalNotification = new Notification(\"prodJobInternalNotification\", NotificationArgs.builder()\n            .userId(100)\n            .onSuccesses(prodJob.id())\n            .onFailures(12345)\n            .notificationType(1)\n            .build());\n\n        // we can also send \"external\" email notifications to emails to related to dbt Cloud users\n        var prodJobExternalNotification = new Notification(\"prodJobExternalNotification\", NotificationArgs.builder()\n            .userId(100)\n            .onFailures(            \n                23456,\n                56788)\n            .onCancels(prodJob.id())\n            .notificationType(4)\n            .externalEmail(\"my_email@mail.com\")\n            .build());\n\n        // and finally, we can set up Slack notifications\n        var prodJobSlackNotifications = new Notification(\"prodJobSlackNotifications\", NotificationArgs.builder()\n            .userId(100)\n            .onFailures(            \n                23456,\n                56788)\n            .onCancels(prodJob.id())\n            .notificationType(2)\n            .slackChannelId(\"C12345ABCDE\")\n            .slackChannelName(\"#my-awesome-channel\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # dbt Cloud allows us to create internal and external notifications\n  # //\n  # // an internal notification will send emails to the user mentioned in `user_id`\n  # //\n  # // NOTE: If internal notification settings already exist for a user, currently you MUST import\n  # // those first into the state file before you can create a new internal notification for that user.\n  # // Failure to do so, will result in the user losing access to existing notifications and dbt\n  # // support will need to be contacted to restore access.\n  # // cmd: terraform import dbtcloud_notification.prod_job_internal_notification \u003cuser_id\u003e\n  prodJobInternalNotification:\n    type: dbtcloud:Notification\n    name: prod_job_internal_notification\n    properties:\n      userId: 100\n      onSuccesses:\n        - ${prodJob.id}\n      onFailures:\n        - 12345\n      notificationType: 1\n  # we can also send \"external\" email notifications to emails to related to dbt Cloud users\n  prodJobExternalNotification:\n    type: dbtcloud:Notification\n    name: prod_job_external_notification\n    properties:\n      userId: 100\n      onFailures:\n        - 23456\n        - 56788\n      onCancels:\n        - ${prodJob.id}\n      notificationType: 4 # the external_email is the email address that will receive the notification\n      externalEmail: my_email@mail.com\n  # and finally, we can set up Slack notifications\n  prodJobSlackNotifications:\n    type: dbtcloud:Notification\n    name: prod_job_slack_notifications\n    properties:\n      userId: 100\n      onFailures:\n        - 23456\n        - 56788\n      onCancels:\n        - ${prodJob.id}\n      notificationType: 2\n      slackChannelId: C12345ABCDE\n      slackChannelName: '#my-awesome-channel'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_notification.my_notification\n\n  id = \"notification_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_notification.my_notification\n\n  id = \"12345\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/notification:Notification my_notification \"notification_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/notification:Notification my_notification 12345\n```\n\n",
            "properties": {
                "externalEmail": {
                    "type": "string",
                    "description": "The external email to receive the notification\n"
                },
                "notificationType": {
                    "type": "integer",
                    "description": "Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`)\n"
                },
                "onCancels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on cancel\n"
                },
                "onFailures": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on failure\n"
                },
                "onSuccesses": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on success\n"
                },
                "onWarnings": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on warning\n"
                },
                "slackChannelId": {
                    "type": "string",
                    "description": "The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings\n"
                },
                "slackChannelName": {
                    "type": "string",
                    "description": "The name of the slack channel\n"
                },
                "state": {
                    "type": "integer",
                    "description": "State of the notification (1 = active (default), 2 = inactive)\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one\n"
                }
            },
            "required": [
                "notificationType",
                "onCancels",
                "onFailures",
                "onSuccesses",
                "onWarnings",
                "state",
                "userId"
            ],
            "inputProperties": {
                "externalEmail": {
                    "type": "string",
                    "description": "The external email to receive the notification\n"
                },
                "notificationType": {
                    "type": "integer",
                    "description": "Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`)\n"
                },
                "onCancels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on cancel\n"
                },
                "onFailures": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on failure\n"
                },
                "onSuccesses": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on success\n"
                },
                "onWarnings": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on warning\n"
                },
                "slackChannelId": {
                    "type": "string",
                    "description": "The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings\n"
                },
                "slackChannelName": {
                    "type": "string",
                    "description": "The name of the slack channel\n"
                },
                "state": {
                    "type": "integer",
                    "description": "State of the notification (1 = active (default), 2 = inactive)\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one\n"
                }
            },
            "requiredInputs": [
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Notification resources.\n",
                "properties": {
                    "externalEmail": {
                        "type": "string",
                        "description": "The external email to receive the notification\n"
                    },
                    "notificationType": {
                        "type": "integer",
                        "description": "Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`)\n"
                    },
                    "onCancels": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of job IDs to trigger the webhook on cancel\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of job IDs to trigger the webhook on failure\n"
                    },
                    "onSuccesses": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of job IDs to trigger the webhook on success\n"
                    },
                    "onWarnings": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of job IDs to trigger the webhook on warning\n"
                    },
                    "slackChannelId": {
                        "type": "string",
                        "description": "The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings\n"
                    },
                    "slackChannelName": {
                        "type": "string",
                        "description": "The name of the slack channel\n"
                    },
                    "state": {
                        "type": "integer",
                        "description": "State of the notification (1 = active (default), 2 = inactive)\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/oauthConfiguration:OauthConfiguration": {
            "description": "Configure an external OAuth integration for the data warehouse. Currently supports Okta and Entra ID (i.e. Azure AD) for Snowflake.\n\nSee the [documentation](https://docs.getdbt.com/docs/cloud/manage-access/external-oauth) for more information on how to configure it.\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_oauth_configuration.my_external_oauth\n\n  id = \"external_oauth_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_oauth_configuration.my_external_oauth\n\n  id = \"12345\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/oauthConfiguration:OauthConfiguration my_external_oauth \"external_oauth_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/oauthConfiguration:OauthConfiguration my_external_oauth 12345\n```\n\n",
            "properties": {
                "applicationIdUri": {
                    "type": "string",
                    "description": "The Application ID URI for the OAuth integration. Only for Entra\n"
                },
                "authorizeUrl": {
                    "type": "string",
                    "description": "The Authorize URL for the OAuth integration\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The Client ID for the OAuth integration\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The Client secret for the OAuth integration\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of OAuth integration\n"
                },
                "redirectUri": {
                    "type": "string",
                    "description": "The redirect URL for the OAuth integration\n"
                },
                "tokenUrl": {
                    "type": "string",
                    "description": "The Token URL for the OAuth integration\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of OAuth integration (`entra` or `okta`)\n"
                }
            },
            "required": [
                "applicationIdUri",
                "authorizeUrl",
                "clientId",
                "clientSecret",
                "name",
                "redirectUri",
                "tokenUrl",
                "type"
            ],
            "inputProperties": {
                "applicationIdUri": {
                    "type": "string",
                    "description": "The Application ID URI for the OAuth integration. Only for Entra\n"
                },
                "authorizeUrl": {
                    "type": "string",
                    "description": "The Authorize URL for the OAuth integration\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The Client ID for the OAuth integration\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The Client secret for the OAuth integration\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of OAuth integration\n"
                },
                "redirectUri": {
                    "type": "string",
                    "description": "The redirect URL for the OAuth integration\n"
                },
                "tokenUrl": {
                    "type": "string",
                    "description": "The Token URL for the OAuth integration\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of OAuth integration (`entra` or `okta`)\n"
                }
            },
            "requiredInputs": [
                "authorizeUrl",
                "clientId",
                "clientSecret",
                "redirectUri",
                "tokenUrl",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OauthConfiguration resources.\n",
                "properties": {
                    "applicationIdUri": {
                        "type": "string",
                        "description": "The Application ID URI for the OAuth integration. Only for Entra\n"
                    },
                    "authorizeUrl": {
                        "type": "string",
                        "description": "The Authorize URL for the OAuth integration\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The Client ID for the OAuth integration\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "The Client secret for the OAuth integration\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of OAuth integration\n"
                    },
                    "redirectUri": {
                        "type": "string",
                        "description": "The redirect URL for the OAuth integration\n"
                    },
                    "tokenUrl": {
                        "type": "string",
                        "description": "The Token URL for the OAuth integration\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of OAuth integration (`entra` or `okta`)\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/partialEnvironmentVariable:PartialEnvironmentVariable": {
            "description": "## Example Usage\n\n### \n",
            "properties": {
                "environmentValues": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map from environment names to respective variable value. This field is not set as sensitive so take precautions when using secret environment variables. Only the specified environment values will be managed by this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the variable, must be unique within a project, must be prefixed with 'DBT_'\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create or update the environment variable in\n"
                }
            },
            "required": [
                "environmentValues",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "environmentValues": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map from environment names to respective variable value. This field is not set as sensitive so take precautions when using secret environment variables. Only the specified environment values will be managed by this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the variable, must be unique within a project, must be prefixed with 'DBT_'\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create or update the environment variable in\n"
                }
            },
            "requiredInputs": [
                "environmentValues",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PartialEnvironmentVariable resources.\n",
                "properties": {
                    "environmentValues": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map from environment names to respective variable value. This field is not set as sensitive so take precautions when using secret environment variables. Only the specified environment values will be managed by this resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for the variable, must be unique within a project, must be prefixed with 'DBT_'\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create or update the environment variable in\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/partialLicenseMap:PartialLicenseMap": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\n// Developer license group mapping\nconst devLicenseMap = new dbtcloud.PartialLicenseMap(\"dev_license_map\", {\n    licenseType: \"developer\",\n    ssoLicenseMappingGroups: [\"DEV-SSO-GROUP\"],\n});\n// Read-only license mapping\nconst readOnlyLicenseMap = new dbtcloud.PartialLicenseMap(\"read_only_license_map\", {\n    licenseType: \"read_only\",\n    ssoLicenseMappingGroups: [\"READ-ONLY-SSO-GROUP\"],\n});\n// IT license mapping\nconst itLicenseMap = new dbtcloud.PartialLicenseMap(\"it_license_map\", {\n    licenseType: \"it\",\n    ssoLicenseMappingGroups: [\"IT-SSO-GROUP\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\n# Developer license group mapping\ndev_license_map = dbtcloud.PartialLicenseMap(\"dev_license_map\",\n    license_type=\"developer\",\n    sso_license_mapping_groups=[\"DEV-SSO-GROUP\"])\n# Read-only license mapping\nread_only_license_map = dbtcloud.PartialLicenseMap(\"read_only_license_map\",\n    license_type=\"read_only\",\n    sso_license_mapping_groups=[\"READ-ONLY-SSO-GROUP\"])\n# IT license mapping\nit_license_map = dbtcloud.PartialLicenseMap(\"it_license_map\",\n    license_type=\"it\",\n    sso_license_mapping_groups=[\"IT-SSO-GROUP\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Developer license group mapping\n    var devLicenseMap = new DbtCloud.PartialLicenseMap(\"dev_license_map\", new()\n    {\n        LicenseType = \"developer\",\n        SsoLicenseMappingGroups = new[]\n        {\n            \"DEV-SSO-GROUP\",\n        },\n    });\n\n    // Read-only license mapping\n    var readOnlyLicenseMap = new DbtCloud.PartialLicenseMap(\"read_only_license_map\", new()\n    {\n        LicenseType = \"read_only\",\n        SsoLicenseMappingGroups = new[]\n        {\n            \"READ-ONLY-SSO-GROUP\",\n        },\n    });\n\n    // IT license mapping\n    var itLicenseMap = new DbtCloud.PartialLicenseMap(\"it_license_map\", new()\n    {\n        LicenseType = \"it\",\n        SsoLicenseMappingGroups = new[]\n        {\n            \"IT-SSO-GROUP\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Developer license group mapping\n\t\t_, err := dbtcloud.NewPartialLicenseMap(ctx, \"dev_license_map\", \u0026dbtcloud.PartialLicenseMapArgs{\n\t\t\tLicenseType: pulumi.String(\"developer\"),\n\t\t\tSsoLicenseMappingGroups: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"DEV-SSO-GROUP\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Read-only license mapping\n\t\t_, err = dbtcloud.NewPartialLicenseMap(ctx, \"read_only_license_map\", \u0026dbtcloud.PartialLicenseMapArgs{\n\t\t\tLicenseType: pulumi.String(\"read_only\"),\n\t\t\tSsoLicenseMappingGroups: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"READ-ONLY-SSO-GROUP\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// IT license mapping\n\t\t_, err = dbtcloud.NewPartialLicenseMap(ctx, \"it_license_map\", \u0026dbtcloud.PartialLicenseMapArgs{\n\t\t\tLicenseType: pulumi.String(\"it\"),\n\t\t\tSsoLicenseMappingGroups: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"IT-SSO-GROUP\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.PartialLicenseMap;\nimport com.pulumi.dbtcloud.PartialLicenseMapArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Developer license group mapping\n        var devLicenseMap = new PartialLicenseMap(\"devLicenseMap\", PartialLicenseMapArgs.builder()\n            .licenseType(\"developer\")\n            .ssoLicenseMappingGroups(\"DEV-SSO-GROUP\")\n            .build());\n\n        // Read-only license mapping\n        var readOnlyLicenseMap = new PartialLicenseMap(\"readOnlyLicenseMap\", PartialLicenseMapArgs.builder()\n            .licenseType(\"read_only\")\n            .ssoLicenseMappingGroups(\"READ-ONLY-SSO-GROUP\")\n            .build());\n\n        // IT license mapping\n        var itLicenseMap = new PartialLicenseMap(\"itLicenseMap\", PartialLicenseMapArgs.builder()\n            .licenseType(\"it\")\n            .ssoLicenseMappingGroups(\"IT-SSO-GROUP\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Developer license group mapping\n  devLicenseMap:\n    type: dbtcloud:PartialLicenseMap\n    name: dev_license_map\n    properties:\n      licenseType: developer\n      ssoLicenseMappingGroups:\n        - DEV-SSO-GROUP\n  # Read-only license mapping\n  readOnlyLicenseMap:\n    type: dbtcloud:PartialLicenseMap\n    name: read_only_license_map\n    properties:\n      licenseType: read_only\n      ssoLicenseMappingGroups:\n        - READ-ONLY-SSO-GROUP\n  # IT license mapping\n  itLicenseMap:\n    type: dbtcloud:PartialLicenseMap\n    name: it_license_map\n    properties:\n      licenseType: it\n      ssoLicenseMappingGroups:\n        - IT-SSO-GROUP\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "licenseType": {
                    "type": "string",
                    "description": "The license type to update\n"
                },
                "ssoLicenseMappingGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SSO groups to map to the license type.\n"
                }
            },
            "required": [
                "licenseType",
                "ssoLicenseMappingGroups"
            ],
            "inputProperties": {
                "licenseType": {
                    "type": "string",
                    "description": "The license type to update\n"
                },
                "ssoLicenseMappingGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SSO groups to map to the license type.\n"
                }
            },
            "requiredInputs": [
                "licenseType",
                "ssoLicenseMappingGroups"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PartialLicenseMap resources.\n",
                "properties": {
                    "licenseType": {
                        "type": "string",
                        "description": "The license type to update\n"
                    },
                    "ssoLicenseMappingGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of SSO groups to map to the license type.\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/partialNotification:PartialNotification": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\n// the config is the same as for `dbtcloud_notification`\nconst prodJobInternalNotification = new dbtcloud.PartialNotification(\"prod_job_internal_notification\", {\n    userId: 100,\n    onSuccesses: [prodJob.id],\n    onFailures: [12345],\n    notificationType: 1,\n});\n// we can also send \"external\" email notifications to emails to related to dbt Cloud users\nconst prodJobExternalNotification = new dbtcloud.PartialNotification(\"prod_job_external_notification\", {\n    userId: 100,\n    onFailures: [\n        23456,\n        56788,\n    ],\n    onCancels: [prodJob.id],\n    notificationType: 4,\n    externalEmail: \"my_email@mail.com\",\n});\n// and finally, we can set up Slack notifications\nconst prodJobSlackNotifications = new dbtcloud.PartialNotification(\"prod_job_slack_notifications\", {\n    userId: 100,\n    onFailures: [\n        23456,\n        56788,\n    ],\n    onCancels: [prodJob.id],\n    notificationType: 2,\n    slackChannelId: \"C12345ABCDE\",\n    slackChannelName: \"#my-awesome-channel\",\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\n# the config is the same as for `dbtcloud_notification`\nprod_job_internal_notification = dbtcloud.PartialNotification(\"prod_job_internal_notification\",\n    user_id=100,\n    on_successes=[prod_job[\"id\"]],\n    on_failures=[12345],\n    notification_type=1)\n# we can also send \"external\" email notifications to emails to related to dbt Cloud users\nprod_job_external_notification = dbtcloud.PartialNotification(\"prod_job_external_notification\",\n    user_id=100,\n    on_failures=[\n        23456,\n        56788,\n    ],\n    on_cancels=[prod_job[\"id\"]],\n    notification_type=4,\n    external_email=\"my_email@mail.com\")\n# and finally, we can set up Slack notifications\nprod_job_slack_notifications = dbtcloud.PartialNotification(\"prod_job_slack_notifications\",\n    user_id=100,\n    on_failures=[\n        23456,\n        56788,\n    ],\n    on_cancels=[prod_job[\"id\"]],\n    notification_type=2,\n    slack_channel_id=\"C12345ABCDE\",\n    slack_channel_name=\"#my-awesome-channel\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // the config is the same as for `dbtcloud_notification`\n    var prodJobInternalNotification = new DbtCloud.PartialNotification(\"prod_job_internal_notification\", new()\n    {\n        UserId = 100,\n        OnSuccesses = new[]\n        {\n            prodJob.Id,\n        },\n        OnFailures = new[]\n        {\n            12345,\n        },\n        NotificationType = 1,\n    });\n\n    // we can also send \"external\" email notifications to emails to related to dbt Cloud users\n    var prodJobExternalNotification = new DbtCloud.PartialNotification(\"prod_job_external_notification\", new()\n    {\n        UserId = 100,\n        OnFailures = new[]\n        {\n            23456,\n            56788,\n        },\n        OnCancels = new[]\n        {\n            prodJob.Id,\n        },\n        NotificationType = 4,\n        ExternalEmail = \"my_email@mail.com\",\n    });\n\n    // and finally, we can set up Slack notifications\n    var prodJobSlackNotifications = new DbtCloud.PartialNotification(\"prod_job_slack_notifications\", new()\n    {\n        UserId = 100,\n        OnFailures = new[]\n        {\n            23456,\n            56788,\n        },\n        OnCancels = new[]\n        {\n            prodJob.Id,\n        },\n        NotificationType = 2,\n        SlackChannelId = \"C12345ABCDE\",\n        SlackChannelName = \"#my-awesome-channel\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// the config is the same as for `dbtcloud_notification`\n\t\t_, err := dbtcloud.NewPartialNotification(ctx, \"prod_job_internal_notification\", \u0026dbtcloud.PartialNotificationArgs{\n\t\t\tUserId: pulumi.Int(100),\n\t\t\tOnSuccesses: pulumi.IntArray{\n\t\t\t\tprodJob.Id,\n\t\t\t},\n\t\t\tOnFailures: pulumi.IntArray{\n\t\t\t\tpulumi.Int(12345),\n\t\t\t},\n\t\t\tNotificationType: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// we can also send \"external\" email notifications to emails to related to dbt Cloud users\n\t\t_, err = dbtcloud.NewPartialNotification(ctx, \"prod_job_external_notification\", \u0026dbtcloud.PartialNotificationArgs{\n\t\t\tUserId: pulumi.Int(100),\n\t\t\tOnFailures: pulumi.IntArray{\n\t\t\t\tpulumi.Int(23456),\n\t\t\t\tpulumi.Int(56788),\n\t\t\t},\n\t\t\tOnCancels: pulumi.IntArray{\n\t\t\t\tprodJob.Id,\n\t\t\t},\n\t\t\tNotificationType: pulumi.Int(4),\n\t\t\tExternalEmail:    pulumi.String(\"my_email@mail.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// and finally, we can set up Slack notifications\n\t\t_, err = dbtcloud.NewPartialNotification(ctx, \"prod_job_slack_notifications\", \u0026dbtcloud.PartialNotificationArgs{\n\t\t\tUserId: pulumi.Int(100),\n\t\t\tOnFailures: pulumi.IntArray{\n\t\t\t\tpulumi.Int(23456),\n\t\t\t\tpulumi.Int(56788),\n\t\t\t},\n\t\t\tOnCancels: pulumi.IntArray{\n\t\t\t\tprodJob.Id,\n\t\t\t},\n\t\t\tNotificationType: pulumi.Int(2),\n\t\t\tSlackChannelId:   pulumi.String(\"C12345ABCDE\"),\n\t\t\tSlackChannelName: pulumi.String(\"#my-awesome-channel\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.PartialNotification;\nimport com.pulumi.dbtcloud.PartialNotificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // the config is the same as for `dbtcloud_notification`\n        var prodJobInternalNotification = new PartialNotification(\"prodJobInternalNotification\", PartialNotificationArgs.builder()\n            .userId(100)\n            .onSuccesses(prodJob.id())\n            .onFailures(12345)\n            .notificationType(1)\n            .build());\n\n        // we can also send \"external\" email notifications to emails to related to dbt Cloud users\n        var prodJobExternalNotification = new PartialNotification(\"prodJobExternalNotification\", PartialNotificationArgs.builder()\n            .userId(100)\n            .onFailures(            \n                23456,\n                56788)\n            .onCancels(prodJob.id())\n            .notificationType(4)\n            .externalEmail(\"my_email@mail.com\")\n            .build());\n\n        // and finally, we can set up Slack notifications\n        var prodJobSlackNotifications = new PartialNotification(\"prodJobSlackNotifications\", PartialNotificationArgs.builder()\n            .userId(100)\n            .onFailures(            \n                23456,\n                56788)\n            .onCancels(prodJob.id())\n            .notificationType(2)\n            .slackChannelId(\"C12345ABCDE\")\n            .slackChannelName(\"#my-awesome-channel\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # the config is the same as for `dbtcloud_notification`\n  prodJobInternalNotification:\n    type: dbtcloud:PartialNotification\n    name: prod_job_internal_notification\n    properties:\n      userId: 100\n      onSuccesses:\n        - ${prodJob.id}\n      onFailures:\n        - 12345\n      notificationType: 1\n  # we can also send \"external\" email notifications to emails to related to dbt Cloud users\n  prodJobExternalNotification:\n    type: dbtcloud:PartialNotification\n    name: prod_job_external_notification\n    properties:\n      userId: 100\n      onFailures:\n        - 23456\n        - 56788\n      onCancels:\n        - ${prodJob.id}\n      notificationType: 4 # the external_email is the email address that will receive the notification\n      externalEmail: my_email@mail.com\n  # and finally, we can set up Slack notifications\n  prodJobSlackNotifications:\n    type: dbtcloud:PartialNotification\n    name: prod_job_slack_notifications\n    properties:\n      userId: 100\n      onFailures:\n        - 23456\n        - 56788\n      onCancels:\n        - ${prodJob.id}\n      notificationType: 2\n      slackChannelId: C12345ABCDE\n      slackChannelName: '#my-awesome-channel'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "externalEmail": {
                    "type": "string",
                    "description": "The external email to receive the notification [global, used as identifier]\n"
                },
                "notificationType": {
                    "type": "integer",
                    "description": "Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`) [global, used as identifier]\n"
                },
                "onCancels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on cancel. Those will be added/removed when config is added/removed.\n"
                },
                "onFailures": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on failure Those will be added/removed when config is added/removed.\n"
                },
                "onSuccesses": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on success Those will be added/removed when config is added/removed.\n"
                },
                "onWarnings": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on warning Those will be added/removed when config is added/removed.\n"
                },
                "slackChannelId": {
                    "type": "string",
                    "description": "The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings [global, used as identifier]\n"
                },
                "slackChannelName": {
                    "type": "string",
                    "description": "The name of the slack channel [global, used as identifier]\n"
                },
                "state": {
                    "type": "integer",
                    "description": "State of the notification (1 = active (default), 2 = inactive) [global]\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one [global]\n"
                }
            },
            "required": [
                "notificationType",
                "onCancels",
                "onFailures",
                "onSuccesses",
                "onWarnings",
                "state",
                "userId"
            ],
            "inputProperties": {
                "externalEmail": {
                    "type": "string",
                    "description": "The external email to receive the notification [global, used as identifier]\n"
                },
                "notificationType": {
                    "type": "integer",
                    "description": "Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`) [global, used as identifier]\n"
                },
                "onCancels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on cancel. Those will be added/removed when config is added/removed.\n"
                },
                "onFailures": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on failure Those will be added/removed when config is added/removed.\n"
                },
                "onSuccesses": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on success Those will be added/removed when config is added/removed.\n"
                },
                "onWarnings": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on warning Those will be added/removed when config is added/removed.\n"
                },
                "slackChannelId": {
                    "type": "string",
                    "description": "The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings [global, used as identifier]\n"
                },
                "slackChannelName": {
                    "type": "string",
                    "description": "The name of the slack channel [global, used as identifier]\n"
                },
                "state": {
                    "type": "integer",
                    "description": "State of the notification (1 = active (default), 2 = inactive) [global]\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one [global]\n"
                }
            },
            "requiredInputs": [
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PartialNotification resources.\n",
                "properties": {
                    "externalEmail": {
                        "type": "string",
                        "description": "The external email to receive the notification [global, used as identifier]\n"
                    },
                    "notificationType": {
                        "type": "integer",
                        "description": "Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`) [global, used as identifier]\n"
                    },
                    "onCancels": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of job IDs to trigger the webhook on cancel. Those will be added/removed when config is added/removed.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of job IDs to trigger the webhook on failure Those will be added/removed when config is added/removed.\n"
                    },
                    "onSuccesses": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of job IDs to trigger the webhook on success Those will be added/removed when config is added/removed.\n"
                    },
                    "onWarnings": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of job IDs to trigger the webhook on warning Those will be added/removed when config is added/removed.\n"
                    },
                    "slackChannelId": {
                        "type": "string",
                        "description": "The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings [global, used as identifier]\n"
                    },
                    "slackChannelName": {
                        "type": "string",
                        "description": "The name of the slack channel [global, used as identifier]\n"
                    },
                    "state": {
                        "type": "integer",
                        "description": "State of the notification (1 = active (default), 2 = inactive) [global]\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one [global]\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/postgresCredential:PostgresCredential": {
            "description": "Postgres credential resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst postgresProdCredential = new dbtcloud.PostgresCredential(\"postgres_prod_credential\", {\n    isActive: true,\n    projectId: dbtProject.id,\n    type: \"postgres\",\n    defaultSchema: \"my_schema\",\n    username: \"my_username\",\n    password: \"my_password\",\n    numThreads: 16,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\npostgres_prod_credential = dbtcloud.PostgresCredential(\"postgres_prod_credential\",\n    is_active=True,\n    project_id=dbt_project[\"id\"],\n    type=\"postgres\",\n    default_schema=\"my_schema\",\n    username=\"my_username\",\n    password=\"my_password\",\n    num_threads=16)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var postgresProdCredential = new DbtCloud.PostgresCredential(\"postgres_prod_credential\", new()\n    {\n        IsActive = true,\n        ProjectId = dbtProject.Id,\n        Type = \"postgres\",\n        DefaultSchema = \"my_schema\",\n        Username = \"my_username\",\n        Password = \"my_password\",\n        NumThreads = 16,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewPostgresCredential(ctx, \"postgres_prod_credential\", \u0026dbtcloud.PostgresCredentialArgs{\n\t\t\tIsActive:      pulumi.Bool(true),\n\t\t\tProjectId:     pulumi.Any(dbtProject.Id),\n\t\t\tType:          pulumi.String(\"postgres\"),\n\t\t\tDefaultSchema: pulumi.String(\"my_schema\"),\n\t\t\tUsername:      pulumi.String(\"my_username\"),\n\t\t\tPassword:      pulumi.String(\"my_password\"),\n\t\t\tNumThreads:    pulumi.Int(16),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.PostgresCredential;\nimport com.pulumi.dbtcloud.PostgresCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var postgresProdCredential = new PostgresCredential(\"postgresProdCredential\", PostgresCredentialArgs.builder()\n            .isActive(true)\n            .projectId(dbtProject.id())\n            .type(\"postgres\")\n            .defaultSchema(\"my_schema\")\n            .username(\"my_username\")\n            .password(\"my_password\")\n            .numThreads(16)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  postgresProdCredential:\n    type: dbtcloud:PostgresCredential\n    name: postgres_prod_credential\n    properties:\n      isActive: true\n      projectId: ${dbtProject.id}\n      type: postgres\n      defaultSchema: my_schema\n      username: my_username\n      password: my_password\n      numThreads: 16\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_postgres_credential.my_credential\n\n  id = \"project_id:credential_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_postgres_credential.my_credential\n\n  id = \"12345:6789\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/postgresCredential:PostgresCredential my_credential \"project_id:credential_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/postgresCredential:PostgresCredential my_credential 12345:6789\n```\n\n",
            "properties": {
                "credentialId": {
                    "type": "integer",
                    "description": "The system Postgres/Redshift/AlloyDB credential ID.\n"
                },
                "defaultSchema": {
                    "type": "string",
                    "description": "Default schema name\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the Postgres/Redshift/AlloyDB credential is active\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use (required for Redshift)\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for Postgres/Redshift/AlloyDB\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Postgres/Redshift/AlloyDB credential in.\n"
                },
                "targetName": {
                    "type": "string",
                    "description": "Default schema name\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of connection. One of (postgres/redshift). Use postgres for alloydb connections\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for Postgres/Redshift/AlloyDB\n"
                }
            },
            "required": [
                "credentialId",
                "defaultSchema",
                "isActive",
                "numThreads",
                "projectId",
                "targetName",
                "type",
                "username"
            ],
            "inputProperties": {
                "defaultSchema": {
                    "type": "string",
                    "description": "Default schema name\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the Postgres/Redshift/AlloyDB credential is active\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use (required for Redshift)\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for Postgres/Redshift/AlloyDB\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Postgres/Redshift/AlloyDB credential in.\n"
                },
                "targetName": {
                    "type": "string",
                    "description": "Default schema name\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of connection. One of (postgres/redshift). Use postgres for alloydb connections\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for Postgres/Redshift/AlloyDB\n"
                }
            },
            "requiredInputs": [
                "defaultSchema",
                "projectId",
                "type",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PostgresCredential resources.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "The system Postgres/Redshift/AlloyDB credential ID.\n"
                    },
                    "defaultSchema": {
                        "type": "string",
                        "description": "Default schema name\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the Postgres/Redshift/AlloyDB credential is active\n"
                    },
                    "numThreads": {
                        "type": "integer",
                        "description": "Number of threads to use (required for Redshift)\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for Postgres/Redshift/AlloyDB\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the Postgres/Redshift/AlloyDB credential in.\n"
                    },
                    "targetName": {
                        "type": "string",
                        "description": "Default schema name\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of connection. One of (postgres/redshift). Use postgres for alloydb connections\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username for Postgres/Redshift/AlloyDB\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/project:Project": {
            "description": "Manages a dbt Cloud project.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst dbtProject = new dbtcloud.Project(\"dbt_project\", {name: \"Analytics\"});\nconst dbtProjectWithDescription = new dbtcloud.Project(\"dbt_project_with_description\", {\n    name: \"Analytics with description\",\n    description: \"My awesome analytics project\",\n});\nconst dbtProjectWithSubdir = new dbtcloud.Project(\"dbt_project_with_subdir\", {\n    name: \"Analytics in Subdir\",\n    dbtProjectSubdirectory: \"path\",\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\ndbt_project = dbtcloud.Project(\"dbt_project\", name=\"Analytics\")\ndbt_project_with_description = dbtcloud.Project(\"dbt_project_with_description\",\n    name=\"Analytics with description\",\n    description=\"My awesome analytics project\")\ndbt_project_with_subdir = dbtcloud.Project(\"dbt_project_with_subdir\",\n    name=\"Analytics in Subdir\",\n    dbt_project_subdirectory=\"path\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dbtProject = new DbtCloud.Project(\"dbt_project\", new()\n    {\n        Name = \"Analytics\",\n    });\n\n    var dbtProjectWithDescription = new DbtCloud.Project(\"dbt_project_with_description\", new()\n    {\n        Name = \"Analytics with description\",\n        Description = \"My awesome analytics project\",\n    });\n\n    var dbtProjectWithSubdir = new DbtCloud.Project(\"dbt_project_with_subdir\", new()\n    {\n        Name = \"Analytics in Subdir\",\n        DbtProjectSubdirectory = \"path\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewProject(ctx, \"dbt_project\", \u0026dbtcloud.ProjectArgs{\n\t\t\tName: pulumi.String(\"Analytics\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = dbtcloud.NewProject(ctx, \"dbt_project_with_description\", \u0026dbtcloud.ProjectArgs{\n\t\t\tName:        pulumi.String(\"Analytics with description\"),\n\t\t\tDescription: pulumi.String(\"My awesome analytics project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = dbtcloud.NewProject(ctx, \"dbt_project_with_subdir\", \u0026dbtcloud.ProjectArgs{\n\t\t\tName:                   pulumi.String(\"Analytics in Subdir\"),\n\t\t\tDbtProjectSubdirectory: pulumi.String(\"path\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.Project;\nimport com.pulumi.dbtcloud.ProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dbtProject = new Project(\"dbtProject\", ProjectArgs.builder()\n            .name(\"Analytics\")\n            .build());\n\n        var dbtProjectWithDescription = new Project(\"dbtProjectWithDescription\", ProjectArgs.builder()\n            .name(\"Analytics with description\")\n            .description(\"My awesome analytics project\")\n            .build());\n\n        var dbtProjectWithSubdir = new Project(\"dbtProjectWithSubdir\", ProjectArgs.builder()\n            .name(\"Analytics in Subdir\")\n            .dbtProjectSubdirectory(\"path\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dbtProject:\n    type: dbtcloud:Project\n    name: dbt_project\n    properties:\n      name: Analytics\n  dbtProjectWithDescription:\n    type: dbtcloud:Project\n    name: dbt_project_with_description\n    properties:\n      name: Analytics with description\n      description: My awesome analytics project\n  dbtProjectWithSubdir:\n    type: dbtcloud:Project\n    name: dbt_project_with_subdir\n    properties:\n      name: Analytics in Subdir\n      dbtProjectSubdirectory: path\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_project.my_project\n\n  id = \"project_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_project.my_project\n\n  id = \"12345\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/project:Project my_project \"project_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/project:Project my_project 12345\n```\n\n",
            "properties": {
                "dbtProjectSubdirectory": {
                    "type": "string",
                    "description": "DBT project subdirectory\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the project. Will show in dbt Explorer.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Project name\n"
                },
                "type": {
                    "type": "integer",
                    "description": "The type of dbt project (0=default or 1=hybrid)\n"
                }
            },
            "required": [
                "dbtProjectSubdirectory",
                "description",
                "name",
                "type"
            ],
            "inputProperties": {
                "dbtProjectSubdirectory": {
                    "type": "string",
                    "description": "DBT project subdirectory\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the project. Will show in dbt Explorer.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Project name\n"
                },
                "type": {
                    "type": "integer",
                    "description": "The type of dbt project (0=default or 1=hybrid)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "dbtProjectSubdirectory": {
                        "type": "string",
                        "description": "DBT project subdirectory\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description for the project. Will show in dbt Explorer.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Project name\n"
                    },
                    "type": {
                        "type": "integer",
                        "description": "The type of dbt project (0=default or 1=hybrid)\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/projectArtefacts:ProjectArtefacts": {
            "description": "[Deprecated] Resource for mentioning what jobs are the source of truth for the legacy dbt Docs and dbt Source Freshness pages. dbt Explorer doesn't require this config anymore.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myProjectArtefacts = new dbtcloud.ProjectArtefacts(\"my_project_artefacts\", {\n    projectId: dbtProject.id,\n    docsJobId: prodJob.id,\n    freshnessJobId: prodJob.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_project_artefacts = dbtcloud.ProjectArtefacts(\"my_project_artefacts\",\n    project_id=dbt_project[\"id\"],\n    docs_job_id=prod_job[\"id\"],\n    freshness_job_id=prod_job[\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProjectArtefacts = new DbtCloud.ProjectArtefacts(\"my_project_artefacts\", new()\n    {\n        ProjectId = dbtProject.Id,\n        DocsJobId = prodJob.Id,\n        FreshnessJobId = prodJob.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewProjectArtefacts(ctx, \"my_project_artefacts\", \u0026dbtcloud.ProjectArtefactsArgs{\n\t\t\tProjectId:      pulumi.Any(dbtProject.Id),\n\t\t\tDocsJobId:      pulumi.Any(prodJob.Id),\n\t\t\tFreshnessJobId: pulumi.Any(prodJob.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.ProjectArtefacts;\nimport com.pulumi.dbtcloud.ProjectArtefactsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myProjectArtefacts = new ProjectArtefacts(\"myProjectArtefacts\", ProjectArtefactsArgs.builder()\n            .projectId(dbtProject.id())\n            .docsJobId(prodJob.id())\n            .freshnessJobId(prodJob.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myProjectArtefacts:\n    type: dbtcloud:ProjectArtefacts\n    name: my_project_artefacts\n    properties:\n      projectId: ${dbtProject.id}\n      docsJobId: ${prodJob.id}\n      freshnessJobId: ${prodJob.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_project_artefacts.my_artefacts\n\n  id = \"project_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_project_artefacts.my_artefacts\n\n  id = \"12345\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/projectArtefacts:ProjectArtefacts my_artefacts \"project_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/projectArtefacts:ProjectArtefacts my_artefacts 12345\n```\n\n",
            "properties": {
                "docsJobId": {
                    "type": "integer",
                    "description": "Docs Job ID\n"
                },
                "freshnessJobId": {
                    "type": "integer",
                    "description": "Freshness Job ID\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID\n"
                }
            },
            "required": [
                "docsJobId",
                "freshnessJobId",
                "projectId"
            ],
            "inputProperties": {
                "docsJobId": {
                    "type": "integer",
                    "description": "Docs Job ID\n"
                },
                "freshnessJobId": {
                    "type": "integer",
                    "description": "Freshness Job ID\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectArtefacts resources.\n",
                "properties": {
                    "docsJobId": {
                        "type": "integer",
                        "description": "Docs Job ID\n"
                    },
                    "freshnessJobId": {
                        "type": "integer",
                        "description": "Freshness Job ID\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/projectRepository:ProjectRepository": {
            "description": "Manages a dbt Cloud project repository.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst dbtProjectRepository = new dbtcloud.ProjectRepository(\"dbt_project_repository\", {\n    projectId: dbtProject.id,\n    repositoryId: dbtRepository.repositoryId,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\ndbt_project_repository = dbtcloud.ProjectRepository(\"dbt_project_repository\",\n    project_id=dbt_project[\"id\"],\n    repository_id=dbt_repository[\"repositoryId\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dbtProjectRepository = new DbtCloud.ProjectRepository(\"dbt_project_repository\", new()\n    {\n        ProjectId = dbtProject.Id,\n        RepositoryId = dbtRepository.RepositoryId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewProjectRepository(ctx, \"dbt_project_repository\", \u0026dbtcloud.ProjectRepositoryArgs{\n\t\t\tProjectId:    pulumi.Any(dbtProject.Id),\n\t\t\tRepositoryId: pulumi.Any(dbtRepository.RepositoryId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.ProjectRepository;\nimport com.pulumi.dbtcloud.ProjectRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dbtProjectRepository = new ProjectRepository(\"dbtProjectRepository\", ProjectRepositoryArgs.builder()\n            .projectId(dbtProject.id())\n            .repositoryId(dbtRepository.repositoryId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dbtProjectRepository:\n    type: dbtcloud:ProjectRepository\n    name: dbt_project_repository\n    properties:\n      projectId: ${dbtProject.id}\n      repositoryId: ${dbtRepository.repositoryId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_project_repository.my_project\n\n  id = \"project_id:repository_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_project_repository.my_project\n\n  id = \"12345:5678\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/projectRepository:ProjectRepository my_project \"project_id:repository_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/projectRepository:ProjectRepository my_project 12345:5678\n```\n\n",
            "properties": {
                "projectId": {
                    "type": "integer",
                    "description": "Project ID\n"
                },
                "repositoryId": {
                    "type": "integer",
                    "description": "Repository ID\n"
                }
            },
            "required": [
                "projectId",
                "repositoryId"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "integer",
                    "description": "Project ID\n"
                },
                "repositoryId": {
                    "type": "integer",
                    "description": "Repository ID\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "repositoryId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectRepository resources.\n",
                "properties": {
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n"
                    },
                    "repositoryId": {
                        "type": "integer",
                        "description": "Repository ID\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/redshiftCredential:RedshiftCredential": {
            "description": "Redshift credential resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst redshift = new dbtcloud.RedshiftCredential(\"redshift\", {\n    numThreads: 16,\n    projectId: testProject.id,\n    defaultSchema: \"my_schema\",\n    username: \"my_username\",\n    password: \"my_sensitive_password\",\n    isActive: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nredshift = dbtcloud.RedshiftCredential(\"redshift\",\n    num_threads=16,\n    project_id=test_project[\"id\"],\n    default_schema=\"my_schema\",\n    username=\"my_username\",\n    password=\"my_sensitive_password\",\n    is_active=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var redshift = new DbtCloud.RedshiftCredential(\"redshift\", new()\n    {\n        NumThreads = 16,\n        ProjectId = testProject.Id,\n        DefaultSchema = \"my_schema\",\n        Username = \"my_username\",\n        Password = \"my_sensitive_password\",\n        IsActive = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewRedshiftCredential(ctx, \"redshift\", \u0026dbtcloud.RedshiftCredentialArgs{\n\t\t\tNumThreads:    pulumi.Int(16),\n\t\t\tProjectId:     pulumi.Any(testProject.Id),\n\t\t\tDefaultSchema: pulumi.String(\"my_schema\"),\n\t\t\tUsername:      pulumi.String(\"my_username\"),\n\t\t\tPassword:      pulumi.String(\"my_sensitive_password\"),\n\t\t\tIsActive:      pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.RedshiftCredential;\nimport com.pulumi.dbtcloud.RedshiftCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var redshift = new RedshiftCredential(\"redshift\", RedshiftCredentialArgs.builder()\n            .numThreads(16)\n            .projectId(testProject.id())\n            .defaultSchema(\"my_schema\")\n            .username(\"my_username\")\n            .password(\"my_sensitive_password\")\n            .isActive(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  redshift:\n    type: dbtcloud:RedshiftCredential\n    properties:\n      numThreads: 16\n      projectId: ${testProject.id}\n      defaultSchema: my_schema\n      username: my_username\n      password: my_sensitive_password\n      isActive: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_redshift_credential.my_credential\n\n  id = \"project_id:credential_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_redshift_credential.my_credential\n\n  id = \"12345:6789\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/redshiftCredential:RedshiftCredential my_credential \"project_id:credential_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/redshiftCredential:RedshiftCredential my_credential 12345:6789\n```\n\n",
            "properties": {
                "credentialId": {
                    "type": "integer",
                    "description": "The internal credential ID\n"
                },
                "defaultSchema": {
                    "type": "string",
                    "description": "Default schema name\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the Redshift credential is active\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the Redshift account\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Redshift credential in\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username for the Redshift account.\n"
                }
            },
            "required": [
                "credentialId",
                "defaultSchema",
                "isActive",
                "numThreads",
                "password",
                "projectId",
                "username"
            ],
            "inputProperties": {
                "defaultSchema": {
                    "type": "string",
                    "description": "Default schema name\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the Redshift credential is active\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the Redshift account\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Redshift credential in\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username for the Redshift account.\n"
                }
            },
            "requiredInputs": [
                "defaultSchema",
                "numThreads",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RedshiftCredential resources.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "The internal credential ID\n"
                    },
                    "defaultSchema": {
                        "type": "string",
                        "description": "Default schema name\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the Redshift credential is active\n"
                    },
                    "numThreads": {
                        "type": "integer",
                        "description": "Number of threads to use\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for the Redshift account\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the Redshift credential in\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username for the Redshift account.\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/redshiftSemanticLayerCredential:RedshiftSemanticLayerCredential": {
            "description": "Redshift credential resource. This resource is composed of a Redshift credential and a Semantic Layer configuration. It is used to create a Redshift credential for the Semantic Layer.\n",
            "properties": {
                "configuration": {
                    "$ref": "#/types/dbtcloud:index/RedshiftSemanticLayerCredentialConfiguration:RedshiftSemanticLayerCredentialConfiguration",
                    "description": "Semantic Layer credential configuration details.\n"
                },
                "credential": {
                    "$ref": "#/types/dbtcloud:index/RedshiftSemanticLayerCredentialCredential:RedshiftSemanticLayerCredentialCredential",
                    "description": "Snowflake credential details, but used in the context of the Semantic Layer.\n"
                }
            },
            "required": [
                "configuration",
                "credential"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/dbtcloud:index/RedshiftSemanticLayerCredentialConfiguration:RedshiftSemanticLayerCredentialConfiguration",
                    "description": "Semantic Layer credential configuration details.\n"
                },
                "credential": {
                    "$ref": "#/types/dbtcloud:index/RedshiftSemanticLayerCredentialCredential:RedshiftSemanticLayerCredentialCredential",
                    "description": "Snowflake credential details, but used in the context of the Semantic Layer.\n"
                }
            },
            "requiredInputs": [
                "configuration",
                "credential"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RedshiftSemanticLayerCredential resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/dbtcloud:index/RedshiftSemanticLayerCredentialConfiguration:RedshiftSemanticLayerCredentialConfiguration",
                        "description": "Semantic Layer credential configuration details.\n"
                    },
                    "credential": {
                        "$ref": "#/types/dbtcloud:index/RedshiftSemanticLayerCredentialCredential:RedshiftSemanticLayerCredentialCredential",
                        "description": "Snowflake credential details, but used in the context of the Semantic Layer.\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/repository:Repository": {
            "description": "This resource allows you to manage connections to git repositories in dbt Cloud.\n\nBy itself, this resource won't show you the repository in the dbt Cloud UI. \nYou will need to also set up a `dbtcloud.ProjectRepository` resource as well to link your dbt Cloud project and the git repository.\n\nIn order to find the `github_installation_id`, you can log in to dbt Cloud, replace `\u003cdbt_cloud_url\u003e` by your dbt Cloud\nURL and run the following commands in the Google Chrome console:\n\n```javascript\ndbt_cloud_api_result = await (fetch('https://\u003cdbt_cloud_url\u003e/api/v2/integrations/github/installations/').then(res =\u003e res.json()));\nconsole.log(\"github_application_id: \" + dbt_cloud_api_result.filter(res =\u003e res[\"access_tokens_url\"].includes(\"github\"))[0][\"id\"]);\n```\n\nAlternatively, you can go to the page `https://\u003cdbt_cloud_url\u003e/api/v2/integrations/github/installations/` and read the\nvalue of `id`  or use the `http` provider to retrieve it automatically like in the example below.\n\n{{% examples %}}\n## Example Usage\n\n```terraform\n### repo cloned via the GitHub integration, manually entering the `github_installation_id`\nresource \"dbtcloud_repository\" \"github_repo\" {\n  project_id             = dbtcloud_project.dbt_project.id\n  remote_url             = \"git@github.com:\u003cgithub_org\u003e/\u003cgithub_repo\u003e.git\"\n  github_installation_id = 9876\n  git_clone_strategy     = \"github_app\"\n}\n\n\n### repo cloned via the GitHub integration, with auto-retrieval of the `github_installation_id`\n# here, we assume that `token` and `host_url` are respectively accessible via `var.dbt_token` and `var.dbt_host_url`\n# NOTE: the following requires connecting via a user token and can't be retrieved with a service token\ndata \"http\" \"github_installations_response\" {\n  url = format(\"%s/v2/integrations/github/installations/\", var.dbt_host_url)\n  request_headers = {\n    Authorization = format(\"Bearer %s\", var.dbt_token)\n  }\n}\n\nlocals {\n  github_installation_id = jsondecode(data.http.github_installations_response.response_body)[0].id\n}\n\nresource \"dbtcloud_repository\" \"github_repo_other\" {\n  project_id             = dbtcloud_project.dbt_project.id\n  remote_url             = \"git@github.com:\u003cgithub_org\u003e/\u003cgithub_repo\u003e.git\"\n  github_installation_id = local.github_installation_id\n  git_clone_strategy     = \"github_app\"\n}\n\n\n### repo cloned via the GitLab integration\n# as of 15 Sept 2023 this resource requires using a user token and can't be set with a service token - CC-791\nresource \"dbtcloud_repository\" \"gitlab_repo\" {\n  project_id         = dbtcloud_project.dbt_project.id\n  remote_url         = \"\u003cgitlab-group\u003e/\u003cgitlab-project\u003e\"\n  gitlab_project_id  = 8765\n  git_clone_strategy = \"deploy_token\"\n}\n\n\n### repo cloned via the deploy token strategy\nresource \"dbtcloud_repository\" \"deploy_repo\" {\n  project_id         = dbtcloud_project.dbt_project.id\n  remote_url         = \"git://github.com/\u003cgithub_org\u003e/\u003cgithub_repo\u003e.git\"\n  git_clone_strategy = \"deploy_key\"\n}\n\n\n### repo cloned via the Azure Dev Ops integration\nresource \"dbtcloud_repository\" \"ado_repo\" {\n  project_id = dbtcloud_project.dbt_project.id\n  # the following values can be added manually (IDs can be retrieved from the ADO API) or via data sources\n  # remote_url                              = \"https://abc@dev.azure.com/abc/def/_git/my_repo\"\n  # azure_active_directory_project_id       = \"12345678-1234-1234-1234-1234567890ab\"\n  # azure_active_directory_repository_id    = \"87654321-4321-abcd-abcd-464327678642\"\n  remote_url                                = data.dbtcloud_azure_dev_ops_repository.my_devops_repo.remote_url\n  azure_active_directory_repository_id      = data.dbtcloud_azure_dev_ops_repository.my_devops_repo.id\n  azure_active_directory_project_id         = data.dbtcloud_azure_dev_ops_project.my_devops_project.id\n  azure_bypass_webhook_registration_failure = false\n  git_clone_strategy                        = \"azure_active_directory_app\"\n}\n```\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_repository.my_repository\n\n  id = \"project_id:repository_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_repository.my_repository\n\n  id = \"12345:6789\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/repository:Repository my_repository \"project_id:repository_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/repository:Repository my_repository 12345:6789\n```\n\n\n{{% /examples %}}",
            "properties": {
                "azureActiveDirectoryProjectId": {
                    "type": "string",
                    "description": "The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsProject` and the project name - (for ADO native integration only)\n"
                },
                "azureActiveDirectoryRepositoryId": {
                    "type": "string",
                    "description": "The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsRepository` along with the ADO Project ID and the repository name - (for ADO native integration only)\n"
                },
                "azureBypassWebhookRegistrationFailure": {
                    "type": "boolean",
                    "description": "If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will be triggered - (for ADO native integration only)\n"
                },
                "deployKey": {
                    "type": "string",
                    "description": "Public key generated by dbt when using `deploy_key` clone strategy\n"
                },
                "fetchDeployKey": {
                    "type": "boolean",
                    "description": "Whether we should return the public deploy key - (for the `deploy_key` strategy)\n",
                    "deprecationMessage": "This field is deprecated and will be removed in a future version of the provider, please remove it from your configuration. The key is always fetched when the clone strategy is `deploy_key`"
                },
                "gitCloneStrategy": {
                    "type": "string",
                    "description": "Git clone strategy for the repository. Can be `deploy_key` (default) for cloning via SSH Deploy Key, `github_app` for GitHub native integration, `deploy_token` for the GitLab native integration and `azure_active_directory_app` for ADO native integration\n"
                },
                "githubInstallationId": {
                    "type": "integer",
                    "description": "Identifier for the GitHub App - (for GitHub native integration only)\n"
                },
                "gitlabProjectId": {
                    "type": "integer",
                    "description": "Identifier for the Gitlab project -  (for GitLab native integration only)\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the repository is active\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the repository in\n"
                },
                "pullRequestUrlTemplate": {
                    "type": "string",
                    "description": "URL template for creating a pull request. If it is not set, the default template will create a PR from the current branch to the branch configured in the Development environment.\n"
                },
                "remoteUrl": {
                    "type": "string",
                    "description": "Git URL for the repository or \u003cGroup\u003e/\u003cProject\u003e for Gitlab\n"
                },
                "repositoryCredentialsId": {
                    "type": "integer",
                    "description": "Credentials ID for the repository (From the repository side not the dbt Cloud ID)\n"
                },
                "repositoryId": {
                    "type": "integer",
                    "description": "Repository Identifier\n"
                }
            },
            "required": [
                "azureActiveDirectoryProjectId",
                "azureActiveDirectoryRepositoryId",
                "azureBypassWebhookRegistrationFailure",
                "deployKey",
                "fetchDeployKey",
                "gitCloneStrategy",
                "isActive",
                "projectId",
                "pullRequestUrlTemplate",
                "remoteUrl",
                "repositoryCredentialsId",
                "repositoryId"
            ],
            "inputProperties": {
                "azureActiveDirectoryProjectId": {
                    "type": "string",
                    "description": "The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsProject` and the project name - (for ADO native integration only)\n"
                },
                "azureActiveDirectoryRepositoryId": {
                    "type": "string",
                    "description": "The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsRepository` along with the ADO Project ID and the repository name - (for ADO native integration only)\n"
                },
                "azureBypassWebhookRegistrationFailure": {
                    "type": "boolean",
                    "description": "If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will be triggered - (for ADO native integration only)\n"
                },
                "fetchDeployKey": {
                    "type": "boolean",
                    "description": "Whether we should return the public deploy key - (for the `deploy_key` strategy)\n",
                    "deprecationMessage": "This field is deprecated and will be removed in a future version of the provider, please remove it from your configuration. The key is always fetched when the clone strategy is `deploy_key`"
                },
                "gitCloneStrategy": {
                    "type": "string",
                    "description": "Git clone strategy for the repository. Can be `deploy_key` (default) for cloning via SSH Deploy Key, `github_app` for GitHub native integration, `deploy_token` for the GitLab native integration and `azure_active_directory_app` for ADO native integration\n"
                },
                "githubInstallationId": {
                    "type": "integer",
                    "description": "Identifier for the GitHub App - (for GitHub native integration only)\n"
                },
                "gitlabProjectId": {
                    "type": "integer",
                    "description": "Identifier for the Gitlab project -  (for GitLab native integration only)\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the repository is active\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the repository in\n"
                },
                "pullRequestUrlTemplate": {
                    "type": "string",
                    "description": "URL template for creating a pull request. If it is not set, the default template will create a PR from the current branch to the branch configured in the Development environment.\n"
                },
                "remoteUrl": {
                    "type": "string",
                    "description": "Git URL for the repository or \u003cGroup\u003e/\u003cProject\u003e for Gitlab\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "remoteUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Repository resources.\n",
                "properties": {
                    "azureActiveDirectoryProjectId": {
                        "type": "string",
                        "description": "The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsProject` and the project name - (for ADO native integration only)\n"
                    },
                    "azureActiveDirectoryRepositoryId": {
                        "type": "string",
                        "description": "The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsRepository` along with the ADO Project ID and the repository name - (for ADO native integration only)\n"
                    },
                    "azureBypassWebhookRegistrationFailure": {
                        "type": "boolean",
                        "description": "If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will be triggered - (for ADO native integration only)\n"
                    },
                    "deployKey": {
                        "type": "string",
                        "description": "Public key generated by dbt when using `deploy_key` clone strategy\n"
                    },
                    "fetchDeployKey": {
                        "type": "boolean",
                        "description": "Whether we should return the public deploy key - (for the `deploy_key` strategy)\n",
                        "deprecationMessage": "This field is deprecated and will be removed in a future version of the provider, please remove it from your configuration. The key is always fetched when the clone strategy is `deploy_key`"
                    },
                    "gitCloneStrategy": {
                        "type": "string",
                        "description": "Git clone strategy for the repository. Can be `deploy_key` (default) for cloning via SSH Deploy Key, `github_app` for GitHub native integration, `deploy_token` for the GitLab native integration and `azure_active_directory_app` for ADO native integration\n"
                    },
                    "githubInstallationId": {
                        "type": "integer",
                        "description": "Identifier for the GitHub App - (for GitHub native integration only)\n"
                    },
                    "gitlabProjectId": {
                        "type": "integer",
                        "description": "Identifier for the Gitlab project -  (for GitLab native integration only)\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the repository is active\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the repository in\n"
                    },
                    "pullRequestUrlTemplate": {
                        "type": "string",
                        "description": "URL template for creating a pull request. If it is not set, the default template will create a PR from the current branch to the branch configured in the Development environment.\n"
                    },
                    "remoteUrl": {
                        "type": "string",
                        "description": "Git URL for the repository or \u003cGroup\u003e/\u003cProject\u003e for Gitlab\n"
                    },
                    "repositoryCredentialsId": {
                        "type": "integer",
                        "description": "Credentials ID for the repository (From the repository side not the dbt Cloud ID)\n"
                    },
                    "repositoryId": {
                        "type": "integer",
                        "description": "Repository Identifier\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/semanticLayerConfiguration:SemanticLayerConfiguration": {
            "description": "The resource allows basic configuration of the Semantic Layer for a specific project. For the feature to be completely functional, a Semantic Layer Credential is also required.\nSee the documentationh ttps://docs.getdbt.com/docs/use-dbt-semantic-layer/dbt-sl for more information on the Semantic Layer.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst example = new dbtcloud.SemanticLayerConfiguration(\"example\", {\n    projectId: projectId,\n    environmentId: environmentId,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nexample = dbtcloud.SemanticLayerConfiguration(\"example\",\n    project_id=project_id,\n    environment_id=environment_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new DbtCloud.SemanticLayerConfiguration(\"example\", new()\n    {\n        ProjectId = projectId,\n        EnvironmentId = environmentId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewSemanticLayerConfiguration(ctx, \"example\", \u0026dbtcloud.SemanticLayerConfigurationArgs{\n\t\t\tProjectId:     pulumi.Any(projectId),\n\t\t\tEnvironmentId: pulumi.Any(environmentId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.SemanticLayerConfiguration;\nimport com.pulumi.dbtcloud.SemanticLayerConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new SemanticLayerConfiguration(\"example\", SemanticLayerConfigurationArgs.builder()\n            .projectId(projectId)\n            .environmentId(environmentId)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: dbtcloud:SemanticLayerConfiguration\n    properties:\n      projectId: ${projectId}\n      environmentId: ${environmentId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_semantic_layer_configuration.example\n\n  id = \"project_id:id\"\n\n}\n\nimport {\n\n  to = dbtcloud_semantic_layer_configuration.example\n\n  id = \"12345:5678\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/semanticLayerConfiguration:SemanticLayerConfiguration example \"project_id:id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/semanticLayerConfiguration:SemanticLayerConfiguration example 12345:5678\n```\n\n",
            "properties": {
                "environmentId": {
                    "type": "integer",
                    "description": "The ID of the environment\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The ID of the project\n"
                }
            },
            "required": [
                "environmentId",
                "projectId"
            ],
            "inputProperties": {
                "environmentId": {
                    "type": "integer",
                    "description": "The ID of the environment\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The ID of the project\n"
                }
            },
            "requiredInputs": [
                "environmentId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SemanticLayerConfiguration resources.\n",
                "properties": {
                    "environmentId": {
                        "type": "integer",
                        "description": "The ID of the environment\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "The ID of the project\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/serviceToken:ServiceToken": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst testServiceToken = new dbtcloud.ServiceToken(\"test_service_token\", {\n    name: \"Test Service Token\",\n    serviceTokenPermissions: [\n        {\n            permissionSet: \"git_admin\",\n            allProjects: true,\n        },\n        {\n            permissionSet: \"job_admin\",\n            allProjects: false,\n            projectId: dbtProject.id,\n        },\n        {\n            permissionSet: \"developer\",\n            allProjects: true,\n            writableEnvironmentCategories: [\n                \"development\",\n                \"staging\",\n            ],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\ntest_service_token = dbtcloud.ServiceToken(\"test_service_token\",\n    name=\"Test Service Token\",\n    service_token_permissions=[\n        {\n            \"permission_set\": \"git_admin\",\n            \"all_projects\": True,\n        },\n        {\n            \"permission_set\": \"job_admin\",\n            \"all_projects\": False,\n            \"project_id\": dbt_project[\"id\"],\n        },\n        {\n            \"permission_set\": \"developer\",\n            \"all_projects\": True,\n            \"writable_environment_categories\": [\n                \"development\",\n                \"staging\",\n            ],\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testServiceToken = new DbtCloud.ServiceToken(\"test_service_token\", new()\n    {\n        Name = \"Test Service Token\",\n        ServiceTokenPermissions = new[]\n        {\n            new DbtCloud.Inputs.ServiceTokenServiceTokenPermissionArgs\n            {\n                PermissionSet = \"git_admin\",\n                AllProjects = true,\n            },\n            new DbtCloud.Inputs.ServiceTokenServiceTokenPermissionArgs\n            {\n                PermissionSet = \"job_admin\",\n                AllProjects = false,\n                ProjectId = dbtProject.Id,\n            },\n            new DbtCloud.Inputs.ServiceTokenServiceTokenPermissionArgs\n            {\n                PermissionSet = \"developer\",\n                AllProjects = true,\n                WritableEnvironmentCategories = new[]\n                {\n                    \"development\",\n                    \"staging\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewServiceToken(ctx, \"test_service_token\", \u0026dbtcloud.ServiceTokenArgs{\n\t\t\tName: pulumi.String(\"Test Service Token\"),\n\t\t\tServiceTokenPermissions: dbtcloud.ServiceTokenServiceTokenPermissionArray{\n\t\t\t\t\u0026dbtcloud.ServiceTokenServiceTokenPermissionArgs{\n\t\t\t\t\tPermissionSet: pulumi.String(\"git_admin\"),\n\t\t\t\t\tAllProjects:   pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026dbtcloud.ServiceTokenServiceTokenPermissionArgs{\n\t\t\t\t\tPermissionSet: pulumi.String(\"job_admin\"),\n\t\t\t\t\tAllProjects:   pulumi.Bool(false),\n\t\t\t\t\tProjectId:     pulumi.Any(dbtProject.Id),\n\t\t\t\t},\n\t\t\t\t\u0026dbtcloud.ServiceTokenServiceTokenPermissionArgs{\n\t\t\t\t\tPermissionSet: pulumi.String(\"developer\"),\n\t\t\t\t\tAllProjects:   pulumi.Bool(true),\n\t\t\t\t\tWritableEnvironmentCategories: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"development\"),\n\t\t\t\t\t\tpulumi.String(\"staging\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.ServiceToken;\nimport com.pulumi.dbtcloud.ServiceTokenArgs;\nimport com.pulumi.dbtcloud.inputs.ServiceTokenServiceTokenPermissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testServiceToken = new ServiceToken(\"testServiceToken\", ServiceTokenArgs.builder()\n            .name(\"Test Service Token\")\n            .serviceTokenPermissions(            \n                ServiceTokenServiceTokenPermissionArgs.builder()\n                    .permissionSet(\"git_admin\")\n                    .allProjects(true)\n                    .build(),\n                ServiceTokenServiceTokenPermissionArgs.builder()\n                    .permissionSet(\"job_admin\")\n                    .allProjects(false)\n                    .projectId(dbtProject.id())\n                    .build(),\n                ServiceTokenServiceTokenPermissionArgs.builder()\n                    .permissionSet(\"developer\")\n                    .allProjects(true)\n                    .writableEnvironmentCategories(                    \n                        \"development\",\n                        \"staging\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testServiceToken:\n    type: dbtcloud:ServiceToken\n    name: test_service_token\n    properties:\n      name: Test Service Token\n      serviceTokenPermissions:\n        - permissionSet: git_admin\n          allProjects: true\n        - permissionSet: job_admin\n          allProjects: false\n          projectId: ${dbtProject.id}\n        - permissionSet: developer\n          allProjects: true\n          writableEnvironmentCategories:\n            - development\n            - staging\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_service_token.my_service_token\n\n  id = \"service_token_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_service_token.my_service_token\n\n  id = \"12345\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/serviceToken:ServiceToken my_service_token \"service_token_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/serviceToken:ServiceToken my_service_token 12345\n```\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Service token name\n"
                },
                "serviceTokenPermissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dbtcloud:index/ServiceTokenServiceTokenPermission:ServiceTokenServiceTokenPermission"
                    },
                    "description": "Permissions set for the service token\n"
                },
                "state": {
                    "type": "integer",
                    "description": "Service token state (1 is active, 2 is inactive)\n"
                },
                "tokenString": {
                    "type": "string",
                    "description": "Service token secret value (only accessible on creation))\n",
                    "secret": true
                },
                "uid": {
                    "type": "string",
                    "description": "Service token UID (part of the token)\n"
                }
            },
            "required": [
                "name",
                "state",
                "tokenString",
                "uid"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Service token name\n"
                },
                "serviceTokenPermissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dbtcloud:index/ServiceTokenServiceTokenPermission:ServiceTokenServiceTokenPermission"
                    },
                    "description": "Permissions set for the service token\n"
                },
                "state": {
                    "type": "integer",
                    "description": "Service token state (1 is active, 2 is inactive)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceToken resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Service token name\n"
                    },
                    "serviceTokenPermissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/ServiceTokenServiceTokenPermission:ServiceTokenServiceTokenPermission"
                        },
                        "description": "Permissions set for the service token\n"
                    },
                    "state": {
                        "type": "integer",
                        "description": "Service token state (1 is active, 2 is inactive)\n"
                    },
                    "tokenString": {
                        "type": "string",
                        "description": "Service token secret value (only accessible on creation))\n",
                        "secret": true
                    },
                    "uid": {
                        "type": "string",
                        "description": "Service token UID (part of the token)\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/snowflakeCredential:SnowflakeCredential": {
            "description": "Snowflake credential resource. This resource is used both as a stand-alone credential, but also as part of the Semantic Layer credential definition for Snowflake.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst prodCredential = new dbtcloud.SnowflakeCredential(\"prod_credential\", {\n    projectId: dbtProject.id,\n    authType: \"password\",\n    numThreads: 16,\n    schema: \"SCHEMA\",\n    user: \"user\",\n    password: \"password\",\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nprod_credential = dbtcloud.SnowflakeCredential(\"prod_credential\",\n    project_id=dbt_project[\"id\"],\n    auth_type=\"password\",\n    num_threads=16,\n    schema=\"SCHEMA\",\n    user=\"user\",\n    password=\"password\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var prodCredential = new DbtCloud.SnowflakeCredential(\"prod_credential\", new()\n    {\n        ProjectId = dbtProject.Id,\n        AuthType = \"password\",\n        NumThreads = 16,\n        Schema = \"SCHEMA\",\n        User = \"user\",\n        Password = \"password\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewSnowflakeCredential(ctx, \"prod_credential\", \u0026dbtcloud.SnowflakeCredentialArgs{\n\t\t\tProjectId:  pulumi.Any(dbtProject.Id),\n\t\t\tAuthType:   pulumi.String(\"password\"),\n\t\t\tNumThreads: pulumi.Int(16),\n\t\t\tSchema:     pulumi.String(\"SCHEMA\"),\n\t\t\tUser:       pulumi.String(\"user\"),\n\t\t\tPassword:   pulumi.String(\"password\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.SnowflakeCredential;\nimport com.pulumi.dbtcloud.SnowflakeCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var prodCredential = new SnowflakeCredential(\"prodCredential\", SnowflakeCredentialArgs.builder()\n            .projectId(dbtProject.id())\n            .authType(\"password\")\n            .numThreads(16)\n            .schema(\"SCHEMA\")\n            .user(\"user\")\n            .password(\"password\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  prodCredential:\n    type: dbtcloud:SnowflakeCredential\n    name: prod_credential\n    properties:\n      projectId: ${dbtProject.id}\n      authType: password\n      numThreads: 16\n      schema: SCHEMA\n      user: user\n      password: password\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_snowflake_credential.prod_snowflake_credential\n\n  id = \"project_id:credential_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_snowflake_credential.prod_snowflake_credential\n\n  id = \"12345:6789\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/snowflakeCredential:SnowflakeCredential prod_snowflake_credential \"project_id:credential_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/snowflakeCredential:SnowflakeCredential prod_snowflake_credential 12345:6789\n```\n\n",
            "properties": {
                "authType": {
                    "type": "string",
                    "description": "The type of Snowflake credential ('password' or 'keypair')\n"
                },
                "credentialId": {
                    "type": "integer",
                    "description": "The internal credential ID\n"
                },
                "database": {
                    "type": "string",
                    "description": "The catalog to connect use\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the Snowflake credential is active\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the Snowflake account\n",
                    "secret": true
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key for the Snowflake account\n",
                    "secret": true
                },
                "privateKeyPassphrase": {
                    "type": "string",
                    "description": "The passphrase for the private key\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Snowflake credential in\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role to assume\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where to create models. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.\n"
                },
                "semanticLayerCredential": {
                    "type": "boolean",
                    "description": "This field indicates that the credential is used as part of the Semantic Layer configuration. It is used to create a Snowflake credential for the Semantic Layer.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username for the Snowflake account. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse to use\n"
                }
            },
            "required": [
                "authType",
                "credentialId",
                "isActive",
                "numThreads",
                "password",
                "privateKey",
                "privateKeyPassphrase",
                "projectId",
                "schema",
                "semanticLayerCredential",
                "user"
            ],
            "inputProperties": {
                "authType": {
                    "type": "string",
                    "description": "The type of Snowflake credential ('password' or 'keypair')\n"
                },
                "database": {
                    "type": "string",
                    "description": "The catalog to connect use\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the Snowflake credential is active\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the Snowflake account\n",
                    "secret": true
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key for the Snowflake account\n",
                    "secret": true
                },
                "privateKeyPassphrase": {
                    "type": "string",
                    "description": "The passphrase for the private key\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Snowflake credential in\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role to assume\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where to create models. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.\n"
                },
                "semanticLayerCredential": {
                    "type": "boolean",
                    "description": "This field indicates that the credential is used as part of the Semantic Layer configuration. It is used to create a Snowflake credential for the Semantic Layer.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username for the Snowflake account. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse to use\n"
                }
            },
            "requiredInputs": [
                "authType",
                "numThreads",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SnowflakeCredential resources.\n",
                "properties": {
                    "authType": {
                        "type": "string",
                        "description": "The type of Snowflake credential ('password' or 'keypair')\n"
                    },
                    "credentialId": {
                        "type": "integer",
                        "description": "The internal credential ID\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The catalog to connect use\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the Snowflake credential is active\n"
                    },
                    "numThreads": {
                        "type": "integer",
                        "description": "Number of threads to use\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for the Snowflake account\n",
                        "secret": true
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "The private key for the Snowflake account\n",
                        "secret": true
                    },
                    "privateKeyPassphrase": {
                        "type": "string",
                        "description": "The passphrase for the private key\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the Snowflake credential in\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role to assume\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema where to create models. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.\n"
                    },
                    "semanticLayerCredential": {
                        "type": "boolean",
                        "description": "This field indicates that the credential is used as part of the Semantic Layer configuration. It is used to create a Snowflake credential for the Semantic Layer.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "The username for the Snowflake account. This is an optional field ONLY if the credential is used for Semantic Layer configuration, otherwise it is required.\n"
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "The warehouse to use\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/snowflakeSemanticLayerCredential:SnowflakeSemanticLayerCredential": {
            "description": "Snowflake credential resource. This resource is composed of a Snowflake credential and a Semantic Layer configuration. It is used to create a Snowflake credential for the Semantic Layer.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  # Example of Snowflake Semantic Layer Credential with password authentication\n  passwordAuth:\n    type: dbtcloud:SnowflakeSemanticLayerCredential\n    name: password_auth\n    properties:\n      configuration:\n        project_id: ${projectId}\n        name: Snowflake SL Credential - Password Auth\n        adapter_version: snowflake_v0\n      credential:\n        project_id: ${projectId}\n        is_active: true\n        auth_type: password\n        database: ${database}\n        schema: ${schema}\n        warehouse: ${warehouse}\n        role: ${role}\n        user: ${user}\n        password: ${password}\n        num_threads: 4\n        semantic_layer_credential: true\n  # Example of Snowflake Semantic Layer Credential with key pair authentication\n  keypairAuth:\n    type: dbtcloud:SnowflakeSemanticLayerCredential\n    name: keypair_auth\n    properties:\n      configuration:\n        project_id: ${projectId}\n        name: Snowflake SL Credential - Key Pair Auth\n        adapter_version: snowflake_v0\n      credential:\n        project_id: ${projectId}\n        is_active: true\n        auth_type: keypair\n        database: ${database}\n        schema: ${schema}\n        warehouse: ${warehouse}\n        role: ${role}\n        private_key: ${privateKey}\n        private_key_passphrase: ${privateKeyPassphrase}\n        num_threads: 4\n        semantic_layer_credential: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_snowflake_semantic_layer_credential.example\n\n  id = \"credential_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_snowflake_semantic_layer_credential.example\n\n  id = \"12345\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/snowflakeSemanticLayerCredential:SnowflakeSemanticLayerCredential example \"credential_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/snowflakeSemanticLayerCredential:SnowflakeSemanticLayerCredential example 12345\n```\n\n",
            "properties": {
                "configuration": {
                    "$ref": "#/types/dbtcloud:index/SnowflakeSemanticLayerCredentialConfiguration:SnowflakeSemanticLayerCredentialConfiguration",
                    "description": "Semantic Layer credenttial configuration details.\n"
                },
                "credential": {
                    "$ref": "#/types/dbtcloud:index/SnowflakeSemanticLayerCredentialCredential:SnowflakeSemanticLayerCredentialCredential",
                    "description": "Snowflake credential details, but used in the context of the Semantic Layer.\n"
                }
            },
            "required": [
                "configuration",
                "credential"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/dbtcloud:index/SnowflakeSemanticLayerCredentialConfiguration:SnowflakeSemanticLayerCredentialConfiguration",
                    "description": "Semantic Layer credenttial configuration details.\n"
                },
                "credential": {
                    "$ref": "#/types/dbtcloud:index/SnowflakeSemanticLayerCredentialCredential:SnowflakeSemanticLayerCredentialCredential",
                    "description": "Snowflake credential details, but used in the context of the Semantic Layer.\n"
                }
            },
            "requiredInputs": [
                "configuration",
                "credential"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SnowflakeSemanticLayerCredential resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/dbtcloud:index/SnowflakeSemanticLayerCredentialConfiguration:SnowflakeSemanticLayerCredentialConfiguration",
                        "description": "Semantic Layer credenttial configuration details.\n"
                    },
                    "credential": {
                        "$ref": "#/types/dbtcloud:index/SnowflakeSemanticLayerCredentialCredential:SnowflakeSemanticLayerCredentialCredential",
                        "description": "Snowflake credential details, but used in the context of the Semantic Layer.\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/starburstCredential:StarburstCredential": {
            "description": "Starburst/Trino credential resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst example = new dbtcloud.StarburstCredential(\"example\", {\n    projectId: exampleDbtcloudProject.id,\n    database: \"your_catalog\",\n    schema: \"your_schema\",\n    user: \"your_user\",\n    password: \"your_password\",\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nexample = dbtcloud.StarburstCredential(\"example\",\n    project_id=example_dbtcloud_project[\"id\"],\n    database=\"your_catalog\",\n    schema=\"your_schema\",\n    user=\"your_user\",\n    password=\"your_password\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new DbtCloud.StarburstCredential(\"example\", new()\n    {\n        ProjectId = exampleDbtcloudProject.Id,\n        Database = \"your_catalog\",\n        Schema = \"your_schema\",\n        User = \"your_user\",\n        Password = \"your_password\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewStarburstCredential(ctx, \"example\", \u0026dbtcloud.StarburstCredentialArgs{\n\t\t\tProjectId: pulumi.Any(exampleDbtcloudProject.Id),\n\t\t\tDatabase:  pulumi.String(\"your_catalog\"),\n\t\t\tSchema:    pulumi.String(\"your_schema\"),\n\t\t\tUser:      pulumi.String(\"your_user\"),\n\t\t\tPassword:  pulumi.String(\"your_password\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.StarburstCredential;\nimport com.pulumi.dbtcloud.StarburstCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new StarburstCredential(\"example\", StarburstCredentialArgs.builder()\n            .projectId(exampleDbtcloudProject.id())\n            .database(\"your_catalog\")\n            .schema(\"your_schema\")\n            .user(\"your_user\")\n            .password(\"your_password\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: dbtcloud:StarburstCredential\n    properties:\n      projectId: ${exampleDbtcloudProject.id}\n      database: your_catalog\n      schema: your_schema\n      user: your_user\n      password: your_password\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_starburst_credential.my_starburst_credential\n\n  id = \"project_id:credential_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_starburst_credential.my_starburst_credential\n\n  id = \"12345:6789\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/starburstCredential:StarburstCredential my_starburst_credential \"project_id:credential_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/starburstCredential:StarburstCredential my_starburst_credential 12345:6789\n```\n\n",
            "properties": {
                "credentialId": {
                    "type": "integer",
                    "description": "The internal credential ID\n"
                },
                "database": {
                    "type": "string",
                    "description": "The catalog to connect use\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the Starburst/Trino account\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Starburst/Trino credential in\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where to create models\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username for the Starburst/Trino account\n"
                }
            },
            "required": [
                "credentialId",
                "database",
                "password",
                "projectId",
                "schema",
                "user"
            ],
            "inputProperties": {
                "database": {
                    "type": "string",
                    "description": "The catalog to connect use\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the Starburst/Trino account\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Starburst/Trino credential in\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where to create models\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username for the Starburst/Trino account\n"
                }
            },
            "requiredInputs": [
                "database",
                "password",
                "projectId",
                "schema",
                "user"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StarburstCredential resources.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "The internal credential ID\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The catalog to connect use\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for the Starburst/Trino account\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the Starburst/Trino credential in\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema where to create models\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "The username for the Starburst/Trino account\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/synapseCredential:SynapseCredential": {
            "description": "Synapse credential resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\n// when using sql authentication\nconst mySynapseCredSql = new dbtcloud.SynapseCredential(\"my_synapse_cred_sql\", {\n    projectId: dbtProject.id,\n    authentication: \"sql\",\n    schema: \"my_schema\",\n    user: \"my_user\",\n    password: \"my_password\",\n    schemaAuthorization: \"abcd\",\n});\n// when using AD authentication\nconst mySynapseCredAd = new dbtcloud.SynapseCredential(\"my_synapse_cred_ad\", {\n    projectId: dbtProject.id,\n    authentication: \"ActiveDirectoryPassword\",\n    schema: \"my_schema\",\n    user: \"my_user\",\n    password: \"my_password\",\n    schemaAuthorization: \"abcd\",\n});\n// when using service principal authentication\nconst mySynapseCredServPrinc = new dbtcloud.SynapseCredential(\"my_synapse_cred_serv_princ\", {\n    projectId: dbtProject.id,\n    authentication: \"ServicePrincipal\",\n    schema: \"my_schema\",\n    clientId: \"my_client_id\",\n    tenantId: \"my_tenant_id\",\n    clientSecret: \"my_secret\",\n    schemaAuthorization: \"abcd\",\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\n# when using sql authentication\nmy_synapse_cred_sql = dbtcloud.SynapseCredential(\"my_synapse_cred_sql\",\n    project_id=dbt_project[\"id\"],\n    authentication=\"sql\",\n    schema=\"my_schema\",\n    user=\"my_user\",\n    password=\"my_password\",\n    schema_authorization=\"abcd\")\n# when using AD authentication\nmy_synapse_cred_ad = dbtcloud.SynapseCredential(\"my_synapse_cred_ad\",\n    project_id=dbt_project[\"id\"],\n    authentication=\"ActiveDirectoryPassword\",\n    schema=\"my_schema\",\n    user=\"my_user\",\n    password=\"my_password\",\n    schema_authorization=\"abcd\")\n# when using service principal authentication\nmy_synapse_cred_serv_princ = dbtcloud.SynapseCredential(\"my_synapse_cred_serv_princ\",\n    project_id=dbt_project[\"id\"],\n    authentication=\"ServicePrincipal\",\n    schema=\"my_schema\",\n    client_id=\"my_client_id\",\n    tenant_id=\"my_tenant_id\",\n    client_secret=\"my_secret\",\n    schema_authorization=\"abcd\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // when using sql authentication\n    var mySynapseCredSql = new DbtCloud.SynapseCredential(\"my_synapse_cred_sql\", new()\n    {\n        ProjectId = dbtProject.Id,\n        Authentication = \"sql\",\n        Schema = \"my_schema\",\n        User = \"my_user\",\n        Password = \"my_password\",\n        SchemaAuthorization = \"abcd\",\n    });\n\n    // when using AD authentication\n    var mySynapseCredAd = new DbtCloud.SynapseCredential(\"my_synapse_cred_ad\", new()\n    {\n        ProjectId = dbtProject.Id,\n        Authentication = \"ActiveDirectoryPassword\",\n        Schema = \"my_schema\",\n        User = \"my_user\",\n        Password = \"my_password\",\n        SchemaAuthorization = \"abcd\",\n    });\n\n    // when using service principal authentication\n    var mySynapseCredServPrinc = new DbtCloud.SynapseCredential(\"my_synapse_cred_serv_princ\", new()\n    {\n        ProjectId = dbtProject.Id,\n        Authentication = \"ServicePrincipal\",\n        Schema = \"my_schema\",\n        ClientId = \"my_client_id\",\n        TenantId = \"my_tenant_id\",\n        ClientSecret = \"my_secret\",\n        SchemaAuthorization = \"abcd\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// when using sql authentication\n\t\t_, err := dbtcloud.NewSynapseCredential(ctx, \"my_synapse_cred_sql\", \u0026dbtcloud.SynapseCredentialArgs{\n\t\t\tProjectId:           pulumi.Any(dbtProject.Id),\n\t\t\tAuthentication:      pulumi.String(\"sql\"),\n\t\t\tSchema:              pulumi.String(\"my_schema\"),\n\t\t\tUser:                pulumi.String(\"my_user\"),\n\t\t\tPassword:            pulumi.String(\"my_password\"),\n\t\t\tSchemaAuthorization: pulumi.String(\"abcd\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// when using AD authentication\n\t\t_, err = dbtcloud.NewSynapseCredential(ctx, \"my_synapse_cred_ad\", \u0026dbtcloud.SynapseCredentialArgs{\n\t\t\tProjectId:           pulumi.Any(dbtProject.Id),\n\t\t\tAuthentication:      pulumi.String(\"ActiveDirectoryPassword\"),\n\t\t\tSchema:              pulumi.String(\"my_schema\"),\n\t\t\tUser:                pulumi.String(\"my_user\"),\n\t\t\tPassword:            pulumi.String(\"my_password\"),\n\t\t\tSchemaAuthorization: pulumi.String(\"abcd\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// when using service principal authentication\n\t\t_, err = dbtcloud.NewSynapseCredential(ctx, \"my_synapse_cred_serv_princ\", \u0026dbtcloud.SynapseCredentialArgs{\n\t\t\tProjectId:           pulumi.Any(dbtProject.Id),\n\t\t\tAuthentication:      pulumi.String(\"ServicePrincipal\"),\n\t\t\tSchema:              pulumi.String(\"my_schema\"),\n\t\t\tClientId:            pulumi.String(\"my_client_id\"),\n\t\t\tTenantId:            pulumi.String(\"my_tenant_id\"),\n\t\t\tClientSecret:        pulumi.String(\"my_secret\"),\n\t\t\tSchemaAuthorization: pulumi.String(\"abcd\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.SynapseCredential;\nimport com.pulumi.dbtcloud.SynapseCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // when using sql authentication\n        var mySynapseCredSql = new SynapseCredential(\"mySynapseCredSql\", SynapseCredentialArgs.builder()\n            .projectId(dbtProject.id())\n            .authentication(\"sql\")\n            .schema(\"my_schema\")\n            .user(\"my_user\")\n            .password(\"my_password\")\n            .schemaAuthorization(\"abcd\")\n            .build());\n\n        // when using AD authentication\n        var mySynapseCredAd = new SynapseCredential(\"mySynapseCredAd\", SynapseCredentialArgs.builder()\n            .projectId(dbtProject.id())\n            .authentication(\"ActiveDirectoryPassword\")\n            .schema(\"my_schema\")\n            .user(\"my_user\")\n            .password(\"my_password\")\n            .schemaAuthorization(\"abcd\")\n            .build());\n\n        // when using service principal authentication\n        var mySynapseCredServPrinc = new SynapseCredential(\"mySynapseCredServPrinc\", SynapseCredentialArgs.builder()\n            .projectId(dbtProject.id())\n            .authentication(\"ServicePrincipal\")\n            .schema(\"my_schema\")\n            .clientId(\"my_client_id\")\n            .tenantId(\"my_tenant_id\")\n            .clientSecret(\"my_secret\")\n            .schemaAuthorization(\"abcd\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # when using sql authentication\n  mySynapseCredSql:\n    type: dbtcloud:SynapseCredential\n    name: my_synapse_cred_sql\n    properties:\n      projectId: ${dbtProject.id}\n      authentication: sql\n      schema: my_schema\n      user: my_user\n      password: my_password\n      schemaAuthorization: abcd\n  # when using AD authentication\n  mySynapseCredAd:\n    type: dbtcloud:SynapseCredential\n    name: my_synapse_cred_ad\n    properties:\n      projectId: ${dbtProject.id}\n      authentication: ActiveDirectoryPassword\n      schema: my_schema\n      user: my_user\n      password: my_password\n      schemaAuthorization: abcd\n  # when using service principal authentication\n  mySynapseCredServPrinc:\n    type: dbtcloud:SynapseCredential\n    name: my_synapse_cred_serv_princ\n    properties:\n      projectId: ${dbtProject.id}\n      authentication: ServicePrincipal\n      schema: my_schema\n      clientId: my_client_id\n      tenantId: my_tenant_id\n      clientSecret: my_secret\n      schemaAuthorization: abcd\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_synapse_credential.my_synapse_credential\n\n  id = \"project_id:credential_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_synapse_credential.my_synapse_credential\n\n  id = \"12345:6789\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/synapseCredential:SynapseCredential my_synapse_credential \"project_id:credential_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/synapseCredential:SynapseCredential my_synapse_credential 12345:6789\n```\n\n",
            "properties": {
                "adapterType": {
                    "type": "string",
                    "description": "The type of the adapter (synapse)\n"
                },
                "authentication": {
                    "type": "string",
                    "description": "Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.\n",
                    "secret": true
                },
                "credentialId": {
                    "type": "integer",
                    "description": "The internal credential ID\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the account to connect to. Only used when connection with AD user/pass\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Synapse credential in\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where to create the dbt models\n"
                },
                "schemaAuthorization": {
                    "type": "string",
                    "description": "Optionally set this to the principal who should own the schemas created by dbt\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username of the Synapse account to connect to. Only used when connection with AD user/pass\n"
                }
            },
            "required": [
                "adapterType",
                "authentication",
                "clientId",
                "clientSecret",
                "credentialId",
                "password",
                "projectId",
                "schema",
                "schemaAuthorization",
                "tenantId",
                "user"
            ],
            "inputProperties": {
                "adapterType": {
                    "type": "string",
                    "description": "The type of the adapter (synapse)\n"
                },
                "authentication": {
                    "type": "string",
                    "description": "Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.\n",
                    "secret": true
                },
                "password": {
                    "type": "string",
                    "description": "The password for the account to connect to. Only used when connection with AD user/pass\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Synapse credential in\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where to create the dbt models\n"
                },
                "schemaAuthorization": {
                    "type": "string",
                    "description": "Optionally set this to the principal who should own the schemas created by dbt\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username of the Synapse account to connect to. Only used when connection with AD user/pass\n"
                }
            },
            "requiredInputs": [
                "adapterType",
                "authentication",
                "projectId",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SynapseCredential resources.\n",
                "properties": {
                    "adapterType": {
                        "type": "string",
                        "description": "The type of the adapter (synapse)\n"
                    },
                    "authentication": {
                        "type": "string",
                        "description": "Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.\n",
                        "secret": true
                    },
                    "credentialId": {
                        "type": "integer",
                        "description": "The internal credential ID\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for the account to connect to. Only used when connection with AD user/pass\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the Synapse credential in\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema where to create the dbt models\n"
                    },
                    "schemaAuthorization": {
                        "type": "string",
                        "description": "Optionally set this to the principal who should own the schemas created by dbt\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "The username of the Synapse account to connect to. Only used when connection with AD user/pass\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/teradataCredential:TeradataCredential": {
            "description": "Teradata credential resource\n",
            "properties": {
                "credentialId": {
                    "type": "integer",
                    "description": "The internal credential ID\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the Teradata account\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Teradata/Trino credential in\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where to create models\n"
                },
                "threads": {
                    "type": "integer",
                    "description": "The number of threads to use. Default is 1\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username for the Teradata account\n"
                }
            },
            "required": [
                "credentialId",
                "password",
                "projectId",
                "schema",
                "threads",
                "user"
            ],
            "inputProperties": {
                "password": {
                    "type": "string",
                    "description": "The password for the Teradata account\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Teradata/Trino credential in\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where to create models\n"
                },
                "threads": {
                    "type": "integer",
                    "description": "The number of threads to use. Default is 1\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username for the Teradata account\n"
                }
            },
            "requiredInputs": [
                "password",
                "projectId",
                "schema",
                "user"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeradataCredential resources.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "The internal credential ID\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for the Teradata account\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the Teradata/Trino credential in\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema where to create models\n"
                    },
                    "threads": {
                        "type": "integer",
                        "description": "The number of threads to use. Default is 1\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "The username for the Teradata account\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/userGroups:UserGroups": {
            "description": "Assigns a set of dbt Cloud groups to a given User ID. \n\n\u003e If additional groups were assigned manually in dbt Cloud, they will be removed. The full list of groups need to be provided as config.\n\u003e This resource does not currently support deletion (e.g. a deleted resource will stay as-is in dbt Cloud).\nThis is intentional in order to prevent accidental deletion of all users groups assigned to a user.\nIf you would like a different behavior, please open an issue on GitHub. To remove all groups for a user, set \"group_ids\" to the empty set \"[]\".\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\n// we can assign groups to users\nconst myUserGroups = new dbtcloud.UserGroups(\"my_user_groups\", {\n    userId: myUser.id,\n    groupIds: [\n        1234,\n        myGroup.id,\n        myGroupId,\n    ],\n});\n// as Delete is not handled currently, by design, removing all groups from a user can be done with\nconst myOtherUserGroups = new dbtcloud.UserGroups(\"my_other_user_groups\", {\n    userId: 123456,\n    groupIds: [],\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\n# we can assign groups to users\nmy_user_groups = dbtcloud.UserGroups(\"my_user_groups\",\n    user_id=my_user[\"id\"],\n    group_ids=[\n        1234,\n        my_group[\"id\"],\n        my_group_id,\n    ])\n# as Delete is not handled currently, by design, removing all groups from a user can be done with\nmy_other_user_groups = dbtcloud.UserGroups(\"my_other_user_groups\",\n    user_id=123456,\n    group_ids=[])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // we can assign groups to users\n    var myUserGroups = new DbtCloud.UserGroups(\"my_user_groups\", new()\n    {\n        UserId = myUser.Id,\n        GroupIds = new[]\n        {\n            1234,\n            myGroup.Id,\n            myGroupId,\n        },\n    });\n\n    // as Delete is not handled currently, by design, removing all groups from a user can be done with\n    var myOtherUserGroups = new DbtCloud.UserGroups(\"my_other_user_groups\", new()\n    {\n        UserId = 123456,\n        GroupIds = new[] {},\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// we can assign groups to users\n\t\t_, err := dbtcloud.NewUserGroups(ctx, \"my_user_groups\", \u0026dbtcloud.UserGroupsArgs{\n\t\t\tUserId: pulumi.Any(myUser.Id),\n\t\t\tGroupIds: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1234),\n\t\t\t\tmyGroup.Id,\n\t\t\t\tmyGroupId,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// as Delete is not handled currently, by design, removing all groups from a user can be done with\n\t\t_, err = dbtcloud.NewUserGroups(ctx, \"my_other_user_groups\", \u0026dbtcloud.UserGroupsArgs{\n\t\t\tUserId:   pulumi.Int(123456),\n\t\t\tGroupIds: pulumi.IntArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.UserGroups;\nimport com.pulumi.dbtcloud.UserGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // we can assign groups to users\n        var myUserGroups = new UserGroups(\"myUserGroups\", UserGroupsArgs.builder()\n            .userId(myUser.id())\n            .groupIds(            \n                1234,\n                myGroup.id(),\n                myGroupId)\n            .build());\n\n        // as Delete is not handled currently, by design, removing all groups from a user can be done with\n        var myOtherUserGroups = new UserGroups(\"myOtherUserGroups\", UserGroupsArgs.builder()\n            .userId(123456)\n            .groupIds()\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # we can assign groups to users\n  myUserGroups:\n    type: dbtcloud:UserGroups\n    name: my_user_groups\n    properties:\n      userId: ${myUser.id}\n      groupIds:\n        - 1234\n        - ${myGroup.id}\n        - ${myGroupId}\n  # as Delete is not handled currently, by design, removing all groups from a user can be done with\n  myOtherUserGroups:\n    type: dbtcloud:UserGroups\n    name: my_other_user_groups\n    properties:\n      userId: 123456\n      groupIds: []\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the User ID\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_user_groups.my_user_groups\n\n  id = \"user_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_user_groups.my_user_groups\n\n  id = \"123456\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/userGroups:UserGroups my_user_groups \"user_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/userGroups:UserGroups my_user_groups 123456\n```\n\n",
            "properties": {
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "IDs of the groups to assign to the user. If additional groups were assigned manually in dbt Cloud, they will be removed.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The internal ID of a dbt Cloud user.\n"
                }
            },
            "required": [
                "groupIds",
                "userId"
            ],
            "inputProperties": {
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "IDs of the groups to assign to the user. If additional groups were assigned manually in dbt Cloud, they will be removed.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The internal ID of a dbt Cloud user.\n"
                }
            },
            "requiredInputs": [
                "groupIds",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserGroups resources.\n",
                "properties": {
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "IDs of the groups to assign to the user. If additional groups were assigned manually in dbt Cloud, they will be removed.\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The internal ID of a dbt Cloud user.\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/webhook:Webhook": {
            "description": "Webhook details\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst testWebhook = new dbtcloud.Webhook(\"test_webhook\", {\n    name: \"test-webhook\",\n    description: \"Test webhook\",\n    clientUrl: \"http://localhost/nothing\",\n    eventTypes: [\n        \"job.run.started\",\n        \"job.run.completed\",\n    ],\n    jobIds: [\n        1234,\n        5678,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\ntest_webhook = dbtcloud.Webhook(\"test_webhook\",\n    name=\"test-webhook\",\n    description=\"Test webhook\",\n    client_url=\"http://localhost/nothing\",\n    event_types=[\n        \"job.run.started\",\n        \"job.run.completed\",\n    ],\n    job_ids=[\n        1234,\n        5678,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testWebhook = new DbtCloud.Webhook(\"test_webhook\", new()\n    {\n        Name = \"test-webhook\",\n        Description = \"Test webhook\",\n        ClientUrl = \"http://localhost/nothing\",\n        EventTypes = new[]\n        {\n            \"job.run.started\",\n            \"job.run.completed\",\n        },\n        JobIds = new[]\n        {\n            1234,\n            5678,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewWebhook(ctx, \"test_webhook\", \u0026dbtcloud.WebhookArgs{\n\t\t\tName:        pulumi.String(\"test-webhook\"),\n\t\t\tDescription: pulumi.String(\"Test webhook\"),\n\t\t\tClientUrl:   pulumi.String(\"http://localhost/nothing\"),\n\t\t\tEventTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"job.run.started\"),\n\t\t\t\tpulumi.String(\"job.run.completed\"),\n\t\t\t},\n\t\t\tJobIds: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1234),\n\t\t\t\tpulumi.Int(5678),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.Webhook;\nimport com.pulumi.dbtcloud.WebhookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testWebhook = new Webhook(\"testWebhook\", WebhookArgs.builder()\n            .name(\"test-webhook\")\n            .description(\"Test webhook\")\n            .clientUrl(\"http://localhost/nothing\")\n            .eventTypes(            \n                \"job.run.started\",\n                \"job.run.completed\")\n            .jobIds(            \n                1234,\n                5678)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testWebhook:\n    type: dbtcloud:Webhook\n    name: test_webhook\n    properties:\n      name: test-webhook\n      description: Test webhook\n      clientUrl: http://localhost/nothing\n      eventTypes:\n        - job.run.started\n        - job.run.completed\n      jobIds:\n        - 1234\n        - 5678\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nusing  import blocks (requires Terraform \u003e= 1.5)\n\nimport {\n\n  to = dbtcloud_webhook.my_webhook\n\n  id = \"webhook_id\"\n\n}\n\nimport {\n\n  to = dbtcloud_webhook.my_webhook\n\n  id = \"wsu_abcdefg\"\n\n}\n\nusing the older import command\n\n```sh\n$ pulumi import dbtcloud:index/webhook:Webhook my_webhook \"webhook_id\"\n```\n\n```sh\n$ pulumi import dbtcloud:index/webhook:Webhook my_webhook wsu_abcdefg\n```\n\n",
            "properties": {
                "accountIdentifier": {
                    "type": "string",
                    "description": "Webhooks Account Identifier\n"
                },
                "active": {
                    "type": "boolean",
                    "description": "Webhooks active flag\n"
                },
                "clientUrl": {
                    "type": "string",
                    "description": "Webhooks Client URL\n"
                },
                "description": {
                    "type": "string",
                    "description": "Webhooks Description\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Webhooks Event Types\n"
                },
                "hmacSecret": {
                    "type": "string",
                    "description": "Secret key for the webhook. Can be used to validate the authenticity of the webhook.\n",
                    "secret": true
                },
                "httpStatusCode": {
                    "type": "string",
                    "description": "Latest HTTP status of the webhook\n"
                },
                "jobIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook. When null or empty, the webhook will trigger on all jobs\n"
                },
                "name": {
                    "type": "string",
                    "description": "Webhooks Name\n"
                },
                "webhookId": {
                    "type": "string",
                    "description": "Webhook's ID\n",
                    "deprecationMessage": "Use `id` instead"
                }
            },
            "required": [
                "accountIdentifier",
                "active",
                "clientUrl",
                "description",
                "eventTypes",
                "hmacSecret",
                "httpStatusCode",
                "name",
                "webhookId"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Webhooks active flag\n"
                },
                "clientUrl": {
                    "type": "string",
                    "description": "Webhooks Client URL\n"
                },
                "description": {
                    "type": "string",
                    "description": "Webhooks Description\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Webhooks Event Types\n"
                },
                "jobIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook. When null or empty, the webhook will trigger on all jobs\n"
                },
                "name": {
                    "type": "string",
                    "description": "Webhooks Name\n"
                }
            },
            "requiredInputs": [
                "clientUrl",
                "eventTypes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Webhook resources.\n",
                "properties": {
                    "accountIdentifier": {
                        "type": "string",
                        "description": "Webhooks Account Identifier\n"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Webhooks active flag\n"
                    },
                    "clientUrl": {
                        "type": "string",
                        "description": "Webhooks Client URL\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Webhooks Description\n"
                    },
                    "eventTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Webhooks Event Types\n"
                    },
                    "hmacSecret": {
                        "type": "string",
                        "description": "Secret key for the webhook. Can be used to validate the authenticity of the webhook.\n",
                        "secret": true
                    },
                    "httpStatusCode": {
                        "type": "string",
                        "description": "Latest HTTP status of the webhook\n"
                    },
                    "jobIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of job IDs to trigger the webhook. When null or empty, the webhook will trigger on all jobs\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Webhooks Name\n"
                    },
                    "webhookId": {
                        "type": "string",
                        "description": "Webhook's ID\n",
                        "deprecationMessage": "Use `id` instead"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "dbtcloud:index/getAthenaCredential:getAthenaCredential": {
            "description": "Athena credential data source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst example = dbtcloud.getAthenaCredential({\n    projectId: 123,\n    credentialId: 456,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nexample = dbtcloud.get_athena_credential(project_id=123,\n    credential_id=456)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = DbtCloud.GetAthenaCredential.Invoke(new()\n    {\n        ProjectId = 123,\n        CredentialId = 456,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.LookupAthenaCredential(ctx, \u0026dbtcloud.LookupAthenaCredentialArgs{\n\t\t\tProjectId:    123,\n\t\t\tCredentialId: 456,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetAthenaCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DbtcloudFunctions.getAthenaCredential(GetAthenaCredentialArgs.builder()\n            .projectId(123)\n            .credentialId(456)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      function: dbtcloud:getAthenaCredential\n      arguments:\n        projectId: 123\n        credentialId: 456\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAthenaCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "Credential ID\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAthenaCredential.\n",
                "properties": {
                    "credentialId": {
                        "description": "Credential ID\n",
                        "type": "integer"
                    },
                    "id": {
                        "description": "The ID of this resource. Contains the project ID and the credential ID.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Project ID\n",
                        "type": "integer"
                    },
                    "schema": {
                        "description": "The schema where to create models\n",
                        "type": "string"
                    }
                },
                "required": [
                    "credentialId",
                    "id",
                    "projectId",
                    "schema"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getAzureDevOpsProject:getAzureDevOpsProject": {
            "description": "Use this data source to retrieve the ID of an Azure Dev Ops project \nbased on its name.\n\t\t\nThis data source requires connecting with a user token and doesn't work with a service token.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myAdoProject = dbtcloud.getAzureDevOpsProject({\n    name: \"my-project-name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_ado_project = dbtcloud.get_azure_dev_ops_project(name=\"my-project-name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myAdoProject = DbtCloud.GetAzureDevOpsProject.Invoke(new()\n    {\n        Name = \"my-project-name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.GetAzureDevOpsProject(ctx, \u0026dbtcloud.GetAzureDevOpsProjectArgs{\n\t\t\tName: \"my-project-name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetAzureDevOpsProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myAdoProject = DbtcloudFunctions.getAzureDevOpsProject(GetAzureDevOpsProjectArgs.builder()\n            .name(\"my-project-name\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myAdoProject:\n    fn::invoke:\n      function: dbtcloud:getAzureDevOpsProject\n      arguments:\n        name: my-project-name\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAzureDevOpsProject.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the ADO project\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAzureDevOpsProject.\n",
                "properties": {
                    "id": {
                        "description": "The internal Azure Dev Ops ID of the ADO Project\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the ADO project\n",
                        "type": "string"
                    },
                    "url": {
                        "description": "The URL of the ADO project\n",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "url"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getAzureDevOpsRepository:getAzureDevOpsRepository": {
            "description": "Use this data source to retrieve the ID and details of an Azure Dev Ops repository \nbased on its name and the ID of the Azure Dev Ops project it belongs to.\n\t\t\nThis data source requires connecting with a user token and doesn't work with a service token.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myAdoRepository = dbtcloud.getAzureDevOpsRepository({\n    name: \"my-repo-name\",\n    azureDevOpsProjectId: myAdoProject.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_ado_repository = dbtcloud.get_azure_dev_ops_repository(name=\"my-repo-name\",\n    azure_dev_ops_project_id=my_ado_project[\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myAdoRepository = DbtCloud.GetAzureDevOpsRepository.Invoke(new()\n    {\n        Name = \"my-repo-name\",\n        AzureDevOpsProjectId = myAdoProject.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.GetAzureDevOpsRepository(ctx, \u0026dbtcloud.GetAzureDevOpsRepositoryArgs{\n\t\t\tName:                 \"my-repo-name\",\n\t\t\tAzureDevOpsProjectId: myAdoProject.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetAzureDevOpsRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myAdoRepository = DbtcloudFunctions.getAzureDevOpsRepository(GetAzureDevOpsRepositoryArgs.builder()\n            .name(\"my-repo-name\")\n            .azureDevOpsProjectId(myAdoProject.id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myAdoRepository:\n    fn::invoke:\n      function: dbtcloud:getAzureDevOpsRepository\n      arguments:\n        name: my-repo-name\n        azureDevOpsProjectId: ${myAdoProject.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAzureDevOpsRepository.\n",
                "properties": {
                    "azureDevOpsProjectId": {
                        "type": "string",
                        "description": "The internal Azure Dev Ops ID of the ADO Project. Can be retrieved using the data source dbtcloud*azure*dev*ops*project and the project name\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ADO repository\n"
                    }
                },
                "type": "object",
                "required": [
                    "azureDevOpsProjectId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAzureDevOpsRepository.\n",
                "properties": {
                    "azureDevOpsProjectId": {
                        "description": "The internal Azure Dev Ops ID of the ADO Project. Can be retrieved using the data source dbtcloud*azure*dev*ops*project and the project name\n",
                        "type": "string"
                    },
                    "defaultBranch": {
                        "description": "The default branch of the ADO repository\n",
                        "type": "string"
                    },
                    "detailsUrl": {
                        "description": "The URL of the ADO repository showing details about the repository and its attributes\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The internal Azure Dev Ops ID of the ADO Repository\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the ADO repository\n",
                        "type": "string"
                    },
                    "remoteUrl": {
                        "description": "The HTTP URL of the ADO repository used to connect to dbt Cloud\n",
                        "type": "string"
                    },
                    "webUrl": {
                        "description": "The URL of the ADO repository accessible in the browser\n",
                        "type": "string"
                    }
                },
                "required": [
                    "azureDevOpsProjectId",
                    "defaultBranch",
                    "detailsUrl",
                    "id",
                    "name",
                    "remoteUrl",
                    "webUrl"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getBigQueryCredential:getBigQueryCredential": {
            "description": "Bigquery credential data source\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBigQueryCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "Credential ID\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBigQueryCredential.\n",
                "properties": {
                    "credentialId": {
                        "description": "Credential ID\n",
                        "type": "integer"
                    },
                    "dataset": {
                        "description": "Default dataset name\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of this data source. Contains the project ID and the credential ID.\n",
                        "type": "string"
                    },
                    "isActive": {
                        "description": "Whether the BigQuery credential is active\n",
                        "type": "boolean"
                    },
                    "numThreads": {
                        "description": "Number of threads to use\n",
                        "type": "integer"
                    },
                    "projectId": {
                        "description": "Project ID\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "credentialId",
                    "dataset",
                    "id",
                    "isActive",
                    "numThreads",
                    "projectId"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getDatabricksCredential:getDatabricksCredential": {
            "description": "Databricks credential data source\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabricksCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "Credential ID\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabricksCredential.\n",
                "properties": {
                    "adapterType": {
                        "description": "The type of the adapter (databricks or spark)\n",
                        "type": "string"
                    },
                    "catalog": {
                        "description": "The catalog where to create models\n",
                        "type": "string"
                    },
                    "credentialId": {
                        "description": "Credential ID\n",
                        "type": "integer"
                    },
                    "id": {
                        "description": "The ID of this resource. Contains the project ID and the credential ID.\n",
                        "type": "string"
                    },
                    "numThreads": {
                        "description": "The number of threads to use\n",
                        "type": "integer"
                    },
                    "projectId": {
                        "description": "Project ID\n",
                        "type": "integer"
                    },
                    "schema": {
                        "description": "The schema where to create models\n",
                        "type": "string"
                    },
                    "targetName": {
                        "description": "Target name\n",
                        "type": "string"
                    }
                },
                "required": [
                    "adapterType",
                    "catalog",
                    "credentialId",
                    "id",
                    "numThreads",
                    "projectId",
                    "schema",
                    "targetName"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getEnvironment:getEnvironment": {
            "description": "Retrieve data for a single environment\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironment.\n",
                "properties": {
                    "environmentId": {
                        "type": "integer",
                        "description": "The ID of the environment\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "The project ID to which the environment belongs\n"
                    }
                },
                "type": "object",
                "required": [
                    "environmentId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironment.\n",
                "properties": {
                    "connectionId": {
                        "type": "integer"
                    },
                    "credentialsId": {
                        "description": "Credential ID for this environment. A credential is not required for development environments, as dbt Cloud defaults to the user's credentials, but deployment environments will have this.\n",
                        "type": "integer"
                    },
                    "customBranch": {
                        "description": "The custom branch name to use\n",
                        "type": "string"
                    },
                    "dbtVersion": {
                        "description": "Version number of dbt to use in this environment.\n",
                        "type": "string"
                    },
                    "deploymentType": {
                        "description": "The type of deployment environment (currently 'production', 'staging' or empty)\n",
                        "type": "string"
                    },
                    "enableModelQueryHistory": {
                        "description": "Whether model query history is on\n",
                        "type": "boolean"
                    },
                    "environmentId": {
                        "description": "The ID of the environment\n",
                        "type": "integer"
                    },
                    "extendedAttributesId": {
                        "description": "The ID of the extended attributes applied\n",
                        "type": "integer"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the environment\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "The project ID to which the environment belongs\n",
                        "type": "integer"
                    },
                    "type": {
                        "description": "The type of environment (must be either development or deployment)\n",
                        "type": "string"
                    },
                    "useCustomBranch": {
                        "description": "Whether to use a custom git branch in this environment\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "connectionId",
                    "credentialsId",
                    "customBranch",
                    "dbtVersion",
                    "deploymentType",
                    "enableModelQueryHistory",
                    "environmentId",
                    "extendedAttributesId",
                    "name",
                    "projectId",
                    "type",
                    "useCustomBranch",
                    "id"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getEnvironmentVariable:getEnvironmentVariable": {
            "description": "Environment variable credential data source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myVar = dbtcloud.getEnvironmentVariable({\n    projectId: 70403103985068,\n    name: \"DBT_MY_PARTIAL_VAR\",\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_var = dbtcloud.get_environment_variable(project_id=70403103985068,\n    name=\"DBT_MY_PARTIAL_VAR\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myVar = DbtCloud.GetEnvironmentVariable.Invoke(new()\n    {\n        ProjectId = 70403103985068,\n        Name = \"DBT_MY_PARTIAL_VAR\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.LookupEnvironmentVariable(ctx, \u0026dbtcloud.LookupEnvironmentVariableArgs{\n\t\t\tProjectId: 70403103985068,\n\t\t\tName:      \"DBT_MY_PARTIAL_VAR\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetEnvironmentVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myVar = DbtcloudFunctions.getEnvironmentVariable(GetEnvironmentVariableArgs.builder()\n            .projectId(70403103985068)\n            .name(\"DBT_MY_PARTIAL_VAR\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myVar:\n    fn::invoke:\n      function: dbtcloud:getEnvironmentVariable\n      arguments:\n        projectId: '70403103985068'\n        name: DBT_MY_PARTIAL_VAR\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironmentVariable.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name for the variable, must be unique within a project, must be prefixed with 'DBT_'\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the environment variable in\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironmentVariable.\n",
                "properties": {
                    "environmentValues": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map from environment names to respective variable value, a special key `project` should be set for the project default variable value. This field is not set as sensitive so take precautions when using secret environment variables.\n",
                        "type": "object"
                    },
                    "id": {
                        "description": "The ID of this resource. Contains the project ID and the environment variable ID.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name for the variable, must be unique within a project, must be prefixed with 'DBT_'\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Project ID to create the environment variable in\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "environmentValues",
                    "id",
                    "name",
                    "projectId"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getEnvironments:getEnvironments": {
            "description": "Retrieve data for multiple environments\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironments.\n",
                "properties": {
                    "projectId": {
                        "type": "integer",
                        "description": "The project ID to filter the environments for [Optional]\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironments.\n",
                "properties": {
                    "environments": {
                        "description": "The list of environments\n",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/getEnvironmentsEnvironment:getEnvironmentsEnvironment"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "The project ID to filter the environments for [Optional]\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "environments",
                    "id"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getExtendedAttributes:getExtendedAttributes": {
            "description": "Extended attributes data source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myExtendedAttributes = dbtcloud.getExtendedAttributes({\n    extendedAttributesId: 12345,\n    projectId: 6789,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_extended_attributes = dbtcloud.get_extended_attributes(extended_attributes_id=12345,\n    project_id=6789)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myExtendedAttributes = DbtCloud.GetExtendedAttributes.Invoke(new()\n    {\n        ExtendedAttributesId = 12345,\n        ProjectId = 6789,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.LookupExtendedAttributes(ctx, \u0026dbtcloud.LookupExtendedAttributesArgs{\n\t\t\tExtendedAttributesId: 12345,\n\t\t\tProjectId:            6789,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetExtendedAttributesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myExtendedAttributes = DbtcloudFunctions.getExtendedAttributes(GetExtendedAttributesArgs.builder()\n            .extendedAttributesId(12345)\n            .projectId(6789)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myExtendedAttributes:\n    fn::invoke:\n      function: dbtcloud:getExtendedAttributes\n      arguments:\n        extendedAttributesId: 12345\n        projectId: 6789\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getExtendedAttributes.\n",
                "properties": {
                    "extendedAttributesId": {
                        "type": "integer",
                        "description": "Extended attributes ID\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "extendedAttributesId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getExtendedAttributes.\n",
                "properties": {
                    "extendedAttributes": {
                        "description": "Extended attributes\n",
                        "type": "string"
                    },
                    "extendedAttributesId": {
                        "description": "Extended attributes ID\n",
                        "type": "integer"
                    },
                    "id": {
                        "description": "The ID of this resource. Contains the project ID and the credential ID.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Project ID\n",
                        "type": "integer"
                    },
                    "state": {
                        "description": "The state of the extended attributes (1 = active, 2 = inactive)\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "extendedAttributes",
                    "extendedAttributesId",
                    "id",
                    "projectId",
                    "state"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getGlobalConnection:getGlobalConnection": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myConnection = dbtcloud.getGlobalConnection({\n    id: 1234,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_connection = dbtcloud.get_global_connection(id=1234)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myConnection = DbtCloud.GetGlobalConnection.Invoke(new()\n    {\n        Id = 1234,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.LookupGlobalConnection(ctx, \u0026dbtcloud.LookupGlobalConnectionArgs{\n\t\t\tId: 1234,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetGlobalConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myConnection = DbtcloudFunctions.getGlobalConnection(GetGlobalConnectionArgs.builder()\n            .id(1234)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myConnection:\n    fn::invoke:\n      function: dbtcloud:getGlobalConnection\n      arguments:\n        id: 1234\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGlobalConnection.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Connection Identifier\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGlobalConnection.\n",
                "properties": {
                    "adapterVersion": {
                        "description": "Version of the adapter\n",
                        "type": "string"
                    },
                    "apacheSpark": {
                        "$ref": "#/types/dbtcloud:index/getGlobalConnectionApacheSpark:getGlobalConnectionApacheSpark",
                        "description": "Apache Spark connection configuration.\n"
                    },
                    "athena": {
                        "$ref": "#/types/dbtcloud:index/getGlobalConnectionAthena:getGlobalConnectionAthena",
                        "description": "Athena connection configuration.\n"
                    },
                    "bigquery": {
                        "$ref": "#/types/dbtcloud:index/getGlobalConnectionBigquery:getGlobalConnectionBigquery"
                    },
                    "databricks": {
                        "$ref": "#/types/dbtcloud:index/getGlobalConnectionDatabricks:getGlobalConnectionDatabricks",
                        "description": "Databricks connection configuration\n"
                    },
                    "fabric": {
                        "$ref": "#/types/dbtcloud:index/getGlobalConnectionFabric:getGlobalConnectionFabric",
                        "description": "Microsoft Fabric connection configuration.\n"
                    },
                    "id": {
                        "description": "Connection Identifier\n",
                        "type": "integer"
                    },
                    "isSshTunnelEnabled": {
                        "description": "Whether the connection can use an SSH tunnel\n",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "Connection name\n",
                        "type": "string"
                    },
                    "oauthConfigurationId": {
                        "type": "integer"
                    },
                    "postgres": {
                        "$ref": "#/types/dbtcloud:index/getGlobalConnectionPostgres:getGlobalConnectionPostgres",
                        "description": "PostgreSQL connection configuration.\n"
                    },
                    "privateLinkEndpointId": {
                        "description": "Private Link Endpoint ID. This ID can be found using the `privatelink_endpoint` data source\n",
                        "type": "string"
                    },
                    "redshift": {
                        "$ref": "#/types/dbtcloud:index/getGlobalConnectionRedshift:getGlobalConnectionRedshift",
                        "description": "Redshift connection configuration\n"
                    },
                    "snowflake": {
                        "$ref": "#/types/dbtcloud:index/getGlobalConnectionSnowflake:getGlobalConnectionSnowflake",
                        "description": "Snowflake connection configuration\n"
                    },
                    "starburst": {
                        "$ref": "#/types/dbtcloud:index/getGlobalConnectionStarburst:getGlobalConnectionStarburst",
                        "description": "Starburst/Trino connection configuration.\n"
                    },
                    "synapse": {
                        "$ref": "#/types/dbtcloud:index/getGlobalConnectionSynapse:getGlobalConnectionSynapse",
                        "description": "Azure Synapse Analytics connection configuration.\n"
                    },
                    "teradata": {
                        "$ref": "#/types/dbtcloud:index/getGlobalConnectionTeradata:getGlobalConnectionTeradata",
                        "description": "Teradata connection configuration.\n"
                    }
                },
                "required": [
                    "adapterVersion",
                    "apacheSpark",
                    "athena",
                    "bigquery",
                    "databricks",
                    "fabric",
                    "id",
                    "isSshTunnelEnabled",
                    "name",
                    "oauthConfigurationId",
                    "postgres",
                    "privateLinkEndpointId",
                    "redshift",
                    "snowflake",
                    "starburst",
                    "synapse",
                    "teradata"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getGlobalConnections:getGlobalConnections": {
            "description": "All the connections created on the account with some summary information, like their name, type, when they were created/updated and the number of environments using them.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myConnections = dbtcloud.getGlobalConnections({});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_connections = dbtcloud.get_global_connections()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myConnections = DbtCloud.GetGlobalConnections.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.GetGlobalConnections(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myConnections = DbtcloudFunctions.getGlobalConnections(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);\n\n    }\n}\n```\n```yaml\nvariables:\n  myConnections:\n    fn::invoke:\n      function: dbtcloud:getGlobalConnections\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getGlobalConnections.\n",
                "properties": {
                    "connections": {
                        "description": "A set of all the connections\n",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/getGlobalConnectionsConnection:getGlobalConnectionsConnection"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "connections",
                    "id"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getGroup:getGroup": {
            "description": "Retrieve group details\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "groupId": {
                        "type": "integer",
                        "description": "The ID of the group\n"
                    }
                },
                "type": "object",
                "required": [
                    "groupId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "assignByDefault": {
                        "description": "Whether the group will be assigned by default to users. The value needs to be the same for all partial permissions for the same group.\n",
                        "type": "boolean"
                    },
                    "groupId": {
                        "description": "The ID of the group\n",
                        "type": "integer"
                    },
                    "groupPermissions": {
                        "description": "Partial permissions for the group. Those permissions will be added/removed when config is added/removed.\n",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/getGroupGroupPermission:getGroupGroupPermission"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The ID of this resource\n",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Group name\n",
                        "type": "string"
                    },
                    "ssoMappingGroups": {
                        "description": "SSO mapping group names for this group\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "assignByDefault",
                    "groupId",
                    "groupPermissions",
                    "id",
                    "name",
                    "ssoMappingGroups"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getGroupUsers:getGroupUsers": {
            "description": "Databricks credential data source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myGroupUsers = dbtcloud.getGroupUsers({\n    groupId: 1234,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_group_users = dbtcloud.get_group_users(group_id=1234)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myGroupUsers = DbtCloud.GetGroupUsers.Invoke(new()\n    {\n        GroupId = 1234,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.GetGroupUsers(ctx, \u0026dbtcloud.GetGroupUsersArgs{\n\t\t\tGroupId: 1234,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetGroupUsersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myGroupUsers = DbtcloudFunctions.getGroupUsers(GetGroupUsersArgs.builder()\n            .groupId(1234)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myGroupUsers:\n    fn::invoke:\n      function: dbtcloud:getGroupUsers\n      arguments:\n        groupId: 1234\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroupUsers.\n",
                "properties": {
                    "groupId": {
                        "type": "integer",
                        "description": "ID of the group\n"
                    }
                },
                "type": "object",
                "required": [
                    "groupId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroupUsers.\n",
                "properties": {
                    "groupId": {
                        "description": "ID of the group\n",
                        "type": "integer"
                    },
                    "id": {
                        "description": "The ID of this resource. Contains the project ID and the credential ID.\n",
                        "type": "string"
                    },
                    "users": {
                        "description": "List of users (map of ID and email) in the group\n",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/getGroupUsersUser:getGroupUsersUser"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "groupId",
                    "id",
                    "users"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getJob:getJob": {
            "description": "Get detailed information for a specific dbt Cloud job.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getJob.\n",
                "properties": {
                    "jobCompletionTriggerConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/getJobJobCompletionTriggerCondition:getJobJobCompletionTriggerCondition"
                        },
                        "description": "Which other job should trigger this job when it finishes, and on which conditions. Format for the property will change in the next release to match the one from the one from dbtcloud*jobs.\n",
                        "language": {
                            "csharp": {
                                "name": "CompletionTriggerCondition"
                            }
                        }
                    },
                    "jobId": {
                        "type": "integer",
                        "description": "The ID of the job\n"
                    }
                },
                "type": "object",
                "required": [
                    "jobId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getJob.\n",
                "properties": {
                    "dbtVersion": {
                        "description": "The version of dbt used for the job. If not set, the environment version will be used.\n",
                        "type": "string"
                    },
                    "deferringEnvironmentId": {
                        "description": "The ID of the environment this job defers to\n",
                        "type": "integer"
                    },
                    "deferringJobId": {
                        "deprecationMessage": "Deferral is now set at the environment level",
                        "description": "[Deprectated - Deferral is now set at the environment level] The ID of the job definition this job defers to\n",
                        "type": "integer"
                    },
                    "description": {
                        "description": "The description of the job\n",
                        "type": "string"
                    },
                    "environment": {
                        "$ref": "#/types/dbtcloud:index/getJobEnvironment:getJobEnvironment",
                        "description": "Details of the environment the job is running in\n"
                    },
                    "environmentId": {
                        "description": "The ID of environment\n",
                        "type": "integer"
                    },
                    "executeSteps": {
                        "description": "The list of steps to run in the job\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "execution": {
                        "$ref": "#/types/dbtcloud:index/getJobExecution:getJobExecution"
                    },
                    "generateDocs": {
                        "description": "Whether the job generate docs\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The ID of the job\n",
                        "type": "integer"
                    },
                    "jobCompletionTriggerConditions": {
                        "description": "Which other job should trigger this job when it finishes, and on which conditions. Format for the property will change in the next release to match the one from the one from dbtcloud*jobs.\n",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/getJobJobCompletionTriggerCondition:getJobJobCompletionTriggerCondition"
                        },
                        "language": {
                            "csharp": {
                                "name": "CompletionTriggerCondition"
                            }
                        },
                        "type": "array"
                    },
                    "jobId": {
                        "description": "The ID of the job\n",
                        "type": "integer"
                    },
                    "jobType": {
                        "description": "The type of job (e.g. CI, scheduled)\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the job\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "The ID of the project\n",
                        "type": "integer"
                    },
                    "runCompareChanges": {
                        "description": "Whether the job should compare data changes introduced by the code change in the PR\n",
                        "type": "boolean"
                    },
                    "runGenerateSources": {
                        "description": "Whether the job test source freshness\n",
                        "type": "boolean"
                    },
                    "schedule": {
                        "$ref": "#/types/dbtcloud:index/getJobSchedule:getJobSchedule"
                    },
                    "selfDeferring": {
                        "description": "Whether this job defers on a previous run of itself (overrides value in deferring*job*id)\n",
                        "type": "boolean"
                    },
                    "settings": {
                        "$ref": "#/types/dbtcloud:index/getJobSettings:getJobSettings"
                    },
                    "timeoutSeconds": {
                        "deprecationMessage": "Moved to execution.timeout_seconds",
                        "description": "[Deprectated - Moved to execution.timeout_seconds] Number of seconds before the job times out\n",
                        "type": "integer"
                    },
                    "triggers": {
                        "$ref": "#/types/dbtcloud:index/getJobTriggers:getJobTriggers"
                    },
                    "triggersOnDraftPr": {
                        "description": "Whether the CI job should be automatically triggered on draft PRs\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "dbtVersion",
                    "deferringEnvironmentId",
                    "deferringJobId",
                    "description",
                    "environment",
                    "environmentId",
                    "executeSteps",
                    "execution",
                    "generateDocs",
                    "id",
                    "jobCompletionTriggerConditions",
                    "jobId",
                    "jobType",
                    "name",
                    "projectId",
                    "runCompareChanges",
                    "runGenerateSources",
                    "schedule",
                    "selfDeferring",
                    "settings",
                    "timeoutSeconds",
                    "triggers",
                    "triggersOnDraftPr"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getJobs:getJobs": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\n// we can search all jobs by project\nconst testAllJobsInProject = dbtcloud.getJobs({\n    projectId: 1234,\n});\n// or by environment\nconst testAllJobsInEnvironment = dbtcloud.getJobs({\n    environmentId: 1234,\n});\nconst myJobsProd = testAllJobsInProject.then(testAllJobsInProject =\u003e .filter(job =\u003e job.environment?.deploymentType == \"production\").map(job =\u003e (job)));\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\n# we can search all jobs by project\ntest_all_jobs_in_project = dbtcloud.get_jobs(project_id=1234)\n# or by environment\ntest_all_jobs_in_environment = dbtcloud.get_jobs(environment_id=1234)\nmy_jobs_prod = [job for job in test_all_jobs_in_project.jobs if job.environment.deployment_type == \"production\"]\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // we can search all jobs by project\n    var testAllJobsInProject = DbtCloud.GetJobs.Invoke(new()\n    {\n        ProjectId = 1234,\n    });\n\n    // or by environment\n    var testAllJobsInEnvironment = DbtCloud.GetJobs.Invoke(new()\n    {\n        EnvironmentId = 1234,\n    });\n\n    var myJobsProd = .Where(job =\u003e job.Environment?.DeploymentType == \"production\").Select(job =\u003e \n    {\n        return job;\n    }).ToList();\n\n});\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getJobs.\n",
                "properties": {
                    "environmentId": {
                        "type": "integer",
                        "description": "The ID of the environment for which we want to retrieve the jobs (one of `project_id` or `environment_id` must be set)\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "The ID of the project for which we want to retrieve the jobs (one of `project_id` or `environment_id` must be set)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getJobs.\n",
                "properties": {
                    "environmentId": {
                        "description": "The ID of the environment for which we want to retrieve the jobs (one of `project_id` or `environment_id` must be set)\n",
                        "type": "integer"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "jobs": {
                        "description": "Set of jobs with their details\n",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/getJobsJob:getJobsJob"
                        },
                        "type": "array"
                    },
                    "projectId": {
                        "description": "The ID of the project for which we want to retrieve the jobs (one of `project_id` or `environment_id` must be set)\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "jobs",
                    "id"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getModelNotifications:getModelNotifications": {
            "description": "Get model notifications configuration for a dbt Cloud environment\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst prodModelNotifications = dbtcloud.getModelNotifications({\n    environmentId: prodEnvironment.environmentId,\n});\nconst qaModelNotifications = dbtcloud.getModelNotifications({\n    environmentId: \"12345\",\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nprod_model_notifications = dbtcloud.get_model_notifications(environment_id=prod_environment[\"environmentId\"])\nqa_model_notifications = dbtcloud.get_model_notifications(environment_id=\"12345\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var prodModelNotifications = DbtCloud.GetModelNotifications.Invoke(new()\n    {\n        EnvironmentId = prodEnvironment.EnvironmentId,\n    });\n\n    var qaModelNotifications = DbtCloud.GetModelNotifications.Invoke(new()\n    {\n        EnvironmentId = \"12345\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.LookupModelNotifications(ctx, \u0026dbtcloud.LookupModelNotificationsArgs{\n\t\t\tEnvironmentId: prodEnvironment.EnvironmentId,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = dbtcloud.LookupModelNotifications(ctx, \u0026dbtcloud.LookupModelNotificationsArgs{\n\t\t\tEnvironmentId: \"12345\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetModelNotificationsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var prodModelNotifications = DbtcloudFunctions.getModelNotifications(GetModelNotificationsArgs.builder()\n            .environmentId(prodEnvironment.environmentId())\n            .build());\n\n        final var qaModelNotifications = DbtcloudFunctions.getModelNotifications(GetModelNotificationsArgs.builder()\n            .environmentId(\"12345\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  prodModelNotifications:\n    fn::invoke:\n      function: dbtcloud:getModelNotifications\n      arguments:\n        environmentId: ${prodEnvironment.environmentId}\n  qaModelNotifications:\n    fn::invoke:\n      function: dbtcloud:getModelNotifications\n      arguments:\n        environmentId: 12345\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getModelNotifications.\n",
                "properties": {
                    "environmentId": {
                        "type": "string",
                        "description": "The ID of the dbt Cloud environment\n"
                    }
                },
                "type": "object",
                "required": [
                    "environmentId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getModelNotifications.\n",
                "properties": {
                    "enabled": {
                        "description": "Whether model notifications are enabled for this environment\n",
                        "type": "boolean"
                    },
                    "environmentId": {
                        "description": "The ID of the dbt Cloud environment\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The internal ID of the model notifications configuration\n",
                        "type": "integer"
                    },
                    "onFailure": {
                        "description": "Whether to send notifications for failed model runs\n",
                        "type": "boolean"
                    },
                    "onSkipped": {
                        "description": "Whether to send notifications for skipped model runs\n",
                        "type": "boolean"
                    },
                    "onSuccess": {
                        "description": "Whether to send notifications for successful model runs\n",
                        "type": "boolean"
                    },
                    "onWarning": {
                        "description": "Whether to send notifications for model runs with warnings\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "enabled",
                    "environmentId",
                    "id",
                    "onFailure",
                    "onSkipped",
                    "onSuccess",
                    "onWarning"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getNotification:getNotification": {
            "description": "Retrieve notification details\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myNotification = dbtcloud.getNotification({\n    notificationId: 12345,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_notification = dbtcloud.get_notification(notification_id=12345)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myNotification = DbtCloud.GetNotification.Invoke(new()\n    {\n        NotificationId = 12345,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.LookupNotification(ctx, \u0026dbtcloud.LookupNotificationArgs{\n\t\t\tNotificationId: 12345,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetNotificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myNotification = DbtcloudFunctions.getNotification(GetNotificationArgs.builder()\n            .notificationId(12345)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myNotification:\n    fn::invoke:\n      function: dbtcloud:getNotification\n      arguments:\n        notificationId: 12345\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNotification.\n",
                "properties": {
                    "notificationId": {
                        "type": "integer",
                        "description": "The ID of the notification\n"
                    }
                },
                "type": "object",
                "required": [
                    "notificationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNotification.\n",
                "properties": {
                    "externalEmail": {
                        "description": "The external email to receive the notification\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "notificationId": {
                        "description": "The ID of the notification\n",
                        "type": "integer"
                    },
                    "notificationType": {
                        "description": "Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`)\n",
                        "type": "integer"
                    },
                    "onCancels": {
                        "description": "List of job IDs to trigger the webhook on cancel\n",
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "onFailures": {
                        "description": "List of job IDs to trigger the webhook on failure\n",
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "onSuccesses": {
                        "description": "List of job IDs to trigger the webhook on success\n",
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "onWarnings": {
                        "description": "List of job IDs to trigger the webhook on warning\n",
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "slackChannelId": {
                        "description": "The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings\n",
                        "type": "string"
                    },
                    "slackChannelName": {
                        "description": "The name of the slack channel\n",
                        "type": "string"
                    },
                    "state": {
                        "description": "State of the notification (1 = active (default), 2 = inactive)\n",
                        "type": "integer"
                    },
                    "userId": {
                        "description": "Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "externalEmail",
                    "notificationId",
                    "notificationType",
                    "onCancels",
                    "onFailures",
                    "onSuccesses",
                    "onWarnings",
                    "slackChannelId",
                    "slackChannelName",
                    "state",
                    "userId",
                    "id"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getPostgresCredential:getPostgresCredential": {
            "description": "Postgres credential data source.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPostgresCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "Credential ID\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPostgresCredential.\n",
                "properties": {
                    "credentialId": {
                        "description": "Credential ID\n",
                        "type": "integer"
                    },
                    "defaultSchema": {
                        "description": "Default schema name\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of this data source. Contains the project ID and the credential ID.\n",
                        "type": "string"
                    },
                    "isActive": {
                        "description": "Whether the Postgres credential is active\n",
                        "type": "boolean"
                    },
                    "numThreads": {
                        "description": "Number of threads to use\n",
                        "type": "integer"
                    },
                    "projectId": {
                        "description": "Project ID\n",
                        "type": "integer"
                    },
                    "username": {
                        "description": "Username for Postgres\n",
                        "type": "string"
                    }
                },
                "required": [
                    "credentialId",
                    "defaultSchema",
                    "id",
                    "isActive",
                    "numThreads",
                    "projectId",
                    "username"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getPrivatelinkEndpoint:getPrivatelinkEndpoint": {
            "description": "Privatelink endpoint data source.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst testWithName = dbtcloud.getPrivatelinkEndpoint({\n    name: \"My Endpoint Name\",\n});\nconst testWithUrl = dbtcloud.getPrivatelinkEndpoint({\n    privateLinkEndpointUrl: \"abc.privatelink.def.com\",\n});\n// in case multiple endpoints have the same name or URL\nconst testWithNameAndUrl = dbtcloud.getPrivatelinkEndpoint({\n    name: \"My Endpoint Name\",\n    privateLinkEndpointUrl: \"abc.privatelink.def.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\ntest_with_name = dbtcloud.get_privatelink_endpoint(name=\"My Endpoint Name\")\ntest_with_url = dbtcloud.get_privatelink_endpoint(private_link_endpoint_url=\"abc.privatelink.def.com\")\n# in case multiple endpoints have the same name or URL\ntest_with_name_and_url = dbtcloud.get_privatelink_endpoint(name=\"My Endpoint Name\",\n    private_link_endpoint_url=\"abc.privatelink.def.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testWithName = DbtCloud.GetPrivatelinkEndpoint.Invoke(new()\n    {\n        Name = \"My Endpoint Name\",\n    });\n\n    var testWithUrl = DbtCloud.GetPrivatelinkEndpoint.Invoke(new()\n    {\n        PrivateLinkEndpointUrl = \"abc.privatelink.def.com\",\n    });\n\n    // in case multiple endpoints have the same name or URL\n    var testWithNameAndUrl = DbtCloud.GetPrivatelinkEndpoint.Invoke(new()\n    {\n        Name = \"My Endpoint Name\",\n        PrivateLinkEndpointUrl = \"abc.privatelink.def.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.GetPrivatelinkEndpoint(ctx, \u0026dbtcloud.GetPrivatelinkEndpointArgs{\n\t\t\tName: pulumi.StringRef(\"My Endpoint Name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = dbtcloud.GetPrivatelinkEndpoint(ctx, \u0026dbtcloud.GetPrivatelinkEndpointArgs{\n\t\t\tPrivateLinkEndpointUrl: pulumi.StringRef(\"abc.privatelink.def.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// in case multiple endpoints have the same name or URL\n\t\t_, err = dbtcloud.GetPrivatelinkEndpoint(ctx, \u0026dbtcloud.GetPrivatelinkEndpointArgs{\n\t\t\tName:                   pulumi.StringRef(\"My Endpoint Name\"),\n\t\t\tPrivateLinkEndpointUrl: pulumi.StringRef(\"abc.privatelink.def.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetPrivatelinkEndpointArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var testWithName = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()\n            .name(\"My Endpoint Name\")\n            .build());\n\n        final var testWithUrl = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()\n            .privateLinkEndpointUrl(\"abc.privatelink.def.com\")\n            .build());\n\n        // in case multiple endpoints have the same name or URL\n        final var testWithNameAndUrl = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()\n            .name(\"My Endpoint Name\")\n            .privateLinkEndpointUrl(\"abc.privatelink.def.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  testWithName:\n    fn::invoke:\n      function: dbtcloud:getPrivatelinkEndpoint\n      arguments:\n        name: My Endpoint Name\n  testWithUrl:\n    fn::invoke:\n      function: dbtcloud:getPrivatelinkEndpoint\n      arguments:\n        privateLinkEndpointUrl: abc.privatelink.def.com\n  # in case multiple endpoints have the same name or URL\n  testWithNameAndUrl:\n    fn::invoke:\n      function: dbtcloud:getPrivatelinkEndpoint\n      arguments:\n        name: My Endpoint Name\n        privateLinkEndpointUrl: abc.privatelink.def.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPrivatelinkEndpoint.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Given descriptive name for the PrivateLink Endpoint (name and/or private*link*endpoint_url need to be provided to return data for the datasource)\n"
                    },
                    "privateLinkEndpointUrl": {
                        "type": "string",
                        "description": "URL of the PrivateLink Endpoint (name and/or private*link*endpoint_url need to be provided to return data for the datasource)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the PrivateLink Endpoint\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPrivatelinkEndpoint.\n",
                "properties": {
                    "cidrRange": {
                        "description": "CIDR range of the PrivateLink Endpoint\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The internal ID of the PrivateLink Endpoint\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Given descriptive name for the PrivateLink Endpoint (name and/or private*link*endpoint_url need to be provided to return data for the datasource)\n",
                        "type": "string"
                    },
                    "privateLinkEndpointUrl": {
                        "description": "URL of the PrivateLink Endpoint (name and/or private*link*endpoint_url need to be provided to return data for the datasource)\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of the PrivateLink Endpoint\n",
                        "type": "string"
                    }
                },
                "required": [
                    "cidrRange",
                    "id",
                    "type"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getProject:getProject": {
            "description": "Retrieve a specific project from dbt Cloud.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nexport = async () =\u003e {\n    // projects data sources can use the project_id parameter (preferred uniqueness is ensured)\n    const projectById = await dbtcloud.getProject({\n        id: 0,\n    });\n    // or they can use project names\n    // the provider will raise an error if more than one project is found with the same name\n    const projectByName = await dbtcloud.getProject({\n        name: \"Project name\",\n    });\n    const filteredProjects = await dbtcloud.getProjects({\n        nameContains: \"Project\",\n    });\n    const allProjects = await dbtcloud.getProjects({});\n    return {\n        projectIdDetails: projectById,\n        projectNameDetails: projectByName,\n        filteredProjectsCount: filteredProjects.projects.length,\n        filteredProjects: filteredProjects.projects,\n        projectNames: .map(project =\u003e (project.name)),\n    };\n}\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\n# projects data sources can use the project_id parameter (preferred uniqueness is ensured)\nproject_by_id = dbtcloud.get_project(id=0)\n# or they can use project names\n# the provider will raise an error if more than one project is found with the same name\nproject_by_name = dbtcloud.get_project(name=\"Project name\")\nfiltered_projects = dbtcloud.get_projects(name_contains=\"Project\")\nall_projects = dbtcloud.get_projects()\npulumi.export(\"projectIdDetails\", project_by_id)\npulumi.export(\"projectNameDetails\", project_by_name)\npulumi.export(\"filteredProjectsCount\", len(filtered_projects.projects))\npulumi.export(\"filteredProjects\", filtered_projects.projects)\npulumi.export(\"projectNames\", [project.name for project in filtered_projects.projects])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // projects data sources can use the project_id parameter (preferred uniqueness is ensured)\n    var projectById = DbtCloud.GetProject.Invoke(new()\n    {\n        Id = 0,\n    });\n\n    // or they can use project names\n    // the provider will raise an error if more than one project is found with the same name\n    var projectByName = DbtCloud.GetProject.Invoke(new()\n    {\n        Name = \"Project name\",\n    });\n\n    var filteredProjects = DbtCloud.GetProjects.Invoke(new()\n    {\n        NameContains = \"Project\",\n    });\n\n    var allProjects = DbtCloud.GetProjects.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"projectIdDetails\"] = projectById,\n        [\"projectNameDetails\"] = projectByName,\n        [\"filteredProjectsCount\"] = filteredProjects.Apply(getProjectsResult =\u003e getProjectsResult.Projects).Length,\n        [\"filteredProjects\"] = filteredProjects.Apply(getProjectsResult =\u003e getProjectsResult.Projects),\n        [\"projectNames\"] = .Select(project =\u003e \n        {\n            return project.Name;\n        }).ToList(),\n    };\n});\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Project ID\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Project name\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "createdAt": {
                        "description": "When the project was created\n",
                        "type": "string"
                    },
                    "dbtProjectSubdirectory": {
                        "description": "Subdirectory for the dbt project inside the git repo\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Project description\n",
                        "type": "string"
                    },
                    "docsJobId": {
                        "description": "ID of Job for the documentation\n",
                        "type": "integer"
                    },
                    "freshnessJobId": {
                        "description": "ID of Job for source freshness\n",
                        "type": "integer"
                    },
                    "id": {
                        "description": "Project ID\n",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Project name\n",
                        "type": "string"
                    },
                    "projectConnection": {
                        "$ref": "#/types/dbtcloud:index/getProjectProjectConnection:getProjectProjectConnection",
                        "description": "Details for the connection linked to the project\n"
                    },
                    "repository": {
                        "$ref": "#/types/dbtcloud:index/getProjectRepository:getProjectRepository",
                        "description": "Details for the repository linked to the project\n"
                    },
                    "semanticLayerConfigId": {
                        "description": "Semantic layer config ID\n",
                        "type": "integer"
                    },
                    "state": {
                        "description": "Project state should be 1 = active, as 2 = deleted\n",
                        "type": "integer"
                    },
                    "type": {
                        "description": "The type of dbt project (default or hybrid)\n",
                        "type": "integer"
                    },
                    "updatedAt": {
                        "description": "When the project was last updated\n",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "dbtProjectSubdirectory",
                    "description",
                    "docsJobId",
                    "freshnessJobId",
                    "name",
                    "projectConnection",
                    "repository",
                    "semanticLayerConfigId",
                    "state",
                    "type",
                    "updatedAt"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getProjects:getProjects": {
            "description": "Retrieve all the projects created in dbt Cloud with an optional filter on parts of the project name.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProjects.\n",
                "properties": {
                    "nameContains": {
                        "type": "string",
                        "description": "Used to filter projects by name, Optional\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProjects.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "nameContains": {
                        "description": "Used to filter projects by name, Optional\n",
                        "type": "string"
                    },
                    "projects": {
                        "description": "Set of projects with their details\n",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/getProjectsProject:getProjectsProject"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "nameContains",
                    "projects",
                    "id"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getRedshiftCredential:getRedshiftCredential": {
            "description": "Redshift credential data source\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRedshiftCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "Credential ID\n"
                    },
                    "defaultSchema": {
                        "type": "string",
                        "description": "Default schema name\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "defaultSchema",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRedshiftCredential.\n",
                "properties": {
                    "credentialId": {
                        "description": "Credential ID\n",
                        "type": "integer"
                    },
                    "defaultSchema": {
                        "description": "Default schema name\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of this data source. Contains the project ID and the credential ID.\n",
                        "type": "string"
                    },
                    "isActive": {
                        "description": "Whether the Redshift credential is active\n",
                        "type": "boolean"
                    },
                    "numThreads": {
                        "description": "Number of threads to use\n",
                        "type": "integer"
                    },
                    "projectId": {
                        "description": "Project ID\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "credentialId",
                    "defaultSchema",
                    "id",
                    "isActive",
                    "numThreads",
                    "projectId"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getRepository:getRepository": {
            "description": "Retrieve data for a single repository\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRepository.\n",
                "properties": {
                    "fetchDeployKey": {
                        "type": "boolean",
                        "description": "Whether we should return the public deploy key\n",
                        "deprecationMessage": "This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deploy_key`"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the repository in\n"
                    },
                    "repositoryId": {
                        "type": "integer",
                        "description": "ID for the repository\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "repositoryId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepository.\n",
                "properties": {
                    "azureActiveDirectoryProjectId": {
                        "description": "The Azure Dev Ops project ID\n",
                        "type": "string"
                    },
                    "azureActiveDirectoryRepositoryId": {
                        "description": "The Azure Dev Ops repository ID\n",
                        "type": "string"
                    },
                    "azureBypassWebhookRegistrationFailure": {
                        "description": "If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks\n",
                        "type": "boolean"
                    },
                    "deployKey": {
                        "description": "Public key generated by dbt when using `deploy_key` clone strategy\n",
                        "type": "string"
                    },
                    "fetchDeployKey": {
                        "deprecationMessage": "This field is deprecated and will be removed in a future version of the provider. The key is always fetched when the clone strategy is `deploy_key`",
                        "description": "Whether we should return the public deploy key\n",
                        "type": "boolean"
                    },
                    "gitCloneStrategy": {
                        "description": "Git clone strategy for the repository\n",
                        "type": "string"
                    },
                    "githubInstallationId": {
                        "description": "Identifier for the GitHub installation\n",
                        "type": "integer"
                    },
                    "gitlabProjectId": {
                        "description": "Identifier for the Gitlab project\n",
                        "type": "integer"
                    },
                    "id": {
                        "description": "The ID of this resource\n",
                        "type": "string"
                    },
                    "isActive": {
                        "description": "Whether the repository is active\n",
                        "type": "boolean"
                    },
                    "projectId": {
                        "description": "Project ID to create the repository in\n",
                        "type": "integer"
                    },
                    "pullRequestUrlTemplate": {
                        "description": "The pull request URL template to be used when opening a pull request from within dbt Cloud's IDE\n",
                        "type": "string"
                    },
                    "remoteUrl": {
                        "description": "Git URL for the repository or \u003cGroup\u003e/\u003cProject\u003e for Gitlab\n",
                        "type": "string"
                    },
                    "repositoryCredentialsId": {
                        "description": "Credentials ID for the repository (From the repository side not the dbt Cloud ID)\n",
                        "type": "integer"
                    },
                    "repositoryId": {
                        "description": "ID for the repository\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "azureActiveDirectoryProjectId",
                    "azureActiveDirectoryRepositoryId",
                    "azureBypassWebhookRegistrationFailure",
                    "deployKey",
                    "fetchDeployKey",
                    "gitCloneStrategy",
                    "githubInstallationId",
                    "gitlabProjectId",
                    "id",
                    "isActive",
                    "projectId",
                    "pullRequestUrlTemplate",
                    "remoteUrl",
                    "repositoryCredentialsId",
                    "repositoryId"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getRuns:getRuns": {
            "description": "Retrieve all runs\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRuns.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/dbtcloud:index/getRunsFilter:getRunsFilter",
                        "description": "Filter to apply to the runs\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRuns.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/dbtcloud:index/getRunsFilter:getRunsFilter",
                        "description": "Filter to apply to the runs\n"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "runs": {
                        "description": "Set of users with their internal ID end email\n",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/getRunsRun:getRunsRun"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "runs",
                    "id"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getServiceToken:getServiceToken": {
            "inputs": {
                "description": "A collection of arguments for invoking getServiceToken.\n",
                "properties": {
                    "serviceTokenId": {
                        "type": "integer",
                        "description": "The ID of the service token\n"
                    },
                    "serviceTokenPermissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/getServiceTokenServiceTokenPermission:getServiceTokenServiceTokenPermission"
                        },
                        "description": "Permissions set for the service token\n"
                    }
                },
                "type": "object",
                "required": [
                    "serviceTokenId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceToken.\n",
                "properties": {
                    "id": {
                        "description": "The ID of the service token\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Service token name\n",
                        "type": "string"
                    },
                    "serviceTokenId": {
                        "description": "The ID of the service token\n",
                        "type": "integer"
                    },
                    "serviceTokenPermissions": {
                        "description": "Permissions set for the service token\n",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/getServiceTokenServiceTokenPermission:getServiceTokenServiceTokenPermission"
                        },
                        "type": "array"
                    },
                    "uid": {
                        "description": "Service token UID (part of the token)\n",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "serviceTokenId",
                    "uid"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getSnowflakeCredential:getSnowflakeCredential": {
            "description": "Snowflake credential data source\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSnowflakeCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "Credential ID\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSnowflakeCredential.\n",
                "properties": {
                    "authType": {
                        "description": "The type of Snowflake credential ('password' or 'keypair')\n",
                        "type": "string"
                    },
                    "credentialId": {
                        "description": "Credential ID\n",
                        "type": "integer"
                    },
                    "id": {
                        "description": "The ID of this resource. Contains the project ID and the credential ID.\n",
                        "type": "string"
                    },
                    "isActive": {
                        "description": "Whether the Snowflake credential is active\n",
                        "type": "boolean"
                    },
                    "numThreads": {
                        "description": "Number of threads to use\n",
                        "type": "integer"
                    },
                    "projectId": {
                        "description": "Project ID\n",
                        "type": "integer"
                    },
                    "schema": {
                        "description": "The schema where to create models\n",
                        "type": "string"
                    },
                    "user": {
                        "description": "Username for Snowflake\n",
                        "type": "string"
                    }
                },
                "required": [
                    "authType",
                    "credentialId",
                    "id",
                    "isActive",
                    "numThreads",
                    "projectId",
                    "schema",
                    "user"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getStarburstCredential:getStarburstCredential": {
            "description": "Starburst/Trino credential data source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst example = dbtcloud.getStarburstCredential({\n    projectId: 123,\n    credentialId: 456,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nexample = dbtcloud.get_starburst_credential(project_id=123,\n    credential_id=456)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = DbtCloud.GetStarburstCredential.Invoke(new()\n    {\n        ProjectId = 123,\n        CredentialId = 456,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.LookupStarburstCredential(ctx, \u0026dbtcloud.LookupStarburstCredentialArgs{\n\t\t\tProjectId:    123,\n\t\t\tCredentialId: 456,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetStarburstCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DbtcloudFunctions.getStarburstCredential(GetStarburstCredentialArgs.builder()\n            .projectId(123)\n            .credentialId(456)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      function: dbtcloud:getStarburstCredential\n      arguments:\n        projectId: 123\n        credentialId: 456\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getStarburstCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "Credential ID\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getStarburstCredential.\n",
                "properties": {
                    "credentialId": {
                        "description": "Credential ID\n",
                        "type": "integer"
                    },
                    "database": {
                        "description": "The catalog to connect to\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of this resource. Contains the project ID and the credential ID.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Project ID\n",
                        "type": "integer"
                    },
                    "schema": {
                        "description": "The schema where to create models\n",
                        "type": "string"
                    }
                },
                "required": [
                    "credentialId",
                    "database",
                    "id",
                    "projectId",
                    "schema"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getSynapseCredential:getSynapseCredential": {
            "description": "Synapse credential data source.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSynapseCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "Credential ID\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSynapseCredential.\n",
                "properties": {
                    "adapterType": {
                        "description": "The type of the adapter (synapse)\n",
                        "type": "string"
                    },
                    "authentication": {
                        "description": "Authentication type (SQL, ActiveDirectoryPassword, ServicePrincipal)\n",
                        "type": "string"
                    },
                    "clientId": {
                        "description": "The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.\n",
                        "type": "string"
                    },
                    "credentialId": {
                        "description": "Credential ID\n",
                        "type": "integer"
                    },
                    "id": {
                        "description": "The ID of this data source. Contains the project ID and the credential ID.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Project ID\n",
                        "type": "integer"
                    },
                    "schema": {
                        "description": "The schema where to create the dbt models\n",
                        "type": "string"
                    },
                    "schemaAuthorization": {
                        "description": "Optionally set this to the principal who should own the schemas created by dbt\n",
                        "type": "string"
                    },
                    "tenantId": {
                        "description": "The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.\n",
                        "type": "string"
                    },
                    "user": {
                        "description": "The username of the Synapse account to connect to. Only used when connection with AD user/pass\n",
                        "type": "string"
                    }
                },
                "required": [
                    "adapterType",
                    "authentication",
                    "clientId",
                    "credentialId",
                    "id",
                    "projectId",
                    "schema",
                    "schemaAuthorization",
                    "tenantId",
                    "user"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getTeradataCredential:getTeradataCredential": {
            "description": "Teradata credential data source\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTeradataCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "Credential ID\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTeradataCredential.\n",
                "properties": {
                    "credentialId": {
                        "description": "Credential ID\n",
                        "type": "integer"
                    },
                    "id": {
                        "description": "The ID of this resource. Contains the project ID and the credential ID.\n",
                        "type": "string"
                    },
                    "password": {
                        "description": "The password for the Teradata account\n",
                        "secret": true,
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Project ID\n",
                        "type": "integer"
                    },
                    "schema": {
                        "description": "The schema where to create models\n",
                        "type": "string"
                    },
                    "threads": {
                        "description": "The number of threads to use. Default is 1\n",
                        "type": "integer"
                    },
                    "user": {
                        "description": "The username for the Teradata account\n",
                        "type": "string"
                    }
                },
                "required": [
                    "credentialId",
                    "id",
                    "password",
                    "projectId",
                    "schema",
                    "threads",
                    "user"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getUser:getUser": {
            "description": "Retrieve user details\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myUser = dbtcloud.getUser({\n    email: \"my_user@email.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_user = dbtcloud.get_user(email=\"my_user@email.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myUser = DbtCloud.GetUser.Invoke(new()\n    {\n        Email = \"my_user@email.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.GetUser(ctx, \u0026dbtcloud.GetUserArgs{\n\t\t\tEmail: \"my_user@email.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myUser = DbtcloudFunctions.getUser(GetUserArgs.builder()\n            .email(\"my_user@email.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myUser:\n    fn::invoke:\n      function: dbtcloud:getUser\n      arguments:\n        email: my_user@email.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "Email for the user\n"
                    }
                },
                "type": "object",
                "required": [
                    "email"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "email": {
                        "description": "Email for the user\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "ID of the user\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "email",
                    "id"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getUserGroups:getUserGroups": {
            "description": "Gets information about a specific dbt Cloud user's groups.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myUserGroups = dbtcloud.getUserGroups({\n    userId: 12345,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_user_groups = dbtcloud.get_user_groups(user_id=12345)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myUserGroups = DbtCloud.GetUserGroups.Invoke(new()\n    {\n        UserId = 12345,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.LookupUserGroups(ctx, \u0026dbtcloud.LookupUserGroupsArgs{\n\t\t\tUserId: 12345,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetUserGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myUserGroups = DbtcloudFunctions.getUserGroups(GetUserGroupsArgs.builder()\n            .userId(12345)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myUserGroups:\n    fn::invoke:\n      function: dbtcloud:getUserGroups\n      arguments:\n        userId: 12345\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUserGroups.\n",
                "properties": {
                    "userId": {
                        "type": "integer",
                        "description": "The internal ID of a dbt Cloud user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "userId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUserGroups.\n",
                "properties": {
                    "groupIds": {
                        "description": "IDs of the groups assigned to the user.\n",
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The ID of this resource. It is the same as the user_id.\n",
                        "type": "string"
                    },
                    "userId": {
                        "description": "The internal ID of a dbt Cloud user.\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "groupIds",
                    "id",
                    "userId"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getUsers:getUsers": {
            "description": "Retrieve all users\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\n// return all users in the dbt Cloud account\nconst all = dbtcloud.getUsers({});\nconst userDetails = all.then(all =\u003e .filter(user =\u003e user.email == \"example@amail.com\").map(user =\u003e (user)));\nconst userExist = userDetails.length.apply(length =\u003e length == 1);\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\n# return all users in the dbt Cloud account\nall = dbtcloud.get_users()\nuser_details = [user for user in all.users if user.email == \"example@amail.com\"]\nuser_exist = len(user_details).apply(lambda length: length == 1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DbtCloud = Pulumi.DbtCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // return all users in the dbt Cloud account\n    var all = DbtCloud.GetUsers.Invoke();\n\n    var userDetails = .Where(user =\u003e user.Email == \"example@amail.com\").Select(user =\u003e \n    {\n        return user;\n    }).ToList();\n\n    var userExist = userDetails.Length.Apply(length =\u003e length == 1);\n\n});\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "users": {
                        "description": "Set of users with their internal ID end email\n",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/getUsersUser:getUsersUser"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "users",
                    "id"
                ],
                "type": "object"
            }
        },
        "dbtcloud:index/getWebhook:getWebhook": {
            "description": "Retrieve webhook details\n",
            "inputs": {
                "description": "A collection of arguments for invoking getWebhook.\n",
                "properties": {
                    "webhookId": {
                        "type": "string",
                        "description": "Webhook's ID\n",
                        "deprecationMessage": "Use `id` instead"
                    }
                },
                "type": "object",
                "required": [
                    "webhookId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getWebhook.\n",
                "properties": {
                    "accountIdentifier": {
                        "description": "Webhooks Account Identifier\n",
                        "type": "string"
                    },
                    "active": {
                        "description": "Webhooks active flag\n",
                        "type": "boolean"
                    },
                    "clientUrl": {
                        "description": "Webhooks Client URL\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Webhooks Description\n",
                        "type": "string"
                    },
                    "eventTypes": {
                        "description": "Webhooks Event Types\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "httpStatusCode": {
                        "description": "Webhooks HTTP Status Code\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "Webhook's ID\n",
                        "type": "string"
                    },
                    "jobIds": {
                        "description": "List of job IDs to trigger the webhook\n",
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "name": {
                        "description": "Webhooks Name\n",
                        "type": "string"
                    },
                    "webhookId": {
                        "deprecationMessage": "Use `id` instead",
                        "description": "Webhook's ID\n",
                        "type": "string"
                    }
                },
                "required": [
                    "accountIdentifier",
                    "active",
                    "clientUrl",
                    "description",
                    "eventTypes",
                    "httpStatusCode",
                    "id",
                    "jobIds",
                    "name",
                    "webhookId"
                ],
                "type": "object"
            }
        },
        "pulumi:providers:dbtcloud/terraformConfig": {
            "description": "This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.",
            "inputs": {
                "properties": {
                    "__self__": {
                        "type": "ref",
                        "$ref": "#/resources/pulumi:providers:dbtcloud"
                    }
                },
                "type": "pulumi:providers:dbtcloud/terraformConfig",
                "required": [
                    "__self__"
                ]
            },
            "outputs": {
                "properties": {
                    "result": {
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "result"
                ],
                "type": "object"
            }
        }
    }
}